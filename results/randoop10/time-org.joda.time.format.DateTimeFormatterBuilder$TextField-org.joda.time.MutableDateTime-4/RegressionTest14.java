import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest14 {

    public static boolean debug = false;

    @Test
    public void test07001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07001");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime();
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusSeconds((int) (byte) 10);
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Instant instant23 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Instant instant25 = instant7.minus((long) (-100));
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours(1234437L);
        org.joda.time.Instant instant28 = instant7.plus((org.joda.time.ReadableDuration) duration27);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:23:26.830Z" + "'", str5, "2022-02-22T07:23:26.830Z");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant28);
    }

    @Test
    public void test07002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07002");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        java.lang.String str5 = property4.getAsText();
        org.joda.time.LocalDate localDate6 = property4.getLocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime9.addWeekyears((int) '4');
        mutableDateTime9.addSeconds(26184076);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.millisOfSecond();
        int int15 = property7.compareTo((org.joda.time.ReadableInstant) mutableDateTime9);
        java.util.Locale locale18 = new java.util.Locale("2022-02-22T07:16:48.996Z", "06:20:23.834");
        java.util.Calendar calendar19 = mutableDateTime9.toCalendar(locale18);
        java.lang.String str20 = locale18.getDisplayVariant();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u661f\u671f\u4e8c" + "'", str5, "\u661f\u671f\u4e8c");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertEquals(locale18.toString(), "2022-02-22t07:16:48.996z_06:20:23.834");
        org.junit.Assert.assertNotNull(calendar19);
// flaky:         org.junit.Assert.assertEquals(calendar19.toString(), "java.util.GregorianCalendar[time=1667611275999,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=10,WEEK_OF_YEAR=45,WEEK_OF_MONTH=1,DAY_OF_MONTH=5,DAY_OF_YEAR=309,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=1,HOUR_OF_DAY=1,MINUTE=21,SECOND=15,MILLISECOND=999,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test07003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07003");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = duration9.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration13 = duration6.minus((org.joda.time.ReadableDuration) duration12);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration6);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.centuryOfEra();
        mutableDateTime1.addHours((int) (byte) 10);
        mutableDateTime1.addWeeks(100);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.DurationFieldType durationFieldType27 = periodType24.getFieldType((int) (short) 0);
        java.lang.String str28 = periodType24.toString();
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 53, (long) (-1), periodType24, chronology32);
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now(chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.dayOfWeek();
        mutableDateTime1.setChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField37 = chronology32.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField38 = chronology32.minuteOfDay();
        org.joda.time.Period period39 = new org.joda.time.Period(1645514394600L, chronology32);
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((long) 2022);
        int[] intArray43 = chronology32.get((org.joda.time.ReadablePeriod) mutablePeriod41, (long) 1964);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PeriodType[YearDayTime]" + "'", str28, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(intArray43);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray43), "[0, 0, 0, 0, 0, 0, 1, 964]");
    }

    @Test
    public void test07004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07004");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj12 = mutableDateTime11.clone();
        mutableDateTime11.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.dayOfWeek();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.weekyear();
        int int17 = mutableDateTime11.getMinuteOfHour();
        mutableDateTime11.setMillisOfDay(26333);
        int int20 = mutableDateTime11.getYearOfCentury();
        java.lang.String str21 = mutableDateTime11.toString();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.Chronology chronology24 = null;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.lang.String str27 = locale25.getDisplayVariant(locale26);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology24, locale26);
        java.lang.Object obj29 = dateTimeParserBucket28.saveState();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime((long) (short) 100, chronology31);
        org.joda.time.DurationFieldType durationFieldType33 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str34 = durationFieldType33.getName();
        boolean boolean35 = localTime32.isSupported(durationFieldType33);
        boolean boolean36 = dateTimeParserBucket28.restoreState((java.lang.Object) boolean35);
        org.joda.time.Chronology chronology37 = dateTimeParserBucket28.getChronology();
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime41 = dateTime39.withZoneRetainFields(dateTimeZone40);
        dateTimeParserBucket28.setZone(dateTimeZone40);
        dateTimeParserBucket28.setPivotYear((java.lang.Integer) 292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder47.clear();
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getDisplayName();
        java.lang.String str51 = locale49.getISO3Language();
        java.lang.String str52 = locale49.getISO3Country();
        java.util.Locale.Builder builder53 = builder48.setLocale(locale49);
        java.util.Locale locale54 = locale49.stripExtensions();
        dateTimeParserBucket28.saveField(dateTimeFieldType45, "1969-12-31", locale49);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.lang.String str60 = locale58.getDisplayVariant(locale59);
        dateTimeParserBucket28.saveField(dateTimeFieldType56, "", locale59);
        mutableDateTime11.set(dateTimeFieldType56, 26405);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "2022-02-22T07:23:26.971Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "2022-02-22T07:23:26.971Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "2022-02-22T07:23:26.971Z");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T00:00:26.333Z" + "'", str21, "2022-02-22T00:00:26.333Z");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "weeks" + "'", str34, "weeks");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u5fb7\u6587" + "'", str50, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test07005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07005");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(5052L);
    }

    @Test
    public void test07006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07006");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration9 = duration6.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean10 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration11 = duration1.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str17 = duration16.toString();
        org.joda.time.Instant instant18 = instant12.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime mutableDateTime19 = instant12.toMutableDateTime();
        mutableDateTime19.addDays(1424);
        int int22 = mutableDateTime19.getHourOfDay();
        org.joda.time.Chronology chronology23 = mutableDateTime19.getChronology();
        org.joda.time.Interval interval24 = duration11.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField31 = localDateTime29.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDateTime29.getFields();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withDayOfWeek(1);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.withDurationAdded((org.joda.time.ReadableDuration) duration36, 53);
        boolean boolean39 = duration11.isEqual((org.joda.time.ReadableDuration) duration36);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(readableInstant45, readableInstant46, periodType47);
        org.joda.time.DurationFieldType durationFieldType50 = periodType47.getFieldType((int) (short) 0);
        java.lang.String str51 = periodType47.toString();
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.Chronology chronology55 = instant54.getChronology();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 53, (long) (-1), periodType47, chronology55);
        org.joda.time.Period period57 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType47);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str62 = duration61.toString();
        boolean boolean63 = duration59.isShorterThan((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period66 = duration65.toPeriod();
        org.joda.time.Duration duration69 = duration65.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration74 = duration71.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean75 = duration69.isLongerThan((org.joda.time.ReadableDuration) duration71);
        boolean boolean76 = duration61.isEqual((org.joda.time.ReadableDuration) duration71);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.Period period79 = new org.joda.time.Period(readableDuration77, readableInstant78);
        org.joda.time.PeriodType periodType82 = null;
        org.joda.time.Period period83 = new org.joda.time.Period((long) 100, 1L, periodType82);
        org.joda.time.Period period85 = period83.minusSeconds((-1));
        java.lang.String str86 = period83.toString();
        org.joda.time.Period period87 = period83.toPeriod();
        org.joda.time.PeriodType periodType88 = period83.getPeriodType();
        org.joda.time.Period period89 = period79.normalizedStandard(periodType88);
        java.lang.String str90 = periodType88.getName();
        java.lang.String str91 = periodType88.toString();
        java.lang.String str92 = periodType88.getName();
        org.joda.time.Period period93 = duration71.toPeriod(periodType88);
        org.joda.time.PeriodType periodType94 = org.joda.time.PeriodType.days();
        org.joda.time.Period period95 = period93.withPeriodType(periodType94);
        boolean boolean96 = period57.equals((java.lang.Object) periodType94);
        org.joda.time.PeriodType periodType97 = periodType94.withMillisRemoved();
        org.joda.time.Period period98 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration36, readableInstant40, periodType97);
        org.joda.time.Period period99 = period98.negated();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT86400S" + "'", str17, "PT86400S");
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7 + "'", int22 == 7);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PeriodType[YearDayTime]" + "'", str51, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PT86400S" + "'", str62, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PT0.099S" + "'", str86, "PT0.099S");
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "Standard" + "'", str90, "Standard");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "PeriodType[Standard]" + "'", str91, "PeriodType[Standard]");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "Standard" + "'", str92, "Standard");
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(periodType94);
        org.junit.Assert.assertNotNull(period95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNotNull(periodType97);
        org.junit.Assert.assertNotNull(period99);
    }

    @Test
    public void test07007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07007");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime6.setMillis(readableInstant8);
        mutableDateTime6.addYears(36985848);
        mutableDateTime6.addMillis(0);
        org.joda.time.Instant instant15 = new org.joda.time.Instant(0L);
        boolean boolean16 = mutableDateTime6.equals((java.lang.Object) instant15);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.copy();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.add(0L);
        org.joda.time.MutableDateTime mutableDateTime24 = property21.roundFloor();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant25, readableInstant26, periodType27);
        org.joda.time.Period period30 = org.joda.time.Period.millis(26170959);
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) period30);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.eras();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now(chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        mutablePeriod38.setPeriod((long) 999, chronology43);
        org.joda.time.Chronology chronology48 = chronology43.withUTC();
        mutablePeriod28.setPeriod((long) 1132, 4801285081106L, chronology48);
        org.joda.time.DateTime dateTime50 = mutableDateTime24.toDateTime(chronology48);
        org.joda.time.DateTime.Property property51 = dateTime50.monthOfYear();
        org.joda.time.DateTime dateTime53 = property51.addToCopy(555563119L);
        int int54 = mutableDateTime6.compareTo((org.joda.time.ReadableInstant) dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
    }

    @Test
    public void test07008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07008");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("days");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        java.lang.String str5 = languageRange1.getRange();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        double double8 = languageRange1.getWeight();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.Instant instant11 = instant9.toInstant();
        org.joda.time.MutableDateTime mutableDateTime12 = instant9.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj14 = mutableDateTime13.clone();
        mutableDateTime13.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime13.dayOfWeek();
        int int18 = mutableDateTime13.getHourOfDay();
        mutableDateTime12.setMillis((org.joda.time.ReadableInstant) mutableDateTime13);
        int int20 = mutableDateTime12.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime12.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime12.centuryOfEra();
        boolean boolean23 = languageRange1.equals((java.lang.Object) mutableDateTime12);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "days" + "'", str5, "days");
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(obj14);
// flaky:         org.junit.Assert.assertEquals(obj14.toString(), "2022-02-22T07:23:27.080Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "2022-02-22T07:23:27.080Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "2022-02-22T07:23:27.080Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 46 + "'", int20 == 46);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test07009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07009");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfCentury(58);
        int int8 = localDateTime4.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusWeeks(64173);
        int[] intArray11 = localDateTime4.getValues();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37407094 + "'", int8 == 37407094);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(intArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray11), "[2022, 2, 22, 37407094]");
    }

    @Test
    public void test07010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07010");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant4, readableInstant5, periodType6);
        org.joda.time.DurationFieldType durationFieldType9 = periodType6.getFieldType((int) (short) 0);
        java.lang.String str10 = periodType6.toString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 53, (long) (-1), periodType6, chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(1119096L, chronology14);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) 2723, chronology14);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PeriodType[YearDayTime]" + "'", str10, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test07011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07011");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(26280146, 26334592, 100, 59);
        int int5 = mutablePeriod4.getMonths();
        int int6 = mutablePeriod4.getYears();
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test07012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07012");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.set(44);
        org.joda.time.MutableDateTime mutableDateTime43 = property40.getMutableDateTime();
        int int44 = mutableDateTime43.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime43.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.roundHalfCeiling();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[YearDayTime]" + "'", str35, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 43 + "'", int44 == 43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
    }

    @Test
    public void test07013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07013");
        org.joda.time.Period period8 = new org.joda.time.Period(26148, 26150, 23, 0, 8, (int) '#', (int) '#', 22);
        org.joda.time.Period period10 = period8.plusHours((-99));
        org.joda.time.Period period12 = period8.plusDays(41);
        org.joda.time.Period period14 = period8.plusWeeks(0);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        int int18 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime16.plus((long) 15);
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfSecond();
        org.joda.time.DateTime dateTime22 = property21.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime24 = dateTime22.withMillisOfDay(50);
        org.joda.time.DateTime.Property property25 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime27 = dateTime24.plusMinutes(54);
        org.joda.time.DateTime dateTime29 = dateTime27.plusWeeks(591);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration34, readableInstant35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 1L, periodType39);
        org.joda.time.Period period42 = period40.minusSeconds((-1));
        java.lang.String str43 = period40.toString();
        org.joda.time.Period period44 = period40.toPeriod();
        org.joda.time.PeriodType periodType45 = period40.getPeriodType();
        org.joda.time.Period period46 = period36.normalizedStandard(periodType45);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = periodType45.indexOf(durationFieldType47);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.eras();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(chronology52);
        org.joda.time.DurationField durationField55 = chronology52.eras();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType45, chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology52.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 1191, 47985262272000000L, chronology52);
        org.joda.time.DateTime dateTime61 = dateTime29.withChronology(chronology52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime((java.lang.Object) 0, chronology52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0.099S" + "'", str43, "PT0.099S");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test07014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07014");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        int int7 = localDateTime4.getDayOfWeek();
        org.joda.time.DateTimeField[] dateTimeFieldArray8 = localDateTime4.getFields();
        org.joda.time.DateTimeField dateTimeField10 = localDateTime4.getField(0);
        org.joda.time.Chronology chronology11 = localDateTime4.getChronology();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.Period period16 = period14.withDays((int) (byte) 1);
        org.joda.time.Period period18 = period14.minusMillis(1424);
        org.joda.time.Period period20 = period14.withDays(12);
        int int21 = period14.size();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        int int31 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime30.withDayOfMonth(20);
        org.joda.time.DateTime.Property property34 = dateTime33.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getDisplayName();
        java.lang.String str40 = dateTimeZone36.getName(100L, locale38);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(948227L, dateTimeZone36);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.year();
        mutableDateTime41.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(readableInstant48, readableInstant49, periodType50);
        org.joda.time.DurationFieldType durationFieldType53 = periodType50.getFieldType((int) (short) 0);
        java.lang.String str54 = periodType50.toString();
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.Period period59 = new org.joda.time.Period((long) 53, (long) (-1), periodType50, chronology58);
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType45.getField(chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(15);
        org.joda.time.Chronology chronology65 = dateTime62.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType45.getField(chronology65);
        org.joda.time.DurationField durationField68 = chronology65.centuries();
        org.joda.time.DateTimeField dateTimeField69 = chronology65.millisOfDay();
        mutableDateTime41.setChronology(chronology65);
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime33.toMutableDateTime(chronology65);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period74 = duration73.toPeriod();
        org.joda.time.Duration duration76 = duration73.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime77 = org.joda.time.MutableDateTime.now();
        mutableDateTime77.add((long) 'a');
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime77.yearOfCentury();
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period83 = duration82.toPeriod();
        org.joda.time.Duration duration85 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration88 = duration85.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration89 = duration82.minus((org.joda.time.ReadableDuration) duration88);
        mutableDateTime77.add((org.joda.time.ReadableDuration) duration82);
        boolean boolean91 = duration76.isShorterThan((org.joda.time.ReadableDuration) duration82);
        org.joda.time.PeriodType periodType93 = org.joda.time.PeriodType.years();
        org.joda.time.Period period94 = new org.joda.time.Period(60000L, periodType93);
        org.joda.time.Period period95 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration82, periodType93);
        org.joda.time.MutablePeriod mutablePeriod96 = new org.joda.time.MutablePeriod((java.lang.Object) period14, periodType93);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period97 = new org.joda.time.Period((java.lang.Object) localDateTime4, periodType93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldArray8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u5fb7\u6587" + "'", str39, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "+00:00" + "'", str40, "+00:00");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PeriodType[YearDayTime]" + "'", str54, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(chronology65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ISOChronology[UTC]" + "'", str66, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(periodType93);
    }

    @Test
    public void test07015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07015");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.set(44);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfWeek();
        mutableDateTime42.setDate((long) 26212118);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime42.copy();
        mutableDateTime42.addYears((-2022));
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime42.toMutableDateTimeISO();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[YearDayTime]" + "'", str35, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime49);
    }

    @Test
    public void test07016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07016");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime9 = property5.set(1);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addYears(0);
        mutableDateTime10.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration37 = duration33.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant38 = instant31.plus((org.joda.time.ReadableDuration) duration37);
        long long39 = instant38.getMillis();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime10, (org.joda.time.ReadableInstant) instant38);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration40, 999);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration40);
        mutablePeriod43.setPeriod(776L);
        mutablePeriod43.setMonths(25);
        mutablePeriod43.setYears(2567);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 86400000L + "'", long39 == 86400000L);
    }

    @Test
    public void test07017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07017");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.weekyear();
        int int6 = mutableDateTime0.getMinuteOfHour();
        mutableDateTime0.setMillisOfDay(26333);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 15);
        org.joda.time.DateTime.Property property15 = dateTime10.year();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime();
        org.joda.time.DateTime dateTime19 = dateTime16.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime16.withWeekyear(407);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.TimeOfDay timeOfDay23 = dateTime16.toTimeOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:27.454Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:27.454Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:27.454Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(timeOfDay23);
    }

    @Test
    public void test07018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07018");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        mutableDateTime1.setWeekOfWeekyear(13);
        mutableDateTime1.add(15876000000000L);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test07019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07019");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        mutableDateTime0.setDayOfYear(44);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException38 = new java.io.IOException("");
        java.io.IOException iOException39 = new java.io.IOException((java.lang.Throwable) iOException38);
        boolean boolean40 = mutableDateTime36.equals((java.lang.Object) iOException38);
        mutableDateTime36.addMonths(18);
        org.joda.time.Duration duration43 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.DateTimeField dateTimeField44 = mutableDateTime0.getRoundingField();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.099S" + "'", str17, "PT0.099S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNull(dateTimeField44);
    }

    @Test
    public void test07020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07020");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addYears(0);
        mutableDateTime0.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant28 = instant21.plus((org.joda.time.ReadableDuration) duration27);
        long long29 = instant28.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) instant28);
        mutableDateTime0.addHours(20);
        mutableDateTime0.setMillisOfSecond(57);
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("java.io.IOException: deu");
        java.util.Calendar calendar37 = mutableDateTime0.toCalendar(locale36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) 62196);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration39, 26522);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86400000L + "'", long29 == 86400000L);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(calendar37);
// flaky:         org.junit.Assert.assertEquals(calendar37.toString(), "java.util.GregorianCalendar[time=1645646427057,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=23,DAY_OF_YEAR=54,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=4,AM_PM=1,HOUR=8,HOUR_OF_DAY=20,MINUTE=0,SECOND=27,MILLISECOND=57,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(duration39);
    }

    @Test
    public void test07021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07021");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addYears(0);
        mutableDateTime0.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant28 = instant21.plus((org.joda.time.ReadableDuration) duration27);
        long long29 = instant28.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) instant28);
        mutableDateTime0.addHours(20);
        mutableDateTime0.setMillisOfSecond(57);
        int int35 = mutableDateTime0.getYear();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration43 = duration39.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration43);
        java.util.Locale locale45 = java.util.Locale.UK;
        java.util.Calendar calendar46 = dateTime37.toCalendar(locale45);
        int int47 = dateTime37.getWeekOfWeekyear();
        int int48 = dateTime37.getWeekyear();
        int int49 = mutableDateTime0.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime.Property property50 = dateTime37.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField57 = localDateTime55.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray58 = localDateTime55.getFields();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withCenturyOfEra(5);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.plusSeconds(31);
        org.joda.time.LocalDateTime.Property property65 = localDateTime64.year();
        int int66 = localDateTime64.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime64.withWeekyear(0);
        org.joda.time.DateTime dateTime69 = dateTime37.withFields((org.joda.time.ReadablePartial) localDateTime64);
        int int70 = dateTime37.getMillisOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86400000L + "'", long29 == 86400000L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_GB");
        org.junit.Assert.assertNotNull(calendar46);
// flaky:         org.junit.Assert.assertEquals(calendar46.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeFieldArray58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 58 + "'", int66 == 58);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
    }

    @Test
    public void test07022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07022");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration4.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = duration15.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.add((long) 'a');
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.yearOfCentury();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration30 = duration27.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration31 = duration24.minus((org.joda.time.ReadableDuration) duration30);
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration24);
        boolean boolean33 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        boolean boolean34 = duration7.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration42 = duration38.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration44 = duration18.plus((org.joda.time.ReadableDuration) duration42);
        mutablePeriod2.add((org.joda.time.ReadableDuration) duration42);
        long long46 = duration42.getMillis();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology47);
        int int49 = dateTime48.getYearOfCentury();
        int int50 = dateTime48.getWeekyear();
        org.joda.time.DateTime dateTime51 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property52 = dateTime48.yearOfEra();
        org.joda.time.DateTimeField dateTimeField53 = property52.getField();
        org.joda.time.DateTime dateTime54 = property52.getDateTime();
        org.joda.time.DateTime dateTime55 = property52.roundFloorCopy();
        java.lang.String str56 = property52.toString();
        org.joda.time.DurationField durationField57 = property52.getRangeDurationField();
        org.joda.time.DateTime dateTime59 = property52.addToCopy(26180329);
        org.joda.time.DateTime dateTime60 = property52.roundHalfFloorCopy();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays(1028704L);
        org.joda.time.DateTime dateTime63 = dateTime60.minus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.Period period68 = new org.joda.time.Period(readableDuration66, readableInstant67);
        org.joda.time.PeriodType periodType71 = null;
        org.joda.time.Period period72 = new org.joda.time.Period((long) 100, 1L, periodType71);
        org.joda.time.Period period74 = period72.minusSeconds((-1));
        java.lang.String str75 = period72.toString();
        org.joda.time.Period period76 = period72.toPeriod();
        org.joda.time.PeriodType periodType77 = period72.getPeriodType();
        org.joda.time.Period period78 = period68.normalizedStandard(periodType77);
        org.joda.time.DurationFieldType durationFieldType79 = null;
        int int80 = periodType77.indexOf(durationFieldType79);
        org.joda.time.Instant instant81 = new org.joda.time.Instant();
        org.joda.time.Instant instant83 = instant81.withMillis(0L);
        org.joda.time.Chronology chronology84 = instant83.getChronology();
        org.joda.time.DurationField durationField85 = chronology84.eras();
        org.joda.time.LocalTime localTime86 = org.joda.time.LocalTime.now(chronology84);
        org.joda.time.DurationField durationField87 = chronology84.eras();
        org.joda.time.DateTimeField dateTimeField88 = chronology84.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType77, chronology84);
        int int90 = periodType77.size();
        org.joda.time.PeriodType periodType91 = periodType77.withDaysRemoved();
        int int92 = periodType77.size();
        org.joda.time.Period period93 = duration42.toPeriodTo((org.joda.time.ReadableInstant) dateTime60, periodType77);
        org.joda.time.Period period95 = period93.minusWeeks(1265);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 27 + "'", int11 == 27);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 86400000L + "'", long46 == 86400000L);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Property[yearOfEra]" + "'", str56, "Property[yearOfEra]");
        org.junit.Assert.assertNull(durationField57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT0.099S" + "'", str75, "PT0.099S");
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertNotNull(localTime86);
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 8 + "'", int90 == 8);
        org.junit.Assert.assertNotNull(periodType91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 8 + "'", int92 == 8);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertNotNull(period95);
    }

    @Test
    public void test07023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07023");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        mutableDateTime10.add(51L);
        int int13 = mutableDateTime10.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime14.copy();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime14.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime22 = property18.set(1);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getYearOfCentury();
        int int26 = dateTime24.getWeekyear();
        org.joda.time.DateTime dateTime27 = dateTime24.withEarlierOffsetAtOverlap();
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime27.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        mutableDateTime29.setZoneRetainFields(dateTimeZone30);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime22.toMutableDateTime(dateTimeZone30);
        mutableDateTime10.setZone(dateTimeZone30);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime40 = dateTime38.withZoneRetainFields(dateTimeZone39);
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property42 = localDate41.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone44 = dateTimeZone43.toTimeZone();
        org.joda.time.DateTime dateTime45 = localDate41.toDateTimeAtCurrentTime(dateTimeZone43);
        int int46 = dateTime40.compareTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime48 = dateTime45.minusWeeks(44);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes(15);
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        java.lang.String str54 = chronology53.toString();
        org.joda.time.DateTimeField dateTimeField55 = chronology53.dayOfYear();
        org.joda.time.DateTime dateTime56 = dateTime45.withChronology(chronology53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant58, readableInstant59, periodType60);
        org.joda.time.DurationFieldType durationFieldType63 = periodType60.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType64 = periodType60.withMillisRemoved();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, readableDuration57, periodType64);
        org.joda.time.Period period66 = new org.joda.time.Period(0L, periodType64);
        org.joda.time.format.DateTimePrinter dateTimePrinter67 = null;
        org.joda.time.format.DateTimeParser dateTimeParser68 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter69 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter67, dateTimeParser68);
        org.joda.time.Instant instant70 = new org.joda.time.Instant();
        org.joda.time.Instant instant72 = instant70.withMillis(0L);
        org.joda.time.Chronology chronology73 = instant72.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.eras();
        long long78 = chronology73.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter69.withChronology(chronology73);
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(3600000L, periodType64, chronology73);
        org.joda.time.DateTimeZone dateTimeZone81 = chronology73.getZone();
        boolean boolean82 = dateTimeZone30.equals((java.lang.Object) chronology73);
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(dateTimeZone30);
        boolean boolean85 = dateTimeZone30.isStandardOffset((long) 26234);
        long long88 = dateTimeZone30.adjustOffset(1188523L, false);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 22 + "'", int25 == 22);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T07:23:27.643Z" + "'", str28, "2022-02-22T07:23:27.643Z");
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ISOChronology[UTC]" + "'", str54, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 105144L + "'", long78 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 1188523L + "'", long88 == 1188523L);
    }

    @Test
    public void test07024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07024");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        mutableDateTime1.addMonths(36956320);
        mutableDateTime1.setDayOfYear(49);
        java.lang.Object obj13 = mutableDateTime1.clone();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfYear(37031394);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37031394 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertEquals(obj13.toString(), "3081663-02-18T23:59:00.999Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "3081663-02-18T23:59:00.999Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "3081663-02-18T23:59:00.999Z");
    }

    @Test
    public void test07025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07025");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 14);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (short) 100, chronology3);
        org.joda.time.LocalTime localTime6 = localTime4.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime7 = localTime4.toDateTimeToday();
        boolean boolean8 = dateTime7.isAfterNow();
        int int9 = dateTime7.getWeekOfWeekyear();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration16 = duration12.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period17 = duration12.toPeriod();
        org.joda.time.Period period18 = period10.minus((org.joda.time.ReadablePeriod) period17);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 8 + "'", int9 == 8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(period18);
    }

    @Test
    public void test07026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07026");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.millisOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfYear();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.LocalDate localDate23 = localDate13.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 3);
        org.joda.time.DateTime dateTime24 = localDate23.toDateTimeAtCurrentTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime24);
        java.util.Locale locale29 = new java.util.Locale("1970", "millis");
        java.lang.String str30 = locale29.getDisplayVariant();
        java.lang.String str31 = mutableDateTime0.toString("26150565", locale29);
        mutableDateTime0.setDayOfYear(316);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT86400S" + "'", str7, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.099S" + "'", str21, "PT0.099S");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertEquals(locale29.toString(), "1970_MILLIS");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "26150565" + "'", str31, "26150565");
    }

    @Test
    public void test07027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07027");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        long long7 = mutableDateTime6.getMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean15 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration14);
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (byte) 0);
        long long26 = dateTimeField24.roundHalfEven((long) 1);
        int int27 = dateTime17.get(dateTimeField24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) 'a');
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getDisplayName();
        java.lang.String str38 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime32, 53, locale36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusMillis((int) (byte) 0);
        int int52 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        boolean boolean53 = duration9.equals((java.lang.Object) int52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        int int56 = dateTime55.getSecondOfMinute();
        int int57 = dateTime55.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant58, readableInstant59, periodType60);
        mutablePeriod61.setYears((int) '#');
        mutablePeriod61.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime66 = dateTime55.plus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration9);
        java.lang.Object obj69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(obj69);
        boolean boolean72 = dateTime70.isBefore((long) 7);
        java.lang.String str73 = dateTime70.toString();
        org.joda.time.DateTime dateTime75 = dateTime70.minus((long) 7);
        org.joda.time.Instant instant76 = new org.joda.time.Instant();
        org.joda.time.Instant instant78 = instant76.withMillis(0L);
        org.joda.time.Chronology chronology79 = instant78.getChronology();
        org.joda.time.DateTime dateTime80 = dateTime70.toDateTime(chronology79);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTime dateTime83 = dateTime81.minusDays(2100);
        int int84 = mutableDateTime6.compareTo((org.joda.time.ReadableInstant) dateTime81);
        mutableDateTime6.addDays((-356));
        int int87 = mutableDateTime6.getEra();
        int int88 = mutableDateTime6.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDayOfYear(26475);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26475 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 948227L + "'", long7 == 948227L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "German" + "'", str37, "German");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "53" + "'", str38, "53");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 27 + "'", int56 == 27);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-22T07:23:27.742Z" + "'", str73, "2022-02-22T07:23:27.742Z");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 1 + "'", int87 == 1);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 48 + "'", int88 == 48);
    }

    @Test
    public void test07028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07028");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.LocalDate localDate4 = property2.roundCeilingCopy();
        org.joda.time.LocalDate localDate6 = localDate4.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate8 = localDate4.withWeekOfWeekyear(46);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration10, readableInstant11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period18 = period16.minusSeconds((-1));
        java.lang.String str19 = period16.toString();
        org.joda.time.Period period20 = period16.toPeriod();
        org.joda.time.PeriodType periodType21 = period16.getPeriodType();
        org.joda.time.Period period22 = period12.normalizedStandard(periodType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        long long31 = chronology26.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField32 = chronology26.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(44L, periodType21, chronology26);
        org.joda.time.LocalDate localDate35 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod33, (int) (byte) 1);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.Period period37 = new org.joda.time.Period(0L, chronology36);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        mutableDateTime38.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime38.copy();
        mutableDateTime38.setDate((long) '#');
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean47 = localDate44.isSupported(dateTimeFieldType46);
        int int48 = localDate44.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight50 = localDate44.toDateMidnight(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = mutableDateTime38.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime57 = mutableDateTime54.copy();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime54.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime59 = property58.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime60 = property58.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime62 = property58.set(1);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        int int65 = dateTime64.getYearOfCentury();
        int int66 = dateTime64.getWeekyear();
        org.joda.time.DateTime dateTime67 = dateTime64.withEarlierOffsetAtOverlap();
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime67.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        boolean boolean71 = dateTimeZone70.isFixed();
        mutableDateTime69.setZoneRetainFields(dateTimeZone70);
        org.joda.time.MutableDateTime mutableDateTime73 = mutableDateTime62.toMutableDateTime(dateTimeZone70);
        org.joda.time.Interval interval74 = localDate53.toInterval(dateTimeZone70);
        org.joda.time.LocalDate.Property property75 = localDate53.monthOfYear();
        org.joda.time.LocalDate localDate76 = property75.roundCeilingCopy();
        org.joda.time.LocalDate localDate78 = property75.addToCopy(26275);
        long long80 = chronology36.set((org.joda.time.ReadablePartial) localDate78, (long) 41);
        int int81 = localDate78.size();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.099S" + "'", str19, "PT0.099S");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 105144L + "'", long31 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 53 + "'", int48 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(dateMidnight50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(dateTime67);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "2022-02-22T07:23:27.795Z" + "'", str68, "2022-02-22T07:23:27.795Z");
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(interval74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 70741900800041L + "'", long80 == 70741900800041L);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 3 + "'", int81 == 3);
    }

    @Test
    public void test07029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07029");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        boolean boolean37 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 2000);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        mutableDateTime40.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime40.copy();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime40.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime45 = property44.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime47 = property44.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime47.toMutableDateTime(dateTimeZone48);
        int int52 = dateTimeZone48.getStandardOffset(60000L);
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder54.clear();
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.lang.String str57 = locale56.getDisplayName();
        java.lang.String str58 = locale56.getISO3Language();
        java.util.Locale.Builder builder59 = builder55.setLocale(locale56);
        java.lang.String str60 = dateTimeZone48.getName(950707L, locale56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter2.withLocale(locale56);
        java.lang.StringBuffer stringBuffer62 = null;
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone63);
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone63);
        org.joda.time.DateTime dateTime67 = dateTime65.withYearOfCentury(20);
        org.joda.time.DateTime dateTime69 = dateTime67.plusYears(62151);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter61.printTo(stringBuffer62, (org.joda.time.ReadableInstant) dateTime69);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "German" + "'", str57, "German");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "deu" + "'", str58, "deu");
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00" + "'", str60, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test07030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07030");
        org.joda.time.Period period1 = org.joda.time.Period.millis(62166);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime((long) (short) 100, chronology3);
        int int5 = localTime4.getMillisOfDay();
        org.joda.time.LocalTime.Property property6 = localTime4.millisOfSecond();
        org.joda.time.LocalTime localTime8 = property6.addCopy(0);
        org.joda.time.LocalTime localTime9 = property6.roundHalfEvenCopy();
        java.lang.String str10 = localTime9.toString();
        org.joda.time.DateTimeZone dateTimeZone11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(dateTimeZone11);
        org.joda.time.LocalTime localTime14 = localTime12.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime16 = localTime12.minusSeconds(2);
        org.joda.time.LocalTime localTime18 = localTime12.minusMinutes(61);
        boolean boolean19 = localTime9.isBefore((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.LocalTime localTime21 = localTime18.plusMillis(1424);
        org.joda.time.LocalTime localTime23 = localTime18.plusMillis(40);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime(dateTimeZone24);
        org.joda.time.LocalTime localTime27 = localTime25.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime29 = localTime27.withHourOfDay(0);
        org.joda.time.LocalTime localTime31 = localTime29.withMillisOfSecond(44);
        org.joda.time.LocalTime localTime33 = localTime31.plusSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime35 = localTime31.toDateTimeToday(dateTimeZone34);
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.hourOfDay();
        boolean boolean38 = localTime36.isSupported(dateTimeFieldType37);
        org.joda.time.LocalTime localTime40 = localTime36.minusSeconds(2);
        org.joda.time.LocalTime.Property property41 = localTime40.millisOfSecond();
        org.joda.time.LocalTime localTime42 = property41.roundCeilingCopy();
        org.joda.time.LocalTime localTime43 = property41.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology46 = localTime45.getChronology();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        mutableDateTime47.add((long) 'a');
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime47.yearOfCentury();
        mutableDateTime47.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period(readableDuration55, readableInstant56);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) 100, 1L, periodType60);
        org.joda.time.Period period63 = period61.minusSeconds((-1));
        java.lang.String str64 = period61.toString();
        org.joda.time.Period period65 = period61.toPeriod();
        org.joda.time.PeriodType periodType66 = period61.getPeriodType();
        org.joda.time.Period period67 = period57.normalizedStandard(periodType66);
        org.joda.time.DurationFieldType durationFieldType68 = null;
        int int69 = periodType66.indexOf(durationFieldType68);
        org.joda.time.Instant instant70 = new org.joda.time.Instant();
        org.joda.time.Instant instant72 = instant70.withMillis(0L);
        org.joda.time.Chronology chronology73 = instant72.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.eras();
        org.joda.time.LocalTime localTime75 = org.joda.time.LocalTime.now(chronology73);
        org.joda.time.DurationField durationField76 = chronology73.eras();
        org.joda.time.DateTimeField dateTimeField77 = chronology73.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType66, chronology73);
        org.joda.time.MutableDateTime mutableDateTime79 = mutableDateTime47.toMutableDateTime(chronology73);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours82 = duration81.toStandardHours();
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(chronology83);
        int int85 = dateTime84.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration81, (org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTime dateTime88 = dateTime84.plus(0L);
        mutableDateTime79.setMillis((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DurationFieldType durationFieldType90 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime79.add(durationFieldType90, 99);
        org.joda.time.LocalTime localTime94 = localTime45.withFieldAdded(durationFieldType90, 26175904);
        org.joda.time.LocalTime localTime96 = localTime43.withFieldAdded(durationFieldType90, 34);
        boolean boolean97 = localTime23.isSupported(durationFieldType90);
        int int98 = period1.indexOf(durationFieldType90);
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 100 + "'", int5 == 100);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "00:00:00.100" + "'", str10, "00:00:00.100");
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT0.099S" + "'", str64, "PT0.099S");
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1) + "'", int69 == (-1));
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(hours82);
// flaky:         org.junit.Assert.assertTrue("'" + int85 + "' != '" + 27 + "'", int85 == 27);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(durationFieldType90);
        org.junit.Assert.assertNotNull(localTime94);
        org.junit.Assert.assertNotNull(localTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 5 + "'", int98 == 5);
    }

    @Test
    public void test07031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07031");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime0.era();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundHalfCeiling();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours24 = duration23.toStandardHours();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration35 = duration32.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean36 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration38 = duration23.withDurationAdded((org.joda.time.ReadableDuration) duration30, (-7));
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration23, 26177);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime21.dayOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(hours24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 27 + "'", int27 == 27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test07032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07032");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(15);
        org.joda.time.Chronology chronology6 = dateTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1440L, chronology6);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.Chronology chronology10 = chronology6.withUTC();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) 575, chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.hourOfHalfday();
        org.joda.time.DurationField durationField13 = chronology10.weekyears();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
    }

    @Test
    public void test07033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07033");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        int int4 = localTime3.getMinuteOfHour();
        java.lang.String str6 = localTime3.toString("1");
        org.joda.time.LocalTime localTime8 = localTime3.minusMinutes(15);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 15);
        org.joda.time.DateTime.Property property15 = dateTime10.year();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime();
        org.joda.time.LocalTime localTime19 = dateTime16.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime3.withFields((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime localTime22 = localTime20.minusMinutes(26197957);
        org.joda.time.LocalTime localTime24 = localTime20.plusHours(99);
        int int25 = localTime20.size();
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
    }

    @Test
    public void test07034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07034");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        boolean boolean8 = dateTimeZone7.isFixed();
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        mutableDateTime6.setMillisOfDay(335);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundCeiling();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setHourOfDay(736);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 736 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:23:27.942Z" + "'", str5, "2022-02-22T07:23:27.942Z");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test07035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07035");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addYears(12);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = localDateTime25.toDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime20.withZoneRetainFields(dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.toString();
        java.lang.String str37 = dateTimeZone33.getID();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone33);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime38);
        mutableDateTime0.addWeeks(45);
        org.joda.time.Instant instant42 = mutableDateTime0.toInstant();
        org.joda.time.MutableDateTime mutableDateTime43 = instant42.toMutableDateTime();
        java.lang.String str44 = mutableDateTime43.toString();
        int int45 = mutableDateTime43.getSecondOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "2023-01-03T17:23:28.051Z" + "'", str44, "2023-01-03T17:23:28.051Z");
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 62608 + "'", int45 == 62608);
    }

    @Test
    public void test07036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07036");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        int int4 = mutableDateTime1.getEra();
        mutableDateTime1.setHourOfDay((int) (byte) 1);
        mutableDateTime1.setWeekyear(26552);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test07037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07037");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.eras();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 44, chronology5);
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.weekOfWeekyear();
        boolean boolean12 = dateTimeField11.isSupported();
        int int14 = dateTimeField11.getLeapAmount((-908840217859200000L));
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(15);
        org.joda.time.DateTime dateTime28 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = dateTime16.withZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTime dateTime33 = dateTime31.minusMonths(0);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMonths(62166);
        org.joda.time.Instant instant36 = dateTime33.toInstant();
        org.joda.time.DateTime dateTime38 = dateTime33.plus((long) 26180329);
        org.joda.time.Chronology chronology39 = dateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime(chronology39);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str47 = duration46.toString();
        org.joda.time.Instant instant48 = instant42.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.MutableDateTime mutableDateTime49 = instant42.toMutableDateTime();
        long long50 = instant42.getMillis();
        org.joda.time.Chronology chronology51 = instant42.getChronology();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableDuration52, readableInstant53);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) 100, 1L, periodType57);
        org.joda.time.Period period60 = period58.minusSeconds((-1));
        java.lang.String str61 = period58.toString();
        org.joda.time.Period period62 = period58.toPeriod();
        org.joda.time.PeriodType periodType63 = period58.getPeriodType();
        org.joda.time.Period period64 = period54.normalizedStandard(periodType63);
        org.joda.time.Period period66 = period64.withSeconds(10);
        org.joda.time.Minutes minutes67 = period64.toStandardMinutes();
        org.joda.time.Period period69 = period64.withSeconds((int) (short) -1);
        int int70 = period64.size();
        int[] intArray72 = chronology51.get((org.joda.time.ReadablePeriod) period64, 1393053533606L);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray74 = dateTimeField11.add((org.joda.time.ReadablePartial) localDateTime40, 26475607, intArray72, 26250);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26475607");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT86400S" + "'", str47, "PT86400S");
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
// flaky:         org.junit.Assert.assertTrue("'" + long50 + "' != '" + 1645514608063L + "'", long50 == 1645514608063L);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PT0.099S" + "'", str61, "PT0.099S");
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(minutes67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 8 + "'", int70 == 8);
        org.junit.Assert.assertNotNull(intArray72);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray72), "[0, 0, 2303, 2, 7, 18, 53, 606]");
    }

    @Test
    public void test07038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07038");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime0.toMutableDateTime();
        mutableDateTime5.setMillis((-1893455999971L));
        mutableDateTime5.addSeconds((-49));
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:28.082Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:28.082Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:28.082Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test07039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07039");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes(15);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = localDateTime4.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = dateTime13.withMinuteOfHour(46);
        org.joda.time.DateTimeZone dateTimeZone16 = dateTime15.getZone();
        java.lang.String str18 = dateTimeZone16.getShortName((long) ' ');
        java.lang.String str20 = dateTimeZone16.getNameKey(953979L);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1, chronology22);
        int int24 = dateTime23.getMinuteOfDay();
        org.joda.time.Instant instant25 = dateTime23.toInstant();
        org.joda.time.Instant instant27 = instant25.minus((long) (byte) -1);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        int int30 = dateTime29.getYearOfCentury();
        int int31 = dateTime29.getWeekyear();
        org.joda.time.DateTime.Property property32 = dateTime29.dayOfYear();
        org.joda.time.Period period34 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period36 = period34.withDays(2022);
        org.joda.time.DateTime dateTime38 = dateTime29.withPeriodAdded((org.joda.time.ReadablePeriod) period36, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusYears((int) (short) 100);
        int int46 = localDateTime45.getEra();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.minusHours(45);
        org.joda.time.DateTime dateTime49 = dateTime38.withFields((org.joda.time.ReadablePartial) localDateTime45);
        boolean boolean50 = instant25.isEqual((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime.Property property51 = dateTime49.weekyear();
        org.joda.time.DateTime dateTime53 = property51.setCopy(0);
        int int54 = dateTimeZone16.getOffset((org.joda.time.ReadableInstant) dateTime53);
        java.lang.String str55 = dateTimeZone16.getID();
        java.lang.String str57 = dateTimeZone16.getName((long) 26425743);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "UTC" + "'", str20, "UTC");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "UTC" + "'", str55, "UTC");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
    }

    @Test
    public void test07040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07040");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale2.getISO3Language();
        java.util.Locale.Builder builder5 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType15 = periodType12.getFieldType((int) (short) 0);
        java.lang.String str16 = periodType12.toString();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 53, (long) (-1), periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType7.getField(chronology20);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = locale23.getDisplayLanguage();
        int int25 = dateTimeField22.getMaximumTextLength(locale23);
        java.lang.String str26 = locale23.getScript();
        java.util.Locale.Builder builder27 = builder1.setLocale(locale23);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property32 = localDate28.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime33.copy();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime38 = property37.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime41 = property37.set(1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getYearOfCentury();
        int int45 = dateTime43.getWeekyear();
        org.joda.time.DateTime dateTime46 = dateTime43.withEarlierOffsetAtOverlap();
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime46.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        boolean boolean50 = dateTimeZone49.isFixed();
        mutableDateTime48.setZoneRetainFields(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime41.toMutableDateTime(dateTimeZone49);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(dateTimeZone49);
        java.lang.Object obj55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(obj55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.LocalDate localDate60 = dateTime56.toLocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfMonth();
        java.util.Date date62 = localDate60.toDate();
        org.joda.time.LocalDate.Property property63 = localDate60.dayOfYear();
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.lang.String str65 = property63.getAsText(locale64);
        java.lang.String str66 = dateTimeZone49.getShortName(360000000L, locale64);
        java.lang.String str67 = property32.getAsText(locale64);
        java.util.Set<java.lang.String> strSet68 = locale64.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder69 = builder1.setLocale(locale64);
        java.util.Locale.Builder builder70 = builder69.clear();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "German" + "'", str3, "German");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PeriodType[YearDayTime]" + "'", str16, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T07:23:28.142Z" + "'", str47, "2022-02-22T07:23:28.142Z");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Feb 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "53" + "'", str65, "53");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Dienstag" + "'", str67, "Dienstag");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test07041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07041");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period14 = period12.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.minus((org.joda.time.ReadablePeriod) period12);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period12, 0);
        int int18 = period12.getYears();
        org.joda.time.Period period20 = period12.minusSeconds(26439);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(period20);
    }

    @Test
    public void test07042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07042");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        boolean boolean4 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.DurationField durationField5 = chronology3.weekyears();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology3);
        mutableDateTime6.addSeconds(62346);
        mutableDateTime6.setWeekyear(26190);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(durationField5);
    }

    @Test
    public void test07043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07043");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        mutablePeriod35.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod35.toMutablePeriod();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod38, 1439);
        mutableDateTime16.setSecondOfDay(100);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime16.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime45 = property43.add(1649416885572L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1649416885572 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test07044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07044");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 273);
    }

    @Test
    public void test07045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07045");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        mutableDateTime0.setMillisOfDay(26538287);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setHourOfDay(248);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 248 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test07046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07046");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean18 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration19 = duration9.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Days days20 = duration9.toStandardDays();
        boolean boolean21 = duration7.isEqual((org.joda.time.ReadableDuration) duration9);
        long long22 = duration9.getStandardSeconds();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean25 = localDate23.isSupported(dateTimeFieldType24);
        org.joda.time.LocalDate.Property property26 = localDate23.yearOfEra();
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str32 = duration31.toString();
        org.joda.time.Instant instant33 = instant27.minus((org.joda.time.ReadableDuration) duration31);
        int int34 = property26.getDifference((org.joda.time.ReadableInstant) instant27);
        org.joda.time.Duration duration37 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant38 = instant27.plus((org.joda.time.ReadableDuration) duration37);
        int int39 = duration9.compareTo((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime40 = dateTime5.plus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime42 = dateTime5.withYearOfCentury(3);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        mutableDateTime43.add((long) 'a');
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime43.yearOfCentury();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration54 = duration51.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration55 = duration48.minus((org.joda.time.ReadableDuration) duration54);
        mutableDateTime43.add((org.joda.time.ReadableDuration) duration48);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime43.centuryOfEra();
        mutableDateTime43.addHours((int) (byte) 10);
        mutableDateTime43.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField62 = mutableDateTime43.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj64 = mutableDateTime63.clone();
        mutableDateTime63.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime63.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime69 = property67.add(1L);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone71 = dateTimeZone70.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone72 = org.joda.time.DateTimeZone.UTC;
        long long74 = dateTimeZone70.getMillisKeepLocal(dateTimeZone72, (long) 44);
        org.joda.time.DateTime dateTime75 = org.joda.time.DateTime.now(dateTimeZone70);
        mutableDateTime69.setZoneRetainFields(dateTimeZone70);
        mutableDateTime69.addSeconds((int) (short) 10);
        java.lang.Object obj79 = mutableDateTime69.clone();
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime69.era();
        boolean boolean81 = mutableDateTime43.isAfter((org.joda.time.ReadableInstant) mutableDateTime69);
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime69.millisOfDay();
        org.joda.time.Duration duration83 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableInstant) mutableDateTime69);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 86400L + "'", long22 == 86400L);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT86400S" + "'", str32, "PT86400S");
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNull(dateTimeField62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(obj64);
// flaky:         org.junit.Assert.assertEquals(obj64.toString(), "2022-02-22T07:23:28.309Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj64), "2022-02-22T07:23:28.309Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj64), "2022-02-22T07:23:28.309Z");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(timeZone71);
        org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 44L + "'", long74 == 44L);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(obj79);
        org.junit.Assert.assertEquals(obj79.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj79), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj79), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test07047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07047");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) 26209);
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableDuration6, readableInstant7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period14 = period12.minusSeconds((-1));
        java.lang.String str15 = period12.toString();
        org.joda.time.Period period16 = period12.toPeriod();
        org.joda.time.PeriodType periodType17 = period12.getPeriodType();
        org.joda.time.Period period18 = period8.normalizedStandard(periodType17);
        org.joda.time.DurationFieldType durationFieldType19 = null;
        int int20 = periodType17.indexOf(durationFieldType19);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.DurationField durationField27 = chronology24.eras();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType17, chronology24);
        org.joda.time.Period period30 = duration3.toPeriod(periodType17);
        org.joda.time.PeriodType periodType31 = periodType17.withSecondsRemoved();
        org.joda.time.PeriodType periodType32 = periodType17.withMinutesRemoved();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 26338, 1092295L, periodType32);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0.099S" + "'", str15, "PT0.099S");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(periodType32);
    }

    @Test
    public void test07048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07048");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addHours((int) (byte) 10);
        int int27 = mutableDateTime10.getSecondOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        boolean boolean37 = localDate28.isSupported(durationFieldType36);
        mutableDateTime10.add(durationFieldType36, (-292275054));
        org.joda.time.LocalDate localDate41 = localDate7.withFieldAdded(durationFieldType36, 53);
        org.joda.time.LocalDate.Property property42 = localDate7.yearOfCentury();
        org.joda.time.LocalDate.Property property43 = localDate7.weekOfWeekyear();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray44 = localDate7.getFieldTypes();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 62608 + "'", int27 == 62608);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray44);
    }

    @Test
    public void test07049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07049");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.secondOfMinute();
        int int9 = dateTimeField8.getMinimumValue();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (short) 100, chronology11);
        org.joda.time.LocalTime localTime14 = localTime12.plusSeconds((int) (byte) 10);
        int int15 = localTime12.size();
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale17.getScript();
        java.lang.String str19 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime12, 26241, locale17);
        org.joda.time.DurationField durationField20 = dateTimeField8.getLeapDurationField();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "26241" + "'", str19, "26241");
        org.junit.Assert.assertNull(durationField20);
    }

    @Test
    public void test07050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07050");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        long long10 = dateTimeZone7.previousTransition(100L);
        int int12 = dateTimeZone7.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime13 = mutableDateTime6.toDateTime(dateTimeZone7);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDayOfYear(46620);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 46620 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test07051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07051");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        boolean boolean5 = dateTime3.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology6 = dateTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField7 = chronology6.era();
        boolean boolean8 = dateTimeField7.isSupported();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears((int) (short) 100);
        int int16 = localDateTime15.getEra();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minusDays(8);
        int int19 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusMillis(26);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) -1);
        int[] intArray24 = localDateTime23.getValues();
        int int25 = dateTimeField7.getMinimumValue((org.joda.time.ReadablePartial) localDateTime21, intArray24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withMillisOfSecond(45);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime21.withCenturyOfEra(2046);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.plusHours((-268));
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableDuration40, readableInstant41);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) 100, 1L, periodType45);
        org.joda.time.Period period48 = period46.minusSeconds((-1));
        java.lang.String str49 = period46.toString();
        org.joda.time.Period period50 = period46.toPeriod();
        org.joda.time.PeriodType periodType51 = period46.getPeriodType();
        org.joda.time.Period period52 = period42.normalizedStandard(periodType51);
        org.joda.time.Period period54 = period52.withSeconds(10);
        org.joda.time.PeriodType periodType55 = period54.getPeriodType();
        org.joda.time.Period period56 = new org.joda.time.Period((-164), 26195, 82, (-100), 26196, 26323, 62277, (-3228), periodType55);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(readableInstant59, readableInstant60, periodType61);
        org.joda.time.PeriodType periodType63 = periodType61.withHoursRemoved();
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException67 = new java.io.IOException("");
        java.io.IOException iOException68 = new java.io.IOException((java.lang.Throwable) iOException67);
        boolean boolean69 = mutableDateTime65.equals((java.lang.Object) iOException67);
        boolean boolean70 = periodType63.equals((java.lang.Object) boolean69);
        org.joda.time.PeriodType periodType71 = periodType63.withYearsRemoved();
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property73 = localDate72.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean75 = localDate72.isSupported(dateTimeFieldType74);
        org.joda.time.Chronology chronology76 = localDate72.getChronology();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.monthOfYear();
        org.joda.time.DurationField durationField78 = chronology76.weeks();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(1386221L, (-1438L), periodType71, chronology76);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period80 = new org.joda.time.Period((java.lang.Object) localDateTime31, periodType55, chronology76);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(intArray24);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray24), "[1969, 12, 31, 86399999]");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0.099S" + "'", str49, "PT0.099S");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField78);
    }

    @Test
    public void test07052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07052");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        mutablePeriod2.setMillis((int) ' ');
        mutablePeriod2.setPeriod((long) 2);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = duration21.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.Interval interval30 = duration25.toIntervalTo((org.joda.time.ReadableInstant) dateTime29);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval30);
        org.joda.time.DurationFieldType durationFieldType33 = mutablePeriod2.getFieldType(6);
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        mutableDateTime36.add((long) 'a');
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str43 = duration42.toString();
        boolean boolean44 = duration40.isShorterThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Hours hours45 = duration40.toStandardHours();
        mutableDateTime36.add((org.joda.time.ReadableDuration) duration40, 20);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        int int50 = dateTime49.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = null;
        java.lang.String str52 = dateTime49.toString(dateTimeFormatter51);
        org.joda.time.DateTime dateTime54 = dateTime49.minusMonths(22);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.eras();
        org.joda.time.DateTime dateTime60 = dateTime49.withChronology(chronology58);
        org.joda.time.Period period61 = duration40.toPeriod(chronology58);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period(readableDuration64, readableInstant65);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((long) 100, 1L, periodType69);
        org.joda.time.Period period72 = period70.minusSeconds((-1));
        java.lang.String str73 = period70.toString();
        org.joda.time.Period period74 = period70.toPeriod();
        org.joda.time.PeriodType periodType75 = period70.getPeriodType();
        org.joda.time.Period period76 = period66.normalizedStandard(periodType75);
        java.lang.String str77 = periodType75.getName();
        java.lang.String str78 = periodType75.toString();
        org.joda.time.PeriodType periodType79 = periodType75.withDaysRemoved();
        org.joda.time.PeriodType periodType80 = periodType79.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType80);
        int[] intArray83 = chronology58.get((org.joda.time.ReadablePeriod) mutablePeriod81, 1L);
        org.joda.time.DateTimeField dateTimeField84 = chronology58.hourOfDay();
        mutablePeriod2.setPeriod(1243705L, 50061L, chronology58);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval30);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT86400S" + "'", str43, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(hours45);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022-02-22T07:23:28.536Z" + "'", str52, "2022-02-22T07:23:28.536Z");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PT0.099S" + "'", str73, "PT0.099S");
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Standard" + "'", str77, "Standard");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PeriodType[Standard]" + "'", str78, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType79);
        org.junit.Assert.assertNotNull(periodType80);
        org.junit.Assert.assertNotNull(intArray83);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray83), "[0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeField84);
    }

    @Test
    public void test07053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07053");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str8 = duration7.toString();
        boolean boolean9 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Hours hours10 = duration5.toStandardHours();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration5, 20);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime14.toString(dateTimeFormatter16);
        org.joda.time.DateTime dateTime19 = dateTime14.minusMonths(22);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.DateTime dateTime25 = dateTime14.withChronology(chronology23);
        org.joda.time.Period period26 = duration5.toPeriod(chronology23);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableDuration29, readableInstant30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) 100, 1L, periodType34);
        org.joda.time.Period period37 = period35.minusSeconds((-1));
        java.lang.String str38 = period35.toString();
        org.joda.time.Period period39 = period35.toPeriod();
        org.joda.time.PeriodType periodType40 = period35.getPeriodType();
        org.joda.time.Period period41 = period31.normalizedStandard(periodType40);
        java.lang.String str42 = periodType40.getName();
        java.lang.String str43 = periodType40.toString();
        org.joda.time.PeriodType periodType44 = periodType40.withDaysRemoved();
        org.joda.time.PeriodType periodType45 = periodType44.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType45);
        int[] intArray48 = chronology23.get((org.joda.time.ReadablePeriod) mutablePeriod46, 1L);
        org.joda.time.DateTimeField dateTimeField49 = chronology23.clockhourOfHalfday();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.fromMillisOfDay(25L, chronology23);
        org.joda.time.DateTimeField dateTimeField51 = chronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology23.secondOfDay();
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime(chronology23);
        org.joda.time.LocalTime localTime55 = localTime53.withMillisOfSecond(0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime57 = localTime53.withHourOfDay((-580));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -580 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT86400S" + "'", str8, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:23:28.605Z" + "'", str17, "2022-02-22T07:23:28.605Z");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0.099S" + "'", str38, "PT0.099S");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Standard" + "'", str42, "Standard");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PeriodType[Standard]" + "'", str43, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(localTime55);
    }

    @Test
    public void test07054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07054");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        int int4 = mutableDateTime1.getEra();
        mutableDateTime1.setHourOfDay((int) (byte) 1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime1.copy();
        mutableDateTime8.setSecondOfDay(863);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime(dateTimeZone13);
        org.joda.time.LocalTime localTime16 = localTime14.withMillisOfSecond(20);
        org.joda.time.LocalTime localTime18 = localTime14.minusMinutes(22623598);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField22 = property20.getField();
        int int23 = property20.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime25 = property20.add((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime27 = property20.add((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        java.lang.String str37 = periodType33.toString();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 53, (long) (-1), periodType33, chronology41);
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType28.getField(chronology41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMinutes(15);
        org.joda.time.Chronology chronology48 = dateTime45.getChronology();
        java.lang.String str49 = chronology48.toString();
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType28.getField(chronology48);
        java.lang.String str51 = dateTimeFieldType28.toString();
        boolean boolean52 = mutableDateTime27.isSupported(dateTimeFieldType28);
        org.joda.time.LocalTime localTime54 = localTime18.withField(dateTimeFieldType28, 1260);
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime57 = localTime55.withMillisOfDay((int) (short) 1);
        org.joda.time.LocalTime localTime59 = localTime55.plusMinutes(0);
        org.joda.time.LocalTime localTime61 = localTime55.minusMinutes(26150);
        org.joda.time.LocalTime localTime63 = localTime61.plusMinutes((-57));
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime64.centuryOfEra();
        int int66 = mutableDateTime64.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime(dateTimeZone67);
        org.joda.time.LocalTime localTime70 = localTime68.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime72 = localTime70.withHourOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int74 = localTime70.get(dateTimeFieldType73);
        org.joda.time.Period period76 = org.joda.time.Period.weeks(161);
        org.joda.time.LocalTime localTime77 = localTime70.minus((org.joda.time.ReadablePeriod) period76);
        mutableDateTime64.add((org.joda.time.ReadablePeriod) period76);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(readableInstant82, readableInstant83, periodType84);
        org.joda.time.DurationFieldType durationFieldType87 = periodType84.getFieldType((int) (short) 0);
        java.lang.String str88 = periodType84.toString();
        org.joda.time.Instant instant89 = new org.joda.time.Instant();
        org.joda.time.Instant instant91 = instant89.withMillis(0L);
        org.joda.time.Chronology chronology92 = instant91.getChronology();
        org.joda.time.Period period93 = new org.joda.time.Period((long) 53, (long) (-1), periodType84, chronology92);
        org.joda.time.DateTimeField dateTimeField94 = dateTimeFieldType79.getField(chronology92);
        org.joda.time.MutableDateTime.Property property95 = mutableDateTime64.property(dateTimeFieldType79);
        int int96 = localTime61.get(dateTimeFieldType79);
        boolean boolean97 = localTime18.isSupported(dateTimeFieldType79);
        int int98 = mutableDateTime8.get(dateTimeFieldType79);
        java.lang.String str99 = dateTimeFieldType79.getName();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PeriodType[YearDayTime]" + "'", str37, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ISOChronology[UTC]" + "'", str49, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "minuteOfDay" + "'", str51, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 28 + "'", int74 == 28);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(localTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(durationFieldType87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "PeriodType[YearDayTime]" + "'", str88, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertNotNull(chronology92);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1210 + "'", int96 == 1210);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 14 + "'", int98 == 14);
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "minuteOfDay" + "'", str99, "minuteOfDay");
    }

    @Test
    public void test07055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07055");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.secondOfDay();
        int int4 = mutableDateTime0.getDayOfWeek();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = duration9.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration13 = duration6.minus((org.joda.time.ReadableDuration) duration12);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration6, 19045);
        org.joda.time.Duration duration18 = duration6.withDurationAdded((long) 62213, 58);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.LocalDate localDate21 = dateTime20.toLocalDate();
        org.joda.time.DateTime dateTime23 = dateTime20.plus(30672000000L);
        boolean boolean24 = duration6.equals((java.lang.Object) dateTime20);
        org.joda.time.DateTime dateTime26 = dateTime20.withYearOfEra(963);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test07056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07056");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        int int20 = mutableDateTime0.getWeekyear();
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime0.add(readableDuration21);
        mutableDateTime0.addMinutes(26510);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
    }

    @Test
    public void test07057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07057");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        int int15 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays(0);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime17.plusDays(41);
        org.joda.time.DateTime dateTime22 = dateTime17.plusMonths(27);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTime();
        int int24 = dateTime22.getEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 26608 + "'", int15 == 26608);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test07058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07058");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.secondOfDay();
        int int4 = mutableDateTime0.getDayOfWeek();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = duration9.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration13 = duration6.minus((org.joda.time.ReadableDuration) duration12);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration6, 19045);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.months();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime25, periodType26);
        boolean boolean28 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime23);
        int int29 = dateTime23.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        boolean boolean36 = property33.equals((java.lang.Object) 10L);
        long long37 = property33.remainder();
        java.lang.String str38 = property33.getAsText();
        org.joda.time.LocalDateTime localDateTime39 = property33.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property33.getFieldType();
        int int41 = dateTime23.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime42 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration43, readableInstant44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period51 = period49.minusSeconds((-1));
        java.lang.String str52 = period49.toString();
        org.joda.time.Period period53 = period49.toPeriod();
        org.joda.time.PeriodType periodType54 = period49.getPeriodType();
        org.joda.time.Period period55 = period45.normalizedStandard(periodType54);
        org.joda.time.Period period57 = period55.withSeconds(10);
        org.joda.time.Minutes minutes58 = period55.toStandardMinutes();
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = period55.getFieldTypes();
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.forFields(durationFieldTypeArray59);
        org.joda.time.Period period61 = duration6.toPeriodTo((org.joda.time.ReadableInstant) dateTime23, periodType60);
        org.joda.time.Period period63 = period61.minusDays(345);
        int int64 = period63.getYears();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1408829L + "'", long37 == 1408829L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "7" + "'", str38, "7");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0.099S" + "'", str52, "PT0.099S");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
    }

    @Test
    public void test07059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07059");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.weeks();
        org.joda.time.DateTimeField dateTimeField13 = chronology11.weekyear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 44);
        boolean boolean20 = dateTimeZone16.isStandardOffset((long) (-1));
        java.lang.String str21 = dateTimeZone16.toString();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone16);
        long long25 = dateTimeZone16.convertLocalToUTC((long) 56, false);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((java.lang.Object) dateTimeField13, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.chrono.BasicWeekyearDateTimeField");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 44L + "'", long18 == 44L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 56L + "'", long25 == 56L);
    }

    @Test
    public void test07060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07060");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.Instant instant6 = instant4.minus((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = new org.joda.time.Duration((long) 26158);
        org.joda.time.Duration duration10 = duration9.toDuration();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException14 = new java.io.IOException("");
        java.io.IOException iOException15 = new java.io.IOException((java.lang.Throwable) iOException14);
        boolean boolean16 = mutableDateTime12.equals((java.lang.Object) iOException14);
        org.joda.time.Duration duration19 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration19, 1424);
        org.joda.time.Days days22 = duration19.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod25.clear();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusMinutes(15);
        org.joda.time.Interval interval37 = duration32.toIntervalTo((org.joda.time.ReadableInstant) dateTime36);
        mutablePeriod25.setPeriod((org.joda.time.ReadableInterval) interval37);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant39, readableInstant40, periodType41);
        org.joda.time.DurationFieldType durationFieldType44 = periodType41.getFieldType((int) (short) 0);
        int int45 = mutablePeriod25.get(durationFieldType44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now();
        mutableDateTime48.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime48.copy();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime48.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) mutableDateTime48);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Chronology chronology57 = instant56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.eras();
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.now(chronology57);
        org.joda.time.DurationField durationField60 = chronology57.eras();
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration47, chronology57);
        org.joda.time.Duration duration63 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration47, 26148950);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period66 = duration65.toPeriod();
        org.joda.time.Duration duration68 = duration65.minus((long) 292278993);
        int int69 = duration47.compareTo((org.joda.time.ReadableDuration) duration65);
        int int70 = duration9.compareTo((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration72 = duration9.withMillis((long) 365);
        org.joda.time.Instant instant73 = instant6.minus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.MutableDateTime mutableDateTime74 = instant6.toMutableDateTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(days22);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
    }

    @Test
    public void test07061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07061");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.TimeOfDay timeOfDay14 = dateTime13.toTimeOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        int int16 = mutableDateTime15.getRoundingMode();
        int int17 = mutableDateTime15.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(timeOfDay14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
    }

    @Test
    public void test07062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07062");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 44, chronology4);
        int int9 = dateTime8.getSecondOfMinute();
        int int10 = dateTime8.getWeekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale14);
        java.lang.Object obj17 = dateTimeParserBucket16.saveState();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (short) 100, chronology19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str22 = durationFieldType21.getName();
        boolean boolean23 = localTime20.isSupported(durationFieldType21);
        boolean boolean24 = dateTimeParserBucket16.restoreState((java.lang.Object) boolean23);
        java.lang.Integer int25 = dateTimeParserBucket16.getOffsetInteger();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime8.toMutableDateTime(chronology26);
        mutableDateTime27.addWeeks(57);
        mutableDateTime27.setTime((long) 26265573);
        org.joda.time.DateTimeZone dateTimeZone32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime(dateTimeZone32);
        org.joda.time.LocalTime localTime35 = localTime33.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime37 = localTime35.withHourOfDay(0);
        org.joda.time.LocalTime localTime39 = localTime37.withMillisOfSecond(44);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableDuration40, readableInstant41);
        org.joda.time.Period period44 = period42.withDays((int) (byte) 1);
        org.joda.time.Period period46 = period42.withMonths(26148);
        org.joda.time.MutablePeriod mutablePeriod47 = period42.toMutablePeriod();
        org.joda.time.LocalTime localTime48 = localTime37.minus((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.LocalTime localTime50 = localTime48.plusMinutes((int) (short) 10);
        int int51 = localTime48.getSecondOfMinute();
        int int52 = localTime48.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj54 = mutableDateTime53.clone();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime53.millisOfDay();
        boolean boolean56 = localTime48.equals((java.lang.Object) mutableDateTime53);
        int int57 = mutableDateTime53.getWeekyear();
        mutableDateTime53.addWeeks((-52));
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime27, (org.joda.time.ReadableInstant) mutableDateTime53);
        mutableDateTime27.addHours(26566240);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "weeks" + "'", str22, "weeks");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(int25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(mutablePeriod47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(localTime50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 29 + "'", int51 == 29);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 23 + "'", int52 == 23);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(obj54);
// flaky:         org.junit.Assert.assertEquals(obj54.toString(), "2022-02-22T07:23:29.020Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj54), "2022-02-22T07:23:29.020Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj54), "2022-02-22T07:23:29.020Z");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
    }

    @Test
    public void test07063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07063");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.toMutableDateTime();
        int int13 = mutableDateTime12.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime12.millisOfSecond();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime12.era();
        int int19 = property1.getDifference((org.joda.time.ReadableInstant) mutableDateTime12);
        int int20 = mutableDateTime12.getWeekyear();
        int int21 = mutableDateTime12.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26609 + "'", int13 == 26609);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-596) + "'", int19 == (-596));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64173 + "'", int20 == 64173);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 8 + "'", int21 == 8);
    }

    @Test
    public void test07064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07064");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant9 = dateTime1.toInstant();
        org.joda.time.DateTime dateTime12 = dateTime1.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.yearOfCentury();
        mutableDateTime13.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period29 = period27.minusSeconds((-1));
        java.lang.String str30 = period27.toString();
        org.joda.time.Period period31 = period27.toPeriod();
        org.joda.time.PeriodType periodType32 = period27.getPeriodType();
        org.joda.time.Period period33 = period23.normalizedStandard(periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = null;
        int int35 = periodType32.indexOf(durationFieldType34);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Chronology chronology39 = instant38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.eras();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology39);
        org.joda.time.DurationField durationField42 = chronology39.eras();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType32, chronology39);
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime13.toMutableDateTime(chronology39);
        mutableDateTime13.setDayOfYear(44);
        int int48 = mutableDateTime13.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.addMillis(365);
        mutableDateTime13.addSeconds(38);
        mutableDateTime13.addWeeks(33471);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0.099S" + "'", str30, "PT0.099S");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
    }

    @Test
    public void test07065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07065");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.addSeconds(0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours25 = duration24.toStandardHours();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.months();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime42 = dateTime16.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime44 = dateTime16.minusYears(29);
        org.joda.time.DateTime dateTime46 = dateTime44.minusWeeks(62181);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology47);
        int int49 = dateTime48.getYearOfCentury();
        int int50 = dateTime48.getWeekyear();
        org.joda.time.DateTime dateTime51 = dateTime48.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property52 = dateTime48.yearOfEra();
        org.joda.time.DateTime dateTime53 = property52.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime54 = property52.roundHalfEvenCopy();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours57 = duration56.toStandardHours();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        int int60 = dateTime59.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime59);
        mutablePeriod61.addSeconds(292278993);
        mutablePeriod61.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime67 = dateTime54.minus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.DateTime dateTime70 = dateTime54.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.DateTime.Property property71 = dateTime70.year();
        int int72 = dateTime70.getMillisOfSecond();
        int int73 = dateTime70.getWeekOfWeekyear();
        boolean boolean74 = dateTime46.isAfter((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.DateTime dateTime76 = dateTime70.minus((long) 652);
        org.joda.time.DateTime dateTime78 = dateTime70.plusWeeks(26238);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(hours25);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 29 + "'", int28 == 29);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2022 + "'", int50 == 2022);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(hours57);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 29 + "'", int60 == 29);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 31 + "'", int72 == 31);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 52 + "'", int73 == 52);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTime78);
    }

    @Test
    public void test07066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07066");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableDuration2, readableInstant3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.Period period10 = period8.minusSeconds((-1));
        java.lang.String str11 = period8.toString();
        org.joda.time.Period period12 = period8.toPeriod();
        org.joda.time.PeriodType periodType13 = period8.getPeriodType();
        org.joda.time.Period period14 = period4.normalizedStandard(periodType13);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Chronology chronology18 = instant17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.eras();
        long long23 = chronology18.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField24 = chronology18.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(44L, periodType13, chronology18);
        org.joda.time.PeriodType periodType26 = periodType13.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod29.clear();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        org.joda.time.DateTime dateTime40 = dateTime38.plusMinutes(15);
        org.joda.time.Interval interval41 = duration36.toIntervalTo((org.joda.time.ReadableInstant) dateTime40);
        mutablePeriod29.setPeriod((org.joda.time.ReadableInterval) interval41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(readableInstant43, readableInstant44, periodType45);
        org.joda.time.DurationFieldType durationFieldType48 = periodType45.getFieldType((int) (short) 0);
        int int49 = mutablePeriod29.get(durationFieldType48);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now();
        mutableDateTime52.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime52.copy();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime52.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.Instant instant58 = new org.joda.time.Instant();
        org.joda.time.Instant instant60 = instant58.withMillis(0L);
        org.joda.time.Chronology chronology61 = instant60.getChronology();
        org.joda.time.DurationField durationField62 = chronology61.eras();
        org.joda.time.LocalTime localTime63 = org.joda.time.LocalTime.now(chronology61);
        org.joda.time.DurationField durationField64 = chronology61.eras();
        mutablePeriod29.setPeriod((org.joda.time.ReadableDuration) duration51, chronology61);
        org.joda.time.DateTimeField dateTimeField66 = chronology61.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField67 = chronology61.weekyearOfCentury();
        java.lang.String str68 = chronology61.toString();
        org.joda.time.DateTimeField dateTimeField69 = chronology61.weekyear();
        org.joda.time.DateTimeField dateTimeField70 = chronology61.monthOfYear();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(26278L, periodType26, chronology61);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.099S" + "'", str11, "PT0.099S");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 105144L + "'", long23 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(durationField62);
        org.junit.Assert.assertNotNull(localTime63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[UTC]" + "'", str68, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
    }

    @Test
    public void test07067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07067");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.set(45);
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.DurationField durationField17 = chronology14.eras();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 44, chronology14);
        org.joda.time.DateTimeField dateTimeField19 = dateTimeFieldType9.getField(chronology14);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period25 = period23.minusSeconds((-1));
        java.lang.String str26 = period23.toString();
        long long29 = chronology14.add((org.joda.time.ReadablePeriod) period23, (long) ' ', (int) 'a');
        org.joda.time.Period period31 = period23.minusHours((-292275054));
        org.joda.time.Period period33 = period31.minusHours(2000);
        int int34 = period31.getMinutes();
        org.joda.time.Period period35 = period31.toPeriod();
        mutableDateTime8.add((org.joda.time.ReadablePeriod) period35);
        org.joda.time.Period period38 = period35.minusYears(443);
        org.joda.time.Period period40 = period38.minusDays(19);
        org.joda.time.DateTime dateTime41 = dateTime1.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime43 = dateTime41.plusHours(8);
        org.joda.time.DateTime.Property property44 = dateTime41.centuryOfEra();
        org.joda.time.DateTime dateTime45 = property44.roundCeilingCopy();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(readableInstant48, readableInstant49, periodType50);
        org.joda.time.DurationFieldType durationFieldType53 = periodType50.getFieldType((int) (short) 0);
        java.lang.String str54 = periodType50.toString();
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.Period period59 = new org.joda.time.Period((long) 53, (long) (-1), periodType50, chronology58);
        org.joda.time.DateTimeField dateTimeField60 = chronology58.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = dateTimeField60.getType();
        int int62 = dateTime45.get(dateTimeField60);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period(readableDuration63, readableInstant64);
        int int66 = period65.getMinutes();
        org.joda.time.MutablePeriod mutablePeriod67 = period65.toMutablePeriod();
        org.joda.time.DateTime dateTime68 = dateTime45.plus((org.joda.time.ReadablePeriod) period65);
        int int69 = dateTime68.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.099S" + "'", str26, "PT0.099S");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-9571L) + "'", long29 == (-9571L));
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PeriodType[YearDayTime]" + "'", str54, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
    }

    @Test
    public void test07068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07068");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = duration9.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration13 = duration6.minus((org.joda.time.ReadableDuration) duration12);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration6);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.centuryOfEra();
        mutableDateTime1.addHours((int) (byte) 10);
        int int18 = mutableDateTime1.getSecondOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.monthOfYear();
        org.joda.time.LocalDate.Property property21 = localDate19.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.DurationFieldType durationFieldType27 = periodType24.getFieldType((int) (short) 0);
        boolean boolean28 = localDate19.isSupported(durationFieldType27);
        mutableDateTime1.add(durationFieldType27, (-292275054));
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) mutableDateTime1);
        mutableDateTime1.setMillis(876L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 62609 + "'", int18 == 62609);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test07069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07069");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        int int4 = localDate0.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight6 = localDate0.toDateMidnight(dateTimeZone5);
        org.joda.time.LocalDate.Property property7 = localDate0.year();
        org.joda.time.LocalDate localDate8 = property7.roundHalfEvenCopy();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime9.copy();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime17 = property13.set(1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getYearOfCentury();
        int int21 = dateTime19.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime19.withEarlierOffsetAtOverlap();
        java.lang.String str23 = dateTime22.toString();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime22.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        boolean boolean26 = dateTimeZone25.isFixed();
        mutableDateTime24.setZoneRetainFields(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime17.toMutableDateTime(dateTimeZone25);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(dateTimeZone25);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime31 = localDate8.toDateTimeAtCurrentTime(dateTimeZone25);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone25);
        mutableDateTime32.setWeekyear(10);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        mutableDateTime38.add((long) 'a');
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.yearOfCentury();
        mutableDateTime38.addSeconds(0);
        mutableDateTime38.setWeekyear((int) 'u');
        java.lang.Object obj46 = null;
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        mutableDateTime47.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime47.copy();
        mutableDateTime47.setDate((long) '#');
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean56 = localDate53.isSupported(dateTimeFieldType55);
        int int57 = localDate53.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight59 = localDate53.toDateMidnight(dateTimeZone58);
        org.joda.time.DateTime dateTime60 = mutableDateTime47.toDateTime(dateTimeZone58);
        org.joda.time.LocalDate localDate61 = org.joda.time.LocalDate.now(dateTimeZone58);
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(obj46, dateTimeZone58);
        java.lang.String str64 = dateTimeZone58.getName(105144L);
        long long66 = dateTimeZone58.nextTransition(3155760000000L);
        mutableDateTime38.setZone(dateTimeZone58);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) (short) 1, dateTimeZone58);
        long long72 = dateTimeZone58.convertLocalToUTC((long) 26224942, true, (long) 2227);
        mutableDateTime36.setZone(dateTimeZone58);
        boolean boolean75 = dateTimeZone58.isStandardOffset((long) 37161044);
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale locale78 = java.util.Locale.CANADA;
        java.lang.String str79 = locale77.getDisplayVariant(locale78);
        java.lang.String str80 = locale77.getISO3Language();
        java.lang.String str81 = locale77.getISO3Country();
        java.util.Locale locale82 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale82);
        java.lang.String str84 = locale77.getDisplayLanguage(locale82);
        java.util.Locale locale85 = java.util.Locale.FRENCH;
        java.lang.String str86 = locale82.getDisplayName(locale85);
        java.lang.String str87 = locale82.getISO3Language();
        java.lang.String str88 = dateTimeZone58.getName((-859185L), locale82);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime22);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2022-02-22T07:23:29.299Z" + "'", str23, "2022-02-22T07:23:29.299Z");
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 53 + "'", int57 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateMidnight59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 3155760000000L + "'", long66 == 3155760000000L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 26224942L + "'", long72 == 26224942L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "deu" + "'", str80, "deu");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u5fb7\u6587" + "'", str84, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "chinois (Chine)" + "'", str86, "chinois (Chine)");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "zho" + "'", str87, "zho");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "+00:00" + "'", str88, "+00:00");
    }

    @Test
    public void test07070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07070");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        mutableDateTime1.setWeekOfWeekyear(13);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.millisOfDay();
        org.joda.time.DurationField durationField14 = property13.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.set(443);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setSecondOfMinute(955);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 955 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test07071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07071");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.DateTime dateTime11 = dateTime1.withDurationAdded((long) 62170, 26175904);
        org.joda.time.DateTime dateTime13 = dateTime1.minusWeeks(62289);
        org.joda.time.DateTime dateTime15 = dateTime1.plusYears(26528806);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.lang.String str20 = locale19.getDisplayName();
        java.lang.String str21 = dateTimeZone17.getName(100L, locale19);
        java.lang.String str22 = dateTimeZone17.toString();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) 1970, dateTimeZone17);
        java.lang.String str25 = dateTimeZone17.getShortName((long) 6);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime28 = dateTime1.withZone(dateTimeZone17);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u5fb7\u6587" + "'", str20, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test07072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07072");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        mutableDateTime1.addMonths(0);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.LocalDate localDate9 = property7.roundCeilingCopy();
        org.joda.time.Chronology chronology10 = localDate9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.weekOfWeekyear();
        mutableDateTime1.setChronology(chronology10);
        mutableDateTime1.addMillis(966);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test07073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07073");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addYears(0);
        mutableDateTime0.setMinuteOfDay((int) (short) 0);
        int int19 = mutableDateTime0.getWeekOfWeekyear();
        int int20 = mutableDateTime0.getMinuteOfHour();
        mutableDateTime0.addSeconds(37040809);
        mutableDateTime0.addMinutes(4201);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test07074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07074");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) 2037);
        long long2 = duration1.getStandardMinutes();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMinutes(15);
        org.joda.time.Chronology chronology7 = dateTime4.getChronology();
        org.joda.time.DateTime dateTime9 = dateTime4.minusDays(46);
        org.joda.time.DateTime.Property property10 = dateTime9.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.parse("2022-02-22T07:16:08.639Z");
        mutableDateTime12.addHours(26233410);
        boolean boolean15 = dateTime9.isEqual((org.joda.time.ReadableInstant) mutableDateTime12);
        org.joda.time.Period period16 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.Period period18 = period16.withFields(readablePeriod17);
        int int19 = period16.getDays();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Seconds seconds20 = period16.toStandardSeconds();
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Cannot convert to Seconds as this period contains months and months vary in length");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 2933280L + "'", long2 == 2933280L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2 + "'", int19 == 2);
    }

    @Test
    public void test07075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07075");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addYears(0);
        mutableDateTime0.setMinuteOfDay((int) (short) 0);
        int int19 = mutableDateTime0.getWeekOfWeekyear();
        int int20 = mutableDateTime0.getMinuteOfHour();
        mutableDateTime0.addSeconds(37040809);
        java.lang.String str23 = mutableDateTime0.toString();
        mutableDateTime0.setMillis(12149543L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "2023-04-27T17:07:18.631Z" + "'", str23, "2023-04-27T17:07:18.631Z");
    }

    @Test
    public void test07076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07076");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        long long10 = dateTimeZone7.previousTransition(100L);
        int int12 = dateTimeZone7.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime13 = mutableDateTime6.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMinutes(58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime20 = localDateTime14.withDayOfWeek(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test07077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07077");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = dateTime26.toInstant();
        org.joda.time.DateTime dateTime37 = dateTime26.withDurationAdded((long) 3, 4);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getYearOfCentury();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute(53);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration51 = duration44.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType57 = periodType54.getFieldType((int) (short) 0);
        java.lang.String str58 = periodType54.toString();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration44, periodType54);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime37, periodType54);
        org.joda.time.Period period62 = period60.plusDays(26148);
        org.joda.time.DurationFieldType[] durationFieldTypeArray63 = period60.getFieldTypes();
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField70 = localDateTime68.getField((int) (byte) 0);
        java.lang.String str71 = dateTimeField70.toString();
        org.joda.time.DurationField durationField72 = dateTimeField70.getDurationField();
        long long74 = durationField72.getMillis((int) (byte) 100);
        boolean boolean75 = durationField72.isPrecise();
        org.joda.time.DurationFieldType durationFieldType76 = durationField72.getType();
        org.joda.time.Period period78 = period60.withField(durationFieldType76, 26398209);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 29 + "'", int11 == 29);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PeriodType[YearDayTime]" + "'", str58, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldTypeArray63);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "DateTimeField[year]" + "'", str71, "DateTimeField[year]");
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 3155695200000L + "'", long74 == 3155695200000L);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertNotNull(period78);
    }

    @Test
    public void test07078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07078");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.weekyear();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime1.getZone();
        mutableDateTime1.addMinutes(26336);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test07079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07079");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfCentury();
        int int21 = property20.getMaximumValueOverall();
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("DateTimeField[hourOfDay]");
        java.lang.String str25 = locale24.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = property20.set("2022-02-22T10:21:38.635", locale24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T10:21:38.635\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:23:29.658Z" + "'", str14, "2022-02-22T07:23:29.658Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 99 + "'", int21 == 99);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
    }

    @Test
    public void test07080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07080");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        java.util.TimeZone timeZone2 = dateTimeZone0.toTimeZone();
        int int3 = timeZone2.getDSTSavings();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
    }

    @Test
    public void test07081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07081");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean4 = localDate1.isSupported(dateTimeFieldType3);
        int int5 = localDate1.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight7 = localDate1.toDateMidnight(dateTimeZone6);
        org.joda.time.LocalDate.Property property8 = localDate1.year();
        org.joda.time.LocalDate localDate10 = localDate1.withYearOfCentury(51);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.yearOfCentury();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration22 = duration19.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration23 = duration16.minus((org.joda.time.ReadableDuration) duration22);
        mutableDateTime11.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime11.centuryOfEra();
        mutableDateTime11.addHours((int) (byte) 10);
        mutableDateTime11.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField30 = mutableDateTime11.getRoundingField();
        int int31 = mutableDateTime11.getWeekyear();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.monthOfYear();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.LocalDate localDate35 = property33.roundCeilingCopy();
        org.joda.time.LocalDate localDate37 = localDate35.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateMidnight dateMidnight40 = localDate37.toDateMidnight(dateTimeZone38);
        mutableDateTime11.setZoneRetainFields(dateTimeZone38);
        org.joda.time.Interval interval42 = localDate10.toInterval(dateTimeZone38);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(625L, dateTimeZone38);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(readableInstant48, readableInstant49, periodType50);
        org.joda.time.DurationFieldType durationFieldType53 = periodType50.getFieldType((int) (short) 0);
        java.lang.String str54 = periodType50.toString();
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.Period period59 = new org.joda.time.Period((long) 53, (long) (-1), periodType50, chronology58);
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType45.getField(chronology58);
        java.util.Locale locale61 = java.util.Locale.UK;
        java.lang.String str62 = locale61.getDisplayLanguage();
        int int63 = dateTimeField60.getMaximumTextLength(locale61);
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(chronology71);
        org.joda.time.DateTime dateTime74 = dateTime72.plusMinutes(15);
        org.joda.time.DateTime dateTime75 = localDateTime68.toDateTime((org.joda.time.ReadableInstant) dateTime72);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime77 = localDateTime68.toDateTime(dateTimeZone76);
        java.util.Locale locale78 = java.util.Locale.getDefault();
        java.lang.String str79 = dateTimeField60.getAsShortText((org.joda.time.ReadablePartial) localDateTime68, locale78);
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property83 = localDateTime80.hourOfDay();
        org.joda.time.DateTimeField dateTimeField84 = property83.getField();
        boolean boolean86 = property83.equals((java.lang.Object) 10L);
        long long87 = property83.remainder();
        java.lang.String str88 = property83.getAsText();
        org.joda.time.LocalDateTime localDateTime89 = property83.roundCeilingCopy();
        org.joda.time.Chronology chronology91 = null;
        java.util.Locale locale92 = java.util.Locale.GERMAN;
        java.util.Locale locale93 = java.util.Locale.CANADA;
        java.lang.String str94 = locale92.getDisplayVariant(locale93);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket95 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology91, locale93);
        java.lang.String str96 = locale93.getDisplayScript();
        int int97 = property83.getMaximumShortTextLength(locale93);
        java.lang.String str98 = locale78.getDisplayCountry(locale93);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str99 = localDate43.toString("2022-02-22T07:18:47.577Z", locale93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateMidnight40);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(durationFieldType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PeriodType[YearDayTime]" + "'", str54, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "English" + "'", str62, "English");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 4 + "'", int63 == 4);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(locale78);
// flaky:         org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "623" + "'", str79, "623");
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long87 + "' != '" + 1409706L + "'", long87 == 1409706L);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "7" + "'", str88, "7");
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "de");
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 2 + "'", int97 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str98 + "' != '" + "Canada" + "'", str98, "Canada");
    }

    @Test
    public void test07082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07082");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod14.addSeconds(292278993);
        mutablePeriod14.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime20 = dateTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        int int25 = dateTime20.get(dateTimeFieldType23);
        org.joda.time.Period period27 = org.joda.time.Period.millis(62166);
        org.joda.time.DateTime dateTime28 = dateTime20.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime20.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.dayOfYear();
        mutableDateTime29.setWeekyear(26513);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 29 + "'", int13 == 29);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1424 + "'", int25 == 1424);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
    }

    @Test
    public void test07083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07083");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology13);
        int int18 = mutableDateTime17.getEra();
        int int19 = mutableDateTime17.getMillisOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 26609745 + "'", int19 == 26609745);
    }

    @Test
    public void test07084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07084");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        int int4 = localDate0.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight6 = localDate0.toDateMidnight(dateTimeZone5);
        org.joda.time.LocalDate.Property property7 = localDate0.year();
        org.joda.time.LocalDate localDate9 = localDate0.withYearOfCentury(51);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addHours((int) (byte) 10);
        mutableDateTime10.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField29 = mutableDateTime10.getRoundingField();
        int int30 = mutableDateTime10.getWeekyear();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.LocalDate localDate34 = property32.roundCeilingCopy();
        org.joda.time.LocalDate localDate36 = localDate34.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = localDate36.toDateMidnight(dateTimeZone37);
        mutableDateTime10.setZoneRetainFields(dateTimeZone37);
        org.joda.time.Interval interval41 = localDate9.toInterval(dateTimeZone37);
        org.joda.time.LocalDate.Property property42 = localDate9.yearOfEra();
        org.joda.time.DateTimeField dateTimeField43 = property42.getField();
        org.joda.time.LocalDate localDate44 = property42.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate46 = property42.addWrapFieldToCopy(26417406);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate48 = localDate46.withEra(26148);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26148 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(interval41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(localDate44);
        org.junit.Assert.assertNotNull(localDate46);
    }

    @Test
    public void test07085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07085");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate.Property property6 = localDate5.centuryOfEra();
        org.joda.time.Interval interval7 = localDate5.toInterval();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod10.clear();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration17 = duration13.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes(15);
        org.joda.time.Interval interval22 = duration17.toIntervalTo((org.joda.time.ReadableInstant) dateTime21);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) interval22);
        mutablePeriod10.setMillis((int) ' ');
        mutablePeriod10.setPeriod((long) 2);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.LocalDate localDate31 = property29.roundCeilingCopy();
        org.joda.time.LocalDate localDate33 = localDate31.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate35 = localDate31.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate37 = localDate35.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        mutableDateTime38.add((long) 'a');
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.yearOfCentury();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period44 = duration43.toPeriod();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration49 = duration46.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration50 = duration43.minus((org.joda.time.ReadableDuration) duration49);
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration43);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime38.centuryOfEra();
        mutableDateTime38.addHours((int) (byte) 10);
        int int55 = mutableDateTime38.getSecondOfDay();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property57 = localDate56.monthOfYear();
        org.joda.time.LocalDate.Property property58 = localDate56.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(readableInstant59, readableInstant60, periodType61);
        org.joda.time.DurationFieldType durationFieldType64 = periodType61.getFieldType((int) (short) 0);
        boolean boolean65 = localDate56.isSupported(durationFieldType64);
        mutableDateTime38.add(durationFieldType64, (-292275054));
        org.joda.time.LocalDate localDate69 = localDate35.withFieldAdded(durationFieldType64, 53);
        boolean boolean70 = mutablePeriod10.isSupported(durationFieldType64);
        boolean boolean71 = localDate5.isSupported(durationFieldType64);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period(readableDuration72, readableInstant73);
        org.joda.time.Period period76 = period74.withDays((int) (byte) 1);
        org.joda.time.Period period78 = period76.minusWeeks(100);
        org.joda.time.Period period79 = period78.negated();
        org.joda.time.LocalDate localDate80 = localDate5.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.Instant instant83 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime84 = instant83.toDateTime();
        org.joda.time.Instant instant85 = instant83.toInstant();
        org.joda.time.Chronology chronology86 = instant85.getChronology();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(964100L, (long) 26172069, chronology86);
        org.joda.time.LocalDate localDate88 = localDate5.plus((org.joda.time.ReadablePeriod) mutablePeriod87);
        org.joda.time.ReadableDuration readableDuration89 = null;
        org.joda.time.ReadableInstant readableInstant90 = null;
        org.joda.time.Period period91 = new org.joda.time.Period(readableDuration89, readableInstant90);
        org.joda.time.Period period93 = period91.withDays((int) (byte) 1);
        int int95 = period93.getValue(0);
        org.joda.time.LocalDate localDate96 = localDate88.plus((org.joda.time.ReadablePeriod) period93);
        org.joda.time.LocalDate localDate98 = localDate96.minusYears(0);
        int int99 = localDate96.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(property52);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 62609 + "'", int55 == 62609);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(period93);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 0 + "'", int95 == 0);
        org.junit.Assert.assertNotNull(localDate96);
        org.junit.Assert.assertNotNull(localDate98);
        org.junit.Assert.assertTrue("'" + int99 + "' != '" + 10 + "'", int99 == 10);
    }

    @Test
    public void test07086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07086");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.yearOfEra();
        org.joda.time.Chronology chronology34 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology26.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField36 = chronology26.yearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.099S" + "'", str17, "PT0.099S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
    }

    @Test
    public void test07087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07087");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTimeISO();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) (byte) -1);
        int int12 = localDate11.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone13.getMillisKeepLocal(dateTimeZone15, (long) 44);
        org.joda.time.DateTime dateTime18 = localDate11.toDateTimeAtMidnight(dateTimeZone13);
        java.util.Locale locale20 = null;
        java.lang.String str21 = dateTimeZone13.getName(946000L, locale20);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(dateTimeZone13);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.toPeriod();
        org.joda.time.PeriodType periodType35 = period30.getPeriodType();
        org.joda.time.Period period36 = period26.normalizedStandard(periodType35);
        org.joda.time.Period period38 = period36.withSeconds(10);
        org.joda.time.Minutes minutes39 = period36.toStandardMinutes();
        org.joda.time.DurationFieldType[] durationFieldTypeArray40 = period36.getFieldTypes();
        org.joda.time.Period period42 = period36.withYears(999);
        org.joda.time.Period period44 = period42.multipliedBy(443);
        org.joda.time.Period period46 = period42.minusMonths(1439);
        org.joda.time.DateTime dateTime47 = dateTime23.plus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime48 = dateTime9.minus((org.joda.time.ReadablePeriod) period42);
        org.joda.time.DateTime dateTime50 = dateTime9.minusMillis(26601);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1969 + "'", int12 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 44L + "'", long17 == 44L);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.099S" + "'", str33, "PT0.099S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(durationFieldTypeArray40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test07088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07088");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        boolean boolean6 = dateTime4.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology7 = dateTime4.getChronology();
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology7, locale8, (java.lang.Integer) 50);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        java.util.TimeZone timeZone14 = dateTimeZone11.toTimeZone();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test07089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07089");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(555370422L);
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property3 = localDate2.dayOfYear();
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period9 = period7.minusSeconds((-1));
        java.lang.String str10 = period7.toString();
        org.joda.time.LocalDate localDate12 = localDate2.withPeriodAdded((org.joda.time.ReadablePeriod) period7, 3);
        org.joda.time.DateTime dateTime13 = localDate12.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology15, locale17);
        java.lang.Object obj20 = dateTimeParserBucket19.saveState();
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeParserBucket19.getZone();
        org.joda.time.DateTime dateTime22 = localDate12.toDateTimeAtStartOfDay(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMonths((int) 'u');
        org.joda.time.DateTime dateTime25 = dateTime22.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException29 = new java.io.IOException("");
        java.io.IOException iOException30 = new java.io.IOException((java.lang.Throwable) iOException29);
        boolean boolean31 = mutableDateTime27.equals((java.lang.Object) iOException29);
        org.joda.time.Duration duration34 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime27.add((org.joda.time.ReadableDuration) duration34, 1424);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property38 = localDate37.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = property38.getField();
        org.joda.time.LocalDate localDate40 = property38.roundCeilingCopy();
        org.joda.time.LocalDate localDate42 = localDate40.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        org.joda.time.DateMidnight dateMidnight45 = localDate42.toDateMidnight(dateTimeZone43);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateMidnight45);
        org.joda.time.Duration duration47 = duration34.toDuration();
        org.joda.time.DateTime dateTime48 = dateTime22.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime48);
        long long50 = duration1.getMillis();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.099S" + "'", str10, "PT0.099S");
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(obj20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateMidnight45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 47984004460800000L + "'", long50 == 47984004460800000L);
    }

    @Test
    public void test07090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07090");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(100);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration23 = duration20.withDurationAdded((long) (short) 100, (int) ' ');
        long long24 = duration23.getMillis();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.months();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime34, periodType35);
        boolean boolean37 = dateTime28.isBefore((org.joda.time.ReadableInstant) dateTime32);
        int int38 = dateTime32.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant39, readableInstant40, periodType41);
        org.joda.time.PeriodType periodType43 = periodType41.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime32, periodType41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMinutes(15);
        org.joda.time.Chronology chronology49 = dateTime46.getChronology();
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.Chronology chronology53 = instant52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.eras();
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.now(chronology53);
        org.joda.time.DurationField durationField56 = chronology53.eras();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.hourOfDay();
        org.joda.time.DateTime dateTime58 = dateTime46.withChronology(chronology53);
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime59.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime61 = property60.getMutableDateTime();
        boolean boolean62 = dateTime58.isBefore((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.Instant instant63 = new org.joda.time.Instant();
        org.joda.time.Instant instant65 = instant63.withMillis(0L);
        org.joda.time.Chronology chronology66 = instant65.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.eras();
        long long71 = chronology66.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField72 = chronology66.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology66.minuteOfDay();
        mutableDateTime61.setChronology(chronology66);
        org.joda.time.DateTime dateTime75 = dateTime32.toDateTime(chronology66);
        org.joda.time.DateTime dateTime77 = dateTime32.plus(953015L);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone79 = dateTimeZone78.toTimeZone();
        org.joda.time.DateTime dateTime80 = dateTime77.toDateTime(dateTimeZone78);
        mutableDateTime0.setZone(dateTimeZone78);
        java.lang.String str83 = dateTimeZone78.getNameKey(12700800000L);
        long long87 = dateTimeZone78.convertLocalToUTC(2766079844187048L, false, 11693L);
        int int89 = dateTimeZone78.getOffsetFromLocal((long) 177);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 86403200L + "'", long24 == 86403200L);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 105144L + "'", long71 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertNotNull(timeZone79);
// flaky:         org.junit.Assert.assertEquals(timeZone79.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "UTC" + "'", str83, "UTC");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 2766079844187048L + "'", long87 == 2766079844187048L);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test07091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07091");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusYears(26148950);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period22 = period20.minusSeconds((-1));
        org.joda.time.Period period24 = period22.multipliedBy((int) '#');
        org.joda.time.Minutes minutes25 = period24.toStandardMinutes();
        int int26 = period24.getYears();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime13.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.LocalDateTime.Property property28 = localDateTime13.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime13.plusSeconds(62254);
        org.joda.time.LocalDateTime.Property property31 = localDateTime13.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime32.copy();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime32.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property36.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime39.toMutableDateTime(dateTimeZone40);
        mutableDateTime42.add(51L);
        int int45 = mutableDateTime42.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusSeconds((int) (byte) 10);
        java.lang.Object obj55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(obj55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime52.minus((org.joda.time.ReadableDuration) duration58);
        java.util.TimeZone timeZone62 = java.util.TimeZone.getTimeZone("2022-02-22T10:15:47.721");
        boolean boolean63 = duration58.equals((java.lang.Object) "2022-02-22T10:15:47.721");
        org.joda.time.Duration duration65 = duration58.withMillis(27418772L);
        org.joda.time.Duration duration67 = duration58.plus(963012L);
        mutableDateTime42.add((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Period period70 = org.joda.time.Period.days(62176);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusMinutes(15);
        org.joda.time.DateTime dateTime82 = localDateTime75.toDateTime((org.joda.time.ReadableInstant) dateTime79);
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone84 = dateTimeZone83.toTimeZone();
        org.joda.time.DateTime dateTime85 = dateTime82.withZone(dateTimeZone83);
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.yearDay();
        java.lang.String str88 = periodType87.getName();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(100L, periodType87);
        org.joda.time.DateTime dateTime90 = dateTime85.plus((org.joda.time.ReadablePeriod) mutablePeriod89);
        org.joda.time.Duration duration91 = period70.toDurationTo((org.joda.time.ReadableInstant) dateTime90);
        int int92 = duration58.compareTo((org.joda.time.ReadableDuration) duration91);
        org.joda.time.LocalDateTime localDateTime94 = localDateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration91, 640);
        org.joda.time.LocalDateTime.Property property95 = localDateTime13.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime97 = localDateTime13.withYearOfEra(26266);
        int int98 = localDateTime13.size();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(minutes25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "YearDay" + "'", str88, "YearDay");
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + (-1) + "'", int92 == (-1));
        org.junit.Assert.assertNotNull(localDateTime94);
        org.junit.Assert.assertNotNull(property95);
        org.junit.Assert.assertNotNull(localDateTime97);
        org.junit.Assert.assertTrue("'" + int98 + "' != '" + 4 + "'", int98 == 4);
    }

    @Test
    public void test07092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07092");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod14.addSeconds(292278993);
        mutablePeriod14.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime20 = dateTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        int int25 = dateTime20.get(dateTimeFieldType23);
        org.joda.time.Period period27 = org.joda.time.Period.millis(62166);
        org.joda.time.DateTime dateTime28 = dateTime20.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime20.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime32 = property30.addWrapField(0);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.yearOfCentury();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration45 = duration38.minus((org.joda.time.ReadableDuration) duration44);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime33.centuryOfEra();
        mutableDateTime33.addHours((int) (byte) 10);
        mutableDateTime33.addWeeks(100);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(readableInstant54, readableInstant55, periodType56);
        org.joda.time.DurationFieldType durationFieldType59 = periodType56.getFieldType((int) (short) 0);
        java.lang.String str60 = periodType56.toString();
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.Chronology chronology64 = instant63.getChronology();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 53, (long) (-1), periodType56, chronology64);
        org.joda.time.LocalDate localDate66 = org.joda.time.LocalDate.now(chronology64);
        org.joda.time.DateTimeField dateTimeField67 = chronology64.dayOfWeek();
        mutableDateTime33.setChronology(chronology64);
        org.joda.time.DateTimeField dateTimeField69 = chronology64.hourOfHalfday();
        org.joda.time.DurationField durationField70 = chronology64.months();
        org.joda.time.DateTimeField dateTimeField71 = chronology64.weekyear();
        org.joda.time.DateTimeZone dateTimeZone72 = chronology64.getZone();
        org.joda.time.MutableDateTime mutableDateTime73 = mutableDateTime32.toMutableDateTime(dateTimeZone72);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 30 + "'", int13 == 30);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1424 + "'", int25 == 1424);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PeriodType[YearDayTime]" + "'", str60, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeZone72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
    }

    @Test
    public void test07093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07093");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withOffsetParsed();
        int int15 = dateTimeFormatter14.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter14.withPivotYear((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = dateTimeZone19.getName(100L, locale21);
        java.lang.String str24 = dateTimeZone19.toString();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) 1970, dateTimeZone19);
        java.lang.String str27 = dateTimeZone19.getShortName((long) 6);
        long long29 = dateTimeZone19.nextTransition(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter14.withZone(dateTimeZone19);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(0L, dateTimeZone19);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 105144L + "'", long12 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2000 + "'", int15 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "German" + "'", str22, "German");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "UTC" + "'", str24, "UTC");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "+00:00" + "'", str27, "+00:00");
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test07094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07094");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime17.toString(dateTimeFormatter19);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime17);
        mutableDateTime15.addDays(22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (short) 100, chronology25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str28 = durationFieldType27.getName();
        boolean boolean29 = localTime26.isSupported(durationFieldType27);
        mutableDateTime15.add(durationFieldType27, 3);
        mutableDateTime15.addMonths(62151);
        mutableDateTime15.addMonths(26281);
        mutableDateTime15.setMillis((long) 62254);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:23:30.160Z" + "'", str20, "2022-02-22T07:23:30.160Z");
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weeks" + "'", str28, "weeks");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07095");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(26501104, 139, 4499, 26346587, 26510057, 26270836, 63);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26346587 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07096");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale4);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (short) 100, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str12 = durationFieldType11.getName();
        boolean boolean13 = localTime10.isSupported(durationFieldType11);
        boolean boolean14 = dateTimeParserBucket6.restoreState((java.lang.Object) boolean13);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        dateTimeParserBucket6.setZone(dateTimeZone18);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 435, dateTimeZone18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getYearOfCentury();
        int int25 = dateTime23.getWeekyear();
        org.joda.time.DateTime dateTime26 = dateTime23.withEarlierOffsetAtOverlap();
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime26.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        mutableDateTime28.setZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localTime21.toDateTimeToday(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj34 = mutableDateTime33.clone();
        mutableDateTime33.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.dayOfWeek();
        int int38 = mutableDateTime33.getMinuteOfDay();
        boolean boolean39 = dateTime32.isEqual((org.joda.time.ReadableInstant) mutableDateTime33);
        long long40 = mutableDateTime33.getMillis();
        int int41 = mutableDateTime33.getDayOfMonth();
        mutableDateTime33.addDays(26589);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weeks" + "'", str12, "weeks");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T07:23:30.246Z" + "'", str27, "2022-02-22T07:23:30.246Z");
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "2022-02-22T07:23:30.247Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "2022-02-22T07:23:30.247Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "2022-02-22T07:23:30.247Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1645488000046L + "'", long40 == 1645488000046L);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
    }

    @Test
    public void test07097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07097");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale4);
        java.lang.String str9 = nameProvider0.getShortName(locale4, "\u4e2d\u56fd", "2022-02-22t10:15:47.721_53_2022-02-22T07:15:46.416Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean14 = localDate11.isSupported(dateTimeFieldType13);
        int int15 = localDate11.getDayOfYear();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean18 = localDate16.isSupported(dateTimeFieldType17);
        org.joda.time.LocalDate.Property property19 = localDate11.property(dateTimeFieldType17);
        java.util.Locale locale20 = java.util.Locale.UK;
        int int21 = property19.getMaximumTextLength(locale20);
        java.lang.String str24 = nameProvider0.getName(locale20, "minutes", "1970 (MILLIS)");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology27 = null;
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.lang.String str30 = locale28.getDisplayVariant(locale29);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology27, locale29);
        java.lang.String str32 = locale29.getDisplayScript();
        java.util.Locale locale33 = locale29.stripExtensions();
        java.lang.String str34 = locale33.getDisplayCountry();
        java.util.Locale.setDefault(locale33);
        java.lang.String str38 = nameProvider0.getShortName(locale33, "7", "Property[secondOfDay]");
        java.util.Locale locale41 = new java.util.Locale("1970", "millis");
        java.util.Locale locale42 = locale41.stripExtensions();
        java.util.Locale.setDefault(locale41);
        java.lang.String str46 = nameProvider0.getName(locale41, "2022-02-22T07:15:58.706Z", "2022-02-23T07:17:16.820Z");
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.centuryOfEra();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime47.dayOfWeek();
        mutableDateTime47.setWeekyear(19045);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.monthOfYear();
        org.joda.time.DateTimeField dateTimeField55 = property54.getField();
        org.joda.time.LocalDate localDate56 = property54.roundCeilingCopy();
        org.joda.time.Chronology chronology57 = localDate56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime61 = localDate56.toDateTimeAtMidnight(dateTimeZone60);
        org.joda.time.DateTime.Property property62 = dateTime61.monthOfYear();
        org.joda.time.DateTime dateTime63 = property62.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime65 = property62.addWrapFieldToCopy(26197957);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime65.getZone();
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate((java.lang.Object) 2273398704000000L, dateTimeZone66);
        mutableDateTime47.setZoneRetainFields(dateTimeZone66);
        java.util.Locale locale73 = new java.util.Locale("", "Property[weekOfWeekyear]", "\u4e2d\u56fd");
        java.lang.String str74 = dateTimeZone66.getName((long) 62434, locale73);
        java.lang.String str77 = nameProvider0.getShortName(locale73, "2022-02-24T00:00:00.046+53:00", "Mittwoch");
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 53 + "'", int15 == 53);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2 + "'", int21 == 2);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Canada" + "'", str34, "Canada");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertEquals(locale41.toString(), "1970_MILLIS");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "1970_MILLIS");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
// flaky:         org.junit.Assert.assertEquals(locale73.toString(), "\u4e2d\u56fd");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+53:00" + "'", str74, "+53:00");
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test07098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07098");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period9 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration8);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.Interval interval13 = duration8.toIntervalTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean16 = localDate14.isSupported(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property17 = localDate14.yearOfEra();
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str23 = duration22.toString();
        org.joda.time.Instant instant24 = instant18.minus((org.joda.time.ReadableDuration) duration22);
        int int25 = property17.getDifference((org.joda.time.ReadableInstant) instant18);
        org.joda.time.Duration duration28 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant29 = instant18.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str32 = duration31.toString();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours35 = duration34.toStandardHours();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        int int38 = dateTime37.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Duration duration40 = duration31.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period43 = duration42.toPeriod();
        org.joda.time.Duration duration45 = duration42.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        mutableDateTime46.add((long) 'a');
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime46.yearOfCentury();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period52 = duration51.toPeriod();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration57 = duration54.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration58 = duration51.minus((org.joda.time.ReadableDuration) duration57);
        mutableDateTime46.add((org.joda.time.ReadableDuration) duration51);
        boolean boolean60 = duration45.isShorterThan((org.joda.time.ReadableDuration) duration51);
        boolean boolean61 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Instant instant62 = instant29.minus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Interval interval63 = duration8.toIntervalTo((org.joda.time.ReadableInstant) instant62);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str69 = duration68.toString();
        org.joda.time.Instant instant70 = instant64.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.MutableDateTime mutableDateTime71 = instant64.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.centuryOfEra();
        mutableDateTime71.addYears(22);
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) mutableDateTime71);
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime77.setSecondOfMinute(53);
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime77.copy();
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(readableInstant81, readableInstant82, periodType83);
        org.joda.time.PeriodType periodType85 = periodType83.withHoursRemoved();
        int int86 = periodType85.size();
        org.joda.time.Period period87 = duration8.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime77, periodType85);
        org.joda.time.PeriodType periodType88 = periodType85.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(217080146L, periodType88);
        org.joda.time.PeriodType periodType90 = periodType88.withMillisRemoved();
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 30 + "'", int12 == 30);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT86400S" + "'", str23, "PT86400S");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT86400S" + "'", str32, "PT86400S");
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(hours35);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 30 + "'", int38 == 30);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(interval63);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT86400S" + "'", str69, "PT86400S");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 5 + "'", int86 == 5);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodType90);
    }

    @Test
    public void test07099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07099");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant4, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalTime localTime13 = dateTime9.toLocalTime();
        org.joda.time.LocalTime localTime14 = dateTime9.toLocalTime();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:23:30.421Z" + "'", str10, "2022-02-22T07:23:30.421Z");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test07100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07100");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime4.plus(0L);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.yearOfCentury();
        mutableDateTime9.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration17, readableInstant18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period25 = period23.minusSeconds((-1));
        java.lang.String str26 = period23.toString();
        org.joda.time.Period period27 = period23.toPeriod();
        org.joda.time.PeriodType periodType28 = period23.getPeriodType();
        org.joda.time.Period period29 = period19.normalizedStandard(periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = null;
        int int31 = periodType28.indexOf(durationFieldType30);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType28, chronology35);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime9.toMutableDateTime(chronology35);
        mutableDateTime41.setDate((long) (-292275054));
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) (short) 100, chronology45);
        int int47 = localTime46.getMillisOfDay();
        org.joda.time.LocalTime.Property property48 = localTime46.millisOfSecond();
        org.joda.time.DurationField durationField49 = property48.getLeapDurationField();
        java.lang.String str50 = property48.getName();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale54.getDisplayName();
        java.lang.String str56 = dateTimeZone52.getName(100L, locale54);
        org.joda.time.LocalTime localTime57 = property48.setCopy("615", locale54);
        org.joda.time.LocalTime localTime59 = property48.addWrapFieldToCopy(4);
        org.joda.time.LocalTime localTime61 = property48.setCopy("641");
        org.joda.time.LocalTime localTime62 = property48.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = property48.getFieldType();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime41.property(dateTimeFieldType63);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime(dateTimeZone67);
        org.joda.time.LocalTime localTime70 = localTime68.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology71 = localTime70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.millisOfDay();
        org.joda.time.DateTimeField dateTimeField74 = chronology71.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField75 = chronology71.dayOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology71.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField77 = chronology71.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType63.getField(chronology71);
        org.joda.time.DateTime dateTime79 = dateTime4.toDateTime(chronology71);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 30 + "'", int5 == 30);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.099S" + "'", str26, "PT0.099S");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 100 + "'", int47 == 100);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNull(durationField49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "millisOfSecond" + "'", str50, "millisOfSecond");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str55, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(localTime62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTime79);
    }

    @Test
    public void test07101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07101");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.DateTime dateTime9 = mutableDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.minusWeeks(62166);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) 26150565);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = instant14.toInstant();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod19.clear();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration26 = duration22.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Interval interval31 = duration26.toIntervalTo((org.joda.time.ReadableInstant) dateTime30);
        mutablePeriod19.setPeriod((org.joda.time.ReadableInterval) interval31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant33, readableInstant34, periodType35);
        org.joda.time.DurationFieldType durationFieldType38 = periodType35.getFieldType((int) (short) 0);
        int int39 = mutablePeriod19.get(durationFieldType38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        mutableDateTime42.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime42.copy();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.eras();
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.now(chronology51);
        org.joda.time.DurationField durationField54 = chronology51.eras();
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration41, chronology51);
        org.joda.time.Instant instant56 = instant16.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration57 = duration41.toDuration();
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period62 = duration61.toPeriod();
        org.joda.time.Duration duration65 = duration61.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime59, (org.joda.time.ReadableDuration) duration65);
        org.joda.time.Instant instant67 = dateTime59.toInstant();
        org.joda.time.DateTime dateTime70 = dateTime59.withDurationAdded((long) 3, 4);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardDays((long) 26148);
        org.joda.time.Duration duration75 = duration72.withDurationAdded((long) 51, 26197957);
        org.joda.time.DateTime dateTime76 = dateTime59.minus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Duration duration78 = duration72.plus(1645514240151L);
        boolean boolean79 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration72);
        org.joda.time.Days days80 = duration41.toStandardDays();
        org.joda.time.MutableDateTime mutableDateTime81 = org.joda.time.MutableDateTime.now();
        mutableDateTime81.add((long) 'a');
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime81.yearOfCentury();
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period87 = duration86.toPeriod();
        org.joda.time.Duration duration89 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration92 = duration89.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration93 = duration86.minus((org.joda.time.ReadableDuration) duration92);
        mutableDateTime81.add((org.joda.time.ReadableDuration) duration86);
        java.lang.String str95 = duration86.toString();
        int int96 = duration41.compareTo((org.joda.time.ReadableDuration) duration86);
        boolean boolean97 = duration13.isEqual((org.joda.time.ReadableDuration) duration86);
        org.joda.time.DateTime dateTime99 = dateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration86, 36946953);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(days80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "PT86400S" + "'", str95, "PT86400S");
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1 + "'", int96 == 1);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
        org.junit.Assert.assertNotNull(dateTime99);
    }

    @Test
    public void test07102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07102");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime2.setSecondOfMinute(53);
        mutableDateTime2.addMonths(0);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.LocalDate localDate10 = property8.roundCeilingCopy();
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        mutableDateTime2.setChronology(chronology11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(1005101L, chronology11);
        org.joda.time.DurationField durationField15 = chronology11.centuries();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.hourOfDay();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.hourOfHalfday();
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test07103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07103");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        mutableDateTime1.addMonths(36956320);
        mutableDateTime1.addWeekyears(26195);
        mutableDateTime1.setMillisOfDay(57);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.year();
        mutableDateTime1.setDayOfWeek(4);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.hourOfDay();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test07104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07104");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours21 = duration20.toStandardHours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration17.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean47 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant48 = instant15.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours51 = duration50.toStandardHours();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        int int54 = dateTime53.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime57 = dateTime53.plus(0L);
        org.joda.time.Instant instant58 = dateTime57.toInstant();
        boolean boolean59 = instant15.isAfter((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays(1028704L);
        org.joda.time.Instant instant62 = instant15.plus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period67 = duration66.toPeriod();
        org.joda.time.Duration duration68 = duration64.minus((org.joda.time.ReadableDuration) duration66);
        long long69 = duration64.getStandardHours();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period74 = duration73.toPeriod();
        org.joda.time.Duration duration75 = duration71.minus((org.joda.time.ReadableDuration) duration73);
        boolean boolean76 = duration64.isLongerThan((org.joda.time.ReadableDuration) duration73);
        boolean boolean77 = duration61.isShorterThan((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Hours hours78 = duration73.toStandardHours();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT86400S" + "'", str18, "PT86400S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(hours21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 30 + "'", int24 == 30);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(hours51);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 30 + "'", int54 == 30);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(instant62);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(period67);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + (-229704L) + "'", long69 == (-229704L));
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(hours78);
    }

    @Test
    public void test07105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07105");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        int int7 = property4.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.roundHalfCeiling();
        org.joda.time.DateTimeField dateTimeField9 = mutableDateTime8.getRoundingField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setMonthOfYear(26445355);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26445355 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:30.699Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:30.699Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:30.699Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNull(dateTimeField9);
    }

    @Test
    public void test07106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07106");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DurationField durationField10 = chronology7.eras();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 44, chronology7);
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType2.getField(chronology7);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(0L, 3155695200000L, chronology7);
        org.joda.time.Period period14 = mutablePeriod13.toPeriod();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = dateTime16.toString(dateTimeFormatter18);
        org.joda.time.DateTime dateTime21 = dateTime16.minusMonths(22);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        org.joda.time.DateTime dateTime27 = dateTime16.withChronology(chronology25);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(chronology25);
        org.joda.time.DateTimeField dateTimeField29 = chronology25.secondOfMinute();
        boolean boolean30 = mutablePeriod13.equals((java.lang.Object) dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:23:30.714Z" + "'", str19, "2022-02-22T07:23:30.714Z");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test07107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07107");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone11);
        long long16 = dateTime15.getMillis();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1645514610745L + "'", long16 == 1645514610745L);
    }

    @Test
    public void test07108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07108");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant10 = instant3.plus((org.joda.time.ReadableDuration) duration9);
        long long11 = instant10.getMillis();
        org.joda.time.Chronology chronology12 = instant10.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.months();
        org.joda.time.Period period14 = new org.joda.time.Period((-205878993L), chronology12);
        org.joda.time.DateTimeField dateTimeField15 = chronology12.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = chronology12.getZone();
        java.lang.String str18 = dateTimeZone16.getShortName((long) 52);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone16);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalDate localDate23 = property21.roundCeilingCopy();
        org.joda.time.LocalDate localDate25 = localDate23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate27 = localDate23.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate29 = localDate27.minusMonths(47892750);
        org.joda.time.LocalDate localDate30 = localDate19.withFields((org.joda.time.ReadablePartial) localDate29);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration39 = duration35.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant40 = instant33.plus((org.joda.time.ReadableDuration) duration39);
        long long41 = instant40.getMillis();
        org.joda.time.Chronology chronology42 = instant40.getChronology();
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.DateTime dateTime46 = instant45.toDateTime();
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.months();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime52, periodType53);
        boolean boolean55 = dateTime46.isBefore((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant40, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period59 = duration58.toPeriod();
        org.joda.time.Duration duration62 = duration58.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusMinutes(15);
        org.joda.time.Interval interval67 = duration62.toIntervalTo((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Instant instant68 = instant40.minus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateTime dateTime69 = instant40.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj71 = mutableDateTime70.clone();
        mutableDateTime70.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime70.dayOfWeek();
        mutableDateTime70.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime70.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime78 = property77.roundCeiling();
        mutableDateTime78.setMillisOfDay(49);
        org.joda.time.Period period81 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant40, (org.joda.time.ReadableInstant) mutableDateTime78);
        org.joda.time.Instant instant84 = instant40.withDurationAdded((-229564796800L), 2);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((java.lang.Object) localDate29, chronology85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.LocalDate");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 86400000L + "'", long11 == 86400000L);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 86400000L + "'", long41 == 86400000L);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertNotNull(obj71);
// flaky:         org.junit.Assert.assertEquals(obj71.toString(), "2022-02-22T07:23:30.763Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj71), "2022-02-22T07:23:30.763Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj71), "2022-02-22T07:23:30.763Z");
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(mutableDateTime78);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(chronology85);
    }

    @Test
    public void test07109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07109");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        long long30 = chronology25.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField31 = chronology25.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(44L, periodType20, chronology25);
        org.joda.time.LocalDate localDate34 = localDate7.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        java.util.Date date35 = localDate34.toDate();
        org.joda.time.LocalDate.Property property36 = localDate34.year();
        org.joda.time.LocalDate localDate38 = localDate34.plusWeeks(62262);
        org.joda.time.LocalDate localDate40 = localDate38.withYear(1969);
        org.joda.time.LocalDate localDate42 = localDate38.withYearOfEra(26309);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.099S" + "'", str18, "PT0.099S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 105144L + "'", long30 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(date35);
        org.junit.Assert.assertEquals(date35.toString(), "Tue Nov 15 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
    }

    @Test
    public void test07110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07110");
        java.util.Locale locale0 = java.util.Locale.GERMAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.lang.String str2 = locale0.getDisplayVariant(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getISO3Country();
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale5);
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        java.util.Locale locale8 = java.util.Locale.FRENCH;
        java.lang.String str9 = locale5.getDisplayName(locale8);
        java.lang.String str10 = locale5.getISO3Language();
        java.util.Set<java.lang.String> strSet11 = locale5.getUnicodeLocaleAttributes();
        java.util.Locale locale12 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleKeys();
        java.lang.Object[] objArray14 = strSet13.toArray();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale18.getDisplayName();
        java.lang.String str20 = dateTimeZone16.getName(100L, locale18);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(948227L, dateTimeZone16);
        long long22 = mutableDateTime21.getMillis();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean30 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration29);
        java.lang.Object obj31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(obj31);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField39 = localDateTime37.getField((int) (byte) 0);
        long long41 = dateTimeField39.roundHalfEven((long) 1);
        int int42 = dateTime32.get(dateTimeField39);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) 'a');
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale51.getDisplayName();
        java.lang.String str53 = dateTimeField39.getAsText((org.joda.time.ReadablePartial) localDateTime47, 53, locale51);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period56 = duration55.toPeriod();
        org.joda.time.Duration duration59 = duration55.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime47.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.hourOfDay();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime61.plusMillis((int) (byte) 0);
        int int67 = localDateTime47.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        boolean boolean68 = duration24.equals((java.lang.Object) int67);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology69);
        int int71 = dateTime70.getSecondOfMinute();
        int int72 = dateTime70.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(readableInstant73, readableInstant74, periodType75);
        mutablePeriod76.setYears((int) '#');
        mutablePeriod76.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime81 = dateTime70.plus((org.joda.time.ReadablePeriod) mutablePeriod76);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime21, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime.Property property86 = dateTime85.millisOfSecond();
        org.joda.time.DateTime dateTime87 = dateTime85.toDateTime();
        int int88 = dateTime85.getMinuteOfDay();
        org.joda.time.Interval interval89 = duration24.toIntervalTo((org.joda.time.ReadableInstant) dateTime85);
        boolean boolean90 = strSet13.contains((java.lang.Object) duration24);
        boolean boolean91 = strSet11.contains((java.lang.Object) boolean90);
        java.util.Iterator<java.lang.String> strItor92 = strSet11.iterator();
        boolean boolean93 = strSet11.isEmpty();
        java.util.Spliterator<java.lang.String> strSpliterator94 = strSet11.spliterator();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "deu" + "'", str3, "deu");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u5fb7\u6587" + "'", str7, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "chinois (Chine)" + "'", str9, "chinois (Chine)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "zho" + "'", str10, "zho");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(objArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray14), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray14), "[]");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u5fb7\u6587" + "'", str19, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 948227L + "'", long22 == 948227L);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u5fb7\u6587" + "'", str52, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "53" + "'", str53, "53");
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 1 + "'", int67 == 1);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 30 + "'", int71 == 30);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2022 + "'", int72 == 2022);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertNotNull(interval89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertNotNull(strItor92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(strSpliterator94);
    }

    @Test
    public void test07111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07111");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.secondOfDay();
        int int4 = mutableDateTime0.getDayOfWeek();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = duration9.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration13 = duration6.minus((org.joda.time.ReadableDuration) duration12);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration6, 19045);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime0.toMutableDateTime();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration22 = duration18.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(15);
        org.joda.time.Interval interval27 = duration22.toIntervalTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = dateTime26.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMinutes(15);
        org.joda.time.Chronology chronology33 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime35 = dateTime30.plusHours(19045);
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTimeISO();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = duration38.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        mutableDateTime42.add((long) 'a');
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime42.yearOfCentury();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration53 = duration50.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration54 = duration47.minus((org.joda.time.ReadableDuration) duration53);
        mutableDateTime42.add((org.joda.time.ReadableDuration) duration47);
        boolean boolean56 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration58 = duration47.minus((long) (byte) 0);
        org.joda.time.DateTime dateTime59 = dateTime30.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTime dateTime61 = dateTime28.withDurationAdded((org.joda.time.ReadableDuration) duration47, 29);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime65 = dateTime63.withZoneRetainFields(dateTimeZone64);
        boolean boolean67 = dateTime65.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology68 = dateTime65.getChronology();
        org.joda.time.Instant instant69 = new org.joda.time.Instant();
        org.joda.time.Instant instant71 = instant69.withMillis(0L);
        org.joda.time.DateTime dateTime72 = instant71.toDateTime();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.months();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime74, periodType75);
        org.joda.time.DateTime.Property property77 = dateTime74.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property77.getFieldType();
        org.joda.time.DateTime.Property property79 = dateTime65.property(dateTimeFieldType78);
        boolean boolean80 = dateTime28.isSupported(dateTimeFieldType78);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime0.property(dateTimeFieldType78);
        java.util.Locale locale83 = java.util.Locale.forLanguageTag("Property[monthOfYear]");
        java.lang.String str84 = locale83.toLanguageTag();
        java.util.Calendar calendar85 = mutableDateTime0.toCalendar(locale83);
        org.joda.time.LocalDate localDate86 = org.joda.time.LocalDate.fromCalendarFields(calendar85);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "und" + "'", str84, "und");
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=3291002610952,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2074,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=105,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=23,SECOND=30,MILLISECOND=952,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate86);
    }

    @Test
    public void test07112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07112");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.set(44);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfWeek();
        mutableDateTime42.setDate((long) 26212118);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime42.copy();
        long long47 = mutableDateTime42.getMillis();
        mutableDateTime42.setMillisOfSecond(17);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod53.clear();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration60 = duration56.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(15);
        org.joda.time.Interval interval65 = duration60.toIntervalTo((org.joda.time.ReadableInstant) dateTime64);
        mutablePeriod53.setPeriod((org.joda.time.ReadableInterval) interval65);
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(readableInstant67, readableInstant68, periodType69);
        org.joda.time.DurationFieldType durationFieldType72 = periodType69.getFieldType((int) (short) 0);
        int int73 = mutablePeriod53.get(durationFieldType72);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now();
        mutableDateTime76.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime79 = mutableDateTime76.copy();
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime76.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration75, (org.joda.time.ReadableInstant) mutableDateTime76);
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.Instant instant84 = instant82.withMillis(0L);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.joda.time.DurationField durationField86 = chronology85.eras();
        org.joda.time.LocalTime localTime87 = org.joda.time.LocalTime.now(chronology85);
        org.joda.time.DurationField durationField88 = chronology85.eras();
        mutablePeriod53.setPeriod((org.joda.time.ReadableDuration) duration75, chronology85);
        org.joda.time.DateTimeField dateTimeField90 = chronology85.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField91 = chronology85.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField92 = chronology85.minuteOfHour();
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod(962578L, chronology85);
        org.joda.time.MutableDateTime mutableDateTime94 = org.joda.time.MutableDateTime.now(chronology85);
        mutableDateTime42.setChronology(chronology85);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[YearDayTime]" + "'", str35, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
// flaky:         org.junit.Assert.assertTrue("'" + long47 + "' != '" + 26611011L + "'", long47 == 26611011L);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(interval65);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(durationFieldType72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(mutableDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(localTime87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(dateTimeField91);
        org.junit.Assert.assertNotNull(dateTimeField92);
        org.junit.Assert.assertNotNull(mutableDateTime94);
    }

    @Test
    public void test07113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07113");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean12 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration13 = duration3.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        int int17 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime15.plus((long) 15);
        org.joda.time.DateTime.Property property20 = dateTime15.year();
        org.joda.time.DateTime dateTime21 = property20.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property22 = dateTime21.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime21.toMutableDateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTime dateTime32 = localDate28.toDateTimeAtCurrentTime(dateTimeZone30);
        int int33 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime32);
        int int34 = dateTime32.getCenturyOfEra();
        org.joda.time.DateTime dateTime36 = dateTime32.withWeekyear(44);
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant39, readableInstant40, periodType41);
        org.joda.time.DurationFieldType durationFieldType44 = periodType41.getFieldType((int) (short) 0);
        java.lang.String str45 = periodType41.toString();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 53, (long) (-1), periodType41, chronology49);
        org.joda.time.PeriodType periodType51 = periodType41.withMonthsRemoved();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableInstant) dateTime32, periodType41);
        org.joda.time.Period period53 = period52.toPeriod();
        org.joda.time.Period period55 = period52.minusHours(26184);
        org.joda.time.PeriodType periodType56 = period55.getPeriodType();
        java.lang.Object obj57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(obj57);
        boolean boolean60 = dateTime58.isBefore((long) 7);
        java.lang.String str61 = dateTime58.toString();
        org.joda.time.DateTime dateTime63 = dateTime58.minus((long) 7);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Chronology chronology67 = instant66.getChronology();
        org.joda.time.DateTime dateTime68 = dateTime58.toDateTime(chronology67);
        org.joda.time.Period period69 = duration13.toPeriod(periodType56, chronology67);
        java.lang.String str70 = periodType56.getName();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1097130L, (long) 936, periodType56);
        mutablePeriod71.addMinutes(9086);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 20 + "'", int34 == 20);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PeriodType[YearDayTime]" + "'", str45, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T07:23:30.992Z" + "'", str61, "2022-02-22T07:23:30.992Z");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "YearDayTime" + "'", str70, "YearDayTime");
    }

    @Test
    public void test07114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07114");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Instant instant17 = instant4.withMillis((long) 26172069);
        org.joda.time.Chronology chronology18 = instant4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = instant4.toMutableDateTime();
        mutableDateTime19.addWeeks(442);
        mutableDateTime19.add(964423L);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
    }

    @Test
    public void test07115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07115");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime dateTime7 = dateTime1.plusDays(0);
        org.joda.time.DateTime dateTime9 = dateTime1.withYearOfEra(7);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean17 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration16);
        java.lang.Object obj18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField26 = localDateTime24.getField((int) (byte) 0);
        long long28 = dateTimeField26.roundHalfEven((long) 1);
        int int29 = dateTime19.get(dateTimeField26);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withCenturyOfEra((int) 'a');
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getDisplayName();
        java.lang.String str40 = dateTimeField26.getAsText((org.joda.time.ReadablePartial) localDateTime34, 53, locale38);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period43 = duration42.toPeriod();
        org.joda.time.Duration duration46 = duration42.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime34.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property51 = localDateTime48.hourOfDay();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusMillis((int) (byte) 0);
        int int54 = localDateTime34.compareTo((org.joda.time.ReadablePartial) localDateTime48);
        boolean boolean55 = duration11.equals((java.lang.Object) int54);
        long long56 = duration11.getMillis();
        org.joda.time.Duration duration57 = duration11.toDuration();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.lang.String str62 = locale61.getDisplayName();
        java.lang.String str63 = dateTimeZone59.getName(100L, locale61);
        java.lang.String str65 = dateTimeZone59.getShortName(3600000L);
        int int67 = dateTimeZone59.getOffset((long) 62176);
        boolean boolean68 = dateTimeZone59.isFixed();
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime1.toMutableDateTime(dateTimeZone59);
        int int70 = mutableDateTime69.getWeekyear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u5fb7\u6587" + "'", str39, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "53" + "'", str40, "53");
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100000L + "'", long56 == 100000L);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\u5fb7\u6587" + "'", str62, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "+00:00" + "'", str65, "+00:00");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(mutableDateTime69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 2022 + "'", int70 == 2022);
    }

    @Test
    public void test07116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07116");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        mutableDateTime0.setWeekyear((int) 'u');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setHourOfDay(37338598);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37338598 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test07117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07117");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = duration15.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration19 = duration12.minus((org.joda.time.ReadableDuration) duration18);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime7.centuryOfEra();
        mutableDateTime7.addHours((int) (byte) 10);
        mutableDateTime7.addWeeks(20);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.getDisplayScript();
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Calendar calendar31 = mutableDateTime7.toCalendar(locale28);
        boolean boolean32 = dateTimeParserBucket5.restoreState((java.lang.Object) locale28);
        dateTimeParserBucket5.setOffset(26342193);
        java.lang.Object obj35 = dateTimeParserBucket5.saveState();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u56fd" + "'", str30, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1657733011203,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=194,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=23,SECOND=31,MILLISECOND=203,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(obj35);
    }

    @Test
    public void test07118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07118");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = mutableDateTime17.getRoundingField();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime23 = localDate19.toDateTimeAtCurrentTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = localDate19.toDateTimeAtCurrentTime();
        boolean boolean25 = dateTime24.isEqualNow();
        org.joda.time.DateTime dateTime27 = dateTime24.plus(1026189L);
        org.joda.time.DateTime.Property property28 = dateTime24.year();
        boolean boolean29 = mutableDateTime17.equals((java.lang.Object) property28);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setHourOfDay(320);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 320 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07119");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime34 = property33.roundCeiling();
        java.lang.String str35 = property33.getAsShortText();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.099S" + "'", str17, "PT0.099S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "26612" + "'", str35, "26612");
    }

    @Test
    public void test07120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07120");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime12.withChronology(chronology19);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.getMutableDateTime();
        boolean boolean28 = dateTime24.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.setHourOfDay(0);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        mutablePeriod35.setYears((int) '#');
        org.joda.time.Chronology chronology39 = null;
        mutablePeriod35.add((long) 1, chronology39);
        org.joda.time.ReadableInterval readableInterval41 = null;
        mutablePeriod35.setPeriod(readableInterval41);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.millis();
        int int44 = mutablePeriod35.indexOf(durationFieldType43);
        org.joda.time.MutablePeriod mutablePeriod45 = mutablePeriod35.toMutablePeriod();
        mutableDateTime27.add((org.joda.time.ReadablePeriod) mutablePeriod45, 56);
        org.joda.time.DateTime dateTime48 = mutableDateTime27.toDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = mutableDateTime27.getZone();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 5 + "'", int44 == 5);
        org.junit.Assert.assertNotNull(mutablePeriod45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
    }

    @Test
    public void test07121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07121");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        int int6 = mutableDateTime5.getDayOfMonth();
        int int7 = mutableDateTime5.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.dayOfYear();
        org.joda.time.Chronology chronology9 = mutableDateTime5.getChronology();
        mutableDateTime5.setWeekyear(61);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.yearOfCentury();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration23 = duration20.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration24 = duration17.minus((org.joda.time.ReadableDuration) duration23);
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime12.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.roundFloor();
        mutableDateTime28.addHours(0);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime28);
        mutableDateTime28.setMillisOfDay(50);
        mutableDateTime5.setMillis((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str40 = duration39.toString();
        org.joda.time.Instant instant41 = instant35.minus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) 26157);
        org.joda.time.Period period44 = duration39.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Period period46 = period44.withHours(2);
        mutableDateTime28.add((org.joda.time.ReadablePeriod) period46, 26566267);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT86400S" + "'", str40, "PT86400S");
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(period46);
    }

    @Test
    public void test07122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07122");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.secondOfDay();
        int int4 = mutableDateTime0.getDayOfWeek();
        mutableDateTime0.addHours(43);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(15);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = localDateTime11.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime22 = dateTime20.withMinuteOfHour(46);
        org.joda.time.DateTimeZone dateTimeZone23 = dateTime22.getZone();
        org.joda.time.DateTime dateTime25 = dateTime22.minusYears(15559679);
        int int26 = mutableDateTime0.compareTo((org.joda.time.ReadableInstant) dateTime22);
        int int27 = mutableDateTime0.getYearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
    }

    @Test
    public void test07123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07123");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration20, readableInstant21);
        org.joda.time.Period period24 = period22.withDays((int) (byte) 1);
        org.joda.time.Period period26 = period24.minusWeeks(100);
        org.joda.time.Period period28 = period24.plusWeeks((int) (short) -1);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period28, 62166);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.Instant instant35 = instant33.toInstant();
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(964100L, (long) 26172069, chronology36);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) mutablePeriod37, 0);
        mutableDateTime0.setDate((long) 20);
        mutableDateTime0.addMillis(19);
        int int44 = mutableDateTime0.getDayOfYear();
        mutableDateTime0.setMinuteOfDay(152);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
    }

    @Test
    public void test07124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07124");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.Chronology chronology13 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withDefaultYear(999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withDefaultYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withPivotYear(56);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = dateTimeFormatter19.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter19.withDefaultYear((int) (short) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter22.withOffsetParsed();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes(15);
        org.joda.time.DateTime dateTime35 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime37 = localDateTime28.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour(46);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime39.getZone();
        java.lang.String str42 = dateTimeZone40.getShortName((long) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter22.withZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeFormatter43.getZone();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale48);
        java.lang.Object obj51 = dateTimeParserBucket50.saveState();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket50.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter43.withZone(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now(dateTimeZone52);
        mutableDateTime54.addHours(62435);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime54.dayOfWeek();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(dateTimePrinter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(obj51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test07125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07125");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableDuration2, readableInstant3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.Period period10 = period8.minusSeconds((-1));
        java.lang.String str11 = period8.toString();
        org.joda.time.Period period12 = period8.toPeriod();
        org.joda.time.PeriodType periodType13 = period8.getPeriodType();
        org.joda.time.Period period14 = period4.normalizedStandard(periodType13);
        java.lang.String str15 = periodType13.getName();
        org.joda.time.PeriodType periodType16 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withSecondsRemoved();
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.eras();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.clockhourOfHalfday();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.Period period28 = new org.joda.time.Period((long) 55, periodType16, chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        org.joda.time.DurationFieldType durationFieldType37 = periodType34.getFieldType((int) (short) 0);
        java.lang.String str38 = periodType34.toString();
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 53, (long) (-1), periodType34, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType29.getField(chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(3600000L, periodType16, chronology42);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.secondOfDay();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.099S" + "'", str11, "PT0.099S");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Standard" + "'", str15, "Standard");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PeriodType[YearDayTime]" + "'", str38, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(property48);
    }

    @Test
    public void test07126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07126");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardHours(302L);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration13 = duration9.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant15 = dateTime7.toInstant();
        org.joda.time.DateTime dateTime18 = dateTime7.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant19 = dateTime18.toInstant();
        boolean boolean20 = instant3.isBefore((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = instant3.toDateTimeISO();
        org.joda.time.DateTime dateTime22 = dateTime21.toDateTimeISO();
        org.joda.time.Period period23 = duration2.toPeriodTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime26.copy();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime26.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.Duration duration32 = duration25.toDuration();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        int int35 = dateTime34.getYearOfCentury();
        int int36 = dateTime34.getWeekyear();
        org.joda.time.DateTime dateTime37 = dateTime34.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property38 = dateTime34.yearOfEra();
        org.joda.time.DateTime dateTime39 = property38.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime40 = property38.roundHalfEvenCopy();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours43 = duration42.toStandardHours();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        int int46 = dateTime45.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) dateTime45);
        mutablePeriod47.addSeconds(292278993);
        mutablePeriod47.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime53 = dateTime40.minus((org.joda.time.ReadablePeriod) mutablePeriod47);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property55 = localDate54.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean57 = localDate54.isSupported(dateTimeFieldType56);
        int int58 = dateTime53.get(dateTimeFieldType56);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(readableInstant60, readableInstant61, periodType62);
        mutablePeriod63.setYears((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray66 = mutablePeriod63.getFieldTypes();
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.forFields(durationFieldTypeArray66);
        org.joda.time.Instant instant68 = new org.joda.time.Instant();
        org.joda.time.Instant instant70 = instant68.withMillis(0L);
        org.joda.time.DateTime dateTime71 = instant70.toDateTime();
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant75 = instant70.withDurationAdded((org.joda.time.ReadableDuration) duration73, 0);
        org.joda.time.Instant instant78 = instant75.withDurationAdded(25L, 26158);
        org.joda.time.DateTime dateTime79 = instant78.toDateTime();
        org.joda.time.Chronology chronology80 = instant78.getChronology();
        org.joda.time.Period period81 = new org.joda.time.Period((long) 56, periodType67, chronology80);
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime53, periodType67);
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableDuration) duration2, periodType67);
        java.lang.String str84 = periodType67.toString();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(hours43);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 31 + "'", int46 == 31);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1424 + "'", int58 == 1424);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldTypeArray66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "PeriodType[YearDayTime]" + "'", str84, "PeriodType[YearDayTime]");
    }

    @Test
    public void test07127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07127");
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMinutes((-1));
        org.joda.time.LocalDateTime.Property property13 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = property13.addToCopy(26197957);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusHours((int) (short) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(36988464);
        org.joda.time.DateTime dateTime20 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(0L, dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(26411731L, dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now(dateTimeZone24);
        mutableDateTime25.setMillis(1645514199781L);
        org.joda.time.DateTimeField dateTimeField28 = mutableDateTime25.getRoundingField();
        mutableDateTime22.setTime((org.joda.time.ReadableInstant) mutableDateTime25);
        int int30 = mutableDateTime25.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 39 + "'", int30 == 39);
    }

    @Test
    public void test07128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07128");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.Interval interval12 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration7.toDuration();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableDuration14, readableInstant15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period22 = period20.minusSeconds((-1));
        java.lang.String str23 = period20.toString();
        org.joda.time.Period period24 = period20.toPeriod();
        org.joda.time.PeriodType periodType25 = period20.getPeriodType();
        org.joda.time.Period period26 = period16.normalizedStandard(periodType25);
        java.lang.String str27 = periodType25.getName();
        java.lang.String str28 = periodType25.toString();
        org.joda.time.PeriodType periodType29 = periodType25.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((java.lang.Object) duration13, periodType29);
        java.lang.String str31 = duration13.toString();
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant39 = instant34.withDurationAdded((org.joda.time.ReadableDuration) duration37, 0);
        org.joda.time.Instant instant42 = instant39.withDurationAdded(25L, 26158);
        org.joda.time.Interval interval43 = duration13.toIntervalTo((org.joda.time.ReadableInstant) instant39);
        org.joda.time.MutableDateTime mutableDateTime44 = instant39.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime44.setTime(1191, 26421, 37338341, 2457);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1191 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.099S" + "'", str23, "PT0.099S");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Standard" + "'", str27, "Standard");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PeriodType[Standard]" + "'", str28, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT86400S" + "'", str31, "PT86400S");
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
    }

    @Test
    public void test07129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07129");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        mutableDateTime1.setWeekOfWeekyear(13);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.eras();
        mutablePeriod18.setPeriod((long) 999, chronology23);
        org.joda.time.Chronology chronology28 = chronology23.withUTC();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plus(44L);
        boolean boolean34 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime31);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime36 = dateTime31.withWeekOfWeekyear(26609745);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26609745 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test07130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07130");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.addSeconds(1970);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod13.addDays((int) (byte) 10);
        mutablePeriod13.addMillis((int) '4');
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean28 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration29 = duration19.minus((org.joda.time.ReadableDuration) duration22);
        mutablePeriod13.setPeriod((org.joda.time.ReadableDuration) duration29);
        mutablePeriod13.setWeeks((int) (byte) 100);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) 100, 1L, periodType35);
        org.joda.time.Period period38 = period36.minusSeconds((-1));
        org.joda.time.Period period40 = period38.multipliedBy((int) '#');
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.centuries();
        int int42 = period40.get(durationFieldType41);
        int int43 = mutablePeriod13.indexOf(durationFieldType41);
        mutableDateTime1.add(durationFieldType41, 56);
        java.lang.String str46 = durationFieldType41.toString();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.monthOfYear();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        org.joda.time.LocalDate localDate50 = property48.roundCeilingCopy();
        org.joda.time.Chronology chronology51 = localDate50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.eras();
        org.joda.time.DateTimeField dateTimeField53 = chronology51.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology51.monthOfYear();
        boolean boolean55 = durationFieldType41.isSupported(chronology51);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "centuries" + "'", str46, "centuries");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test07131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07131");
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.copy();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.set(1);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration21);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime16.centuryOfEra();
        mutableDateTime16.addYears(0);
        mutableDateTime16.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration43 = duration39.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant44 = instant37.plus((org.joda.time.ReadableDuration) duration43);
        long long45 = instant44.getMillis();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableInstant) instant44);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration46, 999);
        mutableDateTime15.setSecondOfMinute(24);
        java.lang.String str51 = mutableDateTime15.toString();
        org.joda.time.DateTimeZone dateTimeZone52 = mutableDateTime15.getZone();
        long long54 = dateTimeZone52.previousTransition(11970905L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(82800000, 33718, 386, 26235, (-49), 26566267, 62583, dateTimeZone52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26235 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 86400000L + "'", long45 == 86400000L);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "-50070-09-17T15:13:24.633Z" + "'", str51, "-50070-09-17T15:13:24.633Z");
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 11970905L + "'", long54 == 11970905L);
    }

    @Test
    public void test07132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07132");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.Interval interval12 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration7.toDuration();
        org.joda.time.Period period14 = duration7.toPeriod();
        org.joda.time.Minutes minutes15 = duration7.toStandardMinutes();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration23 = duration20.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration24 = duration17.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant25, readableInstant26, periodType27);
        mutablePeriod28.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod31 = mutablePeriod28.toMutablePeriod();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean35 = localDate32.isSupported(dateTimeFieldType34);
        org.joda.time.DurationFieldType durationFieldType36 = dateTimeFieldType34.getRangeDurationType();
        int int37 = mutablePeriod28.indexOf(durationFieldType36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration42 = duration39.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        mutableDateTime43.add((long) 'a');
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime43.yearOfCentury();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration54 = duration51.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration55 = duration48.minus((org.joda.time.ReadableDuration) duration54);
        mutableDateTime43.add((org.joda.time.ReadableDuration) duration48);
        boolean boolean57 = duration42.isShorterThan((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration59 = duration48.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now();
        mutableDateTime60.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime63 = mutableDateTime60.copy();
        mutableDateTime60.setDate((long) '#');
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property67 = localDate66.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean69 = localDate66.isSupported(dateTimeFieldType68);
        int int70 = localDate66.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight72 = localDate66.toDateMidnight(dateTimeZone71);
        org.joda.time.DateTime dateTime73 = mutableDateTime60.toDateTime(dateTimeZone71);
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration59, (org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.MutablePeriod mutablePeriod75 = mutablePeriod74.copy();
        mutablePeriod75.clear();
        mutablePeriod75.setPeriod(21L, (long) '#');
        mutablePeriod28.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod75);
        org.joda.time.LocalDate localDate81 = new org.joda.time.LocalDate();
        int int82 = localDate81.getDayOfMonth();
        org.joda.time.DateTime dateTime83 = localDate81.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate85 = localDate81.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate87 = localDate85.plusDays(26150565);
        org.joda.time.DateTimeZone dateTimeZone88 = null;
        org.joda.time.DateTime dateTime89 = localDate85.toDateTimeAtStartOfDay(dateTimeZone88);
        org.joda.time.Duration duration90 = mutablePeriod75.toDurationFrom((org.joda.time.ReadableInstant) dateTime89);
        int int91 = duration23.compareTo((org.joda.time.ReadableDuration) duration90);
        org.joda.time.Duration duration92 = duration90.toDuration();
        boolean boolean93 = duration7.isLongerThan((org.joda.time.ReadableDuration) duration90);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 31 + "'", int11 == 31);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(minutes15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(mutablePeriod31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 53 + "'", int70 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(dateMidnight72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(mutablePeriod75);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 22 + "'", int82 == 22);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 1 + "'", int91 == 1);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
    }

    @Test
    public void test07133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07133");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17, periodType18);
        org.joda.time.DurationFieldType durationFieldType21 = periodType18.getFieldType((int) (short) 0);
        int int22 = mutablePeriod2.get(durationFieldType21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime25.copy();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration24, chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.weekOfWeekyear();
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField39);
    }

    @Test
    public void test07134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07134");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 26157);
        mutableDateTime1.setSecondOfMinute(19);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMillisOfSecond(38170023);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38170023 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07135");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate2 = property1.roundFloorCopy();
        org.joda.time.DateTime dateTime3 = localDate2.toDateTimeAtMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 1);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = duration15.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration19 = duration12.minus((org.joda.time.ReadableDuration) duration18);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime7.centuryOfEra();
        mutableDateTime7.addYears(0);
        mutableDateTime7.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration34 = duration30.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant35 = instant28.plus((org.joda.time.ReadableDuration) duration34);
        long long36 = instant35.getMillis();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableInstant) instant35);
        org.joda.time.MutableDateTime mutableDateTime38 = instant35.toMutableDateTime();
        boolean boolean39 = dateTime6.equals((java.lang.Object) mutableDateTime38);
        org.joda.time.DateTime dateTime40 = localDate2.toDateTime((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.dayOfYear();
        mutableDateTime38.set(dateTimeFieldType41, (int) (short) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        int int46 = dateTime45.getSecondOfMinute();
        boolean boolean47 = dateTime45.isEqualNow();
        mutableDateTime38.setDate((org.joda.time.ReadableInstant) dateTime45);
        mutableDateTime38.setYear(579);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime38.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        mutableDateTime53.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime53.copy();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime53.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime59 = property57.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime61 = property57.set(1);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        int int64 = dateTime63.getYearOfCentury();
        int int65 = dateTime63.getWeekyear();
        org.joda.time.DateTime dateTime66 = dateTime63.withEarlierOffsetAtOverlap();
        java.lang.String str67 = dateTime66.toString();
        org.joda.time.MutableDateTime mutableDateTime68 = dateTime66.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.UTC;
        boolean boolean70 = dateTimeZone69.isFixed();
        mutableDateTime68.setZoneRetainFields(dateTimeZone69);
        org.joda.time.MutableDateTime mutableDateTime72 = mutableDateTime61.toMutableDateTime(dateTimeZone69);
        org.joda.time.LocalDate localDate73 = org.joda.time.LocalDate.now(dateTimeZone69);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(0L, dateTimeZone69);
        java.lang.String str75 = dateTimeZone69.toString();
        mutableDateTime38.setZone(dateTimeZone69);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime38.setMinuteOfDay(26427422);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26427422 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-01" + "'", str4, "2022-02-01");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 86400000L + "'", long36 == 86400000L);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 31 + "'", int46 == 31);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 22 + "'", int64 == 22);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2022 + "'", int65 == 2022);
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "2022-02-22T07:23:31.668Z" + "'", str67, "2022-02-22T07:23:31.668Z");
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "UTC" + "'", str75, "UTC");
    }

    @Test
    public void test07136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07136");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        mutablePeriod2.setWeeks(26150803);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime12.copy();
        mutableDateTime12.setDate((long) '#');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        int int22 = localDate18.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight24 = localDate18.toDateMidnight(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime12.toDateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone23);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.PeriodType periodType31 = period30.getPeriodType();
        boolean boolean32 = dateTimeZone23.equals((java.lang.Object) periodType31);
        mutableDateTime6.setZoneRetainFields(dateTimeZone23);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate(dateTimeZone23);
        int int35 = localDate34.getDayOfWeek();
        org.joda.time.LocalDate localDate37 = localDate34.minusDays(766);
        org.joda.time.LocalDate localDate39 = localDate34.minusWeeks(62387);
        boolean boolean40 = mutablePeriod2.equals((java.lang.Object) 62387);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
    }

    @Test
    public void test07137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07137");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        long long7 = mutableDateTime6.getMillis();
        mutableDateTime6.setWeekyear(1439);
        boolean boolean11 = mutableDateTime6.isBefore(1645514186724L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(36988464);
        mutableDateTime6.setZone(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusMonths(46);
        int int18 = localDateTime15.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 948227L + "'", long7 == 948227L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
    }

    @Test
    public void test07138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07138");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundCeiling();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = mutableDateTime8.toString("2022-02-22T07:18:59.725Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:31.725Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:31.725Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:31.725Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test07139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07139");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        int int19 = mutableDateTime0.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundFloor();
        int int22 = property20.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime23 = property20.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        mutableDateTime24.add((long) 'a');
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.yearOfCentury();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration35 = duration32.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration36 = duration29.minus((org.joda.time.ReadableDuration) duration35);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime24.centuryOfEra();
        mutableDateTime24.addYears(0);
        mutableDateTime24.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration51 = duration47.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant52 = instant45.plus((org.joda.time.ReadableDuration) duration51);
        long long53 = instant52.getMillis();
        org.joda.time.Duration duration54 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime24, (org.joda.time.ReadableInstant) instant52);
        mutableDateTime24.addHours(20);
        mutableDateTime24.setMillisOfSecond(57);
        mutableDateTime24.addHours(26198);
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime62 = instant61.toMutableDateTime();
        org.joda.time.Instant instant64 = instant61.plus((long) (-580));
        org.joda.time.Instant instant66 = instant64.minus(19847535L);
        org.joda.time.PeriodType periodType67 = null;
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime24, (org.joda.time.ReadableInstant) instant66, periodType67);
        long long69 = property20.getDifferenceAsLong((org.joda.time.ReadableInstant) instant66);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 86400000L + "'", long53 == 86400000L);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 140L + "'", long69 == 140L);
    }

    @Test
    public void test07140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07140");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property6 = localDateTime0.dayOfYear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime0.withMillisOfSecond((int) (byte) 1);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMonths(8);
        int int14 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withYear(86399999);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration21 = duration18.minus((long) 292278993);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours24 = duration23.toStandardHours();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.Duration duration29 = duration21.plus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime11.withDurationAdded((org.joda.time.ReadableDuration) duration23, 122);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration37 = duration33.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMinutes(15);
        org.joda.time.Interval interval42 = duration37.toIntervalTo((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime43 = dateTime41.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMinutes(15);
        org.joda.time.Chronology chronology48 = dateTime45.getChronology();
        org.joda.time.DateTime dateTime50 = dateTime45.plusHours(19045);
        org.joda.time.DateTime dateTime51 = dateTime45.toDateTimeISO();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration56 = duration53.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now();
        mutableDateTime57.add((long) 'a');
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime57.yearOfCentury();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period63 = duration62.toPeriod();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration68 = duration65.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration69 = duration62.minus((org.joda.time.ReadableDuration) duration68);
        mutableDateTime57.add((org.joda.time.ReadableDuration) duration62);
        boolean boolean71 = duration56.isShorterThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration73 = duration62.minus((long) (byte) 0);
        org.joda.time.DateTime dateTime74 = dateTime45.minus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.DateTime dateTime76 = dateTime43.withDurationAdded((org.joda.time.ReadableDuration) duration62, 29);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime80 = dateTime78.withZoneRetainFields(dateTimeZone79);
        boolean boolean82 = dateTime80.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology83 = dateTime80.getChronology();
        org.joda.time.Instant instant84 = new org.joda.time.Instant();
        org.joda.time.Instant instant86 = instant84.withMillis(0L);
        org.joda.time.DateTime dateTime87 = instant86.toDateTime();
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType90 = org.joda.time.PeriodType.months();
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime87, (org.joda.time.ReadableInstant) dateTime89, periodType90);
        org.joda.time.DateTime.Property property92 = dateTime89.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType93 = property92.getFieldType();
        org.joda.time.DateTime.Property property94 = dateTime80.property(dateTimeFieldType93);
        boolean boolean95 = dateTime43.isSupported(dateTimeFieldType93);
        int int96 = localDateTime31.get(dateTimeFieldType93);
        int int97 = localDateTime31.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(hours24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 31 + "'", int27 == 31);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(instant86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(property92);
        org.junit.Assert.assertNotNull(dateTimeFieldType93);
        org.junit.Assert.assertNotNull(property94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 203 + "'", int96 == 203);
        org.junit.Assert.assertTrue("'" + int97 + "' != '" + 999 + "'", int97 == 999);
    }

    @Test
    public void test07141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07141");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        java.lang.String str6 = chronology5.toString();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 2022, chronology5);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str15 = dateTimeFieldType14.getName();
        int int16 = localDateTime8.indexOf(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.minusSeconds((int) (short) 0);
        int int19 = localDateTime18.getYearOfEra();
        int int20 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusHours(26177);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYear(26209);
        java.lang.Object obj26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = dateTimeZone27.getName(100L, locale29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(obj26, dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        mutableDateTime34.add((long) 'a');
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str41 = duration40.toString();
        boolean boolean42 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Hours hours43 = duration38.toStandardHours();
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration38, 20);
        mutableDateTime34.setMillisOfDay(36946953);
        org.joda.time.DateTimeField dateTimeField48 = mutableDateTime34.getRoundingField();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.Duration duration54 = duration50.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration59 = duration56.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean60 = duration54.isLongerThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime34, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime33.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime22.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime.Property property64 = localDateTime22.centuryOfEra();
        int int65 = property64.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime67 = property64.addToCopy(26458559);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1649109371 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "clockhourOfDay" + "'", str15, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "German" + "'", str30, "German");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT86400S" + "'", str41, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNull(dateTimeField48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 2922789 + "'", int65 == 2922789);
    }

    @Test
    public void test07142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07142");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        boolean boolean20 = mutableDateTime19.isEqualNow();
        mutableDateTime19.addYears(26207584);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.eras();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(chronology29);
        org.joda.time.DurationField durationField32 = chronology29.eras();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 44, chronology29);
        org.joda.time.DateTimeField dateTimeField34 = dateTimeFieldType24.getField(chronology29);
        org.joda.time.DateTimeField dateTimeField35 = chronology29.weekOfWeekyear();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology29);
        mutableDateTime19.setChronology(chronology29);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime19.minuteOfHour();
        mutableDateTime19.addWeekyears(853);
        mutableDateTime19.setDate(26336L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:23:31.996Z" + "'", str14, "2022-02-22T07:23:31.996Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property38);
    }

    @Test
    public void test07143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07143");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.getMillisKeepLocal(dateTimeZone2, (long) 44);
        boolean boolean6 = dateTimeZone2.isStandardOffset((long) (-1));
        java.lang.String str7 = dateTimeZone2.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime8.setSecondOfMinute(41);
        mutableDateTime8.setTime(181439999948L);
        int int13 = mutableDateTime8.getMinuteOfHour();
        org.joda.time.Instant instant15 = org.joda.time.Instant.parse("2022-02-22T07:16:17.248Z");
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str20 = duration19.toString();
        boolean boolean21 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration19);
        long long22 = duration17.getStandardMinutes();
        org.joda.time.Instant instant24 = instant15.withDurationAdded((org.joda.time.ReadableDuration) duration17, 200);
        boolean boolean25 = mutableDateTime8.isEqual((org.joda.time.ReadableInstant) instant24);
        mutableDateTime8.addHours(777);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 59 + "'", int13 == 59);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT86400S" + "'", str20, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1440L + "'", long22 == 1440L);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test07144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07144");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter13.withZoneUTC();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean18 = localDate15.isSupported(dateTimeFieldType17);
        int int19 = localDate15.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight21 = localDate15.toDateMidnight(dateTimeZone20);
        org.joda.time.LocalDate.Property property22 = localDate15.year();
        org.joda.time.LocalDate localDate24 = localDate15.withYearOfCentury(51);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime25.yearOfCentury();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration36 = duration33.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration37 = duration30.minus((org.joda.time.ReadableDuration) duration36);
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime25.centuryOfEra();
        mutableDateTime25.addHours((int) (byte) 10);
        mutableDateTime25.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField44 = mutableDateTime25.getRoundingField();
        int int45 = mutableDateTime25.getWeekyear();
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property47 = localDate46.monthOfYear();
        org.joda.time.DateTimeField dateTimeField48 = property47.getField();
        org.joda.time.LocalDate localDate49 = property47.roundCeilingCopy();
        org.joda.time.LocalDate localDate51 = localDate49.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone52);
        org.joda.time.DateMidnight dateMidnight54 = localDate51.toDateMidnight(dateTimeZone52);
        mutableDateTime25.setZoneRetainFields(dateTimeZone52);
        org.joda.time.Interval interval56 = localDate24.toInterval(dateTimeZone52);
        long long59 = dateTimeZone52.adjustOffset(4801285053239L, true);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(dateTimeZone52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter14.withZone(dateTimeZone52);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter61.withZoneUTC();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime64 = dateTimeFormatter62.parseMutableDateTime("158");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertNotNull(localDate51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateMidnight54);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 4801285053239L + "'", long59 == 4801285053239L);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
    }

    @Test
    public void test07145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07145");
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime12 = dateTime10.withZoneRetainFields(dateTimeZone11);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime17 = localDate13.toDateTimeAtCurrentTime(dateTimeZone15);
        int int18 = dateTime12.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime20 = dateTime17.minusWeeks(44);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(15);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        java.lang.String str26 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.dayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime17.withChronology(chronology25);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant30, readableInstant31, periodType32);
        org.joda.time.DurationFieldType durationFieldType35 = periodType32.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType36 = periodType32.withMillisRemoved();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, readableDuration29, periodType36);
        org.joda.time.Period period38 = new org.joda.time.Period(0L, periodType36);
        org.joda.time.format.DateTimePrinter dateTimePrinter39 = null;
        org.joda.time.format.DateTimeParser dateTimeParser40 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter39, dateTimeParser40);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.eras();
        long long50 = chronology45.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter41.withChronology(chronology45);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(3600000L, periodType36, chronology45);
        org.joda.time.DateTimeZone dateTimeZone53 = chronology45.getZone();
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.add((long) 'a');
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str61 = duration60.toString();
        boolean boolean62 = duration58.isShorterThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Hours hours63 = duration58.toStandardHours();
        mutableDateTime54.add((org.joda.time.ReadableDuration) duration58, 20);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str68 = duration67.toString();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours71 = duration70.toStandardHours();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology72);
        int int74 = dateTime73.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.Duration duration76 = duration67.plus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime54, (org.joda.time.ReadableDuration) duration76);
        int int78 = dateTimeZone53.getOffset((org.joda.time.ReadableInstant) mutableDateTime54);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(1979, 410, 62317, 33487, 36987870, 26595151, 38357456, dateTimeZone53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33487 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 105144L + "'", long50 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PT86400S" + "'", str61, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(hours63);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "PT86400S" + "'", str68, "PT86400S");
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(hours71);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 32 + "'", int74 == 32);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test07146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07146");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime2.setSecondOfMinute(53);
        mutableDateTime2.addMonths(0);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.LocalDate localDate10 = property8.roundCeilingCopy();
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        mutableDateTime2.setChronology(chronology11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(1005101L, chronology11);
        org.joda.time.DurationField durationField15 = chronology11.centuries();
        org.joda.time.DurationFieldType durationFieldType16 = durationField15.getType();
        long long19 = durationField15.add(386L, 26198);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = durationField15.getMillis(26566267, 283L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 2656626700");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 82672902892800386L + "'", long19 == 82672902892800386L);
    }

    @Test
    public void test07147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07147");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 542, chronology13);
        mutableDateTime18.add(1098220L);
        mutableDateTime18.setWeekyear(26256000);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test07148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07148");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType8.getRangeDurationType();
        mutableDateTime1.set(dateTimeFieldType8, 4);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfEven();
        mutableDateTime14.setSecondOfDay(481);
        mutableDateTime14.setWeekyear(31);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test07149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07149");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        boolean boolean37 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField45 = localDateTime43.getField((int) (byte) 0);
        long long47 = dateTimeField45.roundHalfEven((long) 1);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.lang.String str51 = locale48.getISO3Language();
        java.lang.String str52 = locale48.getISO3Country();
        java.util.Locale locale53 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale53);
        java.lang.String str55 = locale48.getDisplayLanguage(locale53);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = property59.getField();
        int int61 = property59.get();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = property59.getAsShortText(locale62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int70 = localDateTime68.get(dateTimeFieldType69);
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        boolean boolean72 = localDateTime68.equals((java.lang.Object) locale71);
        java.lang.String str73 = locale62.getDisplayVariant(locale71);
        java.lang.String str74 = locale53.getDisplayScript(locale71);
        int int75 = dateTimeField45.getMaximumTextLength(locale71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter38.withLocale(locale71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter38.withPivotYear(766);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter78.withOffsetParsed();
        org.joda.time.Chronology chronology80 = dateTimeFormatter79.getChronolgy();
        org.joda.time.MutableDateTime mutableDateTime81 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj82 = mutableDateTime81.clone();
        org.joda.time.MutableDateTime.Property property83 = mutableDateTime81.millisOfDay();
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime81.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            int int87 = dateTimeFormatter79.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime81, "00:00:00.100", 0);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u5fb7\u6587" + "'", str34, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u5fb7\u6587" + "'", str55, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 7 + "'", int61 == 7);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "7" + "'", str63, "7");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1439 + "'", int70 == 1439);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNull(chronology80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
        org.junit.Assert.assertNotNull(obj82);
// flaky:         org.junit.Assert.assertEquals(obj82.toString(), "2022-02-22T07:23:32.243Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj82), "2022-02-22T07:23:32.243Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj82), "2022-02-22T07:23:32.243Z");
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test07150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07150");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-22T07:16:48.173");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test07151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07151");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add((long) 2000);
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundHalfCeiling();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 15);
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfSecond();
        org.joda.time.DateTime dateTime17 = dateTime14.withCenturyOfEra((int) '#');
        org.joda.time.DateTime dateTime18 = dateTime14.withLaterOffsetAtOverlap();
        int int19 = mutableDateTime8.compareTo((org.joda.time.ReadableInstant) dateTime18);
        int int20 = mutableDateTime8.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setDayOfMonth(64173);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 64173 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:32.274Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:32.274Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:32.274Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
    }

    @Test
    public void test07152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07152");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.Period period5 = period3.minusSeconds((-1));
        java.lang.String str6 = period3.toString();
        org.joda.time.Period period7 = period3.toPeriod();
        org.joda.time.Period period9 = period7.minusMinutes(26310);
        org.joda.time.Period period11 = period7.withDays(26448878);
        org.joda.time.Period period13 = period11.withMinutes((int) 'a');
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.099S" + "'", str6, "PT0.099S");
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
    }

    @Test
    public void test07153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07153");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone3.getName(946000L, locale10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone3);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableDuration14, readableInstant15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period22 = period20.minusSeconds((-1));
        java.lang.String str23 = period20.toString();
        org.joda.time.Period period24 = period20.toPeriod();
        org.joda.time.PeriodType periodType25 = period20.getPeriodType();
        org.joda.time.Period period26 = period16.normalizedStandard(periodType25);
        org.joda.time.Period period28 = period26.withSeconds(10);
        org.joda.time.Minutes minutes29 = period26.toStandardMinutes();
        org.joda.time.DurationFieldType[] durationFieldTypeArray30 = period26.getFieldTypes();
        org.joda.time.Period period32 = period26.withYears(999);
        org.joda.time.Period period34 = period32.multipliedBy(443);
        org.joda.time.Period period36 = period32.minusMonths(1439);
        org.joda.time.DateTime dateTime37 = dateTime13.plus((org.joda.time.ReadablePeriod) period32);
        org.joda.time.DateTime dateTime39 = dateTime13.minusMinutes(26184);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes(15);
        org.joda.time.Chronology chronology45 = dateTime42.getChronology();
        java.lang.String str46 = chronology45.toString();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology45);
        org.joda.time.DateTimeField dateTimeField48 = chronology45.millisOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.secondOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology45.halfdayOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate((java.lang.Object) 26184, chronology45);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.099S" + "'", str23, "PT0.099S");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(durationFieldTypeArray30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "ISOChronology[UTC]" + "'", str46, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
    }

    @Test
    public void test07154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07154");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str11 = durationFieldType10.getName();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) boolean12);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket5.getChronology();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str20 = duration19.toString();
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration19, 8);
        mutableDateTime17.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime17.weekyear();
        mutableDateTime17.addDays(0);
        mutableDateTime17.setWeekyear(62196);
        boolean boolean30 = mutableDateTime15.isAfter((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant36, readableInstant37, periodType38);
        org.joda.time.DurationFieldType durationFieldType41 = periodType38.getFieldType((int) (short) 0);
        java.lang.String str42 = periodType38.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 53, (long) (-1), periodType38, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType33.getField(chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.yearOfEra();
        org.joda.time.Period period50 = new org.joda.time.Period((long) 765, (long) 62166, chronology46);
        org.joda.time.DateTime dateTime51 = mutableDateTime15.toDateTime(chronology46);
        org.joda.time.DateTimeField dateTimeField52 = chronology46.dayOfYear();
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology46);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant58, readableInstant59, periodType60);
        org.joda.time.DurationFieldType durationFieldType63 = periodType60.getFieldType((int) (short) 0);
        java.lang.String str64 = periodType60.toString();
        org.joda.time.Instant instant65 = new org.joda.time.Instant();
        org.joda.time.Instant instant67 = instant65.withMillis(0L);
        org.joda.time.Chronology chronology68 = instant67.getChronology();
        org.joda.time.Period period69 = new org.joda.time.Period((long) 53, (long) (-1), periodType60, chronology68);
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod(readableInstant72, readableInstant73, periodType74);
        org.joda.time.DurationFieldType durationFieldType77 = periodType74.getFieldType((int) (short) 0);
        java.lang.String str78 = periodType74.toString();
        org.joda.time.Instant instant79 = new org.joda.time.Instant();
        org.joda.time.Instant instant81 = instant79.withMillis(0L);
        org.joda.time.Chronology chronology82 = instant81.getChronology();
        org.joda.time.Period period83 = new org.joda.time.Period((long) 53, (long) (-1), periodType74, chronology82);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) (short) 10, periodType60, chronology82);
        org.joda.time.DateTime dateTime85 = new org.joda.time.DateTime((long) (byte) 1, chronology82);
        org.joda.time.DateTimeField dateTimeField86 = chronology82.monthOfYear();
        org.joda.time.DateTimeField dateTimeField87 = chronology82.secondOfDay();
        org.joda.time.DateTimeField dateTimeField88 = chronology82.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime89 = new org.joda.time.MutableDateTime(chronology82);
        org.joda.time.MutableDateTime mutableDateTime90 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime53, chronology82);
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime90.dayOfWeek();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weeks" + "'", str11, "weeks");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT86400S" + "'", str20, "PT86400S");
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PeriodType[YearDayTime]" + "'", str42, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PeriodType[YearDayTime]" + "'", str64, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PeriodType[YearDayTime]" + "'", str78, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(property91);
    }

    @Test
    public void test07155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07155");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = dateTime26.toInstant();
        org.joda.time.DateTime dateTime37 = dateTime26.withDurationAdded((long) 3, 4);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getYearOfCentury();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute(53);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration51 = duration44.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType57 = periodType54.getFieldType((int) (short) 0);
        java.lang.String str58 = periodType54.toString();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration44, periodType54);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime37, periodType54);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime0.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime64 = property62.add(0L);
        org.joda.time.MutableDateTime mutableDateTime65 = property62.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime67 = property62.add((long) 62492);
        mutableDateTime67.add(1645514552472L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PeriodType[YearDayTime]" + "'", str58, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime67);
    }

    @Test
    public void test07156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07156");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime2.copy();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) mutableDateTime2);
        org.joda.time.Duration duration8 = duration1.toDuration();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime12 = dateTime10.withZoneRetainFields(dateTimeZone11);
        boolean boolean14 = dateTime12.equals((java.lang.Object) (-1L));
        java.util.GregorianCalendar gregorianCalendar15 = dateTime12.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusWeeks((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfCentury((int) (byte) 10);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) 26148);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str26 = duration25.toString();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours29 = duration28.toStandardHours();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        int int32 = dateTime31.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = duration25.plus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration39 = duration36.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        mutableDateTime40.add((long) 'a');
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime40.yearOfCentury();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period46 = duration45.toPeriod();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration51 = duration48.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration52 = duration45.minus((org.joda.time.ReadableDuration) duration51);
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration45);
        boolean boolean54 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration45);
        boolean boolean55 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period60 = duration59.toPeriod();
        org.joda.time.Duration duration63 = duration59.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime57, (org.joda.time.ReadableDuration) duration63);
        org.joda.time.Duration duration65 = duration39.plus((org.joda.time.ReadableDuration) duration63);
        boolean boolean66 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration39);
        boolean boolean67 = duration8.isEqual((org.joda.time.ReadableDuration) duration39);
        long long68 = duration8.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT86400S" + "'", str26, "PT86400S");
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(hours29);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 32 + "'", int32 == 32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 52L + "'", long68 == 52L);
    }

    @Test
    public void test07157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07157");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getLeapDurationField();
        org.joda.time.Duration duration6 = new org.joda.time.Duration((java.lang.Object) durationField5);
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant7, readableInstant8, periodType9);
        mutablePeriod10.addDays((int) '4');
        mutablePeriod10.addYears(44);
        mutablePeriod10.addMillis((int) (short) 10);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str21 = duration20.toString();
        boolean boolean22 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Hours hours23 = duration18.toStandardHours();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        int int26 = duration18.compareTo((org.joda.time.ReadableDuration) duration25);
        mutablePeriod10.setPeriod((org.joda.time.ReadableDuration) duration25);
        boolean boolean28 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration25);
        java.lang.Object obj29 = null;
        boolean boolean30 = duration6.equals(obj29);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime31.copy();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime31.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime31.dayOfYear();
        java.lang.String str37 = property36.getAsText();
        org.joda.time.MutableDateTime mutableDateTime39 = property36.add((long) (short) 0);
        mutableDateTime39.setWeekOfWeekyear(15);
        mutableDateTime39.setTime(417L);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) mutableDateTime39);
        mutableDateTime39.addDays(37092170);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT86400S" + "'", str21, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(hours23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "53" + "'", str37, "53");
        org.junit.Assert.assertNotNull(mutableDateTime39);
    }

    @Test
    public void test07158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07158");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusMinutes((-1));
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime18 = property15.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime18.toMutableDateTime(dateTimeZone19);
        mutableDateTime21.add(51L);
        int int24 = mutableDateTime21.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.minusSeconds((int) (byte) 10);
        java.lang.Object obj34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(obj34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime31.minus((org.joda.time.ReadableDuration) duration37);
        java.util.TimeZone timeZone41 = java.util.TimeZone.getTimeZone("2022-02-22T10:15:47.721");
        boolean boolean42 = duration37.equals((java.lang.Object) "2022-02-22T10:15:47.721");
        org.joda.time.Duration duration44 = duration37.withMillis(27418772L);
        org.joda.time.Duration duration46 = duration37.plus(963012L);
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period49 = org.joda.time.Period.days(62176);
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusMinutes(15);
        org.joda.time.DateTime dateTime61 = localDateTime54.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone63 = dateTimeZone62.toTimeZone();
        org.joda.time.DateTime dateTime64 = dateTime61.withZone(dateTimeZone62);
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearDay();
        java.lang.String str67 = periodType66.getName();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(100L, periodType66);
        org.joda.time.DateTime dateTime69 = dateTime64.plus((org.joda.time.ReadablePeriod) mutablePeriod68);
        org.joda.time.Duration duration70 = period49.toDurationTo((org.joda.time.ReadableInstant) dateTime69);
        int int71 = duration37.compareTo((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period74 = duration73.toPeriod();
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration79 = duration76.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration80 = duration73.minus((org.joda.time.ReadableDuration) duration79);
        long long81 = duration80.getStandardSeconds();
        org.joda.time.Duration duration82 = duration37.minus((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Duration duration83 = duration37.toDuration();
        org.joda.time.Duration duration85 = duration83.plus(82546675084800000L);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime10.withDurationAdded((org.joda.time.ReadableDuration) duration83, 37245766);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime87.plusMinutes(26263);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "YearDay" + "'", str67, "YearDay");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + (-1) + "'", int71 == (-1));
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertTrue("'" + long81 + "' != '" + (-3L) + "'", long81 == (-3L));
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
    }

    @Test
    public void test07159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07159");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        mutableDateTime10.add(51L);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add(458119L);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.hourOfDay();
        int int17 = mutableDateTime15.getDayOfMonth();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 14 + "'", int17 == 14);
    }

    @Test
    public void test07160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07160");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Instant instant17 = instant4.withMillis((long) 26172069);
        org.joda.time.Chronology chronology18 = instant4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = instant4.toMutableDateTimeISO();
        org.joda.time.Duration duration22 = new org.joda.time.Duration(1098220L, 3155695200000L);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.Period period24 = duration22.toPeriod(chronology23);
        org.joda.time.Duration duration26 = duration22.plus((long) 26237);
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration22, 1379);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
    }

    @Test
    public void test07161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07161");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.LocalDate localDate17 = localDate7.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.LocalDate.Property property18 = localDate7.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj20 = mutableDateTime19.clone();
        mutableDateTime19.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.add(1L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 44);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone26);
        mutableDateTime25.setZoneRetainFields(dateTimeZone26);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder34.clear();
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = dateTimeZone26.getName(555370422L, locale36);
        org.joda.time.DateTime dateTime38 = localDate7.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(23);
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.Interval interval43 = localDate7.toInterval(dateTimeZone42);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(10, (int) (byte) 100, 12, (-1), 999, (int) '4', (int) ' ', (int) (short) 100);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period55 = duration54.toPeriod();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration62 = duration59.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean63 = duration57.isLongerThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration64 = duration54.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration69 = duration66.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean70 = duration57.equals((java.lang.Object) duration66);
        long long71 = duration66.getStandardSeconds();
        mutablePeriod52.add((org.joda.time.ReadableDuration) duration66);
        org.joda.time.LocalDate localDate73 = localDate7.minus((org.joda.time.ReadablePeriod) mutablePeriod52);
        mutablePeriod52.addMillis(15713543);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "2022-02-22T07:23:32.647Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "2022-02-22T07:23:32.647Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "2022-02-22T07:23:32.647Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 44L + "'", long30 == 44L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+23:00");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 86400L + "'", long71 == 86400L);
        org.junit.Assert.assertNotNull(localDate73);
    }

    @Test
    public void test07162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07162");
        org.joda.time.MutablePeriod mutablePeriod1 = new org.joda.time.MutablePeriod((-279410L));
    }

    @Test
    public void test07163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07163");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.LocalDate localDate10 = property8.roundCeilingCopy();
        org.joda.time.Chronology chronology11 = localDate10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.weekOfWeekyear();
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.Chronology chronology15 = null;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale16.getDisplayVariant(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology15, locale17);
        java.lang.String str22 = nameProvider13.getShortName(locale17, "\u4e2d\u56fd", "2022-02-22t10:15:47.721_53_2022-02-22T07:15:46.416Z");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider13);
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean27 = localDate24.isSupported(dateTimeFieldType26);
        int int28 = localDate24.getDayOfYear();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean31 = localDate29.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property32 = localDate24.property(dateTimeFieldType30);
        java.util.Locale locale33 = java.util.Locale.UK;
        int int34 = property32.getMaximumTextLength(locale33);
        java.lang.String str37 = nameProvider13.getName(locale33, "minutes", "1970 (MILLIS)");
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant42, readableInstant43, periodType44);
        org.joda.time.DurationFieldType durationFieldType47 = periodType44.getFieldType((int) (short) 0);
        java.lang.String str48 = periodType44.toString();
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.Period period53 = new org.joda.time.Period((long) 53, (long) (-1), periodType44, chronology52);
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType39.getField(chronology52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMinutes(15);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        java.lang.String str60 = chronology59.toString();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType39.getField(chronology59);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.dayOfYear();
        java.util.Locale locale63 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology59, locale63, (java.lang.Integer) 5);
        java.lang.String str68 = nameProvider13.getName(locale63, "Property[dayOfYear]", "en_CA");
        int int69 = dateTimeField12.getMaximumTextLength(locale63);
        long long72 = dateTimeField12.addWrapField((long) 26148950, 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = dateTimeField12.getType();
        org.joda.time.DurationFieldType durationFieldType74 = dateTimeFieldType73.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.set(dateTimeFieldType73, 831);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 831 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53 + "'", int28 == 53);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PeriodType[YearDayTime]" + "'", str48, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ISOChronology[UTC]" + "'", str60, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2 + "'", int69 == 2);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 26148950L + "'", long72 == 26148950L);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(durationFieldType74);
    }

    @Test
    public void test07164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07164");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean3 = localDate1.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfEra();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str10 = duration9.toString();
        org.joda.time.Instant instant11 = instant5.minus((org.joda.time.ReadableDuration) duration9);
        int int12 = property4.getDifference((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant16 = instant5.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours22 = duration21.toStandardHours();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration27 = duration18.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = duration29.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.yearOfCentury();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration45 = duration38.minus((org.joda.time.ReadableDuration) duration44);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration38);
        boolean boolean47 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration38);
        boolean boolean48 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant49 = instant16.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours52 = duration51.toStandardHours();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        int int55 = dateTime54.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.months();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime64, periodType65);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime58, periodType65);
        org.joda.time.Instant instant69 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration51, 113);
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 26148950, chronology70);
        org.joda.time.DateTimeField dateTimeField72 = chronology70.era();
        org.joda.time.DateTimeField dateTimeField73 = chronology70.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField74 = chronology70.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT86400S" + "'", str10, "PT86400S");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT86400S" + "'", str19, "PT86400S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(hours22);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 32 + "'", int25 == 32);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(hours52);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 32 + "'", int55 == 32);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
    }

    @Test
    public void test07165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07165");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant11 = instant4.plus((org.joda.time.ReadableDuration) duration10);
        long long12 = instant11.getMillis();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 36988464, 0L, chronology13);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalDate.Property property21 = localDate20.centuryOfEra();
        org.joda.time.LocalDate localDate22 = property21.withMaximumValue();
        org.joda.time.LocalDate localDate24 = localDate22.minusMonths(62188);
        org.joda.time.Interval interval25 = localDate24.toInterval();
        mutablePeriod18.setPeriod((org.joda.time.ReadableInterval) interval25);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86400000L + "'", long12 == 86400000L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(interval25);
    }

    @Test
    public void test07166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07166");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        int int17 = dateTime16.getDayOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
    }

    @Test
    public void test07167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07167");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getLeapDurationField();
        org.joda.time.LocalTime localTime6 = property4.roundHalfEvenCopy();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant16 = instant9.plus((org.joda.time.ReadableDuration) duration15);
        long long17 = instant16.getMillis();
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.add((long) 'a');
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str26 = duration25.toString();
        boolean boolean27 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Hours hours28 = duration23.toStandardHours();
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration23, 20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime32.toString(dateTimeFormatter34);
        org.joda.time.DateTime dateTime37 = dateTime32.minusMonths(22);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        org.joda.time.DateTime dateTime43 = dateTime32.withChronology(chronology41);
        org.joda.time.Period period44 = duration23.toPeriod(chronology41);
        org.joda.time.Instant instant46 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration23, 16);
        boolean boolean47 = localTime6.equals((java.lang.Object) instant16);
        org.joda.time.Instant instant50 = instant16.withDurationAdded(3155695200000L, 44);
        org.joda.time.Instant instant52 = instant50.plus((-205860000L));
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        mutableDateTime53.add((long) 'a');
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime53.yearOfCentury();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period59 = duration58.toPeriod();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration64 = duration61.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration65 = duration58.minus((org.joda.time.ReadableDuration) duration64);
        mutableDateTime53.add((org.joda.time.ReadableDuration) duration58);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime53.centuryOfEra();
        mutableDateTime53.addHours((int) (byte) 10);
        mutableDateTime53.addWeeks(100);
        mutableDateTime53.setSecondOfMinute(31);
        mutableDateTime53.addMillis(302);
        int int76 = instant50.compareTo((org.joda.time.ReadableInstant) mutableDateTime53);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 86400000L + "'", long17 == 86400000L);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT86400S" + "'", str26, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(hours28);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "2022-02-22T07:23:32.920Z" + "'", str35, "2022-02-22T07:23:32.920Z");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
    }

    @Test
    public void test07168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07168");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add(51);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.centuryOfEra();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.yearOfCentury();
        mutableDateTime5.setDate((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime5.setDate((long) 1379);
        boolean boolean15 = mutableDateTime5.isBeforeNow();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds((long) 22);
        long long18 = duration17.getStandardMinutes();
        org.joda.time.Duration duration20 = duration17.minus((long) 36956320);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration20);
        int int22 = mutableDateTime5.getMinuteOfHour();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(duration20);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 8 + "'", int22 == 8);
    }

    @Test
    public void test07169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07169");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime15.yearOfCentury();
        mutableDateTime15.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableDuration23, readableInstant24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.Period period31 = period29.minusSeconds((-1));
        java.lang.String str32 = period29.toString();
        org.joda.time.Period period33 = period29.toPeriod();
        org.joda.time.PeriodType periodType34 = period29.getPeriodType();
        org.joda.time.Period period35 = period25.normalizedStandard(periodType34);
        org.joda.time.DurationFieldType durationFieldType36 = null;
        int int37 = periodType34.indexOf(durationFieldType36);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.now(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.eras();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType34, chronology41);
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime15.toMutableDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField48 = chronology41.clockhourOfHalfday();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 0, chronology41);
        mutableDateTime0.setChronology(chronology41);
        mutableDateTime0.addDays(48);
        mutableDateTime0.addMonths((-198));
        mutableDateTime0.addMillis(26598);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0.099S" + "'", str32, "PT0.099S");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
    }

    @Test
    public void test07170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07170");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getYearOfCentury();
        int int14 = dateTime12.getWeekyear();
        org.joda.time.DateTime dateTime16 = dateTime12.plus((long) 15);
        org.joda.time.DateTime.Property property17 = dateTime12.year();
        org.joda.time.DateTime dateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfSecond();
        org.joda.time.DateTime dateTime20 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime22 = dateTime18.minusMinutes(55);
        int int23 = dateTime22.getHourOfDay();
        java.util.Locale locale24 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet25 = locale24.getUnicodeLocaleKeys();
        java.lang.Object obj26 = locale24.clone();
        boolean boolean27 = dateTime22.equals((java.lang.Object) locale24);
        org.joda.time.DateTime dateTime30 = dateTime22.withDurationAdded(1076373L, (-356));
        int int31 = dateTime22.getWeekyear();
        org.joda.time.DateTime.Property property32 = dateTime22.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.set(45);
        org.joda.time.MutableDateTime mutableDateTime37 = property34.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property34.add(45);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        long long43 = dateTimeZone40.previousTransition(100L);
        int int45 = dateTimeZone40.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime46 = mutableDateTime39.toDateTime(dateTimeZone40);
        int int48 = dateTimeZone40.getOffset((-62135596800000L));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((java.lang.Object) property32, dateTimeZone40);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 23 + "'", int23 == 23);
        org.junit.Assert.assertNotNull(locale24);
// flaky:         org.junit.Assert.assertEquals(locale24.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertNotNull(obj26);
// flaky:         org.junit.Assert.assertEquals(obj26.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj26), "en_GB");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj26), "en_GB");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2021 + "'", int31 == 2021);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L + "'", long43 == 100L);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test07171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07171");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = duration15.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration19 = duration12.minus((org.joda.time.ReadableDuration) duration18);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime7.centuryOfEra();
        mutableDateTime7.addHours((int) (byte) 10);
        mutableDateTime7.addWeeks(100);
        boolean boolean26 = instant0.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        long long27 = instant0.getMillis();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1645514613035L + "'", long27 == 1645514613035L);
    }

    @Test
    public void test07172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07172");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        long long5 = dateTimeZone1.getMillisKeepLocal(dateTimeZone3, (long) 44);
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 36, dateTimeZone3);
        int int7 = dateTime6.getMinuteOfDay();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime6.withWeekyear(26478);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.yearOfCentury();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration22 = duration19.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration23 = duration16.minus((org.joda.time.ReadableDuration) duration22);
        mutableDateTime11.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime11.centuryOfEra();
        mutableDateTime11.addYears(0);
        mutableDateTime11.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration38 = duration34.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant39 = instant32.plus((org.joda.time.ReadableDuration) duration38);
        long long40 = instant39.getMillis();
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime11, (org.joda.time.ReadableInstant) instant39);
        org.joda.time.MutableDateTime mutableDateTime42 = instant39.toMutableDateTime();
        org.joda.time.Instant instant43 = instant39.toInstant();
        boolean boolean44 = dateTime6.isEqual((org.joda.time.ReadableInstant) instant43);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 44L + "'", long5 == 44L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 86400000L + "'", long40 == 86400000L);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test07173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07173");
        java.lang.Object obj0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        mutableDateTime1.setDate((long) '#');
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean10 = localDate7.isSupported(dateTimeFieldType9);
        int int11 = localDate7.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(obj0, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getName(105144L);
        java.lang.Object obj19 = null;
        boolean boolean20 = dateTimeZone12.equals(obj19);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 53 + "'", int11 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateMidnight13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime21);
    }

    @Test
    public void test07174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07174");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime.Property property3 = dateTime2.millisOfSecond();
        org.joda.time.DateTime dateTime4 = dateTime2.toDateTime();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMinutes(15);
        org.joda.time.Chronology chronology10 = dateTime7.getChronology();
        java.lang.String str11 = chronology10.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant15, readableInstant16, periodType17);
        org.joda.time.DurationFieldType durationFieldType20 = periodType17.getFieldType((int) (short) 0);
        java.lang.String str21 = periodType17.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 53, (long) (-1), periodType17, chronology25);
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType12.getField(chronology25);
        java.util.Locale locale28 = java.util.Locale.UK;
        java.lang.String str29 = locale28.getDisplayLanguage();
        int int30 = dateTimeField27.getMaximumTextLength(locale28);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(3155695200000L, chronology10, locale28);
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate(chronology10);
        org.joda.time.DateTime dateTime33 = dateTime2.toDateTime(chronology10);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField35 = chronology10.halfdayOfDay();
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.String str37 = locale36.getDisplayLanguage();
        java.util.Locale locale38 = locale36.stripExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 1003, chronology10, locale36);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean42 = localDate40.isSupported(dateTimeFieldType41);
        org.joda.time.LocalDate.Property property43 = localDate40.yearOfEra();
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str49 = duration48.toString();
        org.joda.time.Instant instant50 = instant44.minus((org.joda.time.ReadableDuration) duration48);
        int int51 = property43.getDifference((org.joda.time.ReadableInstant) instant44);
        org.joda.time.MutableDateTime mutableDateTime52 = instant44.toMutableDateTime();
        int int53 = mutableDateTime52.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        int int56 = mutableDateTime52.get(dateTimeFieldType54);
        org.joda.time.DateTimeZone dateTimeZone57 = mutableDateTime52.getZone();
        int int59 = dateTimeZone57.getOffset((long) 26290);
        java.lang.String str61 = dateTimeZone57.getName((-70741900737780L));
        dateTimeParserBucket39.setZone(dateTimeZone57);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[UTC]" + "'", str11, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[YearDayTime]" + "'", str21, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "English" + "'", str29, "English");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 4 + "'", int30 == 4);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "English" + "'", str37, "English");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT86400S" + "'", str49, "PT86400S");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 7 + "'", int53 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 23 + "'", int56 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
    }

    @Test
    public void test07175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07175");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(963012L);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes((-1));
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime14.copy();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime14.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.toMutableDateTime(dateTimeZone22);
        mutableDateTime24.add(51L);
        int int27 = mutableDateTime24.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusSeconds((int) (byte) 10);
        java.lang.Object obj37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime34.minus((org.joda.time.ReadableDuration) duration40);
        java.util.TimeZone timeZone44 = java.util.TimeZone.getTimeZone("2022-02-22T10:15:47.721");
        boolean boolean45 = duration40.equals((java.lang.Object) "2022-02-22T10:15:47.721");
        org.joda.time.Duration duration47 = duration40.withMillis(27418772L);
        org.joda.time.Duration duration49 = duration40.plus(963012L);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Period period52 = org.joda.time.Period.days(62176);
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusMinutes(15);
        org.joda.time.DateTime dateTime64 = localDateTime57.toDateTime((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.DateTimeZone dateTimeZone65 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone66 = dateTimeZone65.toTimeZone();
        org.joda.time.DateTime dateTime67 = dateTime64.withZone(dateTimeZone65);
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearDay();
        java.lang.String str70 = periodType69.getName();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(100L, periodType69);
        org.joda.time.DateTime dateTime72 = dateTime67.plus((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.Duration duration73 = period52.toDurationTo((org.joda.time.ReadableInstant) dateTime72);
        int int74 = duration40.compareTo((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period77 = duration76.toPeriod();
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration82 = duration79.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration83 = duration76.minus((org.joda.time.ReadableDuration) duration82);
        long long84 = duration83.getStandardSeconds();
        org.joda.time.Duration duration85 = duration40.minus((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration86 = duration40.toDuration();
        org.joda.time.Duration duration88 = duration86.plus(82546675084800000L);
        org.joda.time.LocalDateTime localDateTime90 = localDateTime13.withDurationAdded((org.joda.time.ReadableDuration) duration86, 37245766);
        org.joda.time.Duration duration91 = duration1.minus((org.joda.time.ReadableDuration) duration86);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "YearDay" + "'", str70, "YearDay");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-1) + "'", int74 == (-1));
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + (-3L) + "'", long84 == (-3L));
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(duration91);
    }

    @Test
    public void test07176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07176");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = builder1.build();
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str5 = locale2.getExtension('x');
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.yearOfCentury();
        mutableDateTime6.addSeconds(0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours14 = duration13.toStandardHours();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.months();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime26, periodType27);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime20, periodType27);
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration38 = duration34.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant40 = dateTime32.toInstant();
        org.joda.time.DateTime dateTime43 = dateTime32.withDurationAdded((long) 3, 4);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        int int46 = dateTime45.getYearOfCentury();
        org.joda.time.DateTime dateTime48 = dateTime45.withSecondOfMinute(53);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration56 = duration53.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration57 = duration50.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant58, readableInstant59, periodType60);
        org.joda.time.DurationFieldType durationFieldType63 = periodType60.getFieldType((int) (short) 0);
        java.lang.String str64 = periodType60.toString();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration50, periodType60);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableInstant) dateTime43, periodType60);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.hourOfDay();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime68.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType74 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str75 = dateTimeFieldType74.getName();
        int int76 = localDateTime68.indexOf(dateTimeFieldType74);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime68.minusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.plusMillis(10);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime78.minusWeeks(21);
        org.joda.time.LocalDateTime.Property property83 = localDateTime78.millisOfDay();
        org.joda.time.Chronology chronology84 = localDateTime78.getChronology();
        org.joda.time.DurationField durationField85 = chronology84.seconds();
        java.util.Locale locale88 = new java.util.Locale("hourOfDay", "2022-02-22T07:16:18.034Z");
        java.util.Set<java.lang.String> strSet89 = locale88.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket90 = new org.joda.time.format.DateTimeParserBucket(86400000L, chronology84, locale88);
        org.joda.time.DurationField durationField91 = chronology84.weekyears();
        org.joda.time.Period period92 = new org.joda.time.Period((java.lang.Object) str5, periodType60, chronology84);
        int int93 = period92.getMinutes();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(hours14);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 33 + "'", int17 == 33);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PeriodType[YearDayTime]" + "'", str64, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeFieldType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "clockhourOfDay" + "'", str75, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(durationField85);
        org.junit.Assert.assertEquals(locale88.toString(), "hourofday_2022-02-22T07:16:18.034Z");
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
    }

    @Test
    public void test07177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07177");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTime.Property property18 = dateTime13.minuteOfDay();
        org.joda.time.DateTime.Property property19 = dateTime13.dayOfYear();
        org.joda.time.DateTime dateTime20 = property19.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test07178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07178");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime9 = localDate1.toDateTimeAtCurrentTime();
        java.lang.String str10 = localDate1.toString();
        int int11 = localDate1.getYearOfEra();
        org.joda.time.LocalDate localDate13 = localDate1.minusYears((int) '4');
        org.joda.time.DateTime dateTime14 = localDate1.toDateTimeAtStartOfDay();
        org.joda.time.Instant instant16 = org.joda.time.Instant.parse("2022-02-22T07:16:52.748Z");
        org.joda.time.Instant instant17 = instant16.toInstant();
        org.joda.time.MutableDateTime mutableDateTime18 = instant17.toMutableDateTime();
        boolean boolean19 = dateTime14.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1969-12-31" + "'", str10, "1969-12-31");
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1969 + "'", int11 == 1969);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test07179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07179");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod14.addSeconds(292278993);
        mutablePeriod14.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime20 = dateTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTime dateTime23 = dateTime7.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        mutableDateTime24.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime24.copy();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime31 = property28.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime31.toMutableDateTime(dateTimeZone32);
        mutableDateTime34.add(51L);
        int int37 = mutableDateTime34.getHourOfDay();
        boolean boolean38 = dateTime23.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = dateTime40.withZoneRetainFields(dateTimeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        int int48 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime47);
        int int49 = dateTime47.getCenturyOfEra();
        org.joda.time.DateTime dateTime51 = dateTime47.withWeekyear(44);
        boolean boolean52 = mutableDateTime34.isBefore((org.joda.time.ReadableInstant) dateTime51);
        int int53 = dateTime51.getMinuteOfHour();
        org.joda.time.DateTime.Property property54 = dateTime51.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime56 = property54.setCopy(61);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 61 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 33 + "'", int13 == 33);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20 + "'", int49 == 20);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 23 + "'", int53 == 23);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test07180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07180");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime4.copy();
        mutableDateTime4.setDate((long) '#');
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean13 = localDate10.isSupported(dateTimeFieldType12);
        int int14 = localDate10.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight16 = localDate10.toDateMidnight(dateTimeZone15);
        org.joda.time.DateTime dateTime17 = mutableDateTime4.toDateTime(dateTimeZone15);
        org.joda.time.LocalDate localDate18 = org.joda.time.LocalDate.now(dateTimeZone15);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.PeriodType periodType23 = period22.getPeriodType();
        boolean boolean24 = dateTimeZone15.equals((java.lang.Object) periodType23);
        org.joda.time.PeriodType periodType25 = periodType23.withHoursRemoved();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime27 = instant26.toDateTime();
        org.joda.time.Instant instant28 = instant26.toInstant();
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 54, periodType25, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.weekyearOfCentury();
        mutableDateTime2.setChronology(chronology29);
        mutableDateTime2.addHours(37205812);
        int int35 = mutableDateTime2.getYearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateMidnight16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 6266 + "'", int35 == 6266);
    }

    @Test
    public void test07181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07181");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 44);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        mutableDateTime6.addSeconds((int) (short) 10);
        java.lang.Object obj16 = mutableDateTime6.clone();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime6.era();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundCeiling();
        mutableDateTime18.setMillisOfSecond((int) 'x');
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1, chronology23);
        int int25 = dateTime24.getHourOfDay();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        int int30 = dateTime29.getYearOfCentury();
        boolean boolean31 = dateTime24.isAfter((org.joda.time.ReadableInstant) dateTime29);
        mutableDateTime18.setTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant33, readableInstant34, periodType35);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        long long46 = chronology41.add(0L, (long) 2022, (int) '4');
        mutablePeriod36.setPeriod((long) 58, chronology41);
        org.joda.time.DateTimeField dateTimeField48 = chronology41.weekyear();
        java.lang.String str49 = dateTimeField48.toString();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusYears(4);
        org.joda.time.format.DateTimePrinter dateTimePrinter54 = null;
        org.joda.time.format.DateTimeParser dateTimeParser55 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter54, dateTimeParser55);
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.Chronology chronology60 = instant59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.eras();
        long long65 = chronology60.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter66 = dateTimeFormatter56.withChronology(chronology60);
        java.lang.Object obj67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(obj67);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField75 = localDateTime73.getField((int) (byte) 0);
        long long77 = dateTimeField75.roundHalfEven((long) 1);
        int int78 = dateTime68.get(dateTimeField75);
        org.joda.time.LocalDateTime localDateTime79 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.withCenturyOfEra((int) 'a');
        java.util.Locale locale87 = java.util.Locale.GERMAN;
        java.lang.String str88 = locale87.getDisplayName();
        java.lang.String str89 = dateTimeField75.getAsText((org.joda.time.ReadablePartial) localDateTime83, 53, locale87);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter90 = dateTimeFormatter56.withLocale(locale87);
        boolean boolean91 = dateTimeFormatter90.isOffsetParsed();
        boolean boolean92 = dateTimeFormatter90.isOffsetParsed();
        java.util.Locale locale93 = dateTimeFormatter90.getLocale();
        java.lang.String str94 = locale93.getLanguage();
        java.lang.String str95 = dateTimeField48.getAsText((org.joda.time.ReadablePartial) localDateTime50, 36950209, locale93);
        java.util.Calendar calendar96 = dateTime29.toCalendar(locale93);
        org.joda.time.LocalDateTime localDateTime97 = org.joda.time.LocalDateTime.fromCalendarFields(calendar96);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:33.325Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:33.325Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:33.325Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 44L + "'", long11 == 44L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(obj16);
        org.junit.Assert.assertEquals(obj16.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 105144L + "'", long46 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "DateTimeField[weekyear]" + "'", str49, "DateTimeField[weekyear]");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 105144L + "'", long65 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter66);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 2022 + "'", int78 == 2022);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str88 + "' != '" + "German" + "'", str88, "German");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "53" + "'", str89, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter90);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + false + "'", boolean91 == false);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "de");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "de" + "'", str94, "de");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "36950209" + "'", str95, "36950209");
        org.junit.Assert.assertNotNull(calendar96);
// flaky:         org.junit.Assert.assertEquals(calendar96.toString(), "java.util.GregorianCalendar[time=1645515513326,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=8,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=38,SECOND=33,MILLISECOND=326,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime97);
    }

    @Test
    public void test07182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07182");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean4 = localDate1.isSupported(dateTimeFieldType3);
        org.joda.time.Chronology chronology5 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField6 = chronology5.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) "1970-01-02T00:00:00.000Z", chronology5);
        org.joda.time.DateTimeField dateTimeField8 = chronology5.era();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField8);
    }

    @Test
    public void test07183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07183");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        mutableDateTime1.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.DurationFieldType durationFieldType22 = null;
        int int23 = periodType20.indexOf(durationFieldType22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.eras();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.DurationField durationField30 = chronology27.eras();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType20, chronology27);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime1.toMutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 0, chronology27);
        org.joda.time.DateTime dateTime37 = dateTime35.plusWeeks(2022);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = dateTime37.withDayOfWeek(62265);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62265 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.099S" + "'", str18, "PT0.099S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test07184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07184");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-22T07:16:26.920Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.dayOfMonth();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test07185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07185");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        int int8 = mutableDateTime7.getCenturyOfEra();
        mutableDateTime7.setMinuteOfDay(1424);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType16);
        org.joda.time.DurationFieldType durationFieldType19 = periodType16.getFieldType((int) (short) 0);
        java.lang.String str20 = periodType16.toString();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 53, (long) (-1), periodType16, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology24);
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = locale27.getDisplayLanguage();
        int int29 = dateTimeField26.getMaximumTextLength(locale27);
        long long31 = dateTimeField26.roundCeiling(949680L);
        mutableDateTime7.setRounding(dateTimeField26);
        int int34 = dateTimeField26.getMinimumValue(0L);
        org.joda.time.DurationField durationField35 = dateTimeField26.getDurationField();
        long long38 = durationField35.add((long) 489, 1324);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[YearDayTime]" + "'", str20, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "English" + "'", str28, "English");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 960000L + "'", long31 == 960000L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 79440489L + "'", long38 == 79440489L);
    }

    @Test
    public void test07186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07186");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        mutableDateTime0.add(1645514161062L);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime0.minuteOfHour();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.LocalDate localDate20 = property18.roundCeilingCopy();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime25 = localDate20.toDateTimeAtMidnight(dateTimeZone24);
        org.joda.time.DateTime.Property property26 = dateTime25.monthOfYear();
        org.joda.time.DateTime dateTime27 = property26.roundHalfCeilingCopy();
        long long28 = property16.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.Period period39 = period37.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        mutableDateTime40.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime40.copy();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime40.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime45 = property44.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime46 = property44.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(readableInstant50, readableInstant51, periodType52);
        org.joda.time.DurationFieldType durationFieldType55 = periodType52.getFieldType((int) (short) 0);
        java.lang.String str56 = periodType52.toString();
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.Chronology chronology60 = instant59.getChronology();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 53, (long) (-1), periodType52, chronology60);
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType47.getField(chronology60);
        java.util.Locale locale63 = java.util.Locale.UK;
        java.lang.String str64 = locale63.getDisplayLanguage();
        int int65 = dateTimeField62.getMaximumTextLength(locale63);
        mutableDateTime46.setRounding(dateTimeField62);
        org.joda.time.Duration duration67 = period37.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime46.centuryOfEra();
        int int69 = mutableDateTime46.getYear();
        org.joda.time.DateTimeField dateTimeField70 = mutableDateTime46.getRoundingField();
        org.joda.time.ReadablePartial readablePartial71 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.PeriodType periodType76 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(readableInstant74, readableInstant75, periodType76);
        org.joda.time.DurationFieldType durationFieldType79 = periodType76.getFieldType((int) (short) 0);
        java.lang.String str80 = periodType76.toString();
        org.joda.time.Instant instant81 = new org.joda.time.Instant();
        org.joda.time.Instant instant83 = instant81.withMillis(0L);
        org.joda.time.Chronology chronology84 = instant83.getChronology();
        org.joda.time.Period period85 = new org.joda.time.Period((long) 53, (long) (-1), periodType76, chronology84);
        org.joda.time.LocalDate localDate86 = org.joda.time.LocalDate.now(chronology84);
        org.joda.time.LocalDate.Property property87 = localDate86.centuryOfEra();
        org.joda.time.LocalDate localDate88 = property87.roundCeilingCopy();
        org.joda.time.Chronology chronology89 = localDate88.getChronology();
        int int90 = localDate88.getYearOfEra();
        int[] intArray91 = localDate88.getValues();
        int int92 = dateTimeField70.getMaximumValue(readablePartial71, intArray91);
        long long95 = dateTimeField70.getDifferenceAsLong((long) 37079542, (long) 57);
        int int96 = dateTime27.get(dateTimeField70);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = dateTime27.toString("2022-02-22T07:21:25.346");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 27418779L + "'", long28 == 27418779L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PeriodType[YearDayTime]" + "'", str56, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "English" + "'", str64, "English");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 4 + "'", int65 == 4);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "PeriodType[YearDayTime]" + "'", str80, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(localDate86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(chronology89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 2100 + "'", int90 == 2100);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[2100, 1, 1]");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1439 + "'", int92 == 1439);
        org.junit.Assert.assertTrue("'" + long95 + "' != '" + 617L + "'", long95 == 617L);
        org.junit.Assert.assertTrue("'" + int96 + "' != '" + 1140 + "'", int96 == 1140);
    }

    @Test
    public void test07187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07187");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime8.toMutableDateTime(dateTimeZone9);
        mutableDateTime11.add(51L);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime15.copy();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime23 = property19.set(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        int int27 = dateTime25.getWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime25.withEarlierOffsetAtOverlap();
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime28.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone31.isFixed();
        mutableDateTime30.setZoneRetainFields(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime23.toMutableDateTime(dateTimeZone31);
        mutableDateTime11.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime41 = dateTime39.withZoneRetainFields(dateTimeZone40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone44);
        int int47 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = dateTime46.minusWeeks(44);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMinutes(15);
        org.joda.time.Chronology chronology54 = dateTime51.getChronology();
        java.lang.String str55 = chronology54.toString();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.dayOfYear();
        org.joda.time.DateTime dateTime57 = dateTime46.withChronology(chronology54);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(readableInstant59, readableInstant60, periodType61);
        org.joda.time.DurationFieldType durationFieldType64 = periodType61.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType65 = periodType61.withMillisRemoved();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime57, readableDuration58, periodType65);
        org.joda.time.Period period67 = new org.joda.time.Period(0L, periodType65);
        org.joda.time.format.DateTimePrinter dateTimePrinter68 = null;
        org.joda.time.format.DateTimeParser dateTimeParser69 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter68, dateTimeParser69);
        org.joda.time.Instant instant71 = new org.joda.time.Instant();
        org.joda.time.Instant instant73 = instant71.withMillis(0L);
        org.joda.time.Chronology chronology74 = instant73.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.eras();
        long long79 = chronology74.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter70.withChronology(chronology74);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(3600000L, periodType65, chronology74);
        org.joda.time.DateTimeZone dateTimeZone82 = chronology74.getZone();
        boolean boolean83 = dateTimeZone31.equals((java.lang.Object) chronology74);
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((long) 26252, dateTimeZone31);
        java.util.TimeZone timeZone85 = dateTimeZone31.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str88 = timeZone85.getDisplayName(true, 26284);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal style: 26284");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T07:23:33.462Z" + "'", str29, "2022-02-22T07:23:33.462Z");
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 105144L + "'", long79 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(timeZone85);
// flaky:         org.junit.Assert.assertEquals(timeZone85.getDisplayName(), "Coordinated Universal Time");
    }

    @Test
    public void test07188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07188");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        int int4 = localTime3.getMinuteOfHour();
        java.lang.String str6 = localTime3.toString("1");
        org.joda.time.LocalTime localTime8 = localTime3.minusMinutes(15);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 15);
        org.joda.time.DateTime.Property property15 = dateTime10.year();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime();
        org.joda.time.LocalTime localTime19 = dateTime16.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime3.withFields((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime22 = localTime19.minus(readablePeriod21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str24 = dateTimeFieldType23.getName();
        int int25 = localTime22.get(dateTimeFieldType23);
        int int26 = localTime22.getMillisOfSecond();
        org.joda.time.Chronology chronology27 = localTime22.getChronology();
        int int28 = localTime22.getHourOfDay();
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "clockhourOfDay" + "'", str24, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 24 + "'", int25 == 24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
    }

    @Test
    public void test07189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07189");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean12 = duration6.isLongerThan((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration13 = duration3.minus((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Days days14 = duration3.toStandardDays();
        boolean boolean15 = duration1.isEqual((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1, chronology17);
        int int19 = dateTime18.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period29 = period27.minusSeconds((-1));
        java.lang.String str30 = period27.toString();
        org.joda.time.Period period31 = period27.toPeriod();
        org.joda.time.PeriodType periodType32 = period27.getPeriodType();
        org.joda.time.Period period33 = period23.normalizedStandard(periodType32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        long long42 = chronology37.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField43 = chronology37.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(44L, periodType32, chronology37);
        org.joda.time.DateTimeField dateTimeField45 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTime dateTime46 = dateTime18.toDateTime(chronology37);
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property50 = localDate49.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean52 = localDate49.isSupported(dateTimeFieldType51);
        org.joda.time.Chronology chronology53 = localDate49.getChronology();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology53);
        org.joda.time.MutableDateTime mutableDateTime55 = dateTime46.toMutableDateTime(chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.year();
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTime dateTime60 = dateTime58.plusDays(69);
        org.joda.time.DateTime dateTime62 = dateTime60.plusMinutes((int) (byte) -1);
        org.joda.time.Period period63 = duration3.toPeriodTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.Period period64 = duration3.toPeriod();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(days14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0.099S" + "'", str30, "PT0.099S");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 105144L + "'", long42 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period64);
    }

    @Test
    public void test07190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07190");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        mutableDateTime11.setDate((long) '#');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        int int21 = localDate17.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.PeriodType periodType30 = period29.getPeriodType();
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) periodType30);
        mutableDateTime5.setZoneRetainFields(dateTimeZone22);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.DateTime dateTime34 = localDate0.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.Chronology chronology35 = localDate0.getChronology();
        org.joda.time.LocalDate localDate37 = localDate0.withYearOfEra(26223);
        int int38 = localDate0.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusMillis((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property45 = localDateTime39.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime39.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime39.withYear(45);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardHours((long) 2);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plus((org.joda.time.ReadableDuration) duration51);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period53 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate0, (org.joda.time.ReadablePartial) localDateTime49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: ReadablePartial objects must have the same set of fields");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2 + "'", int38 == 2);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(localDateTime52);
    }

    @Test
    public void test07191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07191");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMillis(49);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withSecondOfMinute(3);
        int int11 = localDateTime6.getMillisOfSecond();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(15);
        org.joda.time.Chronology chronology19 = dateTime16.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.hours();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(1440L, chronology19);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(chronology19);
        org.joda.time.Chronology chronology23 = chronology19.withUTC();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) 575, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.millisOfDay();
        java.lang.String str26 = dateTimeField25.getName();
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("12");
        java.lang.String str30 = dateTimeField25.getAsText((long) 37188122, locale29);
        java.lang.String str31 = localDateTime6.toString("00:19:29.628", locale29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime6.minusDays(23);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 694 + "'", int11 == 694);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "millisOfDay" + "'", str26, "millisOfDay");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "37188122" + "'", str30, "37188122");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "00:19:29.628" + "'", str31, "00:19:29.628");
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test07192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07192");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours21 = duration20.toStandardHours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration17.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean47 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant48 = instant15.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours51 = duration50.toStandardHours();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        int int54 = dateTime53.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant58 = new org.joda.time.Instant();
        org.joda.time.Instant instant60 = instant58.withMillis(0L);
        org.joda.time.DateTime dateTime61 = instant60.toDateTime();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.months();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime63, periodType64);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime57, periodType64);
        org.joda.time.Instant instant68 = instant15.withDurationAdded((org.joda.time.ReadableDuration) duration50, 113);
        org.joda.time.Chronology chronology69 = instant68.getChronology();
        org.joda.time.Chronology chronology70 = instant68.getChronology();
        org.joda.time.Instant instant71 = instant68.toInstant();
        org.joda.time.Instant instant73 = instant71.plus((long) 86399364);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT86400S" + "'", str18, "PT86400S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(hours21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 33 + "'", int24 == 33);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(hours51);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 33 + "'", int54 == 33);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(instant73);
    }

    @Test
    public void test07193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07193");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = duration1.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        boolean boolean19 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration21 = duration10.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime22.copy();
        mutableDateTime22.setDate((long) '#');
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        int int32 = localDate28.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight34 = localDate28.toDateMidnight(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = mutableDateTime22.toDateTime(dateTimeZone33);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod36.copy();
        mutablePeriod37.clear();
        mutablePeriod37.setPeriod(21L, (long) '#');
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod37.toMutablePeriod();
        mutablePeriod37.setMinutes(26472);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53 + "'", int32 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(mutablePeriod42);
    }

    @Test
    public void test07194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07194");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate.Property property6 = localDate5.centuryOfEra();
        org.joda.time.Interval interval7 = localDate5.toInterval();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod10.clear();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration17 = duration13.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes(15);
        org.joda.time.Interval interval22 = duration17.toIntervalTo((org.joda.time.ReadableInstant) dateTime21);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) interval22);
        mutablePeriod10.setMillis((int) ' ');
        mutablePeriod10.setPeriod((long) 2);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.LocalDate localDate31 = property29.roundCeilingCopy();
        org.joda.time.LocalDate localDate33 = localDate31.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate35 = localDate31.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate37 = localDate35.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        mutableDateTime38.add((long) 'a');
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.yearOfCentury();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period44 = duration43.toPeriod();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration49 = duration46.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration50 = duration43.minus((org.joda.time.ReadableDuration) duration49);
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration43);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime38.centuryOfEra();
        mutableDateTime38.addHours((int) (byte) 10);
        int int55 = mutableDateTime38.getSecondOfDay();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property57 = localDate56.monthOfYear();
        org.joda.time.LocalDate.Property property58 = localDate56.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(readableInstant59, readableInstant60, periodType61);
        org.joda.time.DurationFieldType durationFieldType64 = periodType61.getFieldType((int) (short) 0);
        boolean boolean65 = localDate56.isSupported(durationFieldType64);
        mutableDateTime38.add(durationFieldType64, (-292275054));
        org.joda.time.LocalDate localDate69 = localDate35.withFieldAdded(durationFieldType64, 53);
        boolean boolean70 = mutablePeriod10.isSupported(durationFieldType64);
        boolean boolean71 = localDate5.isSupported(durationFieldType64);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period(readableDuration72, readableInstant73);
        org.joda.time.Period period76 = period74.withDays((int) (byte) 1);
        org.joda.time.Period period78 = period76.minusWeeks(100);
        org.joda.time.Period period79 = period78.negated();
        org.joda.time.LocalDate localDate80 = localDate5.minus((org.joda.time.ReadablePeriod) period79);
        org.joda.time.Instant instant83 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime84 = instant83.toDateTime();
        org.joda.time.Instant instant85 = instant83.toInstant();
        org.joda.time.Chronology chronology86 = instant85.getChronology();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(964100L, (long) 26172069, chronology86);
        org.joda.time.LocalDate localDate88 = localDate5.plus((org.joda.time.ReadablePeriod) mutablePeriod87);
        org.joda.time.DateTimeField[] dateTimeFieldArray89 = localDate88.getFields();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(property52);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 62613 + "'", int55 == 62613);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(localDate88);
        org.junit.Assert.assertNotNull(dateTimeFieldArray89);
    }

    @Test
    public void test07195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07195");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        mutablePeriod2.setMonths(152);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod20.clear();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.Interval interval32 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime31);
        mutablePeriod20.setPeriod((org.joda.time.ReadableInterval) interval32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant34, readableInstant35, periodType36);
        org.joda.time.DurationFieldType durationFieldType39 = periodType36.getFieldType((int) (short) 0);
        int int40 = mutablePeriod20.get(durationFieldType39);
        int int41 = mutablePeriod2.indexOf(durationFieldType39);
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod2.copy();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime46 = property44.set(45);
        org.joda.time.MutableDateTime mutableDateTime47 = property44.roundFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.Chronology chronology53 = instant52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.eras();
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.now(chronology53);
        org.joda.time.DurationField durationField56 = chronology53.eras();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 44, chronology53);
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType48.getField(chronology53);
        org.joda.time.PeriodType periodType61 = null;
        org.joda.time.Period period62 = new org.joda.time.Period((long) 100, 1L, periodType61);
        org.joda.time.Period period64 = period62.minusSeconds((-1));
        java.lang.String str65 = period62.toString();
        long long68 = chronology53.add((org.joda.time.ReadablePeriod) period62, (long) ' ', (int) 'a');
        org.joda.time.Period period70 = period62.minusHours((-292275054));
        org.joda.time.Period period72 = period70.minusHours(2000);
        int int73 = period70.getMinutes();
        org.joda.time.Period period74 = period70.toPeriod();
        mutableDateTime47.add((org.joda.time.ReadablePeriod) period74);
        org.joda.time.Period period77 = period74.minusYears(443);
        org.joda.time.Period period79 = period77.minusDays(19);
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.PeriodType periodType82 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod83 = new org.joda.time.MutablePeriod(readableInstant80, readableInstant81, periodType82);
        mutablePeriod83.setYears((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray86 = mutablePeriod83.getFieldTypes();
        org.joda.time.PeriodType periodType87 = org.joda.time.PeriodType.forFields(durationFieldTypeArray86);
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.forFields(durationFieldTypeArray86);
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.forFields(durationFieldTypeArray86);
        org.joda.time.PeriodType periodType90 = periodType89.withYearsRemoved();
        org.joda.time.Period period91 = period79.normalizedStandard(periodType89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period92 = new org.joda.time.Period((java.lang.Object) mutablePeriod2, periodType89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'months'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType48);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "PT0.099S" + "'", str65, "PT0.099S");
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-9571L) + "'", long68 == (-9571L));
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(durationFieldTypeArray86);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(periodType90);
        org.junit.Assert.assertNotNull(period91);
    }

    @Test
    public void test07196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07196");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        mutableDateTime16.addHours(26150565);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.eras();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.secondOfMinute();
        mutableDateTime16.setRounding(dateTimeField30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime16.secondOfMinute();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime16.yearOfEra();
        mutableDateTime16.addHours((-9));
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test07197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07197");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(26237, 37273329, 26392, 26378969, 22774, 26505, 26495347);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26378969 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07198");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale2.getISO3Language();
        java.util.Locale.Builder builder5 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        java.util.Locale.Builder builder7 = builder1.clear();
        java.util.Locale.Builder builder9 = builder7.removeUnicodeLocaleAttribute("2022");
        java.util.Locale.Category category10 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.getDefault(category10);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration19 = duration15.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration19);
        java.util.Locale locale21 = java.util.Locale.UK;
        java.util.Calendar calendar22 = dateTime13.toCalendar(locale21);
        java.lang.Object obj23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(obj23);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField31 = localDateTime29.getField((int) (byte) 0);
        long long33 = dateTimeField31.roundHalfEven((long) 1);
        int int34 = dateTime24.get(dateTimeField31);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) 'a');
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.lang.String str44 = locale43.getDisplayName();
        java.lang.String str45 = dateTimeField31.getAsText((org.joda.time.ReadablePartial) localDateTime39, 53, locale43);
        java.lang.String str47 = dateTimeField31.getAsShortText((long) (byte) 100);
        long long49 = dateTimeField31.roundHalfEven((long) '4');
        java.util.Locale locale51 = java.util.Locale.getDefault();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField58 = localDateTime56.getField((int) (byte) 0);
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str61 = dateTimeField58.getAsShortText((long) '4', locale60);
        java.lang.String str62 = locale60.getVariant();
        java.lang.String str63 = locale51.getDisplayScript(locale60);
        java.lang.String str64 = dateTimeField31.getAsShortText((int) (short) 1, locale51);
        java.lang.String str65 = locale21.getDisplayLanguage(locale51);
        java.util.Locale.setDefault(locale21);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(readableInstant70, readableInstant71, periodType72);
        org.joda.time.DurationFieldType durationFieldType75 = periodType72.getFieldType((int) (short) 0);
        java.lang.String str76 = periodType72.toString();
        org.joda.time.Instant instant77 = new org.joda.time.Instant();
        org.joda.time.Instant instant79 = instant77.withMillis(0L);
        org.joda.time.Chronology chronology80 = instant79.getChronology();
        org.joda.time.Period period81 = new org.joda.time.Period((long) 53, (long) (-1), periodType72, chronology80);
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType67.getField(chronology80);
        java.util.Locale locale83 = java.util.Locale.UK;
        java.lang.String str84 = locale83.getDisplayLanguage();
        int int85 = dateTimeField82.getMaximumTextLength(locale83);
        java.lang.String str86 = locale21.getDisplayCountry(locale83);
        java.util.Locale.setDefault(category10, locale83);
        java.util.Locale locale88 = java.util.Locale.getDefault(category10);
        java.util.Locale.Builder builder89 = builder9.setLocale(locale88);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder91 = builder9.removeUnicodeLocaleAttribute("2022-02-22T07:21:26.087Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: 2022-02-22T07:21:26.087Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "German" + "'", str3, "German");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category10.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
// flaky:         org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_GB");
        org.junit.Assert.assertNotNull(calendar22);
        org.junit.Assert.assertEquals(calendar22.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2022 + "'", int34 == 2022);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "German" + "'", str44, "German");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "53" + "'", str45, "53");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "1970" + "'", str47, "1970");
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 0L + "'", long49 == 0L);
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970" + "'", str61, "1970");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "1" + "'", str64, "1");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "English" + "'", str65, "English");
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PeriodType[YearDayTime]" + "'", str76, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "English" + "'", str84, "English");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "United Kingdom" + "'", str86, "United Kingdom");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en_GB");
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test07199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07199");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours21 = duration20.toStandardHours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration17.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean47 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant48 = instant15.minus((org.joda.time.ReadableDuration) duration31);
        long long49 = instant48.getMillis();
        org.joda.time.Instant instant51 = instant48.plus((long) 47831274);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str54 = duration53.toString();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours57 = duration56.toStandardHours();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        int int60 = dateTime59.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.Duration duration62 = duration53.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration63 = duration53.toDuration();
        org.joda.time.Duration duration65 = duration53.plus(1645514191495L);
        org.joda.time.Duration duration67 = duration53.minus(4801285211007L);
        org.joda.time.Instant instant69 = instant51.withDurationAdded((org.joda.time.ReadableDuration) duration67, 1260);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT86400S" + "'", str18, "PT86400S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(hours21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 33 + "'", int24 == 33);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(instant48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1645428217875L + "'", long49 == 1645428217875L);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT86400S" + "'", str54, "PT86400S");
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(hours57);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 33 + "'", int60 == 33);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(instant69);
    }

    @Test
    public void test07200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07200");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.millisOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfYear();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.LocalDate localDate23 = localDate13.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 3);
        org.joda.time.DateTime dateTime24 = localDate23.toDateTimeAtCurrentTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property26 = dateTime24.yearOfEra();
        org.joda.time.DateTime dateTime28 = property26.addToCopy(26319);
        org.joda.time.DateTime.Property property29 = dateTime28.weekyear();
        org.joda.time.DateTime dateTime31 = dateTime28.plusWeeks(177);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT86400S" + "'", str7, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.099S" + "'", str21, "PT0.099S");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test07201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07201");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-22T07:17:11.414Z");
        int int2 = mutableDateTime1.getRoundingMode();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
    }

    @Test
    public void test07202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07202");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        boolean boolean7 = dateTime5.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology8 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean13 = localDate10.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate10.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime15.copy();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.copy();
        mutableDateTime21.setDate((long) '#');
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean30 = localDate27.isSupported(dateTimeFieldType29);
        int int31 = localDate27.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight33 = localDate27.toDateMidnight(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime21.toDateTime(dateTimeZone32);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone32);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) 100, 1L, periodType38);
        org.joda.time.PeriodType periodType40 = period39.getPeriodType();
        boolean boolean41 = dateTimeZone32.equals((java.lang.Object) periodType40);
        mutableDateTime15.setZoneRetainFields(dateTimeZone32);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.DateTime dateTime44 = localDate10.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime45 = localDate10.toDateTimeAtStartOfDay();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField55 = chronology49.secondOfMinute();
        boolean boolean56 = dateTimeField55.isSupported();
        long long58 = dateTimeField55.roundHalfEven(946312L);
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.lang.String str63 = dateTimeField55.getAsText(86400000L, locale61);
        java.util.Set<java.lang.String> strSet64 = locale61.getUnicodeLocaleAttributes();
        boolean boolean65 = locale61.hasExtensions();
        java.lang.String str66 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate10, locale61);
        java.util.Set<java.lang.Character> charSet67 = locale61.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 707, chronology1, locale61, (java.lang.Integer) 26342498);
        java.util.Set<java.lang.String> strSet70 = locale61.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean72 = strSet70.add("+00:00");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: null");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53 + "'", int31 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 105144L + "'", long54 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 946000L + "'", long58 == 946000L);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0" + "'", str63, "0");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "AD" + "'", str66, "AD");
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertNotNull(strSet70);
    }

    @Test
    public void test07203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07203");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period10 = period8.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        mutableDateTime17.setRounding(dateTimeField33);
        org.joda.time.Duration duration38 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime17.centuryOfEra();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        mutablePeriod44.setPeriod((long) 999, chronology49);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod58.addDays((int) (byte) 10);
        mutablePeriod58.addMillis((int) '4');
        mutablePeriod58.setSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime(dateTimeZone65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalTime localTime68 = localTime66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(readableInstant69, readableInstant70, periodType71);
        org.joda.time.DurationFieldType durationFieldType74 = periodType71.getFieldType((int) (short) 0);
        boolean boolean75 = localTime66.isSupported(durationFieldType74);
        mutablePeriod58.add(durationFieldType74, 8);
        boolean boolean78 = mutablePeriod44.isSupported(durationFieldType74);
        mutablePeriod44.addWeeks(443);
        mutableDateTime17.add((org.joda.time.ReadablePeriod) mutablePeriod44, 26176);
        org.joda.time.MutableDateTime mutableDateTime83 = mutableDateTime17.toMutableDateTime();
        mutableDateTime83.addWeeks(707);
        mutableDateTime83.addWeekyears(26491408);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "English" + "'", str35, "English");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(mutableDateTime83);
    }

    @Test
    public void test07204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07204");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.DateTime dateTime17 = dateTime5.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear(26148950);
        int int20 = dateTime17.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.copy();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property25.add((long) (byte) 10);
        int int29 = mutableDateTime28.getCenturyOfEra();
        int int30 = dateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime28);
        long long31 = dateTime17.getMillis();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration36 = duration33.withDurationAdded((long) (short) 100, (int) ' ');
        long long37 = duration36.getMillis();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.DateTime dateTime45 = instant44.toDateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.months();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime47, periodType48);
        boolean boolean50 = dateTime41.isBefore((org.joda.time.ReadableInstant) dateTime45);
        int int51 = dateTime45.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.PeriodType periodType56 = periodType54.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime45, periodType54);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusMinutes(15);
        org.joda.time.Chronology chronology62 = dateTime59.getChronology();
        org.joda.time.Instant instant63 = new org.joda.time.Instant();
        org.joda.time.Instant instant65 = instant63.withMillis(0L);
        org.joda.time.Chronology chronology66 = instant65.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.eras();
        org.joda.time.LocalTime localTime68 = org.joda.time.LocalTime.now(chronology66);
        org.joda.time.DurationField durationField69 = chronology66.eras();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.hourOfDay();
        org.joda.time.DateTime dateTime71 = dateTime59.withChronology(chronology66);
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime74 = property73.getMutableDateTime();
        boolean boolean75 = dateTime71.isBefore((org.joda.time.ReadableInstant) mutableDateTime74);
        org.joda.time.Instant instant76 = new org.joda.time.Instant();
        org.joda.time.Instant instant78 = instant76.withMillis(0L);
        org.joda.time.Chronology chronology79 = instant78.getChronology();
        org.joda.time.DurationField durationField80 = chronology79.eras();
        long long84 = chronology79.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField85 = chronology79.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField86 = chronology79.minuteOfDay();
        mutableDateTime74.setChronology(chronology79);
        org.joda.time.DateTime dateTime88 = dateTime45.toDateTime(chronology79);
        org.joda.time.DateTime dateTime90 = dateTime88.withYearOfCentury((int) 'a');
        org.joda.time.DateTime dateTime91 = dateTime90.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime92 = dateTime91.toMutableDateTime();
        org.joda.time.Period period93 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime91);
        org.joda.time.DateTime dateTime95 = dateTime91.minusSeconds(27425243);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-98L) + "'", long31 == (-98L));
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86403200L + "'", long37 == 86403200L);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(durationField80);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 105144L + "'", long84 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(mutableDateTime92);
        org.junit.Assert.assertNotNull(dateTime95);
    }

    @Test
    public void test07205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07205");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant4, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime((long) (short) 100, chronology14);
        org.joda.time.DurationFieldType durationFieldType16 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str17 = durationFieldType16.getName();
        boolean boolean18 = localTime15.isSupported(durationFieldType16);
        boolean boolean19 = period12.isSupported(durationFieldType16);
        org.joda.time.Period period21 = period12.minusMinutes(26249317);
        org.joda.time.Period period23 = period12.plusDays(26235);
        org.joda.time.Period period25 = period23.withMonths(26530);
        org.joda.time.Period period26 = period23.negated();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableInstant27, readableInstant28, periodType29);
        mutablePeriod30.setYears((int) '#');
        org.joda.time.Chronology chronology34 = null;
        mutablePeriod30.add((long) 1, chronology34);
        org.joda.time.ReadableInterval readableInterval36 = null;
        mutablePeriod30.setPeriod(readableInterval36);
        int int38 = mutablePeriod30.getMinutes();
        mutablePeriod30.add((long) 29);
        org.joda.time.Period period41 = period23.plus((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:23:34.244Z" + "'", str10, "2022-02-22T07:23:34.244Z");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "weeks" + "'", str17, "weeks");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test07206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07206");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime9 = localTime7.withHourOfDay(0);
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfSecond(44);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localTime11.getFields();
        org.joda.time.DateTime dateTime13 = localTime11.toDateTimeToday();
        boolean boolean14 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTime.Property property15 = dateTime13.dayOfYear();
        org.joda.time.DateTime.Property property16 = dateTime13.millisOfDay();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime19 = property16.setCopy("9551");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test07207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07207");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        java.lang.String str5 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.addToCopy(100L);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMinutes(46);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfDay((int) 'a');
        org.joda.time.LocalDateTime localDateTime13 = localDateTime7.withYear(695785);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        int int17 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property19 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime21 = property19.roundHalfEvenCopy();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours24 = duration23.toStandardHours();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26);
        mutablePeriod28.addSeconds(292278993);
        mutablePeriod28.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime34 = dateTime21.minus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DateTime dateTime37 = dateTime21.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.DateTime.Property property38 = dateTime37.year();
        int int39 = dateTime37.getMillisOfSecond();
        org.joda.time.DateTime dateTime41 = dateTime37.minusMillis((-292275054));
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period47 = duration46.toPeriod();
        org.joda.time.Duration duration50 = duration46.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant51 = instant44.plus((org.joda.time.ReadableDuration) duration50);
        long long52 = instant51.getMillis();
        long long53 = instant51.getMillis();
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str59 = duration58.toString();
        org.joda.time.Instant instant60 = instant54.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.MutableDateTime mutableDateTime61 = instant54.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property65 = localDateTime62.hourOfDay();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime62.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str69 = dateTimeFieldType68.getName();
        int int70 = localDateTime62.indexOf(dateTimeFieldType68);
        java.lang.String str71 = dateTimeFieldType68.getName();
        int int72 = mutableDateTime61.get(dateTimeFieldType68);
        int int73 = instant51.get(dateTimeFieldType68);
        java.lang.String str74 = dateTimeFieldType68.toString();
        int int75 = dateTime37.get(dateTimeFieldType68);
        int int76 = localDateTime7.get(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[hourOfDay]" + "'", str5, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(hours24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 34 + "'", int27 == 34);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 31 + "'", int39 == 31);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 86400000L + "'", long52 == 86400000L);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 86400000L + "'", long53 == 86400000L);
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PT86400S" + "'", str59, "PT86400S");
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "clockhourOfDay" + "'", str69, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + (-1) + "'", int70 == (-1));
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "clockhourOfDay" + "'", str71, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 7 + "'", int72 == 7);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 24 + "'", int73 == 24);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "clockhourOfDay" + "'", str74, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 23 + "'", int75 == 23);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 11 + "'", int76 == 11);
    }

    @Test
    public void test07208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07208");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.hourOfDay();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime1.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str8 = dateTimeFieldType7.getName();
        int int9 = localDateTime1.indexOf(dateTimeFieldType7);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime1.minusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMillis(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusWeeks(21);
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.millisOfDay();
        org.joda.time.Chronology chronology17 = localDateTime11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        org.joda.time.DurationField durationField19 = chronology17.eras();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField26 = localDateTime24.getField((int) (byte) 0);
        java.lang.String str27 = localDateTime24.toString();
        org.joda.time.LocalDateTime.Property property28 = localDateTime24.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime31 = property28.addWrapFieldToCopy(100);
        int int32 = property28.getMaximumValue();
        boolean boolean33 = property28.isLeap();
        int int34 = property28.getMinimumValue();
        java.lang.Object obj35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(obj35);
        int int37 = dateTime36.getHourOfDay();
        boolean boolean38 = property28.equals((java.lang.Object) int37);
        org.joda.time.LocalDateTime localDateTime39 = property28.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime40 = property28.withMinimumValue();
        org.joda.time.Chronology chronology42 = null;
        java.util.Locale locale43 = java.util.Locale.GERMAN;
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.lang.String str45 = locale43.getDisplayVariant(locale44);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket47 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology42, locale44, (java.lang.Integer) 10);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.lang.String str54 = locale53.getDisplayName();
        java.lang.String str55 = dateTimeZone51.getName(100L, locale53);
        java.lang.String str56 = locale49.getDisplayScript(locale53);
        java.lang.String str57 = locale44.getDisplayScript(locale49);
        int int58 = property28.getMaximumTextLength(locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) 26286, chronology17, locale49, (java.lang.Integer) 1191, 0);
        boolean boolean62 = locale49.hasExtensions();
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "clockhourOfDay" + "'", str8, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T10:23:34.373" + "'", str27, "2022-02-22T10:23:34.373");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 52 + "'", int32 == 52);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 7 + "'", int37 == 7);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\u5fb7\u6587" + "'", str54, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "+00:00" + "'", str55, "+00:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2 + "'", int58 == 2);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test07209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07209");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        mutablePeriod3.setSeconds((int) 'a');
        mutablePeriod3.setPeriod((long) 0, (-1L));
        mutablePeriod3.addHours((-1));
        int int13 = mutablePeriod3.getYears();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType16);
        mutablePeriod17.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod20 = mutablePeriod17.toMutablePeriod();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getRangeDurationType();
        int int26 = mutablePeriod17.indexOf(durationFieldType25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration48 = duration37.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now();
        mutableDateTime49.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime49.copy();
        mutableDateTime49.setDate((long) '#');
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property56 = localDate55.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean58 = localDate55.isSupported(dateTimeFieldType57);
        int int59 = localDate55.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight61 = localDate55.toDateMidnight(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = mutableDateTime49.toDateTime(dateTimeZone60);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod63.copy();
        mutablePeriod64.clear();
        mutablePeriod64.setPeriod(21L, (long) '#');
        mutablePeriod17.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod64);
        org.joda.time.LocalDate localDate70 = new org.joda.time.LocalDate();
        int int71 = localDate70.getDayOfMonth();
        org.joda.time.DateTime dateTime72 = localDate70.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate74 = localDate70.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate76 = localDate74.plusDays(26150565);
        org.joda.time.DateTimeZone dateTimeZone77 = null;
        org.joda.time.DateTime dateTime78 = localDate74.toDateTimeAtStartOfDay(dateTimeZone77);
        org.joda.time.Duration duration79 = mutablePeriod64.toDurationFrom((org.joda.time.ReadableInstant) dateTime78);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration79);
        mutablePeriod3.setPeriod(50061L, 1645514593110L);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(mutablePeriod20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53 + "'", int59 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(mutablePeriod64);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 22 + "'", int71 == 22);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(duration79);
    }

    @Test
    public void test07210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07210");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant4, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTime dateTime13 = instant4.toDateTimeISO();
        boolean boolean14 = dateTime13.isEqualNow();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:23:34.553Z" + "'", str10, "2022-02-22T07:23:34.553Z");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07211");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        int int15 = dateTime14.getSecondOfDay();
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime14.toYearMonthDay();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (short) 100, chronology18);
        int int20 = localTime19.getMillisOfDay();
        org.joda.time.LocalTime.Property property21 = localTime19.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalTime localTime24 = property21.addCopy((long) 26228);
        org.joda.time.LocalTime localTime25 = property21.withMinimumValue();
        org.joda.time.LocalTime localTime26 = property21.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean27 = yearMonthDay16.isAfter((org.joda.time.ReadablePartial) localTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 26614 + "'", int15 == 26614);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 100 + "'", int20 == 100);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
    }

    @Test
    public void test07212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07212");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.centuries();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.centuryOfEra();
        org.joda.time.DurationField durationField18 = chronology13.millis();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.weekyearOfCentury();
        org.joda.time.DurationField durationField20 = dateTimeField19.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.yearOfCentury();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration34 = duration31.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration35 = duration28.minus((org.joda.time.ReadableDuration) duration34);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime23.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.DateTimeField dateTimeField42 = property41.getField();
        int int43 = property41.get();
        java.util.Locale locale44 = java.util.Locale.getDefault();
        java.lang.String str45 = property41.getAsShortText(locale44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int52 = localDateTime50.get(dateTimeFieldType51);
        java.util.Locale locale53 = java.util.Locale.TRADITIONAL_CHINESE;
        boolean boolean54 = localDateTime50.equals((java.lang.Object) locale53);
        java.lang.String str55 = locale44.getDisplayVariant(locale53);
        java.lang.String str56 = locale44.getScript();
        java.lang.String str57 = property37.getAsShortText(locale44);
        java.lang.String str58 = locale44.getDisplayLanguage();
        java.lang.String str59 = locale44.getLanguage();
        java.lang.String str60 = locale44.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            long long61 = dateTimeField19.set(951L, "2022-02-22T07:18:20.045Z", locale44);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:18:20.045Z\" for weekyearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertNotNull(locale44);
// flaky:         org.junit.Assert.assertEquals(locale44.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "7" + "'", str45, "7");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1439 + "'", int52 == 1439);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "20" + "'", str57, "20");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\u4e2d\u6587" + "'", str58, "\u4e2d\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "zh" + "'", str59, "zh");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
    }

    @Test
    public void test07213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07213");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.addSeconds(0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours25 = duration24.toStandardHours();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.months();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime42 = dateTime16.plus((org.joda.time.ReadableDuration) duration41);
        int int43 = dateTime16.getHourOfDay();
        org.joda.time.DateTime dateTime45 = dateTime16.withCenturyOfEra(62243);
        org.joda.time.DateTime dateTime46 = dateTime16.toDateTime();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(hours25);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 34 + "'", int28 == 34);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test07214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07214");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        java.lang.String str6 = chronology5.toString();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0, chronology5);
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property9 = localDate7.year();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration18 = duration14.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant19 = instant12.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = duration18.toPeriod(periodType20);
        org.joda.time.Duration duration23 = duration18.withMillis(60000L);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str29 = duration28.toString();
        org.joda.time.Instant instant30 = instant24.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.add((long) 'a');
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime31.yearOfCentury();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration43 = duration36.minus((org.joda.time.ReadableDuration) duration42);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime31.centuryOfEra();
        mutableDateTime31.addHours((int) (byte) 10);
        mutableDateTime31.addWeeks(100);
        boolean boolean50 = instant24.isAfter((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableDuration51, readableInstant52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) 100, 1L, periodType56);
        org.joda.time.Period period59 = period57.minusSeconds((-1));
        java.lang.String str60 = period57.toString();
        org.joda.time.Period period61 = period57.toPeriod();
        org.joda.time.PeriodType periodType62 = period57.getPeriodType();
        org.joda.time.Period period63 = period53.normalizedStandard(periodType62);
        java.lang.String str64 = periodType62.getName();
        int int65 = periodType62.size();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) instant24, periodType62);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str69 = duration68.toString();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours72 = duration71.toStandardHours();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(chronology73);
        int int75 = dateTime74.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration71, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Duration duration77 = duration68.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Instant instant78 = instant24.plus((org.joda.time.ReadableDuration) duration77);
        long long79 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) instant78);
        org.joda.time.LocalDate localDate80 = property9.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime81 = localDate80.toDateTimeAtStartOfDay();
        int int82 = localDate80.size();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT86400S" + "'", str29, "PT86400S");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0.099S" + "'", str60, "PT0.099S");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Standard" + "'", str64, "Standard");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT86400S" + "'", str69, "PT86400S");
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(hours72);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 34 + "'", int75 == 34);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-52L) + "'", long79 == (-52L));
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
    }

    @Test
    public void test07215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07215");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        java.lang.String str6 = chronology5.toString();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0, chronology5);
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property9 = localDate7.year();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration18 = duration14.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant19 = instant12.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period21 = duration18.toPeriod(periodType20);
        org.joda.time.Duration duration23 = duration18.withMillis(60000L);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str29 = duration28.toString();
        org.joda.time.Instant instant30 = instant24.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.add((long) 'a');
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime31.yearOfCentury();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration43 = duration36.minus((org.joda.time.ReadableDuration) duration42);
        mutableDateTime31.add((org.joda.time.ReadableDuration) duration36);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime31.centuryOfEra();
        mutableDateTime31.addHours((int) (byte) 10);
        mutableDateTime31.addWeeks(100);
        boolean boolean50 = instant24.isAfter((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableDuration51, readableInstant52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) 100, 1L, periodType56);
        org.joda.time.Period period59 = period57.minusSeconds((-1));
        java.lang.String str60 = period57.toString();
        org.joda.time.Period period61 = period57.toPeriod();
        org.joda.time.PeriodType periodType62 = period57.getPeriodType();
        org.joda.time.Period period63 = period53.normalizedStandard(periodType62);
        java.lang.String str64 = periodType62.getName();
        int int65 = periodType62.size();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) instant24, periodType62);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str69 = duration68.toString();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours72 = duration71.toStandardHours();
        org.joda.time.Chronology chronology73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(chronology73);
        int int75 = dateTime74.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration71, (org.joda.time.ReadableInstant) dateTime74);
        org.joda.time.Duration duration77 = duration68.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Instant instant78 = instant24.plus((org.joda.time.ReadableDuration) duration77);
        long long79 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) instant78);
        org.joda.time.LocalDate localDate80 = property9.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone82 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale84 = java.util.Locale.GERMAN;
        java.lang.String str85 = locale84.getDisplayName();
        java.lang.String str86 = dateTimeZone82.getName(100L, locale84);
        java.lang.String str87 = dateTimeZone82.toString();
        org.joda.time.MutableDateTime mutableDateTime88 = new org.joda.time.MutableDateTime((long) 1970, dateTimeZone82);
        java.lang.String str90 = dateTimeZone82.getShortName((long) 6);
        org.joda.time.DateTime dateTime91 = localDate80.toDateTimeAtCurrentTime(dateTimeZone82);
        org.joda.time.MutableDateTime mutableDateTime92 = org.joda.time.MutableDateTime.now(dateTimeZone82);
        mutableDateTime92.setMillisOfDay(62166);
        java.lang.String str95 = mutableDateTime92.toString();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT86400S" + "'", str29, "PT86400S");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0.099S" + "'", str60, "PT0.099S");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Standard" + "'", str64, "Standard");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 8 + "'", int65 == 8);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT86400S" + "'", str69, "PT86400S");
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(hours72);
// flaky:         org.junit.Assert.assertTrue("'" + int75 + "' != '" + 34 + "'", int75 == 34);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + (-52L) + "'", long79 == (-52L));
        org.junit.Assert.assertNotNull(localDate80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u5fb7\u6587" + "'", str85, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "+00:00" + "'", str86, "+00:00");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "UTC" + "'", str87, "UTC");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "+00:00" + "'", str90, "+00:00");
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(mutableDateTime92);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "2022-02-22T00:01:02.166Z" + "'", str95, "2022-02-22T00:01:02.166Z");
    }

    @Test
    public void test07216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07216");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.Interval interval12 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.LocalDate.Property property16 = localDate13.yearOfEra();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str22 = duration21.toString();
        org.joda.time.Instant instant23 = instant17.minus((org.joda.time.ReadableDuration) duration21);
        int int24 = property16.getDifference((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant28 = instant17.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str31 = duration30.toString();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours34 = duration33.toStandardHours();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = duration30.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period42 = duration41.toPeriod();
        org.joda.time.Duration duration44 = duration41.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        mutableDateTime45.add((long) 'a');
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime45.yearOfCentury();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration56 = duration53.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration57 = duration50.minus((org.joda.time.ReadableDuration) duration56);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration50);
        boolean boolean59 = duration44.isShorterThan((org.joda.time.ReadableDuration) duration50);
        boolean boolean60 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Instant instant61 = instant28.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Interval interval62 = duration7.toIntervalTo((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        int int65 = dateTime64.getYearOfCentury();
        int int66 = dateTime64.getWeekyear();
        org.joda.time.DateTime dateTime68 = dateTime64.plus((long) 15);
        org.joda.time.DateTime.Property property69 = dateTime64.year();
        org.joda.time.DateTime dateTime70 = property69.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime72 = property69.addToCopy((long) 61);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((-229564796800L));
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableDuration) duration74);
        org.joda.time.DateTime dateTime77 = dateTime72.withWeekyear(0);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant61, (org.joda.time.ReadableInstant) dateTime77, periodType78);
        java.util.Date date80 = dateTime77.toDate();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 34 + "'", int11 == 34);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT86400S" + "'", str22, "PT86400S");
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT86400S" + "'", str31, "PT86400S");
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(hours34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 34 + "'", int37 == 34);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(date80);
// flaky:         org.junit.Assert.assertEquals(date80.toString(), "Mon Feb 23 07:23:34 UTC 1");
    }

    @Test
    public void test07217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07217");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.DateTime dateTime17 = dateTime5.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear(26148950);
        int int20 = dateTime17.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.copy();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property25.add((long) (byte) 10);
        int int29 = mutableDateTime28.getCenturyOfEra();
        int int30 = dateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.DateTime dateTime32 = dateTime17.plusMillis((int) (short) 100);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.yearOfCentury();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration45 = duration38.minus((org.joda.time.ReadableDuration) duration44);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime33.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.roundFloor();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = dateTime50.toString(dateTimeFormatter52);
        mutableDateTime48.setMillis((org.joda.time.ReadableInstant) dateTime50);
        mutableDateTime48.addDays(22);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime48.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod60.clear();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period64 = duration63.toPeriod();
        org.joda.time.Duration duration67 = duration63.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusMinutes(15);
        org.joda.time.Interval interval72 = duration67.toIntervalTo((org.joda.time.ReadableInstant) dateTime71);
        mutablePeriod60.setPeriod((org.joda.time.ReadableInterval) interval72);
        mutablePeriod60.setYears(0);
        mutableDateTime48.add((org.joda.time.ReadablePeriod) mutablePeriod60, 26212);
        org.joda.time.DateTime dateTime78 = dateTime17.minus((org.joda.time.ReadablePeriod) mutablePeriod60);
        org.joda.time.Instant instant79 = dateTime78.toInstant();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime81 = dateTime78.withEra(26306);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26306 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1970 + "'", int20 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 20 + "'", int29 == 20);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 22 + "'", int51 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22T07:23:34.811Z" + "'", str53, "2022-02-22T07:23:34.811Z");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(instant79);
    }

    @Test
    public void test07218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07218");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addYears(0);
        mutableDateTime0.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant28 = instant21.plus((org.joda.time.ReadableDuration) duration27);
        long long29 = instant28.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) instant28);
        mutableDateTime0.addHours(20);
        mutableDateTime0.setMillisOfSecond(57);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime0.yearOfCentury();
        int int36 = mutableDateTime0.getMillisOfDay();
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.months();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime42, periodType43);
        org.joda.time.DateTime.Property property45 = dateTime42.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = property45.getFieldType();
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Chronology chronology50 = instant49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.eras();
        long long55 = chronology50.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField56 = chronology50.secondOfMinute();
        boolean boolean57 = dateTimeField56.isSupported();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property59 = localDate58.monthOfYear();
        int int60 = dateTimeField56.getMinimumValue((org.joda.time.ReadablePartial) localDate58);
        org.joda.time.LocalDate localDate62 = localDate58.withYearOfCentury(46);
        boolean boolean63 = property45.equals((java.lang.Object) localDate62);
        org.joda.time.Chronology chronology64 = localDate62.getChronology();
        org.joda.time.ReadablePeriod readablePeriod65 = null;
        long long68 = chronology64.add(readablePeriod65, 555370422L, 1191);
        org.joda.time.DateTimeField dateTimeField69 = chronology64.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime(chronology64);
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period73 = duration72.toPeriod();
        org.joda.time.Duration duration75 = duration72.minus((long) 292278993);
        mutableDateTime70.add((org.joda.time.ReadableDuration) duration72, 26249401);
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime70.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField79 = property78.getField();
        long long82 = dateTimeField79.getDifferenceAsLong(4801285122869L, 68857257600000L);
        mutableDateTime0.setRounding(dateTimeField79);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86400000L + "'", long29 == 86400000L);
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 72034057 + "'", int36 == 72034057);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 105144L + "'", long55 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 555370422L + "'", long68 == 555370422L);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(property78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + (-105912L) + "'", long82 == (-105912L));
    }

    @Test
    public void test07219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07219");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getYearOfCentury();
        int int4 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime6 = dateTime2.plus((long) 15);
        org.joda.time.DateTime.Property property7 = dateTime2.year();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime14 = dateTime12.withZoneRetainFields(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone17);
        int int20 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime19.getCenturyOfEra();
        org.joda.time.DateTime dateTime23 = dateTime19.withWeekyear(44);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant26, readableInstant27, periodType28);
        org.joda.time.DurationFieldType durationFieldType31 = periodType28.getFieldType((int) (short) 0);
        java.lang.String str32 = periodType28.toString();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 53, (long) (-1), periodType28, chronology36);
        org.joda.time.PeriodType periodType38 = periodType28.withMonthsRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime19, periodType28);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.eras();
        long long48 = chronology43.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField49 = chronology43.secondOfMinute();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.Period period52 = new org.joda.time.Period((long) 3, periodType28, chronology43);
        org.joda.time.Period period53 = period52.normalizedStandard();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 22 + "'", int3 == 22);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 20 + "'", int21 == 20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PeriodType[YearDayTime]" + "'", str32, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 105144L + "'", long48 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period53);
    }

    @Test
    public void test07220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07220");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        java.lang.String str25 = dateTime14.toString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 34 + "'", int11 == 34);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "1970-01-01T00:00:00.001Z" + "'", str25, "1970-01-01T00:00:00.001Z");
    }

    @Test
    public void test07221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07221");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property4 = localDateTime1.hourOfDay();
        org.joda.time.DateTimeField dateTimeField5 = property4.getField();
        boolean boolean7 = property4.equals((java.lang.Object) 10L);
        long long8 = property4.remainder();
        java.lang.String str9 = property4.getAsText();
        org.joda.time.LocalDateTime localDateTime11 = property4.addToCopy(100);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str16 = duration15.toString();
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration15, 8);
        mutableDateTime13.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime13.weekyear();
        mutableDateTime13.addDays(0);
        org.joda.time.DateTimeZone dateTimeZone24 = mutableDateTime13.getZone();
        org.joda.time.DateTime dateTime25 = localDateTime11.toDateTime(dateTimeZone24);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 44604, dateTimeZone24);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1414953L + "'", long8 == 1414953L);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "7" + "'", str9, "7");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT86400S" + "'", str16, "PT86400S");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test07222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07222");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.MutableDateTime mutableDateTime12 = instant4.toMutableDateTime();
        int int13 = mutableDateTime12.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        int int16 = mutableDateTime12.get(dateTimeFieldType14);
        org.joda.time.DateTimeZone dateTimeZone17 = mutableDateTime12.getZone();
        int int19 = dateTimeZone17.getOffset((long) 26290);
        java.lang.String str21 = dateTimeZone17.getName((-70741900737780L));
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 7 + "'", int13 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 23 + "'", int16 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
    }

    @Test
    public void test07223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07223");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str11 = durationFieldType10.getName();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) boolean12);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = dateTime16.withZoneRetainFields(dateTimeZone17);
        dateTimeParserBucket5.setZone(dateTimeZone17);
        long long21 = dateTimeParserBucket5.computeMillis(true);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 863);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        mutableDateTime24.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime24.copy();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime32 = property28.set(1);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        int int35 = dateTime34.getYearOfCentury();
        int int36 = dateTime34.getWeekyear();
        org.joda.time.DateTime dateTime37 = dateTime34.withEarlierOffsetAtOverlap();
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime37.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        boolean boolean41 = dateTimeZone40.isFixed();
        mutableDateTime39.setZoneRetainFields(dateTimeZone40);
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime32.toMutableDateTime(dateTimeZone40);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.yearOfCentury();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime43.weekOfWeekyear();
        boolean boolean46 = dateTimeParserBucket5.restoreState((java.lang.Object) mutableDateTime43);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime43.setHourOfDay((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weeks" + "'", str11, "weeks");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 97L + "'", long21 == 97L);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(dateTime37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T07:23:35.108Z" + "'", str38, "2022-02-22T07:23:35.108Z");
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
    }

    @Test
    public void test07224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07224");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 26157);
        mutableDateTime1.setMillis((long) 55);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.LocalDate localDate7 = property5.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = localDate7.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate11 = localDate7.withWeekOfWeekyear(46);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        org.joda.time.Period period23 = period19.toPeriod();
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.Period period25 = period15.normalizedStandard(periodType24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.eras();
        long long34 = chronology29.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField35 = chronology29.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(44L, periodType24, chronology29);
        org.joda.time.LocalDate localDate38 = localDate11.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod36, (int) (byte) 1);
        int int39 = localDate11.getYearOfEra();
        org.joda.time.DateTime dateTime40 = localDate11.toDateTimeAtMidnight();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime40.toMutableDateTimeISO();
        boolean boolean42 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) mutableDateTime41);
        mutableDateTime1.setTime((long) 26324);
        java.util.Locale.Builder builder46 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder47 = builder46.clear();
        java.util.Locale locale48 = builder46.build();
        java.util.Locale locale49 = builder46.build();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str50 = mutableDateTime1.toString("2022-02-22T07:20:34.100Z", locale49);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.099S" + "'", str22, "PT0.099S");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 105144L + "'", long34 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
    }

    @Test
    public void test07225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07225");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = mutablePeriod3.getFieldTypes();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours12 = duration11.toStandardHours();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration8.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration18 = duration8.toDuration();
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration8);
        int int20 = mutablePeriod3.getHours();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration28 = duration24.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        int int32 = dateTime31.getSecondOfMinute();
        org.joda.time.Interval interval33 = duration28.toIntervalTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean36 = localDate34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate34.yearOfEra();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str43 = duration42.toString();
        org.joda.time.Instant instant44 = instant38.minus((org.joda.time.ReadableDuration) duration42);
        int int45 = property37.getDifference((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant49 = instant38.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str52 = duration51.toString();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours55 = duration54.toStandardHours();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        int int58 = dateTime57.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = duration51.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period63 = duration62.toPeriod();
        org.joda.time.Duration duration65 = duration62.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now();
        mutableDateTime66.add((long) 'a');
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime66.yearOfCentury();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period72 = duration71.toPeriod();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration77 = duration74.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration78 = duration71.minus((org.joda.time.ReadableDuration) duration77);
        mutableDateTime66.add((org.joda.time.ReadableDuration) duration71);
        boolean boolean80 = duration65.isShorterThan((org.joda.time.ReadableDuration) duration71);
        boolean boolean81 = duration54.isLongerThan((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Instant instant82 = instant49.minus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval83 = duration28.toIntervalTo((org.joda.time.ReadableInstant) instant82);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval83);
        org.joda.time.PeriodType periodType85 = mutablePeriod3.getPeriodType();
        java.lang.String str86 = periodType85.toString();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(hours12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 35 + "'", int15 == 35);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 35 + "'", int32 == 35);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT86400S" + "'", str43, "PT86400S");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT86400S" + "'", str52, "PT86400S");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(hours55);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 35 + "'", int58 == 35);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "PeriodType[YearDayTime]" + "'", str86, "PeriodType[YearDayTime]");
    }

    @Test
    public void test07226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07226");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundCeiling();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((-268));
        int int12 = mutableDateTime11.getDayOfYear();
        mutableDateTime11.addYears(26150565);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:35.205Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:35.205Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:35.205Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 365 + "'", int12 == 365);
    }

    @Test
    public void test07227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07227");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        int int5 = localTime2.getHourOfDay();
        org.joda.time.LocalTime.Property property6 = localTime2.secondOfMinute();
        org.joda.time.LocalTime localTime7 = property6.getLocalTime();
        org.joda.time.LocalTime localTime8 = property6.roundFloorCopy();
        org.joda.time.LocalTime localTime10 = localTime8.plusMillis(26224942);
        org.joda.time.LocalTime.Property property11 = localTime10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = property11.getField();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test07228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07228");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration7 = duration4.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration8 = duration1.minus((org.joda.time.ReadableDuration) duration7);
        long long9 = duration8.getStandardSeconds();
        long long10 = duration8.getStandardHours();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours13 = duration12.toStandardHours();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration12, (org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) '#', (int) (short) 0);
        boolean boolean24 = duration12.isEqual((org.joda.time.ReadableDuration) duration23);
        boolean boolean25 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.ReadableDuration readableDuration26 = null;
        boolean boolean27 = duration8.isShorterThan(readableDuration26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str30 = duration29.toString();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours33 = duration32.toStandardHours();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = duration29.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration43 = duration40.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        mutableDateTime44.add((long) 'a');
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.yearOfCentury();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration55 = duration52.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration56 = duration49.minus((org.joda.time.ReadableDuration) duration55);
        mutableDateTime44.add((org.joda.time.ReadableDuration) duration49);
        boolean boolean58 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration49);
        boolean boolean59 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period64 = duration63.toPeriod();
        org.joda.time.Duration duration67 = duration63.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableDuration) duration67);
        org.joda.time.Duration duration69 = duration43.plus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Instant instant71 = new org.joda.time.Instant((long) 62187);
        boolean boolean72 = duration67.equals((java.lang.Object) instant71);
        boolean boolean73 = duration8.isEqual((org.joda.time.ReadableDuration) duration67);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(chronology81);
        org.joda.time.DateTime dateTime84 = dateTime82.plusMinutes(15);
        org.joda.time.DateTime dateTime85 = localDateTime78.toDateTime((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.DateTimeZone dateTimeZone86 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime87 = localDateTime78.toDateTime(dateTimeZone86);
        org.joda.time.DateTime.Property property88 = dateTime87.minuteOfHour();
        org.joda.time.DateTime dateTime89 = property88.roundFloorCopy();
        org.joda.time.DateTime dateTime91 = dateTime89.withDayOfYear(46);
        org.joda.time.ReadableInstant readableInstant92 = null;
        org.joda.time.Duration duration93 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime91, readableInstant92);
        org.joda.time.Hours hours94 = duration93.toStandardHours();
        org.joda.time.Duration duration95 = duration8.minus((org.joda.time.ReadableDuration) duration93);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-3L) + "'", long9 == (-3L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(hours13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 35 + "'", int16 == 35);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT86400S" + "'", str30, "PT86400S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(hours33);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 35 + "'", int36 == 35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertNotNull(hours94);
        org.junit.Assert.assertNotNull(duration95);
    }

    @Test
    public void test07229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07229");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.setHours(26148);
        org.joda.time.Period period5 = mutablePeriod2.toPeriod();
        org.joda.time.Period period8 = new org.joda.time.Period((long) 26164766, 950707L);
        org.joda.time.Period period10 = period8.plusWeeks(62176);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = dateTimeZone12.getName(100L, locale14);
        java.lang.String str17 = dateTimeZone12.toString();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 1970, dateTimeZone12);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.yearOfCentury();
        boolean boolean20 = period10.equals((java.lang.Object) mutableDateTime18);
        org.joda.time.Duration duration21 = mutablePeriod2.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod2.toMutablePeriod();
        mutablePeriod22.addYears(2026);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str15, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(mutablePeriod22);
    }

    @Test
    public void test07230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07230");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        mutableDateTime10.add(51L);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.dayOfWeek();
        mutableDateTime10.setSecondOfDay(20);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.millisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getSecondOfMinute();
        org.joda.time.DateTime dateTime22 = dateTime18.withDurationAdded(0L, (int) '4');
        org.joda.time.LocalDate localDate23 = dateTime22.toLocalDate();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) -1);
        int int26 = localDate25.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = localDate25.toDateTimeAtMidnight(dateTimeZone27);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone27.getName(946000L, locale34);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone27);
        long long39 = dateTimeZone27.nextTransition((long) 25);
        org.joda.time.DateMidnight dateMidnight40 = localDate23.toDateMidnight(dateTimeZone27);
        mutableDateTime10.setZone(dateTimeZone27);
        mutableDateTime10.addMinutes(62609);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 35 + "'", int19 == 35);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 25L + "'", long39 == 25L);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test07231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07231");
        org.joda.time.Period period2 = new org.joda.time.Period((long) 26164766, 950707L);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.copy();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime12 = property11.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime15 = property11.set(1);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getYearOfCentury();
        int int19 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime17.withEarlierOffsetAtOverlap();
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        mutableDateTime22.setZoneRetainFields(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime15.toMutableDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime27 = org.joda.time.DateTime.now(dateTimeZone23);
        long long30 = dateTimeZone23.convertLocalToUTC(2100L, true);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((java.lang.Object) instant5, dateTimeZone23);
        org.joda.time.Duration duration32 = period2.toDurationTo((org.joda.time.ReadableInstant) instant5);
        org.joda.time.PeriodType periodType33 = period2.getPeriodType();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T07:23:35.364Z" + "'", str21, "2022-02-22T07:23:35.364Z");
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 2100L + "'", long30 == 2100L);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test07232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07232");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        mutableDateTime10.add(51L);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.dayOfWeek();
        mutableDateTime10.setSecondOfDay(20);
        boolean boolean16 = mutableDateTime10.isBeforeNow();
        int int17 = mutableDateTime10.getYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
    }

    @Test
    public void test07233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07233");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        int int4 = localDate0.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight6 = localDate0.toDateMidnight(dateTimeZone5);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.copy();
        mutableDateTime7.setDate((long) '#');
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean16 = localDate13.isSupported(dateTimeFieldType15);
        int int17 = localDate13.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight19 = localDate13.toDateMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime7.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(dateTimeZone18);
        org.joda.time.Interval interval22 = localDate0.toInterval(dateTimeZone18);
        java.lang.String str23 = dateTimeZone18.getID();
        java.lang.String str25 = dateTimeZone18.getName(189345600086400L);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getYearOfCentury();
        int int29 = dateTime27.getWeekyear();
        org.joda.time.DateTime dateTime31 = dateTime27.plus((long) 15);
        org.joda.time.DateTime.Property property32 = dateTime27.year();
        org.joda.time.DateTime dateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property34 = dateTime33.millisOfSecond();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration42 = duration38.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Period period45 = period43.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        mutableDateTime46.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime46.copy();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime51 = property50.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime52 = property50.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(readableInstant56, readableInstant57, periodType58);
        org.joda.time.DurationFieldType durationFieldType61 = periodType58.getFieldType((int) (short) 0);
        java.lang.String str62 = periodType58.toString();
        org.joda.time.Instant instant63 = new org.joda.time.Instant();
        org.joda.time.Instant instant65 = instant63.withMillis(0L);
        org.joda.time.Chronology chronology66 = instant65.getChronology();
        org.joda.time.Period period67 = new org.joda.time.Period((long) 53, (long) (-1), periodType58, chronology66);
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType53.getField(chronology66);
        java.util.Locale locale69 = java.util.Locale.UK;
        java.lang.String str70 = locale69.getDisplayLanguage();
        int int71 = dateTimeField68.getMaximumTextLength(locale69);
        mutableDateTime52.setRounding(dateTimeField68);
        org.joda.time.Duration duration73 = period43.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime52.centuryOfEra();
        int int75 = mutableDateTime52.getYear();
        int int76 = dateTime33.compareTo((org.joda.time.ReadableInstant) mutableDateTime52);
        mutableDateTime52.setMinuteOfHour(23);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours81 = duration80.toStandardHours();
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(chronology82);
        int int84 = dateTime83.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration80, (org.joda.time.ReadableInstant) dateTime83);
        org.joda.time.DateTime dateTime87 = dateTime83.plus(0L);
        org.joda.time.Instant instant88 = dateTime87.toInstant();
        org.joda.time.DateTime.Property property89 = dateTime87.weekOfWeekyear();
        int int90 = dateTime87.getMillisOfDay();
        org.joda.time.Instant instant91 = dateTime87.toInstant();
        mutableDateTime52.setDate((org.joda.time.ReadableInstant) instant91);
        int int93 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) instant91);
        org.joda.time.Chronology chronology94 = instant91.getChronology();
        org.joda.time.DurationField durationField95 = chronology94.weekyears();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "PeriodType[YearDayTime]" + "'", str62, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\uc601\uc5b4" + "'", str70, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 4 + "'", int71 == 4);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 2022 + "'", int75 == 2022);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + (-1) + "'", int76 == (-1));
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(hours81);
// flaky:         org.junit.Assert.assertTrue("'" + int84 + "' != '" + 35 + "'", int84 == 35);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(instant88);
        org.junit.Assert.assertNotNull(property89);
// flaky:         org.junit.Assert.assertTrue("'" + int90 + "' != '" + 26615397 + "'", int90 == 26615397);
        org.junit.Assert.assertNotNull(instant91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 0 + "'", int93 == 0);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(durationField95);
    }

    @Test
    public void test07234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07234");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime1.toString(dateTimeFormatter3);
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfCentury();
        int int6 = dateTime1.getHourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration18, readableInstant19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.Period period26 = period24.minusSeconds((-1));
        java.lang.String str27 = period24.toString();
        org.joda.time.Period period28 = period24.toPeriod();
        org.joda.time.PeriodType periodType29 = period24.getPeriodType();
        org.joda.time.Period period30 = period20.normalizedStandard(periodType29);
        java.lang.String str31 = periodType29.getName();
        java.lang.String str32 = periodType29.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(15);
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(readableInstant43, readableInstant44, periodType45);
        org.joda.time.DurationFieldType durationFieldType48 = periodType45.getFieldType((int) (short) 0);
        java.lang.String str49 = periodType45.toString();
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.Chronology chronology53 = instant52.getChronology();
        org.joda.time.Period period54 = new org.joda.time.Period((long) 53, (long) (-1), periodType45, chronology53);
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType40.getField(chronology53);
        java.util.Locale locale56 = java.util.Locale.UK;
        java.lang.String str57 = locale56.getDisplayLanguage();
        int int58 = dateTimeField55.getMaximumTextLength(locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(3155695200000L, chronology38, locale56);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 52, 946312L, periodType29, chronology38);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(57, (int) '4', (-99), (int) ' ', 57, 44, (int) (short) 0, (int) (short) -1, periodType29);
        org.joda.time.MutableDateTime mutableDateTime63 = org.joda.time.MutableDateTime.now();
        mutableDateTime63.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime66 = mutableDateTime63.copy();
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime63.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime68 = property67.getMutableDateTime();
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology69);
        org.joda.time.DateTime dateTime72 = dateTime70.plusMinutes(15);
        mutablePeriod62.setPeriod((org.joda.time.ReadableInstant) mutableDateTime68, (org.joda.time.ReadableInstant) dateTime70);
        mutableDateTime68.setSecondOfDay(26291);
        mutableDateTime68.addMillis(1379);
        boolean boolean78 = dateTime7.isAfter((org.joda.time.ReadableInstant) mutableDateTime68);
        mutableDateTime68.setMinuteOfHour(12);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:23:35.450Z" + "'", str4, "2022-02-22T07:23:35.450Z");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT0.099S" + "'", str27, "PT0.099S");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Standard" + "'", str31, "Standard");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PeriodType[Standard]" + "'", str32, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PeriodType[YearDayTime]" + "'", str49, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uc601\uc5b4" + "'", str57, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 4 + "'", int58 == 4);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test07235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07235");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        mutablePeriod35.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod35.toMutablePeriod();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod38, 1439);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration41, readableInstant42);
        org.joda.time.Period period45 = period43.withDays((int) (byte) 1);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours48 = duration47.toStandardHours();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = period43.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        int int54 = period43.getDays();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period43);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime16.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime57 = property56.roundHalfCeiling();
        int int58 = mutableDateTime57.getYearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime57.setMinuteOfDay(1948);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1948 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(hours48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 35 + "'", int51 == 35);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 27 + "'", int58 == 27);
    }

    @Test
    public void test07236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07236");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        int int7 = property4.getLeapAmount();
        org.joda.time.DateTimeField dateTimeField8 = property4.getField();
        org.joda.time.DateTimeZone dateTimeZone9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(dateTimeZone9);
        org.joda.time.LocalTime localTime12 = localTime10.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime14 = localTime12.withHourOfDay(0);
        org.joda.time.LocalTime localTime16 = localTime14.withMillisOfSecond(44);
        org.joda.time.LocalTime.Property property17 = localTime14.hourOfDay();
        org.joda.time.LocalTime localTime18 = property17.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime19 = property17.roundHalfFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str30 = duration29.toString();
        boolean boolean31 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Hours hours32 = duration27.toStandardHours();
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration27, 20);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = null;
        java.lang.String str39 = dateTime36.toString(dateTimeFormatter38);
        org.joda.time.DateTime dateTime41 = dateTime36.minusMonths(22);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.eras();
        org.joda.time.DateTime dateTime47 = dateTime36.withChronology(chronology45);
        org.joda.time.Period period48 = duration27.toPeriod(chronology45);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableDuration51, readableInstant52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) 100, 1L, periodType56);
        org.joda.time.Period period59 = period57.minusSeconds((-1));
        java.lang.String str60 = period57.toString();
        org.joda.time.Period period61 = period57.toPeriod();
        org.joda.time.PeriodType periodType62 = period57.getPeriodType();
        org.joda.time.Period period63 = period53.normalizedStandard(periodType62);
        java.lang.String str64 = periodType62.getName();
        java.lang.String str65 = periodType62.toString();
        org.joda.time.PeriodType periodType66 = periodType62.withDaysRemoved();
        org.joda.time.PeriodType periodType67 = periodType66.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType67);
        int[] intArray70 = chronology45.get((org.joda.time.ReadablePeriod) mutablePeriod68, 1L);
        org.joda.time.DateTimeField dateTimeField71 = chronology45.clockhourOfHalfday();
        org.joda.time.LocalTime localTime72 = org.joda.time.LocalTime.fromMillisOfDay(25L, chronology45);
        java.util.Locale locale73 = java.util.Locale.ITALY;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket((long) 20, chronology45, locale73, (java.lang.Integer) 41);
        java.lang.String str76 = locale73.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localTime19, 61, locale73);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 61");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:35.511Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:35.511Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:35.511Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT86400S" + "'", str30, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(hours32);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "2022-02-22T07:23:35.511Z" + "'", str39, "2022-02-22T07:23:35.511Z");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PT0.099S" + "'", str60, "PT0.099S");
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Standard" + "'", str64, "Standard");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "PeriodType[Standard]" + "'", str65, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(intArray70);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray70), "[0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str76, "\uc774\ud0c8\ub9ac\uc544");
    }

    @Test
    public void test07237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07237");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        mutablePeriod35.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod35.toMutablePeriod();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod38, 1439);
        mutableDateTime16.setSecondOfDay(100);
        int int43 = mutableDateTime16.getYear();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime46 = property44.add(26252);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.monthOfYear();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2227 + "'", int43 == 2227);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test07238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07238");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(15);
        org.joda.time.DateTime dateTime19 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = localDateTime12.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime7.withZoneRetainFields(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.yearOfCentury();
        mutableDateTime23.addSeconds(0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours31 = duration30.toStandardHours();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.months();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime43, periodType44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime37, periodType44);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime48 = dateTime22.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str53 = duration52.toString();
        boolean boolean54 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration60 = duration56.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration65 = duration62.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean66 = duration60.isLongerThan((org.joda.time.ReadableDuration) duration62);
        boolean boolean67 = duration52.isEqual((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration69 = duration62.withMillis((long) 22);
        org.joda.time.Duration duration71 = duration62.withMillis(3024000005L);
        org.joda.time.Duration duration72 = duration47.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime4.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property75 = localDateTime73.dayOfYear();
        org.joda.time.LocalDateTime localDateTime76 = property75.roundHalfEvenCopy();
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.yearOfEra();
        int int78 = localDateTime76.getCenturyOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1973 + "'", int5 == 1973);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(hours31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 35 + "'", int34 == 35);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT86400S" + "'", str53, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 19 + "'", int78 == 19);
    }

    @Test
    public void test07239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07239");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 22);
        long long2 = duration1.getStandardMinutes();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getExtension('a');
        boolean boolean6 = duration1.equals((java.lang.Object) locale3);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = duration15.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration19 = duration12.minus((org.joda.time.ReadableDuration) duration18);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime7.centuryOfEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getYearOfCentury();
        org.joda.time.DateTime dateTime26 = dateTime23.withSecondOfMinute(53);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration34 = duration31.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration35 = duration28.minus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant36, readableInstant37, periodType38);
        org.joda.time.DurationFieldType durationFieldType41 = periodType38.getFieldType((int) (short) 0);
        java.lang.String str42 = periodType38.toString();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration28, periodType38);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration28);
        mutableDateTime7.addYears(26157);
        int int47 = mutableDateTime7.getMonthOfYear();
        org.joda.time.Period period48 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.Period period50 = period48.withHours(62510);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNull(str5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PeriodType[YearDayTime]" + "'", str42, "PeriodType[YearDayTime]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2 + "'", int47 == 2);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
    }

    @Test
    public void test07240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07240");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration16 = duration12.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Period period19 = period17.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        mutableDateTime20.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime20.copy();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant30, readableInstant31, periodType32);
        org.joda.time.DurationFieldType durationFieldType35 = periodType32.getFieldType((int) (short) 0);
        java.lang.String str36 = periodType32.toString();
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Chronology chronology40 = instant39.getChronology();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 53, (long) (-1), periodType32, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType27.getField(chronology40);
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = locale43.getDisplayLanguage();
        int int45 = dateTimeField42.getMaximumTextLength(locale43);
        mutableDateTime26.setRounding(dateTimeField42);
        org.joda.time.Duration duration47 = period17.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime26.centuryOfEra();
        int int49 = mutableDateTime26.getYear();
        int int50 = dateTime7.compareTo((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.DateTime dateTime52 = dateTime7.plus(15851651961600000L);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration60 = duration56.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration60);
        java.util.Locale locale62 = java.util.Locale.UK;
        java.util.Calendar calendar63 = dateTime54.toCalendar(locale62);
        boolean boolean65 = dateTime54.isEqual((long) (short) 0);
        org.joda.time.DateTime dateTime67 = dateTime54.withMinuteOfHour(30);
        int int68 = dateTime52.compareTo((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime70 = dateTime52.withWeekyear(25653799);
        org.joda.time.DateTime dateTime71 = dateTime70.withLaterOffsetAtOverlap();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime73 = dateTime71.withHourOfDay(62222);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62222 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PeriodType[YearDayTime]" + "'", str36, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\uc601\uc5b4" + "'", str44, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_GB");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT+23:00\",offset=82800000,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=1,HOUR=11,HOUR_OF_DAY=23,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=82800000,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 1 + "'", int68 == 1);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
    }

    @Test
    public void test07241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07241");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod4.addDays((int) (byte) 10);
        mutablePeriod4.addMillis((int) '4');
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = duration15.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean19 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration20 = duration10.minus((org.joda.time.ReadableDuration) duration13);
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration20);
        long long22 = duration20.getStandardHours();
        org.joda.time.Seconds seconds23 = duration20.toStandardSeconds();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((-86400000L));
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.weeks();
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, strMap30);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology33, locale35);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale41.getISO3Language();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = locale45.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getDisplayName();
        java.util.Locale locale51 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology53, locale55, (java.lang.Integer) 10);
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale59.getDisplayName();
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale62 = java.util.Locale.UK;
        java.util.Locale[] localeArray63 = new java.util.Locale[] { locale35, locale39, locale41, locale45, locale48, locale49, locale51, locale55, locale59, locale61, locale62 };
        java.util.ArrayList<java.util.Locale> localeList64 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList64, localeArray63);
        java.util.Locale.FilteringMode filteringMode66 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList64, filteringMode66);
        java.lang.String[] strArray76 = new java.lang.String[] { "clockhourOfDay", "2022-02-22T10:15:45.103", "1970", "English", "2022-02-22T10:15:44.882", "DateTimeField[year]", "53", "deu" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strList77, filteringMode79);
        boolean boolean81 = periodType26.equals((java.lang.Object) strList77);
        java.lang.String str82 = periodType26.getName();
        org.joda.time.Period period83 = duration20.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime25, periodType26);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime25.setWeekOfWeekyear(26531);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26531 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 23L + "'", long22 == 23L);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "deu" + "'", str44, "deu");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str50, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str60, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + filteringMode66 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode66.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode79.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Weeks" + "'", str82, "Weeks");
        org.junit.Assert.assertNotNull(period83);
    }

    @Test
    public void test07242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07242");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime9 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        mutableDateTime10.addWeekyears((int) (byte) 1);
        int int16 = dateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.add(985937L);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        org.joda.time.DurationFieldType durationFieldType28 = periodType25.getFieldType((int) (short) 0);
        java.lang.String str29 = periodType25.toString();
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 53, (long) (-1), periodType25, chronology33);
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType20.getField(chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes(15);
        org.joda.time.Chronology chronology40 = dateTime37.getChronology();
        java.lang.String str41 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType20.getField(chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.dayOfYear();
        java.util.Locale locale44 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology40, locale44, (java.lang.Integer) 5);
        org.joda.time.DateTimeField dateTimeField47 = chronology40.dayOfYear();
        org.joda.time.DateTimeField dateTimeField48 = chronology40.weekyear();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime10, chronology40);
        int int50 = dateTime49.getYearOfEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PeriodType[YearDayTime]" + "'", str29, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 2023 + "'", int50 == 2023);
    }

    @Test
    public void test07243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07243");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        mutableDateTime6.setDate((long) '#');
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime6.toDateTime(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) periodType25);
        mutableDateTime0.setZoneRetainFields(dateTimeZone17);
        long long29 = dateTimeZone17.nextTransition(100L);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(dateTimeZone17);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str32 = dateTime30.toString("2022-02-22T07:16:50.174Z");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L + "'", long29 == 100L);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test07244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07244");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.Instant instant3 = instant0.plus((long) (-580));
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str8 = duration7.toString();
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration7, 8);
        mutableDateTime5.addSeconds(1970);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod17.addDays((int) (byte) 10);
        mutablePeriod17.addMillis((int) '4');
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration31 = duration28.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean32 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration33 = duration23.minus((org.joda.time.ReadableDuration) duration26);
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration33);
        mutablePeriod17.setWeeks((int) (byte) 100);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 1L, periodType39);
        org.joda.time.Period period42 = period40.minusSeconds((-1));
        org.joda.time.Period period44 = period42.multipliedBy((int) '#');
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.centuries();
        int int46 = period44.get(durationFieldType45);
        int int47 = mutablePeriod17.indexOf(durationFieldType45);
        mutableDateTime5.add(durationFieldType45, 56);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str55 = duration54.toString();
        org.joda.time.Instant instant56 = instant50.minus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period59 = duration58.toPeriod();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration66 = duration63.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean67 = duration61.isLongerThan((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Duration duration68 = duration58.minus((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration73 = duration70.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean74 = duration61.equals((java.lang.Object) duration70);
        org.joda.time.Instant instant76 = instant56.withDurationAdded((org.joda.time.ReadableDuration) duration61, 26150565);
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period81 = duration80.toPeriod();
        org.joda.time.Duration duration84 = duration80.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime78, (org.joda.time.ReadableDuration) duration84);
        long long86 = duration84.getMillis();
        boolean boolean87 = duration61.isShorterThan((org.joda.time.ReadableDuration) duration84);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration84);
        org.joda.time.Duration duration89 = duration84.toDuration();
        org.joda.time.Instant instant90 = instant3.minus((org.joda.time.ReadableDuration) duration89);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT86400S" + "'", str8, "PT86400S");
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(durationFieldType45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT86400S" + "'", str55, "PT86400S");
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 86400000L + "'", long86 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(instant90);
    }

    @Test
    public void test07245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07245");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 44, chronology4);
        org.joda.time.DateTime dateTime10 = dateTime8.withMonthOfYear((int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.yearOfCentury();
        mutableDateTime11.addSeconds(0);
        mutableDateTime11.add((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime11.getZone();
        boolean boolean20 = dateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        java.lang.String str21 = dateTime10.toString();
        org.joda.time.DateTime.Property property22 = dateTime10.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime23.copy();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.yearOfCentury();
        mutableDateTime23.setHourOfDay(9);
        boolean boolean30 = dateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime23);
        int int31 = dateTime10.getSecondOfDay();
        org.joda.time.DateTime dateTime33 = dateTime10.withYearOfEra(1439);
        org.joda.time.DateTime dateTime35 = dateTime10.withMillisOfDay(26380413);
        org.joda.time.DateTime dateTime37 = dateTime35.minusHours(62312);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-10-01T00:00:00.044Z" + "'", str21, "1970-10-01T00:00:00.044Z");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
    }

    @Test
    public void test07246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07246");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((-826934400L), 98730856001880000L);
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        mutableDateTime3.add((long) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.yearOfCentury();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration15 = duration8.minus((org.joda.time.ReadableDuration) duration14);
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration8);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime3.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration20, readableInstant21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) 100, 1L, periodType25);
        org.joda.time.Period period28 = period26.minusSeconds((-1));
        java.lang.String str29 = period26.toString();
        org.joda.time.Period period30 = period26.toPeriod();
        org.joda.time.PeriodType periodType31 = period26.getPeriodType();
        org.joda.time.Period period32 = period22.normalizedStandard(periodType31);
        org.joda.time.DurationFieldType durationFieldType33 = null;
        int int34 = periodType31.indexOf(durationFieldType33);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.eras();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.DurationField durationField41 = chronology38.eras();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType31, chronology38);
        org.joda.time.DateTimeField dateTimeField44 = chronology38.hourOfDay();
        org.joda.time.Chronology chronology45 = chronology38.withUTC();
        org.joda.time.DateTime dateTime46 = mutableDateTime3.toDateTime(chronology38);
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.DateTime dateTime49 = dateTime46.withYearOfEra(26346587);
        org.joda.time.DateTime dateTime51 = dateTime49.withMillisOfDay(26338);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableDuration52, readableInstant53);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) 100, 1L, periodType57);
        org.joda.time.Period period60 = period58.minusSeconds((-1));
        java.lang.String str61 = period58.toString();
        org.joda.time.Period period62 = period58.toPeriod();
        org.joda.time.PeriodType periodType63 = period58.getPeriodType();
        org.joda.time.Period period64 = period54.normalizedStandard(periodType63);
        java.lang.String str65 = periodType63.getName();
        org.joda.time.PeriodType periodType66 = periodType63.withYearsRemoved();
        int int67 = periodType63.size();
        org.joda.time.Period period68 = duration2.toPeriodFrom((org.joda.time.ReadableInstant) dateTime51, periodType63);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.099S" + "'", str29, "PT0.099S");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-23T07:23:36.007Z" + "'", str47, "2022-02-23T07:23:36.007Z");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PT0.099S" + "'", str61, "PT0.099S");
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Standard" + "'", str65, "Standard");
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 8 + "'", int67 == 8);
        org.junit.Assert.assertNotNull(period68);
    }

    @Test
    public void test07247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07247");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMinutes(15);
        org.joda.time.Chronology chronology7 = dateTime4.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(1440L, chronology7);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.Chronology chronology11 = chronology7.withUTC();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 575, chronology11);
        java.util.Locale locale15 = new java.util.Locale("1970", "millis");
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale15.getDisplayScript(locale17);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 37195758, chronology11, locale17, (java.lang.Integer) 109);
        java.util.Locale locale21 = dateTimeParserBucket20.getLocale();
        long long22 = dateTimeParserBucket20.computeMillis();
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertEquals(locale15.toString(), "1970_MILLIS");
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale21);
// flaky:         org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 37195758L + "'", long22 == 37195758L);
    }

    @Test
    public void test07248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07248");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        int int4 = mutableDateTime1.getEra();
        org.joda.time.DateTimeField dateTimeField5 = mutableDateTime1.getRoundingField();
        mutableDateTime1.addSeconds(22);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getYearOfCentury();
        int int11 = dateTime9.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime9.plus((long) 15);
        org.joda.time.DateTime.Property property14 = dateTime9.year();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property16 = dateTime15.millisOfSecond();
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean19 = localDate17.isSupported(dateTimeFieldType18);
        org.joda.time.LocalDate.Property property20 = localDate17.yearOfEra();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str26 = duration25.toString();
        org.joda.time.Instant instant27 = instant21.minus((org.joda.time.ReadableDuration) duration25);
        int int28 = property20.getDifference((org.joda.time.ReadableInstant) instant21);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = duration30.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        mutableDateTime34.add((long) 'a');
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.yearOfCentury();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration45 = duration42.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration46 = duration39.minus((org.joda.time.ReadableDuration) duration45);
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration39);
        boolean boolean48 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Instant instant49 = instant21.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) instant49);
        boolean boolean51 = mutableDateTime1.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT86400S" + "'", str26, "PT86400S");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
    }

    @Test
    public void test07249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07249");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        mutableDateTime6.setDate((long) '#');
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime6.toDateTime(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) periodType25);
        mutableDateTime0.setZoneRetainFields(dateTimeZone17);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate.Property property30 = localDate28.weekOfWeekyear();
        org.joda.time.LocalDate localDate31 = property30.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate32 = property30.getLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = localDate32.withWeekOfWeekyear(26494006);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26494006 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate32);
    }

    @Test
    public void test07250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07250");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.monthOfYear();
        mutableDateTime1.setSecondOfDay(243);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property9);
    }

    @Test
    public void test07251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07251");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        int int1 = localDate0.getDayOfMonth();
        org.joda.time.DateTime dateTime2 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property3 = localDate0.weekOfWeekyear();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.yearOfCentury();
        mutableDateTime6.addSeconds(0);
        mutableDateTime6.setWeekyear((int) 'u');
        java.lang.Object obj14 = null;
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime15.copy();
        mutableDateTime15.setDate((long) '#');
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        int int25 = localDate21.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight27 = localDate21.toDateMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = mutableDateTime15.toDateTime(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime(obj14, dateTimeZone26);
        java.lang.String str32 = dateTimeZone26.getName(105144L);
        long long34 = dateTimeZone26.nextTransition(3155760000000L);
        mutableDateTime6.setZone(dateTimeZone26);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) (short) 1, dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj38 = mutableDateTime37.clone();
        mutableDateTime37.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime37.dayOfWeek();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime37.weekyear();
        int int43 = mutableDateTime37.getMinuteOfHour();
        boolean boolean44 = dateTime36.isBefore((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableInstant) mutableDateTime37);
        org.junit.Assert.assertTrue("'" + int1 + "' != '" + 22 + "'", int1 == 22);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53 + "'", int25 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateMidnight27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 3155760000000L + "'", long34 == 3155760000000L);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "2022-02-22T07:23:36.046Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "2022-02-22T07:23:36.046Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "2022-02-22T07:23:36.046Z");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test07252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07252");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.LocalDate localDate5 = dateTime1.toLocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        java.util.Date date7 = localDate5.toDate();
        org.joda.time.LocalDate.Property property8 = localDate5.dayOfYear();
        org.joda.time.LocalDate localDate10 = property8.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate12 = property8.addToCopy(26158);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = property14.getField();
        org.joda.time.LocalDate localDate16 = property14.roundCeilingCopy();
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime21 = localDate16.toDateTimeAtCurrentTime(dateTimeZone20);
        boolean boolean23 = dateTimeZone20.isStandardOffset(51L);
        org.joda.time.DateTime dateTime24 = localDate12.toDateTimeAtStartOfDay(dateTimeZone20);
        int int25 = localDate12.getMonthOfYear();
        org.joda.time.LocalDate localDate27 = localDate12.minusMonths(28);
        org.joda.time.LocalDate localDate29 = localDate27.withYear(26440);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.LocalDate localDate33 = property31.roundCeilingCopy();
        org.joda.time.LocalDate localDate35 = localDate33.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone36);
        org.joda.time.DateMidnight dateMidnight38 = localDate35.toDateMidnight(dateTimeZone36);
        org.joda.time.LocalDate.Property property39 = localDate35.monthOfYear();
        org.joda.time.LocalDate localDate40 = property39.withMaximumValue();
        org.joda.time.LocalDate localDate42 = localDate40.minusYears((-6977));
        java.lang.Object obj43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(obj43);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.LocalDate localDate48 = dateTime44.toLocalDate();
        org.joda.time.LocalDate.Property property49 = localDate48.dayOfMonth();
        java.util.Date date50 = localDate48.toDate();
        org.joda.time.LocalDate.Property property51 = localDate48.dayOfYear();
        org.joda.time.LocalDate localDate53 = property51.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate55 = property51.addToCopy(26158);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property57 = localDate56.monthOfYear();
        org.joda.time.DateTimeField dateTimeField58 = property57.getField();
        org.joda.time.LocalDate localDate59 = property57.roundCeilingCopy();
        org.joda.time.Chronology chronology60 = localDate59.getChronology();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime64 = localDate59.toDateTimeAtCurrentTime(dateTimeZone63);
        boolean boolean66 = dateTimeZone63.isStandardOffset(51L);
        org.joda.time.DateTime dateTime67 = localDate55.toDateTimeAtStartOfDay(dateTimeZone63);
        org.joda.time.DateTime dateTime68 = localDate42.toDateTimeAtMidnight(dateTimeZone63);
        org.joda.time.DateTime dateTime69 = localDate27.toDateTimeAtMidnight(dateTimeZone63);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(date7);
        org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 10 + "'", int25 == 10);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(date50);
        org.junit.Assert.assertEquals(date50.toString(), "Tue Feb 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test07253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07253");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addYears(12);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = localDateTime25.toDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime20.withZoneRetainFields(dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.toString();
        java.lang.String str37 = dateTimeZone33.getID();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone33);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime38);
        mutableDateTime0.addMinutes(26180329);
        mutableDateTime0.setSecondOfDay(119);
        boolean boolean44 = mutableDateTime0.isEqualNow();
        mutableDateTime0.setMillisOfDay(0);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
    }

    @Test
    public void test07254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07254");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatter2.getPrinter();
        boolean boolean38 = dateTimeFormatter2.isParser();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = dateTime40.withZoneRetainFields(dateTimeZone41);
        boolean boolean44 = dateTime42.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology45 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withChronology(chronology45);
        boolean boolean48 = dateTimeFormatter2.isOffsetParsed();
        java.lang.Appendable appendable49 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration57 = duration53.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period60 = period58.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now();
        mutableDateTime61.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime61.copy();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime61.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime66 = property65.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime67 = property65.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(readableInstant71, readableInstant72, periodType73);
        org.joda.time.DurationFieldType durationFieldType76 = periodType73.getFieldType((int) (short) 0);
        java.lang.String str77 = periodType73.toString();
        org.joda.time.Instant instant78 = new org.joda.time.Instant();
        org.joda.time.Instant instant80 = instant78.withMillis(0L);
        org.joda.time.Chronology chronology81 = instant80.getChronology();
        org.joda.time.Period period82 = new org.joda.time.Period((long) 53, (long) (-1), periodType73, chronology81);
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType68.getField(chronology81);
        java.util.Locale locale84 = java.util.Locale.UK;
        java.lang.String str85 = locale84.getDisplayLanguage();
        int int86 = dateTimeField83.getMaximumTextLength(locale84);
        mutableDateTime67.setRounding(dateTimeField83);
        org.joda.time.Duration duration88 = period58.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime67);
        org.joda.time.MutableDateTime.Property property89 = mutableDateTime67.centuryOfEra();
        mutableDateTime67.setYear(36);
        int int92 = mutableDateTime67.getMinuteOfHour();
        java.lang.String str93 = mutableDateTime67.toString();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable49, (org.joda.time.ReadableInstant) mutableDateTime67);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str34, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimePrinter37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PeriodType[YearDayTime]" + "'", str77, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\uc601\uc5b4" + "'", str85, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 0 + "'", int92 == 0);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0036-02-21T00:00:00.000Z" + "'", str93, "0036-02-21T00:00:00.000Z");
    }

    @Test
    public void test07255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07255");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        int int8 = mutableDateTime7.getCenturyOfEra();
        mutableDateTime7.setMinuteOfDay(1424);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType16);
        org.joda.time.DurationFieldType durationFieldType19 = periodType16.getFieldType((int) (short) 0);
        java.lang.String str20 = periodType16.toString();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 53, (long) (-1), periodType16, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology24);
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = locale27.getDisplayLanguage();
        int int29 = dateTimeField26.getMaximumTextLength(locale27);
        long long31 = dateTimeField26.roundCeiling(949680L);
        mutableDateTime7.setRounding(dateTimeField26);
        mutableDateTime7.add((long) 26209742);
        org.joda.time.DateTimeField dateTimeField35 = mutableDateTime7.getRoundingField();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[YearDayTime]" + "'", str20, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc601\uc5b4" + "'", str28, "\uc601\uc5b4");
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 4 + "'", int29 == 4);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 960000L + "'", long31 == 960000L);
        org.junit.Assert.assertNotNull(dateTimeField35);
    }

    @Test
    public void test07256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07256");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        mutableDateTime1.addMonths(36956320);
        mutableDateTime1.addWeekyears(26195);
        mutableDateTime1.setMillisOfDay(57);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.monthOfYear();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test07257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07257");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate.Property property6 = localDate5.centuryOfEra();
        org.joda.time.Interval interval7 = localDate5.toInterval();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) 2922737);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration18 = duration14.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant19 = instant12.plus((org.joda.time.ReadableDuration) duration18);
        long long20 = instant19.getMillis();
        org.joda.time.Chronology chronology21 = instant19.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str29 = duration28.toString();
        boolean boolean30 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Hours hours31 = duration26.toStandardHours();
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration26, 20);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime35.toString(dateTimeFormatter37);
        org.joda.time.DateTime dateTime40 = dateTime35.minusMonths(22);
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.Chronology chronology44 = instant43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.eras();
        org.joda.time.DateTime dateTime46 = dateTime35.withChronology(chronology44);
        org.joda.time.Period period47 = duration26.toPeriod(chronology44);
        org.joda.time.Instant instant49 = instant19.withDurationAdded((org.joda.time.ReadableDuration) duration26, 16);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean51 = instant49.isSupported(dateTimeFieldType50);
        java.lang.String str52 = dateTimeFieldType50.getName();
        boolean boolean53 = localTime9.isSupported(dateTimeFieldType50);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate55 = localDate5.withField(dateTimeFieldType50, 62404);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62404 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(interval7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 86400000L + "'", long20 == 86400000L);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT86400S" + "'", str29, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T07:23:36.294Z" + "'", str38, "2022-02-22T07:23:36.294Z");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "dayOfYear" + "'", str52, "dayOfYear");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test07258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07258");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMillis(49);
        int int9 = localDateTime6.getDayOfYear();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(948227L);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.Duration duration20 = duration16.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant21 = instant14.plus((org.joda.time.ReadableDuration) duration20);
        boolean boolean22 = duration11.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime6.minus((org.joda.time.ReadableDuration) duration11);
        int int24 = localDateTime23.getDayOfMonth();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) 62172);
        org.joda.time.Duration duration28 = duration26.withMillis((long) 84);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime23.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration37 = duration33.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        int int41 = dateTime40.getSecondOfMinute();
        org.joda.time.Interval interval42 = duration37.toIntervalTo((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime23.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str46 = duration45.toString();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours49 = duration48.toStandardHours();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology50);
        int int52 = dateTime51.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration54 = duration45.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration59 = duration56.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now();
        mutableDateTime60.add((long) 'a');
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime60.yearOfCentury();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period66 = duration65.toPeriod();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration71 = duration68.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration72 = duration65.minus((org.joda.time.ReadableDuration) duration71);
        mutableDateTime60.add((org.joda.time.ReadableDuration) duration65);
        boolean boolean74 = duration59.isShorterThan((org.joda.time.ReadableDuration) duration65);
        boolean boolean75 = duration48.isLongerThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period80 = duration79.toPeriod();
        org.joda.time.Duration duration83 = duration79.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime77, (org.joda.time.ReadableDuration) duration83);
        org.joda.time.Duration duration85 = duration59.plus((org.joda.time.ReadableDuration) duration83);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime43.withDurationAdded((org.joda.time.ReadableDuration) duration85, 26607781);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 11 + "'", int24 == 11);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration37);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 36 + "'", int41 == 36);
        org.junit.Assert.assertNotNull(interval42);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT86400S" + "'", str46, "PT86400S");
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(hours49);
// flaky:         org.junit.Assert.assertTrue("'" + int52 + "' != '" + 36 + "'", int52 == 36);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + true + "'", boolean74 == true);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertNotNull(localDateTime87);
    }

    @Test
    public void test07259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07259");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime11 = dateTime9.withZoneRetainFields(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone14);
        int int17 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime11.withYear(5);
        int int20 = dateTime19.getHourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.plusDays(26150565);
        boolean boolean23 = mutableDateTime7.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property24 = dateTime19.yearOfCentury();
        int int25 = dateTime19.getDayOfWeek();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getYearOfCentury();
        int int29 = dateTime27.getWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property31 = dateTime27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.DateTime dateTime33 = property31.getDateTime();
        boolean boolean34 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime33);
        int int35 = dateTime19.getMinuteOfHour();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 6 + "'", int25 == 6);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test07260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07260");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime2.copy();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) mutableDateTime2);
        mutablePeriod7.addSeconds(99);
        int int10 = mutablePeriod7.getMillis();
        org.joda.time.format.PeriodFormatter periodFormatter11 = null;
        java.lang.String str12 = mutablePeriod7.toString(periodFormatter11);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "P2DT4H99S" + "'", str12, "P2DT4H99S");
    }

    @Test
    public void test07261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07261");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 26322391);
    }

    @Test
    public void test07262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07262");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        mutableDateTime0.add((long) (short) -1);
        mutableDateTime0.addDays(22623598);
        java.lang.Object obj10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(obj10);
        boolean boolean13 = dateTime11.isBefore((long) 7);
        java.lang.String str14 = dateTime11.toString();
        org.joda.time.DateTime dateTime16 = dateTime11.minus((long) 7);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.DateTime dateTime21 = dateTime11.toDateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime11.plusSeconds(26150803);
        org.joda.time.DateTime dateTime25 = dateTime11.minusSeconds((int) ' ');
        org.joda.time.LocalDate localDate26 = dateTime11.toLocalDate();
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.monthOfYear();
        org.joda.time.DateTimeField dateTimeField29 = property28.getField();
        org.joda.time.LocalDate localDate30 = property28.roundCeilingCopy();
        org.joda.time.LocalDate localDate32 = localDate30.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTime dateTime33 = localDate30.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property34 = localDate30.yearOfEra();
        org.joda.time.LocalDate localDate36 = new org.joda.time.LocalDate((long) (byte) -1);
        int int37 = localDate36.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        long long42 = dateTimeZone38.getMillisKeepLocal(dateTimeZone40, (long) 44);
        org.joda.time.DateTime dateTime43 = localDate36.toDateTimeAtMidnight(dateTimeZone38);
        java.util.Locale locale45 = null;
        java.lang.String str46 = dateTimeZone38.getName(946000L, locale45);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(dateTimeZone38);
        long long50 = dateTimeZone38.nextTransition((long) 25);
        org.joda.time.Interval interval51 = localDate30.toInterval(dateTimeZone38);
        org.joda.time.DateTime dateTime52 = localDate26.toDateTimeAtCurrentTime(dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime0.toMutableDateTime(dateTimeZone38);
        int int54 = mutableDateTime0.getMinuteOfDay();
        int int55 = mutableDateTime0.getHourOfDay();
        org.joda.time.DateTimeZone dateTimeZone56 = null;
        mutableDateTime0.setZone(dateTimeZone56);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:23:36.594Z" + "'", str14, "2022-02-22T07:23:36.594Z");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1969 + "'", int37 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 44L + "'", long42 == 44L);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "+00:00" + "'", str46, "+00:00");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 25L + "'", long50 == 25L);
        org.junit.Assert.assertNotNull(interval51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 443 + "'", int54 == 443);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 7 + "'", int55 == 7);
    }

    @Test
    public void test07263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07263");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        long long30 = chronology25.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField31 = chronology25.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(44L, periodType20, chronology25);
        org.joda.time.LocalDate localDate34 = localDate7.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        int int35 = localDate7.getYearOfEra();
        org.joda.time.DateTime dateTime36 = localDate7.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime38 = dateTime36.withCenturyOfEra(72);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period46 = duration45.toPeriod();
        org.joda.time.Duration duration49 = duration45.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant51 = dateTime43.toInstant();
        org.joda.time.DateTime dateTime54 = dateTime43.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant55 = dateTime54.toInstant();
        boolean boolean56 = instant39.isBefore((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj58 = mutableDateTime57.clone();
        mutableDateTime57.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime57.dayOfWeek();
        mutableDateTime57.setMillisOfDay(2);
        int int64 = instant39.compareTo((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now();
        mutableDateTime65.add((long) 'a');
        org.joda.time.Instant instant68 = new org.joda.time.Instant();
        org.joda.time.Instant instant70 = instant68.withMillis(0L);
        org.joda.time.DateTime dateTime71 = instant70.toDateTime();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.months();
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime71, (org.joda.time.ReadableInstant) dateTime73, periodType74);
        org.joda.time.DateTime.Property property76 = dateTime73.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = property76.getFieldType();
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime65.property(dateTimeFieldType77);
        mutableDateTime57.set(dateTimeFieldType77, 21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime82 = dateTime36.withField(dateTimeFieldType77, 37331754);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37331754 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.099S" + "'", str18, "PT0.099S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 105144L + "'", long30 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(obj58);
// flaky:         org.junit.Assert.assertEquals(obj58.toString(), "2022-02-22T07:23:36.640Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj58), "2022-02-22T07:23:36.640Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj58), "2022-02-22T07:23:36.640Z");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test07264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07264");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setLanguage("German");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder2.setVariant("2022-02-22T07:22:15.511Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 2022-02-22T07:22:15.511Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test07265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07265");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        java.lang.Object obj33 = mutableDateTime0.clone();
        mutableDateTime0.setMillis(6L);
        org.joda.time.Period period37 = org.joda.time.Period.years(38);
        org.joda.time.Period period39 = period37.plusWeeks(2037);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period39);
        org.joda.time.Period period42 = period39.withWeeks(26513);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.099S" + "'", str17, "PT0.099S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(obj33);
// flaky:         org.junit.Assert.assertEquals(obj33.toString(), "2022-02-22T07:23:36.769Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "2022-02-22T07:23:36.769Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "2022-02-22T07:23:36.769Z");
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period42);
    }

    @Test
    public void test07266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07266");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.LocalTime localTime9 = localTime7.withMinuteOfHour((int) ' ');
        org.joda.time.LocalTime localTime11 = localTime7.minusMillis(62166);
        java.lang.String str12 = localTime7.toString();
        org.joda.time.LocalTime.Property property13 = localTime7.hourOfDay();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "07:23:36.689" + "'", str12, "07:23:36.689");
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test07267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07267");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours35 = duration34.toStandardHours();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        int int38 = dateTime37.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime41 = dateTime37.plus(0L);
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) dateTime37);
        mutableDateTime32.addDays(26247993);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.099S" + "'", str17, "PT0.099S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(hours35);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 36 + "'", int38 == 36);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test07268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07268");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant0.toDateTime();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str6 = duration5.toString();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours9 = duration8.toStandardHours();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration14 = duration5.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.DateTime dateTime15 = dateTime3.plus((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getYearOfCentury();
        int int19 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime21 = dateTime17.plus((long) 15);
        org.joda.time.DateTime.Property property22 = dateTime17.year();
        org.joda.time.DateTime dateTime23 = property22.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property24 = dateTime23.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime23.toMutableDateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = dateTime27.withZoneRetainFields(dateTimeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtCurrentTime(dateTimeZone32);
        int int35 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime34);
        int int36 = dateTime34.getCenturyOfEra();
        org.joda.time.DateTime dateTime38 = dateTime34.withWeekyear(44);
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(readableInstant41, readableInstant42, periodType43);
        org.joda.time.DurationFieldType durationFieldType46 = periodType43.getFieldType((int) (short) 0);
        java.lang.String str47 = periodType43.toString();
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.Period period52 = new org.joda.time.Period((long) 53, (long) (-1), periodType43, chronology51);
        org.joda.time.PeriodType periodType53 = periodType43.withMonthsRemoved();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime34, periodType43);
        org.joda.time.PeriodType periodType55 = periodType43.withMillisRemoved();
        org.joda.time.PeriodType periodType56 = periodType43.withHoursRemoved();
        org.joda.time.PeriodType periodType57 = periodType43.withMinutesRemoved();
        boolean boolean58 = dateTime15.equals((java.lang.Object) periodType43);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT86400S" + "'", str6, "PT86400S");
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(hours9);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 36 + "'", int12 == 36);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 20 + "'", int36 == 20);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PeriodType[YearDayTime]" + "'", str47, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
    }

    @Test
    public void test07269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07269");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(50, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(1645514174548L, dateTimeZone3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone3);
        org.joda.time.ReadableInstant readableInstant7 = null;
        int int8 = dateTimeZone3.getOffset(readableInstant7);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 180000000 + "'", int8 == 180000000);
    }

    @Test
    public void test07270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07270");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        int int7 = mutableDateTime6.getMillisOfDay();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getYearOfCentury();
        int int11 = dateTime9.getWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime9.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property13 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime14 = property13.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime15 = property13.roundHalfEvenCopy();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours18 = duration17.toStandardHours();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime20);
        mutablePeriod22.addSeconds(292278993);
        mutablePeriod22.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime28 = dateTime15.minus((org.joda.time.ReadablePeriod) mutablePeriod22);
        org.joda.time.DateTime dateTime31 = dateTime15.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration41 = duration38.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean42 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration41);
        org.joda.time.Duration duration43 = duration33.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration48 = duration45.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean49 = duration36.equals((java.lang.Object) duration45);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.PeriodType periodType51 = null;
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.Chronology chronology55 = instant54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.eras();
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.now(chronology55);
        org.joda.time.Period period58 = duration36.toPeriod(periodType51, chronology55);
        org.joda.time.Period period60 = period58.minusMinutes(19045);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period58);
        org.joda.time.Period period63 = period58.minusMinutes(37129311);
        org.joda.time.Period period65 = period58.minusMonths(26578);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 26616867 + "'", int7 == 26616867);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(hours18);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 36 + "'", int21 == 36);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
    }

    @Test
    public void test07271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07271");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setYear(2);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime26.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundHalfCeiling();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMinutes(15);
        org.joda.time.Chronology chronology47 = dateTime44.getChronology();
        org.joda.time.DateTime dateTime49 = dateTime44.plusHours(19045);
        org.joda.time.DateTime dateTime51 = dateTime49.minus(51L);
        org.joda.time.DateTime dateTime53 = dateTime49.minusMillis(2016);
        mutableDateTime42.setDate((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime.Property property55 = dateTime53.minuteOfDay();
        org.joda.time.DateTime dateTime57 = property55.addWrapFieldToCopy(2922789);
        org.joda.time.DateTime dateTime58 = property55.roundCeilingCopy();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:23:36.801Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:23:36.801Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:23:36.801Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test07272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07272");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        boolean boolean3 = dateTime1.isBefore((long) 7);
        java.lang.String str4 = dateTime1.toString();
        org.joda.time.DateTime dateTime6 = dateTime1.minus((long) 7);
        org.joda.time.DateTime.Property property7 = dateTime1.millisOfSecond();
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        boolean boolean11 = dateTime9.isBefore((long) 7);
        java.lang.String str12 = dateTime9.toString();
        org.joda.time.DateTime dateTime14 = dateTime9.minus((long) 7);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Chronology chronology18 = instant17.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime9.toDateTime(chronology18);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime dateTime22 = dateTime20.minusDays(2100);
        org.joda.time.DateTime dateTime24 = dateTime22.minusYears(2022);
        int int25 = dateTime1.compareTo((org.joda.time.ReadableInstant) dateTime22);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:23:36.825Z" + "'", str4, "2022-02-22T07:23:36.825Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T07:23:36.825Z" + "'", str12, "2022-02-22T07:23:36.825Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test07273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07273");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period10 = period8.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        mutableDateTime17.setRounding(dateTimeField33);
        org.joda.time.Duration duration38 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.centuryOfEra();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime39.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, 1L, periodType50);
        org.joda.time.Period period53 = period51.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.minus((org.joda.time.ReadablePeriod) period51);
        mutableDateTime39.add((org.joda.time.ReadablePeriod) period51, 0);
        org.joda.time.PeriodType periodType57 = period51.getPeriodType();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(readableInstant61, readableInstant62, periodType63);
        org.joda.time.DurationFieldType durationFieldType66 = periodType63.getFieldType((int) (short) 0);
        java.lang.String str67 = periodType63.toString();
        org.joda.time.Instant instant68 = new org.joda.time.Instant();
        org.joda.time.Instant instant70 = instant68.withMillis(0L);
        org.joda.time.Chronology chronology71 = instant70.getChronology();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 53, (long) (-1), periodType63, chronology71);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(readableInstant75, readableInstant76, periodType77);
        org.joda.time.DurationFieldType durationFieldType80 = periodType77.getFieldType((int) (short) 0);
        java.lang.String str81 = periodType77.toString();
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.Instant instant84 = instant82.withMillis(0L);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.joda.time.Period period86 = new org.joda.time.Period((long) 53, (long) (-1), periodType77, chronology85);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) (short) 10, periodType63, chronology85);
        org.joda.time.DateTimeField dateTimeField88 = chronology85.weekOfWeekyear();
        org.joda.time.Period period89 = duration38.toPeriod(periodType57, chronology85);
        org.joda.time.DateTimeField dateTimeField90 = chronology85.halfdayOfDay();
        org.joda.time.DurationField durationField91 = chronology85.minutes();
        org.joda.time.DurationField durationField92 = chronology85.hours();
        org.joda.time.DurationField durationField93 = chronology85.millis();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u82f1\u6587" + "'", str35, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "PeriodType[YearDayTime]" + "'", str67, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PeriodType[YearDayTime]" + "'", str81, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(period89);
        org.junit.Assert.assertNotNull(dateTimeField90);
        org.junit.Assert.assertNotNull(durationField91);
        org.junit.Assert.assertNotNull(durationField92);
        org.junit.Assert.assertNotNull(durationField93);
    }

    @Test
    public void test07274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07274");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period14 = period12.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.minus((org.joda.time.ReadablePeriod) period12);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period12, 0);
        org.joda.time.PeriodType periodType18 = period12.getPeriodType();
        org.joda.time.Period period20 = period12.minusWeeks((int) ' ');
        org.joda.time.PeriodType periodType21 = period12.getPeriodType();
        int[] intArray22 = period12.getValues();
        org.joda.time.Period period24 = period12.withMinutes(15485854);
        org.joda.time.Seconds seconds25 = period12.toStandardSeconds();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(intArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray22), "[0, 0, 0, 0, 0, 0, 0, -99]");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(seconds25);
    }

    @Test
    public void test07275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07275");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours5 = duration4.toStandardHours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant15, readableInstant16, periodType17);
        org.joda.time.DurationFieldType durationFieldType20 = periodType17.getFieldType((int) (short) 0);
        java.lang.String str21 = periodType17.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 53, (long) (-1), periodType17, chronology25);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType17);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.Period period36 = duration1.toPeriod(periodType17, chronology31);
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(chronology31);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT86400S" + "'", str2, "PT86400S");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(hours5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 36 + "'", int8 == 36);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[YearDayTime]" + "'", str21, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
    }

    @Test
    public void test07276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07276");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.copy();
        mutableDateTime7.setDate((long) '#');
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean16 = localDate13.isSupported(dateTimeFieldType15);
        int int17 = localDate13.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight19 = localDate13.toDateMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime7.toDateTime(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(dateTimeZone18);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.PeriodType periodType26 = period25.getPeriodType();
        boolean boolean27 = dateTimeZone18.equals((java.lang.Object) periodType26);
        mutableDateTime1.setZoneRetainFields(dateTimeZone18);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime31.copy();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime31.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime38 = property35.add((long) (byte) 10);
        int int39 = mutableDateTime38.getCenturyOfEra();
        mutableDateTime38.setMinuteOfDay(1424);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(readableInstant45, readableInstant46, periodType47);
        org.joda.time.DurationFieldType durationFieldType50 = periodType47.getFieldType((int) (short) 0);
        java.lang.String str51 = periodType47.toString();
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.Chronology chronology55 = instant54.getChronology();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 53, (long) (-1), periodType47, chronology55);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType42.getField(chronology55);
        java.util.Locale locale58 = java.util.Locale.UK;
        java.lang.String str59 = locale58.getDisplayLanguage();
        int int60 = dateTimeField57.getMaximumTextLength(locale58);
        long long62 = dateTimeField57.roundCeiling(949680L);
        mutableDateTime38.setRounding(dateTimeField57);
        int int65 = dateTimeField57.getMinimumValue(0L);
        mutableDateTime30.setRounding(dateTimeField57);
        mutableDateTime30.addMinutes(133);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20 + "'", int39 == 20);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PeriodType[YearDayTime]" + "'", str51, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\u82f1\u6587" + "'", str59, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 4 + "'", int60 == 4);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 960000L + "'", long62 == 960000L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
    }

    @Test
    public void test07277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07277");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.withMaximumValue();
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = localDate3.minusMonths((int) ' ');
        org.joda.time.LocalDate localDate8 = localDate6.withYear((int) (byte) 0);
        int int9 = localDate8.getDayOfWeek();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.months();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15, periodType16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period23 = period21.minusSeconds((-1));
        java.lang.String str24 = period21.toString();
        org.joda.time.Period period25 = period21.toPeriod();
        org.joda.time.PeriodType periodType26 = period21.getPeriodType();
        org.joda.time.DateTime dateTime27 = dateTime15.plus((org.joda.time.ReadablePeriod) period21);
        org.joda.time.DateTime dateTime29 = dateTime27.withWeekyear(26148950);
        int int30 = dateTime27.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime31.copy();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime31.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime38 = property35.add((long) (byte) 10);
        int int39 = mutableDateTime38.getCenturyOfEra();
        int int40 = dateTime27.compareTo((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateTime dateTime42 = dateTime27.plusMillis((int) (short) 100);
        org.joda.time.DateTime dateTime43 = localDate8.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Dec 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 6 + "'", int9 == 6);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.099S" + "'", str24, "PT0.099S");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1970 + "'", int30 == 1970);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 20 + "'", int39 == 20);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test07278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07278");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.Instant instant2 = instant0.toInstant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj5 = mutableDateTime4.clone();
        mutableDateTime4.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.dayOfWeek();
        int int9 = mutableDateTime4.getHourOfDay();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) mutableDateTime4);
        int int11 = mutableDateTime3.getMillisOfDay();
        int int12 = mutableDateTime3.getMillisOfDay();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfCentury();
        int int16 = dateTime14.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime14.plus((long) 15);
        org.joda.time.DateTime.Property property19 = dateTime14.year();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfSecond();
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean24 = localDate22.isSupported(dateTimeFieldType23);
        org.joda.time.LocalDate.Property property25 = localDate22.yearOfEra();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str31 = duration30.toString();
        org.joda.time.Instant instant32 = instant26.minus((org.joda.time.ReadableDuration) duration30);
        int int33 = property25.getDifference((org.joda.time.ReadableInstant) instant26);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        mutableDateTime39.add((long) 'a');
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.yearOfCentury();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration51 = duration44.minus((org.joda.time.ReadableDuration) duration50);
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration44);
        boolean boolean53 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Instant instant54 = instant26.plus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableInstant) instant54);
        mutableDateTime3.setTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.MutableDateTime mutableDateTime57 = dateTime20.toMutableDateTime();
        int int58 = mutableDateTime57.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "2022-02-22T07:23:37.030Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "2022-02-22T07:23:37.030Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "2022-02-22T07:23:37.030Z");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 46 + "'", int11 == 46);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 46 + "'", int12 == 46);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT86400S" + "'", str31, "PT86400S");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
    }

    @Test
    public void test07279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07279");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter2.withZone(dateTimeZone38);
        int int42 = dateTimeFormatter41.getDefaultYear();
        org.joda.time.format.DateTimeParser dateTimeParser43 = dateTimeFormatter41.getParser();
        org.joda.time.Chronology chronology44 = dateTimeFormatter41.getChronology();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u5fb7\u6587" + "'", str34, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimePrinter37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2000 + "'", int42 == 2000);
        org.junit.Assert.assertNull(dateTimeParser43);
        org.junit.Assert.assertNull(chronology44);
    }

    @Test
    public void test07280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07280");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.add((long) 37106507);
        org.joda.time.DateTime dateTime4 = mutableDateTime0.toDateTimeISO();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:37.078Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:37.078Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:37.078Z");
        org.junit.Assert.assertNotNull(dateTime4);
    }

    @Test
    public void test07281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07281");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime6.setMillis(readableInstant8);
        mutableDateTime6.setMillisOfDay(54);
        int int12 = mutableDateTime6.getHourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test07282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07282");
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(0, 44, 26150, 1);
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod5.copy();
        mutablePeriod5.setMonths(122);
        int[] intArray9 = mutablePeriod5.getValues();
        org.joda.time.MutablePeriod mutablePeriod10 = mutablePeriod5.toMutablePeriod();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology13, locale15);
        java.lang.Object obj18 = dateTimeParserBucket17.saveState();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) (short) 100, chronology20);
        org.joda.time.DurationFieldType durationFieldType22 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str23 = durationFieldType22.getName();
        boolean boolean24 = localTime21.isSupported(durationFieldType22);
        boolean boolean25 = dateTimeParserBucket17.restoreState((java.lang.Object) boolean24);
        java.lang.Integer int26 = dateTimeParserBucket17.getOffsetInteger();
        org.joda.time.Chronology chronology27 = dateTimeParserBucket17.getChronology();
        org.joda.time.Chronology chronology28 = dateTimeParserBucket17.getChronology();
        mutablePeriod10.setPeriod(30672000000L, chronology28);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 62295, chronology28);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(intArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray9), "[0, 122, 0, 0, 0, 44, 26150, 1]");
        org.junit.Assert.assertNotNull(mutablePeriod10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "weeks" + "'", str23, "weeks");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(int26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(chronology28);
    }

    @Test
    public void test07283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07283");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = duration15.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration19 = duration12.minus((org.joda.time.ReadableDuration) duration18);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime7.centuryOfEra();
        mutableDateTime7.addHours((int) (byte) 10);
        mutableDateTime7.addWeeks(20);
        java.util.Locale locale26 = java.util.Locale.getDefault();
        java.lang.String str27 = locale26.getDisplayScript();
        java.util.Locale locale28 = java.util.Locale.getDefault();
        java.util.Locale locale29 = locale28.stripExtensions();
        java.lang.String str30 = locale26.getDisplayCountry(locale28);
        java.util.Calendar calendar31 = mutableDateTime7.toCalendar(locale28);
        boolean boolean32 = dateTimeParserBucket5.restoreState((java.lang.Object) locale28);
        java.util.Locale locale33 = dateTimeParserBucket5.getLocale();
        java.util.Locale locale34 = dateTimeParserBucket5.getLocale();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale26);
// flaky:         org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale28);
// flaky:         org.junit.Assert.assertEquals(locale28.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u4e2d\u56fd" + "'", str30, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(calendar31);
// flaky:         org.junit.Assert.assertEquals(calendar31.toString(), "java.util.GregorianCalendar[time=1657733017268,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=194,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=23,SECOND=37,MILLISECOND=268,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
    }

    @Test
    public void test07284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07284");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        boolean boolean7 = dateTime5.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology8 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean13 = localDate10.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate10.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime15.copy();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.copy();
        mutableDateTime21.setDate((long) '#');
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean30 = localDate27.isSupported(dateTimeFieldType29);
        int int31 = localDate27.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight33 = localDate27.toDateMidnight(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime21.toDateTime(dateTimeZone32);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone32);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) 100, 1L, periodType38);
        org.joda.time.PeriodType periodType40 = period39.getPeriodType();
        boolean boolean41 = dateTimeZone32.equals((java.lang.Object) periodType40);
        mutableDateTime15.setZoneRetainFields(dateTimeZone32);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.DateTime dateTime44 = localDate10.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime45 = localDate10.toDateTimeAtStartOfDay();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField55 = chronology49.secondOfMinute();
        boolean boolean56 = dateTimeField55.isSupported();
        long long58 = dateTimeField55.roundHalfEven(946312L);
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.lang.String str63 = dateTimeField55.getAsText(86400000L, locale61);
        java.util.Set<java.lang.String> strSet64 = locale61.getUnicodeLocaleAttributes();
        boolean boolean65 = locale61.hasExtensions();
        java.lang.String str66 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate10, locale61);
        java.util.Set<java.lang.Character> charSet67 = locale61.getExtensionKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket((long) 707, chronology1, locale61, (java.lang.Integer) 26342498);
        dateTimeParserBucket69.setPivotYear((java.lang.Integer) 8642122);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53 + "'", int31 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 105144L + "'", long54 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 946000L + "'", long58 == 946000L);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0" + "'", str63, "0");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "AD" + "'", str66, "AD");
        org.junit.Assert.assertNotNull(charSet67);
    }

    @Test
    public void test07285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07285");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        mutableDateTime16.addHours(26150565);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.eras();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.secondOfMinute();
        mutableDateTime16.setRounding(dateTimeField30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime16.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.roundFloor();
        mutableDateTime34.setMillisOfDay(37349456);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
    }

    @Test
    public void test07286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07286");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutableDateTime mutableDateTime7 = instant0.toMutableDateTime();
        mutableDateTime7.addDays(1424);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean21 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.monthOfYear();
        org.joda.time.LocalDate.Property property24 = localDate22.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant25, readableInstant26, periodType27);
        mutablePeriod28.setYears((int) '#');
        mutablePeriod28.setSeconds((int) 'a');
        mutablePeriod28.setPeriod((long) 12, 1L);
        org.joda.time.LocalDate localDate36 = localDate22.plus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.LocalDate.Property property37 = localDate36.era();
        boolean boolean38 = duration15.equals((java.lang.Object) localDate36);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration15, 342);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test07287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07287");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        int int17 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.withEarlierOffsetAtOverlap();
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime18.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime13.toMutableDateTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone21);
        java.lang.Object obj27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDate localDate32 = dateTime28.toLocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfMonth();
        java.util.Date date34 = localDate32.toDate();
        org.joda.time.LocalDate.Property property35 = localDate32.dayOfYear();
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = property35.getAsText(locale36);
        java.lang.String str38 = dateTimeZone21.getShortName(360000000L, locale36);
        java.lang.String str39 = property4.getAsText(locale36);
        java.util.Set<java.lang.String> strSet40 = locale36.getUnicodeLocaleKeys();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.parse("German");
        boolean boolean43 = strSet40.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList42);
        org.joda.time.Duration duration45 = new org.joda.time.Duration((long) 59);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.hourOfDay();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        mutablePeriod55.setYears((int) '#');
        mutablePeriod55.setSeconds((int) 'a');
        mutablePeriod55.setPeriod((long) 0, (-1L));
        mutablePeriod55.addHours((-1));
        long long67 = chronology49.add((org.joda.time.ReadablePeriod) mutablePeriod55, (long) 999, 7);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(chronology49);
        boolean boolean69 = duration45.equals((java.lang.Object) dateTime68);
        boolean boolean70 = strSet40.contains((java.lang.Object) dateTime68);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList72 = java.util.Locale.LanguageRange.parse("P-1367W-2D");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap73 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList74 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList72, strMap73);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream75 = languageRangeList72.parallelStream();
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap76 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList77 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList72, strMap76);
        boolean boolean78 = strSet40.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList72);
        java.util.Iterator<java.lang.String> strItor79 = strSet40.iterator();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:23:37.289Z" + "'", str19, "2022-02-22T07:23:37.289Z");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Feb 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "53" + "'", str37, "53");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Dienstag" + "'", str39, "Dienstag");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-25199008L) + "'", long67 == (-25199008L));
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(languageRangeList72);
        org.junit.Assert.assertNotNull(languageRangeList74);
        org.junit.Assert.assertNotNull(languageRangeStream75);
        org.junit.Assert.assertNotNull(languageRangeList77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(strItor79);
    }

    @Test
    public void test07288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07288");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.copy();
        mutableDateTime7.setDate((long) '#');
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean16 = localDate13.isSupported(dateTimeFieldType15);
        int int17 = localDate13.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight19 = localDate13.toDateMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = mutableDateTime7.toDateTime(dateTimeZone18);
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(dateTimeZone18);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.PeriodType periodType26 = period25.getPeriodType();
        boolean boolean27 = dateTimeZone18.equals((java.lang.Object) periodType26);
        mutableDateTime1.setZoneRetainFields(dateTimeZone18);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone18);
        org.joda.time.DateTimeZone dateTimeZone31 = mutableDateTime30.getZone();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 53 + "'", int17 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTimeZone31);
    }

    @Test
    public void test07289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07289");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZoneUTC();
        boolean boolean14 = dateTimeFormatter2.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime15.copy();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime23 = property19.set(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        int int27 = dateTime25.getWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime25.withEarlierOffsetAtOverlap();
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime28.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone31.isFixed();
        mutableDateTime30.setZoneRetainFields(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime23.toMutableDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withZone(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        mutableDateTime37.add((long) 'a');
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.secondOfDay();
        int int41 = mutableDateTime37.getDayOfWeek();
        mutableDateTime37.addMonths(152);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime37.copy();
        int int45 = mutableDateTime44.getDayOfYear();
        int int46 = mutableDateTime44.getCenturyOfEra();
        // The following exception was thrown during execution in test generation
        try {
            int int49 = dateTimeFormatter2.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime44, "62266", 26595151);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T07:23:37.352Z" + "'", str29, "2022-02-22T07:23:37.352Z");
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 2 + "'", int41 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 295 + "'", int45 == 295);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 20 + "'", int46 == 20);
    }

    @Test
    public void test07290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07290");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 26157);
        mutableDateTime1.setMillis((long) 55);
        int int4 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime5.centuryOfEra();
        mutableDateTime5.addYears(0);
        mutableDateTime5.setMinuteOfDay((int) (short) 0);
        mutableDateTime5.setMillisOfDay(2);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Instant instant27 = mutableDateTime1.toInstant();
        int int28 = mutableDateTime1.getMillisOfSecond();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2 + "'", int28 == 2);
    }

    @Test
    public void test07291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07291");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addHours((int) (byte) 10);
        int int27 = mutableDateTime10.getSecondOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        boolean boolean37 = localDate28.isSupported(durationFieldType36);
        mutableDateTime10.add(durationFieldType36, (-292275054));
        org.joda.time.LocalDate localDate41 = localDate7.withFieldAdded(durationFieldType36, 53);
        org.joda.time.LocalDate.Property property42 = localDate7.yearOfCentury();
        int int43 = property42.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.set(45);
        org.joda.time.MutableDateTime mutableDateTime48 = property45.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime50 = property45.add(45);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        long long54 = dateTimeZone51.previousTransition(100L);
        int int56 = dateTimeZone51.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime57 = mutableDateTime50.toDateTime(dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.withDurationAdded(readableDuration58, (int) (byte) -1);
        int int61 = property42.getDifference((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDate localDate62 = dateTime60.toLocalDate();
        int int63 = dateTime60.getYear();
        org.joda.time.DateTime.Property property64 = dateTime60.dayOfWeek();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property66 = localDate65.monthOfYear();
        org.joda.time.DateTimeField dateTimeField67 = property66.getField();
        org.joda.time.LocalDate localDate68 = property66.roundCeilingCopy();
        org.joda.time.LocalDate localDate70 = localDate68.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate72 = localDate68.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate74 = localDate68.plusMonths(62172);
        boolean boolean75 = property64.equals((java.lang.Object) localDate74);
        org.joda.time.DateTimeZone dateTimeZone76 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone77 = dateTimeZone76.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.UTC;
        long long80 = dateTimeZone76.getMillisKeepLocal(dateTimeZone78, (long) 44);
        boolean boolean81 = dateTimeZone76.isFixed();
        org.joda.time.DateTime dateTime82 = localDate74.toDateTimeAtStartOfDay(dateTimeZone76);
        org.joda.time.DateTime dateTime83 = localDate74.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 62617 + "'", int27 == 62617);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 99 + "'", int43 == 99);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-6977) + "'", int61 == (-6977));
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9000 + "'", int63 == 9000);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(timeZone77);
// flaky:         org.junit.Assert.assertEquals(timeZone77.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 44L + "'", long80 == 44L);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertNotNull(dateTime83);
    }

    @Test
    public void test07292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07292");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        mutableDateTime1.setWeekOfWeekyear(13);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime17 = property14.set("2022-02-22T07:22:18.213Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:22:18.213Z\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test07293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07293");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        int int5 = mutableDateTime0.getHourOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add(26212118);
        int int9 = mutableDateTime8.getMinuteOfHour();
        org.joda.time.DateTime dateTime10 = mutableDateTime8.toDateTimeISO();
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology13, locale15);
        java.lang.Object obj18 = dateTimeParserBucket17.saveState();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket17.getZone();
        org.joda.time.DateTime dateTime20 = localDateTime11.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetHours(23);
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.forTimeZone(timeZone24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField32 = localDateTime30.getField((int) (byte) 0);
        java.lang.String str33 = localDateTime30.toString();
        org.joda.time.LocalDateTime.Property property34 = localDateTime30.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime37 = property34.addWrapFieldToCopy(100);
        int int38 = property34.getMaximumValue();
        boolean boolean39 = property34.isLeap();
        int int40 = property34.getMinimumValue();
        java.lang.Object obj41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(obj41);
        int int43 = dateTime42.getHourOfDay();
        boolean boolean44 = property34.equals((java.lang.Object) int43);
        org.joda.time.LocalDateTime localDateTime45 = property34.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime46 = property34.withMinimumValue();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration52 = duration48.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMinutes(15);
        org.joda.time.Interval interval57 = duration52.toIntervalTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTime dateTime59 = dateTime56.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property60 = dateTime59.weekOfWeekyear();
        int int61 = property34.compareTo((org.joda.time.ReadableInstant) dateTime59);
        org.joda.time.DateTimeZone dateTimeZone62 = dateTime59.getZone();
        long long64 = dateTimeZone25.getMillisKeepLocal(dateTimeZone62, 0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone25);
        long long67 = dateTimeZone19.getMillisKeepLocal(dateTimeZone25, (long) 62356);
        org.joda.time.DateTime dateTime68 = dateTime10.toDateTime(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:37.541Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:37.541Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:37.541Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 38 + "'", int9 == 38);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+23:00");
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "2022-02-22T10:23:37.541" + "'", str33, "2022-02-22T10:23:37.541");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 52 + "'", int38 == 52);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 82800000L + "'", long64 == 82800000L);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-82737644L) + "'", long67 == (-82737644L));
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test07294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07294");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        java.util.Locale locale6 = java.util.Locale.KOREA;
        int int7 = property5.getMaximumTextLength(locale6);
        java.lang.String str8 = locale6.getDisplayName();
        java.lang.String str9 = locale6.getScript();
        java.lang.String str10 = locale6.getCountry();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 3 + "'", int7 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u671d\u9c9c\u6587\u97e9\u56fd)" + "'", str8, "\u671d\u9c9c\u6587\u97e9\u56fd)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "KR" + "'", str10, "KR");
    }

    @Test
    public void test07295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07295");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(chronology3);
        org.joda.time.LocalTime localTime6 = localTime4.plusMinutes(26);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.halfdayOfDay();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField11 = chronology7.secondOfDay();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.secondOfDay();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((long) 62467, (long) (-6977), chronology7);
        org.joda.time.DateTimeZone dateTimeZone16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(dateTimeZone16);
        org.joda.time.LocalTime localTime19 = localTime17.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology20 = localTime19.getChronology();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology20);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime(dateTimeZone22);
        org.joda.time.LocalTime localTime25 = localTime23.minusHours((int) (byte) 100);
        int int26 = localTime25.getMinuteOfHour();
        java.lang.String str28 = localTime25.toString("1");
        org.joda.time.LocalTime localTime30 = localTime25.minusMinutes(15);
        long long32 = chronology20.set((org.joda.time.ReadablePartial) localTime25, (long) 48);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.eras();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.DurationField durationField41 = chronology38.eras();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 44, chronology38);
        org.joda.time.DateTimeField dateTimeField43 = dateTimeFieldType33.getField(chronology38);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) 100, 1L, periodType46);
        org.joda.time.Period period49 = period47.minusSeconds((-1));
        java.lang.String str50 = period47.toString();
        long long53 = chronology38.add((org.joda.time.ReadablePeriod) period47, (long) ' ', (int) 'a');
        org.joda.time.Period period55 = period47.minusHours((-292275054));
        long long58 = chronology20.add((org.joda.time.ReadablePeriod) period47, (long) 26195, 26180329);
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology20);
        org.joda.time.Chronology chronology60 = chronology20.withUTC();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime(chronology20);
        mutablePeriod13.setPeriod(4801285238365L, chronology20);
        boolean boolean63 = dateTimeFieldType0.isSupported(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(localTime25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 23 + "'", int26 == 23);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1" + "'", str28, "1");
        org.junit.Assert.assertNotNull(localTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 8617592L + "'", long32 == 8617592L);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0.099S" + "'", str50, "PT0.099S");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-9571L) + "'", long53 == (-9571L));
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-2591826376L) + "'", long58 == (-2591826376L));
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test07296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07296");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withZoneUTC();
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Locale locale16 = locale15.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter3.withLocale(locale15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter3.withPivotYear(489);
        java.util.Locale locale20 = dateTimeFormatter3.getLocale();
        boolean boolean21 = dateTimeFormatter3.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.parse("", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 105144L + "'", long12 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale16);
// flaky:         org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(locale20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test07297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07297");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime17.toString(dateTimeFormatter19);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime17);
        mutableDateTime15.addDays(22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (short) 100, chronology25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str28 = durationFieldType27.getName();
        boolean boolean29 = localTime26.isSupported(durationFieldType27);
        mutableDateTime15.add(durationFieldType27, 3);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime15.hourOfDay();
        mutableDateTime15.add((long) 36981644);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime15.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundCeiling();
        mutableDateTime36.setMonthOfYear(3);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMinutes(15);
        org.joda.time.Chronology chronology46 = dateTime43.getChronology();
        java.lang.String str47 = chronology46.toString();
        org.joda.time.DurationField durationField48 = chronology46.halfdays();
        org.joda.time.LocalDateTime localDateTime49 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.plusYears((int) (short) 100);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration63 = duration60.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration64 = duration57.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime55.plus((org.joda.time.ReadableDuration) duration57);
        long long67 = chronology46.set((org.joda.time.ReadablePartial) localDateTime65, 950105L);
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime(86400L, chronology46);
        org.joda.time.Period period69 = new org.joda.time.Period((long) 26177, chronology46);
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod((long) (-152), chronology46);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((java.lang.Object) 3, chronology46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-23T06:23:37.797+23:00" + "'", str20, "2022-02-23T06:23:37.797+23:00");
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weeks" + "'", str28, "weeks");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ISOChronology[+23:00]" + "'", str47, "ISOChronology[+23:00]");
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(localDateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + 4801289017797L + "'", long67 == 4801289017797L);
    }

    @Test
    public void test07298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07298");
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.LocalTime localTime10 = localTime8.minusHours((int) (byte) 100);
        int int11 = localTime10.getMinuteOfHour();
        java.lang.String str13 = localTime10.toString("1");
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant24 = instant17.plus((org.joda.time.ReadableDuration) duration23);
        long long25 = instant24.getMillis();
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.months();
        org.joda.time.Period period28 = new org.joda.time.Period((-205878993L), chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology26.getZone();
        org.joda.time.DateTime dateTime31 = localTime10.toDateTimeToday(dateTimeZone30);
        long long33 = dateTimeZone30.nextTransition((long) 26182);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(381, 557, 0, 26209, 1056, 26274169, 758, dateTimeZone30);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26209 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 23 + "'", int11 == 23);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 26182L + "'", long33 == 26182L);
    }

    @Test
    public void test07299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07299");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration16 = duration12.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Period period19 = period17.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        mutableDateTime20.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime20.copy();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant30, readableInstant31, periodType32);
        org.joda.time.DurationFieldType durationFieldType35 = periodType32.getFieldType((int) (short) 0);
        java.lang.String str36 = periodType32.toString();
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Chronology chronology40 = instant39.getChronology();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 53, (long) (-1), periodType32, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType27.getField(chronology40);
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = locale43.getDisplayLanguage();
        int int45 = dateTimeField42.getMaximumTextLength(locale43);
        mutableDateTime26.setRounding(dateTimeField42);
        org.joda.time.Duration duration47 = period17.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime26.centuryOfEra();
        int int49 = mutableDateTime26.getDayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean54 = localDate51.isSupported(dateTimeFieldType53);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType53.getRangeDurationType();
        java.lang.String str56 = durationFieldType55.toString();
        int int57 = mutablePeriod50.indexOf(durationFieldType55);
        mutableDateTime6.add(durationFieldType55, 26184);
        org.joda.time.DateTimeField dateTimeField60 = mutableDateTime6.getRoundingField();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PeriodType[YearDayTime]" + "'", str36, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u82f1\u6587" + "'", str44, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "days" + "'", str56, "days");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 3 + "'", int57 == 3);
        org.junit.Assert.assertNull(dateTimeField60);
    }

    @Test
    public void test07300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07300");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = localDateTime9.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        mutableDateTime4.setRounding(dateTimeField20);
        java.lang.Object obj22 = mutableDateTime4.clone();
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime4.copy();
        int int24 = mutableDateTime23.getEra();
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime23.copy();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "4500-01-01T00:00:00.000+23:00");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "4500-01-01T00:00:00.000+23:00");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "4500-01-01T00:00:00.000+23:00");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test07301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07301");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        int int4 = localTime3.getMinuteOfHour();
        java.lang.String str6 = localTime3.toString("1");
        org.joda.time.LocalTime localTime8 = localTime3.minusMinutes(15);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 15);
        org.joda.time.DateTime.Property property15 = dateTime10.year();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime();
        org.joda.time.LocalTime localTime19 = dateTime16.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime3.withFields((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime localTime22 = localTime3.minusMinutes(26212472);
        org.joda.time.LocalTime localTime24 = localTime3.minusMinutes(56);
        org.joda.time.LocalTime.Property property25 = localTime24.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test07302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07302");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = localDateTime9.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        mutableDateTime4.setRounding(dateTimeField20);
        java.util.GregorianCalendar gregorianCalendar22 = mutableDateTime4.toGregorianCalendar();
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime4.copy();
        java.lang.Object obj24 = mutableDateTime23.clone();
        mutableDateTime23.addMinutes(78);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertEquals(obj24.toString(), "4500-01-01T00:00:00.000+23:00");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj24), "4500-01-01T00:00:00.000+23:00");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj24), "4500-01-01T00:00:00.000+23:00");
    }

    @Test
    public void test07303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07303");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj8 = mutableDateTime7.clone();
        mutableDateTime7.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.dayOfWeek();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.weekyear();
        int int13 = mutableDateTime7.getMinuteOfHour();
        boolean boolean14 = dateTime6.isEqual((org.joda.time.ReadableInstant) mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "2022-02-23T06:23:38.013+23:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "2022-02-23T06:23:38.013+23:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "2022-02-23T06:23:38.013+23:00");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test07304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07304");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = localDateTime9.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        mutableDateTime4.setRounding(dateTimeField20);
        java.lang.Object obj22 = mutableDateTime4.clone();
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime4.copy();
        int int24 = mutableDateTime23.getEra();
        mutableDateTime23.addSeconds(9);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.weekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "4500-01-01T00:00:00.000+23:00");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "4500-01-01T00:00:00.000+23:00");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "4500-01-01T00:00:00.000+23:00");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test07305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07305");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusSeconds((int) (byte) 10);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period13 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration12);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime6.minus((org.joda.time.ReadableDuration) duration12);
        java.util.TimeZone timeZone16 = java.util.TimeZone.getTimeZone("2022-02-22T10:15:47.721");
        boolean boolean17 = duration12.equals((java.lang.Object) "2022-02-22T10:15:47.721");
        org.joda.time.Instant instant19 = new org.joda.time.Instant(948227L);
        org.joda.time.Interval interval20 = duration12.toIntervalFrom((org.joda.time.ReadableInstant) instant19);
        org.joda.time.Seconds seconds21 = duration12.toStandardSeconds();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(seconds21);
    }

    @Test
    public void test07306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07306");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = mutablePeriod3.getFieldTypes();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours12 = duration11.toStandardHours();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration8.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration18 = duration8.toDuration();
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInterval readableInterval20 = null;
        mutablePeriod3.setPeriod(readableInterval20);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.add(51);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.LocalDate localDate31 = property29.roundCeilingCopy();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime36 = localDate31.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.monthOfYear();
        org.joda.time.DateTime dateTime39 = dateTime36.minusMonths(53);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) mutableDateTime27, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate41 = dateTime36.toLocalDate();
        int int42 = localDate41.getDayOfWeek();
        org.joda.time.LocalDate.Property property43 = localDate41.dayOfYear();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(hours12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 38 + "'", int15 == 38);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(property43);
    }

    @Test
    public void test07307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07307");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period10 = period8.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        mutableDateTime17.setRounding(dateTimeField33);
        org.joda.time.Duration duration38 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime17.centuryOfEra();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        mutablePeriod44.setPeriod((long) 999, chronology49);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod58.addDays((int) (byte) 10);
        mutablePeriod58.addMillis((int) '4');
        mutablePeriod58.setSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime(dateTimeZone65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalTime localTime68 = localTime66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(readableInstant69, readableInstant70, periodType71);
        org.joda.time.DurationFieldType durationFieldType74 = periodType71.getFieldType((int) (short) 0);
        boolean boolean75 = localTime66.isSupported(durationFieldType74);
        mutablePeriod58.add(durationFieldType74, 8);
        boolean boolean78 = mutablePeriod44.isSupported(durationFieldType74);
        mutablePeriod44.addWeeks(443);
        mutableDateTime17.add((org.joda.time.ReadablePeriod) mutablePeriod44, 26176);
        mutablePeriod44.addMonths(0);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u82f1\u6587" + "'", str35, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test07308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07308");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        int int19 = mutableDateTime0.getMillisOfSecond();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime29 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime29.withYear(2000);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = dateTime34.withZoneRetainFields(dateTimeZone35);
        boolean boolean38 = dateTime36.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology39 = dateTime36.getChronology();
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology39, locale40, (java.lang.Integer) 50);
        org.joda.time.DurationField durationField43 = chronology39.eras();
        org.joda.time.DateTime dateTime44 = dateTime29.withChronology(chronology39);
        int int45 = mutableDateTime0.compareTo((org.joda.time.ReadableInstant) dateTime44);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfMonth(26532);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26532 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 283 + "'", int19 == 283);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test07309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07309");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = localDateTime9.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        mutableDateTime4.setRounding(dateTimeField20);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.DurationField durationField23 = property22.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.roundHalfCeiling();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime24.setDayOfMonth(62371);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62371 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test07310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07310");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        int int20 = mutableDateTime19.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.add((int) (byte) 10);
        java.util.Date date24 = mutableDateTime23.toDate();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime23.year();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-23T06:23:38.241+23:00" + "'", str14, "2022-02-23T06:23:38.241+23:00");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(date24);
        org.junit.Assert.assertEquals(date24.toString(), "Sun Jan 02 01:10:00 UTC 2022");
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test07311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07311");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone11);
        java.util.TimeZone timeZone16 = dateTimeZone11.toTimeZone();
        // The following exception was thrown during execution in test generation
        try {
            int int23 = timeZone16.getOffset(26403876, 126, 438, 26334592, (-268), 1948);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal era 26403876");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 54 + "'", int10 == 54);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
    }

    @Test
    public void test07312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07312");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addMonths(0);
        mutableDateTime0.addHours(45);
        org.joda.time.DateTime dateTime19 = mutableDateTime0.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime19.plusSeconds(30);
        org.joda.time.YearMonthDay yearMonthDay22 = dateTime19.toYearMonthDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(yearMonthDay22);
    }

    @Test
    public void test07313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07313");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration16 = duration12.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Period period19 = period17.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        mutableDateTime20.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime20.copy();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant30, readableInstant31, periodType32);
        org.joda.time.DurationFieldType durationFieldType35 = periodType32.getFieldType((int) (short) 0);
        java.lang.String str36 = periodType32.toString();
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Chronology chronology40 = instant39.getChronology();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 53, (long) (-1), periodType32, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType27.getField(chronology40);
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = locale43.getDisplayLanguage();
        int int45 = dateTimeField42.getMaximumTextLength(locale43);
        mutableDateTime26.setRounding(dateTimeField42);
        org.joda.time.Duration duration47 = period17.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime26.centuryOfEra();
        int int49 = mutableDateTime26.getYear();
        int int50 = dateTime7.compareTo((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setMinuteOfHour(23);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime26.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime54 = property53.roundHalfFloor();
        mutableDateTime54.add((long) 26302057);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime54.setDateTime(26366, 111, (-622), 26306, 0, 26322391, 36950209);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26306 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PeriodType[YearDayTime]" + "'", str36, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u82f1\u6587" + "'", str44, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
    }

    @Test
    public void test07314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07314");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(15);
        org.joda.time.DateTime dateTime19 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = localDateTime12.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime7.withZoneRetainFields(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.yearOfCentury();
        mutableDateTime23.addSeconds(0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours31 = duration30.toStandardHours();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.months();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime43, periodType44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime37, periodType44);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime48 = dateTime22.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str53 = duration52.toString();
        boolean boolean54 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration60 = duration56.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration65 = duration62.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean66 = duration60.isLongerThan((org.joda.time.ReadableDuration) duration62);
        boolean boolean67 = duration52.isEqual((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration69 = duration62.withMillis((long) 22);
        org.joda.time.Duration duration71 = duration62.withMillis(3024000005L);
        org.joda.time.Duration duration72 = duration47.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime4.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.LocalDateTime localDateTime74 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField80 = localDateTime78.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray81 = localDateTime78.getFields();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime78.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.withCenturyOfEra(5);
        org.joda.time.LocalDateTime localDateTime87 = localDateTime85.withYear(8);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime85.minusMinutes(21);
        org.joda.time.LocalDateTime localDateTime91 = localDateTime89.minusDays((int) (byte) -1);
        org.joda.time.Period period92 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime4, (org.joda.time.ReadablePartial) localDateTime91);
        java.lang.String str93 = localDateTime91.toString();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime95 = localDateTime91.withEra(572);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 572 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1973 + "'", int5 == 1973);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(hours31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 38 + "'", int34 == 38);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT86400S" + "'", str53, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeField80);
        org.junit.Assert.assertNotNull(dateTimeFieldArray81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(localDateTime91);
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "0522-02-22T10:02:38.397" + "'", str93, "0522-02-22T10:02:38.397");
    }

    @Test
    public void test07315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07315");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime9 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        mutableDateTime10.addWeekyears((int) (byte) 1);
        int int16 = dateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime10.centuryOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime19 = property17.set("PT187200S");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"PT187200S\" for centuryOfEra is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1970 + "'", int2 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test07316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07316");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime4.getFields();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withDayOfWeek(1);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDurationAdded((org.joda.time.ReadableDuration) duration11, 53);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        int int17 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime15.plus((long) 15);
        org.joda.time.DateTime dateTime21 = dateTime15.plusDays(0);
        org.joda.time.DateTime dateTime23 = dateTime15.withYearOfEra(7);
        org.joda.time.Interval interval24 = duration11.toIntervalFrom((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime mutableDateTime25 = dateTime15.toMutableDateTimeISO();
        int int26 = mutableDateTime25.getCenturyOfEra();
        int int27 = mutableDateTime25.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 38 + "'", int27 == 38);
    }

    @Test
    public void test07317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07317");
        java.lang.Object obj0 = null;
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        long long9 = chronology4.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField10 = chronology4.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj13 = mutableDateTime12.clone();
        mutableDateTime12.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.add(1L);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        long long23 = dateTimeZone19.getMillisKeepLocal(dateTimeZone21, (long) 44);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone19);
        mutableDateTime18.setZoneRetainFields(dateTimeZone19);
        java.util.Locale.Builder builder27 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder28 = builder27.clear();
        java.util.Locale locale29 = builder28.build();
        java.lang.String str30 = dateTimeZone19.getName(555370422L, locale29);
        java.lang.String str32 = dateTimeZone19.getShortName(962578L);
        int int34 = dateTimeZone19.getOffset(1645514174548L);
        java.lang.String str35 = dateTimeZone19.toString();
        org.joda.time.Chronology chronology36 = chronology4.withZone(dateTimeZone19);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(obj0, chronology4);
        org.joda.time.DateTimeField dateTimeField38 = chronology4.weekyearOfCentury();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 105144L + "'", long9 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "2022-02-24T12:23:38.527+53:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "2022-02-24T12:23:38.527+53:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "2022-02-24T12:23:38.527+53:00");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 44L + "'", long23 == 44L);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+00:00" + "'", str30, "+00:00");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00" + "'", str32, "+00:00");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "UTC" + "'", str35, "UTC");
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test07318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07318");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.Instant instant14 = instant9.withDurationAdded((long) (byte) 0, (int) (short) 100);
        org.joda.time.DateTime dateTime15 = instant14.toDateTimeISO();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test07319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07319");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        java.lang.String str5 = dateTimeField3.getAsText((long) 28);
        org.joda.time.Chronology chronology8 = null;
        java.util.Locale locale9 = java.util.Locale.GERMAN;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale9.getDisplayVariant(locale10);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket12 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology8, locale10);
        java.lang.Object obj13 = dateTimeParserBucket12.saveState();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime((long) (short) 100, chronology15);
        org.joda.time.DurationFieldType durationFieldType17 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str18 = durationFieldType17.getName();
        boolean boolean19 = localTime16.isSupported(durationFieldType17);
        boolean boolean20 = dateTimeParserBucket12.restoreState((java.lang.Object) boolean19);
        org.joda.time.Chronology chronology21 = dateTimeParserBucket12.getChronology();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        dateTimeParserBucket12.setZone(dateTimeZone24);
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime((long) 435, dateTimeZone24);
        int int28 = localTime27.getMillisOfSecond();
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder30.clear();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getDisplayName();
        java.lang.String str34 = locale32.getISO3Language();
        java.lang.String str35 = locale32.getISO3Country();
        java.util.Locale.Builder builder36 = builder31.setLocale(locale32);
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        java.util.Locale.Builder builder40 = builder36.setLocale(locale38);
        java.lang.String str41 = dateTimeField3.getAsText((org.joda.time.ReadablePartial) localTime27, (-16), locale38);
        java.lang.String str42 = dateTimeField3.toString();
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder44 = builder43.clear();
        java.util.Locale locale45 = builder44.build();
        boolean boolean46 = locale45.hasExtensions();
        java.lang.String str48 = locale45.getExtension('x');
        java.util.Locale locale49 = locale45.stripExtensions();
        java.util.Locale.setDefault(locale45);
        java.util.Locale.setDefault(locale45);
        int int52 = dateTimeField3.getMaximumTextLength(locale45);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "19" + "'", str5, "19");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(obj13);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "weeks" + "'", str18, "weeks");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 435 + "'", int28 == 435);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str33, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "deu" + "'", str34, "deu");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "-16" + "'", str41, "-16");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "DateTimeField[centuryOfEra]" + "'", str42, "DateTimeField[centuryOfEra]");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 7 + "'", int52 == 7);
    }

    @Test
    public void test07320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07320");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        int int8 = mutableDateTime7.getCenturyOfEra();
        mutableDateTime7.setMinuteOfDay(1424);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        mutableDateTime11.setDate((long) '#');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        int int21 = localDate17.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone22);
        mutableDateTime7.setZoneRetainFields(dateTimeZone22);
        int int27 = mutableDateTime7.getWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
    }

    @Test
    public void test07321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07321");
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod(readableInstant6, readableInstant7, periodType8);
        org.joda.time.DurationFieldType durationFieldType11 = periodType8.getFieldType((int) (short) 0);
        java.lang.String str12 = periodType8.toString();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Chronology chronology16 = instant15.getChronology();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 53, (long) (-1), periodType8, chronology16);
        org.joda.time.Period period18 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType8);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        long long27 = chronology22.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology22.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(949680L, 100L, periodType8, chronology22);
        org.joda.time.DateTimeField dateTimeField31 = chronology22.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = chronology22.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology22);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(chronology22);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PeriodType[YearDayTime]" + "'", str12, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 105144L + "'", long27 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test07322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07322");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutableDateTime mutableDateTime7 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfEven();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setDayOfYear(62284);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62284 for dayOfYear must be in the range [1,366]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test07323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07323");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.millisOfDay();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.year();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfEven();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (byte) -1);
        int int8 = localDate7.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        long long13 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 44);
        org.joda.time.DateTime dateTime14 = localDate7.toDateTimeAtMidnight(dateTimeZone9);
        java.lang.String str15 = dateTimeZone9.getID();
        mutableDateTime5.setZoneRetainFields(dateTimeZone9);
        mutableDateTime5.setMinuteOfDay(0);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:38.826Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:38.826Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:38.826Z");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1969 + "'", int8 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
        org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 44L + "'", long13 == 44L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
    }

    @Test
    public void test07324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07324");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter2.withZone(dateTimeZone38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter2.withOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate44 = dateTimeFormatter42.parseLocalDate("2022-02-22T07:21:03.583Z");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimePrinter37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
    }

    @Test
    public void test07325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07325");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        mutableDateTime0.add(1645514161062L);
        int int16 = mutableDateTime0.getSecondOfMinute();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 40 + "'", int16 == 40);
    }

    @Test
    public void test07326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07326");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.Period period7 = period5.minusSeconds((-1));
        java.lang.String str8 = period5.toString();
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded((org.joda.time.ReadablePeriod) period5, 3);
        int int11 = localDate0.getYear();
        org.joda.time.LocalDate.Property property12 = localDate0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime13.copy();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime13.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime21 = property17.set(1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getYearOfCentury();
        int int25 = dateTime23.getWeekyear();
        org.joda.time.DateTime dateTime26 = dateTime23.withEarlierOffsetAtOverlap();
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime26.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        mutableDateTime28.setZoneRetainFields(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime21.toMutableDateTime(dateTimeZone29);
        long long35 = dateTimeZone29.adjustOffset((long) 6, false);
        org.joda.time.DateTime dateTime36 = localDate0.toDateTimeAtMidnight(dateTimeZone29);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone29);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT0.099S" + "'", str8, "PT0.099S");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T07:23:38.919Z" + "'", str27, "2022-02-22T07:23:38.919Z");
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 6L + "'", long35 == 6L);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test07327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07327");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.yearOfCentury();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration21 = duration14.minus((org.joda.time.ReadableDuration) duration20);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.centuryOfEra();
        mutableDateTime9.addYears(0);
        mutableDateTime9.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant37 = instant30.plus((org.joda.time.ReadableDuration) duration36);
        long long38 = instant37.getMillis();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) instant37);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39, 999);
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period46 = duration45.toPeriod();
        org.joda.time.Duration duration49 = duration45.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableDuration) duration49);
        long long51 = duration49.getMillis();
        boolean boolean52 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.DateTime dateTime56 = instant55.toDateTime();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant60 = instant55.withDurationAdded((org.joda.time.ReadableDuration) duration58, 0);
        org.joda.time.Instant instant63 = instant60.withDurationAdded(25L, 26158);
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        org.joda.time.Instant instant66 = instant63.minus((long) 50);
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime((long) 42);
        org.joda.time.DateTime dateTime70 = dateTime68.plusHours(70);
        boolean boolean71 = instant63.isEqual((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Instant instant73 = new org.joda.time.Instant((java.lang.Object) 0L);
        org.joda.time.DateTime dateTime74 = instant73.toDateTime();
        org.joda.time.LocalDate localDate75 = dateTime74.toLocalDate();
        int int77 = localDate75.getValue(0);
        org.joda.time.DateTime dateTime78 = dateTime68.withFields((org.joda.time.ReadablePartial) localDate75);
        org.joda.time.Period period79 = duration49.toPeriodFrom((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.Period period81 = period79.withMonths(60);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86400000L + "'", long38 == 86400000L);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 86400000L + "'", long51 == 86400000L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 1970 + "'", int77 == 1970);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(period81);
    }

    @Test
    public void test07328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07328");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        java.lang.String str17 = dateTimeZone14.toString();
        java.lang.String str18 = dateTimeZone14.getID();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone14);
        java.lang.Object obj21 = null;
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale24 = java.util.Locale.GERMAN;
        java.lang.String str25 = locale24.getDisplayName();
        java.lang.String str26 = dateTimeZone22.getName(100L, locale24);
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime(obj21, dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        mutableDateTime29.add((long) 'a');
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str36 = duration35.toString();
        boolean boolean37 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Hours hours38 = duration33.toStandardHours();
        mutableDateTime29.add((org.joda.time.ReadableDuration) duration33, 20);
        mutableDateTime29.setMillisOfDay(36946953);
        org.joda.time.DateTimeField dateTimeField43 = mutableDateTime29.getRoundingField();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period46 = duration45.toPeriod();
        org.joda.time.Duration duration49 = duration45.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration54 = duration51.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean55 = duration49.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime29, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime28.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDateTime.Property property58 = localDateTime28.weekOfWeekyear();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period61 = duration60.toPeriod();
        org.joda.time.Period period63 = period61.minusYears((-1));
        org.joda.time.Period period65 = period61.withMillis(100);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime28.minus((org.joda.time.ReadablePeriod) period65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType67.getDurationType();
        boolean boolean69 = localDateTime28.isSupported(dateTimeFieldType67);
        boolean boolean70 = mutableDateTime20.isSupported(dateTimeFieldType67);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime20.setDayOfWeek(26318841);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26318841 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "de");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "German" + "'", str25, "German");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT86400S" + "'", str36, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertNull(dateTimeField43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(durationFieldType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test07329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07329");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        org.joda.time.Chronology chronology7 = mutableDateTime6.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone8.getMillisKeepLocal(dateTimeZone10, (long) 44);
        boolean boolean14 = dateTimeZone10.isStandardOffset((long) (-1));
        java.lang.String str15 = dateTimeZone10.toString();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.set(45);
        org.joda.time.MutableDateTime mutableDateTime20 = property17.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime22 = property17.add(45);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        long long26 = dateTimeZone23.previousTransition(100L);
        int int28 = dateTimeZone23.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime29 = mutableDateTime22.toDateTime(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        boolean boolean31 = dateTimeZone23.isFixed();
        long long33 = dateTimeZone10.getMillisKeepLocal(dateTimeZone23, (long) 36950209);
        org.joda.time.DateTime dateTime34 = mutableDateTime6.toDateTime(dateTimeZone10);
        int int35 = dateTime34.getYearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 44L + "'", long12 == 44L);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "UTC" + "'", str15, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
        org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 36950209L + "'", long33 == 36950209L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 9000 + "'", int35 == 9000);
    }

    @Test
    public void test07330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07330");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        long long10 = dateTimeZone7.previousTransition(100L);
        int int12 = dateTimeZone7.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime13 = mutableDateTime6.toDateTime(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(dateTimeZone7);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusYears(5);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYearOfEra(99);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withDayOfMonth(26);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.secondOfMinute();
        org.joda.time.LocalDateTime.Property property22 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundCeilingCopy();
        java.lang.String str24 = property22.getAsShortText();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
        org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "99" + "'", str24, "99");
    }

    @Test
    public void test07331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07331");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        boolean boolean37 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField45 = localDateTime43.getField((int) (byte) 0);
        long long47 = dateTimeField45.roundHalfEven((long) 1);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.lang.String str51 = locale48.getISO3Language();
        java.lang.String str52 = locale48.getISO3Country();
        java.util.Locale locale53 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale53);
        java.lang.String str55 = locale48.getDisplayLanguage(locale53);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = property59.getField();
        int int61 = property59.get();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = property59.getAsShortText(locale62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int70 = localDateTime68.get(dateTimeFieldType69);
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        boolean boolean72 = localDateTime68.equals((java.lang.Object) locale71);
        java.lang.String str73 = locale62.getDisplayVariant(locale71);
        java.lang.String str74 = locale53.getDisplayScript(locale71);
        int int75 = dateTimeField45.getMaximumTextLength(locale71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter38.withLocale(locale71);
        org.joda.time.Chronology chronology77 = dateTimeFormatter76.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter79 = dateTimeFormatter76.withPivotYear(62187);
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale83 = java.util.Locale.GERMAN;
        java.lang.String str84 = locale83.getDisplayName();
        java.lang.String str85 = dateTimeZone81.getName(100L, locale83);
        org.joda.time.MutableDateTime mutableDateTime86 = new org.joda.time.MutableDateTime(948227L, dateTimeZone81);
        long long87 = mutableDateTime86.getMillis();
        mutableDateTime86.setWeekyear(1439);
        boolean boolean91 = mutableDateTime86.isBefore(1645514186724L);
        org.joda.time.DateTimeZone dateTimeZone93 = org.joda.time.DateTimeZone.forOffsetMillis(36988464);
        mutableDateTime86.setZone(dateTimeZone93);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter95 = dateTimeFormatter76.withZone(dateTimeZone93);
        org.joda.time.Chronology chronology96 = dateTimeFormatter95.getChronolgy();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u5fb7\u6587" + "'", str55, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 7 + "'", int61 == 7);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "7" + "'", str63, "7");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1439 + "'", int70 == 1439);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeFormatter79);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u5fb7\u6587" + "'", str84, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "+00:00" + "'", str85, "+00:00");
        org.junit.Assert.assertTrue("'" + long87 + "' != '" + 948227L + "'", long87 == 948227L);
        org.junit.Assert.assertTrue("'" + boolean91 + "' != '" + true + "'", boolean91 == true);
        org.junit.Assert.assertNotNull(dateTimeZone93);
        org.junit.Assert.assertNotNull(dateTimeFormatter95);
        org.junit.Assert.assertNull(chronology96);
    }

    @Test
    public void test07332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07332");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.DateTime dateTime6 = dateTime1.minusDays(46);
        org.joda.time.DateTime.Property property7 = dateTime6.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.parse("2022-02-22T07:16:08.639Z");
        mutableDateTime9.addHours(26233410);
        boolean boolean12 = dateTime6.isEqual((org.joda.time.ReadableInstant) mutableDateTime9);
        org.joda.time.DateTime.Property property13 = dateTime6.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test07333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07333");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        int int4 = localTime3.getMinuteOfHour();
        java.lang.String str6 = localTime3.toString("1");
        org.joda.time.LocalTime localTime8 = localTime3.minusMinutes(15);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 15);
        org.joda.time.DateTime.Property property15 = dateTime10.year();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime();
        org.joda.time.LocalTime localTime19 = dateTime16.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime3.withFields((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime22 = localTime19.minus(readablePeriod21);
        java.lang.String str24 = localTime22.toString("00:15:59.418");
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration25, readableInstant26);
        org.joda.time.Period period29 = period27.withDays((int) (byte) 1);
        org.joda.time.Period period31 = period29.plusMinutes(26148950);
        org.joda.time.LocalTime localTime32 = localTime22.minus((org.joda.time.ReadablePeriod) period31);
        org.joda.time.LocalTime localTime34 = localTime22.minusMillis(34);
        org.joda.time.LocalTime localTime36 = localTime22.withSecondOfMinute(34);
        org.joda.time.LocalTime.Property property37 = localTime36.hourOfDay();
        org.joda.time.LocalTime localTime39 = property37.addCopy((long) 15556368);
        org.joda.time.LocalTime.Property property40 = localTime39.millisOfDay();
        org.joda.time.DateTime dateTime41 = localTime39.toDateTimeToday();
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "00:15:59.418" + "'", str24, "00:15:59.418");
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test07334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07334");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfEven();
        int int5 = mutableDateTime4.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime4.toMutableDateTimeISO();
        mutableDateTime6.setMillisOfDay(37031394);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.joda.time.LocalDate localDate12 = property10.roundCeilingCopy();
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime17 = localDate12.toDateTimeAtMidnight(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime17.monthOfYear();
        org.joda.time.DateTime dateTime20 = dateTime17.minusMonths(53);
        org.joda.time.DateTime dateTime22 = dateTime17.minusMonths(60);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((long) 59);
        org.joda.time.DateTime dateTime25 = dateTime22.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period27 = duration24.toPeriodTo(readableInstant26);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period29 = duration24.toPeriod();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test07335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07335");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        mutablePeriod2.setMonths(152);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod20.clear();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.Interval interval32 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime31);
        mutablePeriod20.setPeriod((org.joda.time.ReadableInterval) interval32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant34, readableInstant35, periodType36);
        org.joda.time.DurationFieldType durationFieldType39 = periodType36.getFieldType((int) (short) 0);
        int int40 = mutablePeriod20.get(durationFieldType39);
        int int41 = mutablePeriod2.indexOf(durationFieldType39);
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod2.copy();
        mutablePeriod2.clear();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology48 = localTime47.getChronology();
        boolean boolean49 = dateTimeFieldType45.isSupported(chronology48);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime(chronology48);
        mutablePeriod2.setPeriod((long) 39292537, chronology48);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(interval32);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod42);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(localTime47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
    }

    @Test
    public void test07336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07336");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        mutableDateTime6.addHours(16);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        long long14 = dateTimeZone10.getMillisKeepLocal(dateTimeZone12, (long) 44);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone10);
        mutableDateTime6.setZoneRetainFields(dateTimeZone10);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(dateTimeZone10);
        int int18 = mutableDateTime17.getDayOfYear();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 44L + "'", long14 == 44L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 53 + "'", int18 == 53);
    }

    @Test
    public void test07337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07337");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.withDayOfMonth(20);
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTime.Property property13 = dateTime11.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test07338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07338");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod6 = mutablePeriod3.toMutablePeriod();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean10 = localDate7.isSupported(dateTimeFieldType9);
        org.joda.time.DurationFieldType durationFieldType11 = dateTimeFieldType9.getRangeDurationType();
        int int12 = mutablePeriod3.indexOf(durationFieldType11);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = duration14.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        mutableDateTime18.add((long) 'a');
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.yearOfCentury();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration30 = duration23.minus((org.joda.time.ReadableDuration) duration29);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration23);
        boolean boolean32 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration34 = duration23.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        mutableDateTime35.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime35.copy();
        mutableDateTime35.setDate((long) '#');
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property42 = localDate41.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean44 = localDate41.isSupported(dateTimeFieldType43);
        int int45 = localDate41.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight47 = localDate41.toDateMidnight(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = mutableDateTime35.toDateTime(dateTimeZone46);
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) mutableDateTime35);
        org.joda.time.MutablePeriod mutablePeriod50 = mutablePeriod49.copy();
        mutablePeriod50.clear();
        mutablePeriod50.setPeriod(21L, (long) '#');
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        int int57 = localDate56.getDayOfMonth();
        org.joda.time.DateTime dateTime58 = localDate56.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate60 = localDate56.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate62 = localDate60.plusDays(26150565);
        org.joda.time.DateTimeZone dateTimeZone63 = null;
        org.joda.time.DateTime dateTime64 = localDate60.toDateTimeAtStartOfDay(dateTimeZone63);
        org.joda.time.Duration duration65 = mutablePeriod50.toDurationFrom((org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property67 = localDate66.monthOfYear();
        org.joda.time.DateTimeField dateTimeField68 = property67.getField();
        org.joda.time.LocalDate localDate69 = property67.withMaximumValue();
        java.util.Date date70 = localDate69.toDate();
        org.joda.time.LocalDate.Property property71 = localDate69.dayOfMonth();
        org.joda.time.LocalDate localDate73 = localDate69.withEra(0);
        org.joda.time.LocalDate localDate75 = localDate69.withCenturyOfEra(36);
        org.joda.time.DateTime dateTime76 = localDate75.toDateTimeAtStartOfDay();
        int int77 = dateTime76.getMonthOfYear();
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration65, (org.joda.time.ReadableInstant) dateTime76);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutablePeriod6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 53 + "'", int45 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(dateMidnight47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutablePeriod50);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(date70);
        org.junit.Assert.assertEquals(date70.toString(), "Thu Dec 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 12 + "'", int77 == 12);
    }

    @Test
    public void test07339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07339");
        org.joda.time.Period period1 = new org.joda.time.Period(360000000L);
        org.joda.time.Period period3 = period1.plusDays(1191);
        org.joda.time.Duration duration5 = org.joda.time.Duration.millis(725810096000L);
        org.joda.time.Duration duration8 = duration5.withDurationAdded((long) 50, 0);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.yearOfCentury();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration21 = duration14.minus((org.joda.time.ReadableDuration) duration20);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.centuryOfEra();
        mutableDateTime9.addHours((int) (byte) 10);
        mutableDateTime9.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField28 = mutableDateTime9.getRoundingField();
        int int29 = mutableDateTime9.getWeekyear();
        int int30 = mutableDateTime9.getDayOfWeek();
        int int31 = mutableDateTime9.getWeekyear();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime9.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.yearOfCentury();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration45 = duration38.minus((org.joda.time.ReadableDuration) duration44);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration38);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime33.centuryOfEra();
        mutableDateTime33.addYears(0);
        mutableDateTime33.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration60 = duration56.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant61 = instant54.plus((org.joda.time.ReadableDuration) duration60);
        long long62 = instant61.getMillis();
        org.joda.time.Duration duration63 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime33, (org.joda.time.ReadableInstant) instant61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime33.millisOfSecond();
        org.joda.time.Instant instant65 = new org.joda.time.Instant((java.lang.Object) mutableDateTime33);
        boolean boolean66 = mutableDateTime9.isAfter((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.DateTime dateTime67 = mutableDateTime33.toDateTime();
        org.joda.time.Interval interval68 = duration8.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime33);
        boolean boolean69 = period3.equals((java.lang.Object) interval68);
        org.joda.time.MutablePeriod mutablePeriod70 = period3.toMutablePeriod();
        mutablePeriod70.setMillis(1671666152);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2022 + "'", int31 == 2022);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 86400000L + "'", long62 == 86400000L);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(interval68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(mutablePeriod70);
    }

    @Test
    public void test07340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07340");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        int int10 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime dateTime12 = dateTime8.withWeekyear(44);
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfSecond();
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        int int15 = dateTime12.getDayOfYear();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        int int25 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime24.getDayOfYear();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime24.toMutableDateTimeISO();
        boolean boolean28 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime30 = dateTime24.withCenturyOfEra(2019);
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(dateTimeZone31);
        int int33 = localDate32.getDayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 54 + "'", int15 == 54);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53 + "'", int26 == 53);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2 + "'", int33 == 2);
    }

    @Test
    public void test07341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07341");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add((-1));
        java.lang.String str8 = property5.getAsShortText();
        org.joda.time.MutableDateTime mutableDateTime10 = property5.add(1263740L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "52" + "'", str8, "52");
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test07342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07342");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        mutableDateTime16.addHours(26150565);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.eras();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.secondOfMinute();
        mutableDateTime16.setRounding(dateTimeField30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime16.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime35 = property32.addWrapField(36950209);
        org.joda.time.MutableDateTime mutableDateTime36 = property32.roundFloor();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
    }

    @Test
    public void test07343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07343");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutableDateTime mutableDateTime7 = instant0.toMutableDateTime();
        mutableDateTime7.addDays(1424);
        int int10 = mutableDateTime7.getHourOfDay();
        org.joda.time.Chronology chronology11 = mutableDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.yearOfCentury();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test07344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07344");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        long long9 = chronology4.add(0L, (long) 2022, (int) '4');
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology4);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMinutes(15);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime26 = localDateTime17.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime12.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfCentury(54);
        org.joda.time.DateTime dateTime32 = dateTime27.withDurationAdded((long) 26150803, 7);
        org.joda.time.DateTime dateTime33 = dateTime27.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getDisplayName();
        java.lang.String str39 = dateTimeZone35.getName(100L, locale37);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(948227L, dateTimeZone35);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.year();
        org.joda.time.ReadableInstant readableInstant42 = null;
        mutableDateTime40.setMillis(readableInstant42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        int int46 = dateTime45.getYearOfCentury();
        int int47 = dateTime45.getWeekyear();
        org.joda.time.DateTime dateTime49 = dateTime45.plus((long) 15);
        org.joda.time.DateTime.Property property50 = dateTime45.year();
        org.joda.time.DateTime dateTime51 = property50.roundHalfFloorCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = null;
        org.joda.time.format.DateTimeParser dateTimeParser53 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter52, dateTimeParser53);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.eras();
        long long63 = chronology58.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter54.withChronology(chronology58);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.DateTimeField dateTimeField66 = chronology58.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone68 = dateTimeZone67.toTimeZone();
        long long70 = dateTimeZone67.previousTransition(100L);
        int int72 = dateTimeZone67.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology73 = chronology58.withZone(dateTimeZone67);
        java.util.TimeZone timeZone74 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTime dateTime75 = dateTime51.toDateTime(dateTimeZone67);
        mutableDateTime40.setZoneRetainFields(dateTimeZone67);
        org.joda.time.DateTime dateTime77 = dateTime33.toDateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime78 = localDateTime10.toDateTime(dateTimeZone67);
        int int79 = localDateTime10.getYearOfCentury();
        org.joda.time.LocalDateTime.Property property80 = localDateTime10.millisOfSecond();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 105144L + "'", long9 == 105144L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\u5fb7\u6587" + "'", str38, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 105144L + "'", long63 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(timeZone68);
        org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(timeZone74);
        org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 70 + "'", int79 == 70);
        org.junit.Assert.assertNotNull(property80);
    }

    @Test
    public void test07345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07345");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-22T10:16:29.013");
        org.joda.time.LocalDate localDate2 = org.joda.time.LocalDate.now();
        org.joda.time.LocalDate localDate4 = localDate2.plusMonths(26158);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        org.joda.time.DateTime dateTime9 = dateTime6.withSecondOfMinute(53);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration18 = duration11.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant19, readableInstant20, periodType21);
        org.joda.time.DurationFieldType durationFieldType24 = periodType21.getFieldType((int) (short) 0);
        java.lang.String str25 = periodType21.toString();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableDuration) duration11, periodType21);
        org.joda.time.Period period28 = period26.minusMinutes(49);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.DateTime dateTime32 = instant31.toDateTime();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.months();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableInstant) dateTime34, periodType35);
        org.joda.time.Period period37 = period36.toPeriod();
        org.joda.time.Period period38 = period28.withFields((org.joda.time.ReadablePeriod) period37);
        org.joda.time.Minutes minutes39 = period38.toStandardMinutes();
        org.joda.time.LocalDate localDate40 = localDate2.plus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.DateTime dateTime41 = localDate2.toDateTimeAtCurrentTime();
        int int42 = dateTime41.getMillisOfDay();
        boolean boolean43 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[YearDayTime]" + "'", str25, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(minutes39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 26619585 + "'", int42 == 26619585);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
    }

    @Test
    public void test07346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07346");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        mutableDateTime11.setDate((long) '#');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        int int21 = localDate17.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.PeriodType periodType30 = period29.getPeriodType();
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) periodType30);
        mutableDateTime5.setZoneRetainFields(dateTimeZone22);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.DateTime dateTime34 = localDate0.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.DateTime dateTime35 = localDate0.toDateTimeAtStartOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate37 = localDate0.withCenturyOfEra(26249401);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26249401 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
    }

    @Test
    public void test07347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07347");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((long) (-1));
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean14 = localDate12.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDate.Property property15 = localDate12.yearOfEra();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str21 = duration20.toString();
        org.joda.time.Instant instant22 = instant16.minus((org.joda.time.ReadableDuration) duration20);
        int int23 = property15.getDifference((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant27 = instant16.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str30 = duration29.toString();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours33 = duration32.toStandardHours();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = duration29.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration43 = duration40.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        mutableDateTime44.add((long) 'a');
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.yearOfCentury();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration55 = duration52.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration56 = duration49.minus((org.joda.time.ReadableDuration) duration55);
        mutableDateTime44.add((org.joda.time.ReadableDuration) duration49);
        boolean boolean58 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration49);
        boolean boolean59 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Instant instant60 = instant27.minus((org.joda.time.ReadableDuration) duration43);
        boolean boolean61 = property9.equals((java.lang.Object) instant27);
        org.joda.time.Instant instant62 = instant27.toInstant();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT86400S" + "'", str21, "PT86400S");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT86400S" + "'", str30, "PT86400S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(hours33);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 39 + "'", int36 == 39);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(instant62);
    }

    @Test
    public void test07348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07348");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        mutableDateTime6.addHours(16);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime6.copy();
        mutableDateTime10.setWeekyear(26192);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime10.setDayOfWeek(26608529);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26608529 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test07349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07349");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        int int5 = mutableDateTime4.getSecondOfDay();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHours(311);
        mutableDateTime4.setZone(dateTimeZone7);
        long long10 = dateTimeZone7.previousTransition(2160000L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 2160000L + "'", long10 == 2160000L);
    }

    @Test
    public void test07350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07350");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addWeekyears((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfMonth();
        org.joda.time.LocalDateTime.Property property12 = localDateTime10.weekyear();
        org.joda.time.LocalDateTime localDateTime13 = property12.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMinutes((int) (byte) 1);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration21 = duration17.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes(15);
        org.joda.time.Interval interval26 = duration21.toIntervalTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.Duration duration28 = duration21.plus((long) 6);
        org.joda.time.Minutes minutes29 = duration21.toStandardMinutes();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime13.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusMinutes(489);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMillisOfDay(62151);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMillis((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minusSeconds(26164766);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.PeriodType periodType49 = period48.getPeriodType();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime34, (org.joda.time.ReadablePartial) localDateTime45, periodType49);
        org.joda.time.Chronology chronology51 = localDateTime45.getChronology();
        mutableDateTime0.setChronology(chronology51);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology51);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime53.setDayOfYear(33613);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33613 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(chronology51);
    }

    @Test
    public void test07351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07351");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant9 = dateTime1.toInstant();
        org.joda.time.DateTime dateTime12 = dateTime1.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.yearOfCentury();
        mutableDateTime13.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period29 = period27.minusSeconds((-1));
        java.lang.String str30 = period27.toString();
        org.joda.time.Period period31 = period27.toPeriod();
        org.joda.time.PeriodType periodType32 = period27.getPeriodType();
        org.joda.time.Period period33 = period23.normalizedStandard(periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = null;
        int int35 = periodType32.indexOf(durationFieldType34);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Chronology chronology39 = instant38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.eras();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology39);
        org.joda.time.DurationField durationField42 = chronology39.eras();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType32, chronology39);
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime13.toMutableDateTime(chronology39);
        mutableDateTime13.setDayOfYear(44);
        int int48 = mutableDateTime13.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) mutableDateTime13);
        mutableDateTime13.addYears(26229);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime13.monthOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime54 = property52.set("2022-02-22T10:16:15.389");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T10:16:15.389\" for monthOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT0.099S" + "'", str30, "PT0.099S");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + (-1) + "'", int35 == (-1));
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 7 + "'", int48 == 7);
        org.junit.Assert.assertNotNull(property52);
    }

    @Test
    public void test07352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07352");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime2.copy();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) mutableDateTime2);
        org.joda.time.format.PeriodFormatter periodFormatter8 = null;
        java.lang.String str9 = mutablePeriod7.toString(periodFormatter8);
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant12, readableInstant13, periodType14);
        mutablePeriod15.addDays((int) '4');
        mutablePeriod15.setHours(5);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime21.yearOfCentury();
        mutableDateTime21.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableDuration29, readableInstant30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) 100, 1L, periodType34);
        org.joda.time.Period period37 = period35.minusSeconds((-1));
        java.lang.String str38 = period35.toString();
        org.joda.time.Period period39 = period35.toPeriod();
        org.joda.time.PeriodType periodType40 = period35.getPeriodType();
        org.joda.time.Period period41 = period31.normalizedStandard(periodType40);
        org.joda.time.DurationFieldType durationFieldType42 = null;
        int int43 = periodType40.indexOf(durationFieldType42);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.eras();
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.now(chronology47);
        org.joda.time.DurationField durationField50 = chronology47.eras();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType40, chronology47);
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime21.toMutableDateTime(chronology47);
        org.joda.time.DateTimeField dateTimeField54 = chronology47.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField55 = chronology47.clockhourOfDay();
        mutablePeriod15.setPeriod((long) (short) 0, chronology47);
        mutablePeriod7.setPeriod(1645514343120L, (long) 26540403, chronology47);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "P2DT4H" + "'", str9, "P2DT4H");
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0.099S" + "'", str38, "PT0.099S");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
    }

    @Test
    public void test07353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07353");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime2.copy();
        mutableDateTime2.setDate((long) '#');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean11 = localDate8.isSupported(dateTimeFieldType10);
        int int12 = localDate8.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight14 = localDate8.toDateMidnight(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(dateTimeZone13);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.PeriodType periodType21 = period20.getPeriodType();
        boolean boolean22 = dateTimeZone13.equals((java.lang.Object) periodType21);
        org.joda.time.PeriodType periodType23 = periodType21.withHoursRemoved();
        org.joda.time.PeriodType periodType24 = periodType21.withMinutesRemoved();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes(15);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.hours();
        org.joda.time.DurationField durationField31 = chronology29.years();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.dayOfYear();
        org.joda.time.Period period33 = new org.joda.time.Period((long) (byte) 100, 133009030800000L, periodType21, chronology29);
        org.joda.time.DurationField durationField34 = chronology29.hours();
        java.lang.String str35 = durationField34.toString();
        long long38 = durationField34.add((long) 1057, 547820);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "DurationField[hours]" + "'", str35, "DurationField[hours]");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1972152001057L + "'", long38 == 1972152001057L);
    }

    @Test
    public void test07354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07354");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime2.withChronology(chronology9);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.getMutableDateTime();
        boolean boolean18 = dateTime14.isBefore((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        long long27 = chronology22.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology22.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.minuteOfDay();
        mutableDateTime17.setChronology(chronology22);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField32 = chronology22.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((java.lang.Object) "2022-02-22T07:20:18.487Z", chronology22);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 105144L + "'", long27 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeField32);
    }

    @Test
    public void test07355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07355");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant7 = instant2.withDurationAdded((org.joda.time.ReadableDuration) duration5, 0);
        org.joda.time.MutableDateTime mutableDateTime8 = instant2.toMutableDateTime();
        org.joda.time.Instant instant10 = instant2.plus(2118873643643L);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(instant10);
    }

    @Test
    public void test07356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07356");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.set(45);
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundFloor();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(15);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = localDateTime11.toDateTime(dateTimeZone19);
        org.joda.time.DateTime.Property property21 = dateTime20.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        mutableDateTime6.setRounding(dateTimeField22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime6.weekOfWeekyear();
        mutableDateTime6.setYear(61);
        org.joda.time.Chronology chronology27 = mutableDateTime6.getChronology();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 180000000, (long) 47831274, chronology27);
        org.joda.time.Period period30 = period28.plusMillis(4225);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(period30);
    }

    @Test
    public void test07357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07357");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        boolean boolean20 = mutableDateTime19.isEqualNow();
        mutableDateTime19.addYears(26207584);
        boolean boolean24 = mutableDateTime19.isBefore(1211201L);
        mutableDateTime19.addYears(26224);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:23:39.877Z" + "'", str14, "2022-02-22T07:23:39.877Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test07358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07358");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.util.Locale locale6 = dateTimeParserBucket5.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        dateTimeParserBucket5.saveField(dateTimeFieldType7, 22);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = null;
        java.lang.String str14 = dateTime11.toString(dateTimeFormatter13);
        org.joda.time.DateTime dateTime16 = dateTime11.minusMonths(22);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.eras();
        org.joda.time.DateTime dateTime22 = dateTime11.withChronology(chronology20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now(chronology20);
        org.joda.time.DateTimeField dateTimeField24 = chronology20.secondOfMinute();
        dateTimeParserBucket5.saveField(dateTimeField24, (-580));
        long long29 = dateTimeField24.add(1645514191495L, 946684800000L);
        int int30 = dateTimeField24.getMinimumValue();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 22 + "'", int12 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:23:39.888Z" + "'", str14, "2022-02-22T07:23:39.888Z");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 948330314191495L + "'", long29 == 948330314191495L);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test07359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07359");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        int int37 = dateTimeFormatter36.getDefaultYear();
        java.util.Locale locale38 = dateTimeFormatter36.getLocale();
        java.io.Writer writer39 = null;
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        mutableDateTime40.add((long) 'a');
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.DateTime dateTime46 = instant45.toDateTime();
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.months();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime48, periodType49);
        org.joda.time.DateTime.Property property51 = dateTime48.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = property51.getFieldType();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime40.property(dateTimeFieldType52);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period60 = duration59.toPeriod();
        org.joda.time.Duration duration63 = duration59.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant64 = instant57.plus((org.joda.time.ReadableDuration) duration63);
        long long65 = instant64.getMillis();
        org.joda.time.Chronology chronology66 = instant64.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.months();
        org.joda.time.Period period68 = new org.joda.time.Period((-205878993L), chronology66);
        org.joda.time.DateTimeField dateTimeField69 = chronology66.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone70 = chronology66.getZone();
        org.joda.time.LocalTime localTime71 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime40, chronology66);
        mutableDateTime40.addSeconds(152);
        mutableDateTime40.addDays(57);
        int int76 = mutableDateTime40.getDayOfWeek();
        mutableDateTime40.addWeeks(0);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter36.printTo(writer39, (org.joda.time.ReadableInstant) mutableDateTime40);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Deutsch" + "'", str34, "Deutsch");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2000 + "'", int37 == 2000);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 86400000L + "'", long65 == 86400000L);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
    }

    @Test
    public void test07360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07360");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        int int4 = property1.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime8 = property1.add((int) (short) 1);
        mutableDateTime8.setTime((long) 64800000);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test07361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07361");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        boolean boolean17 = instant0.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj19 = mutableDateTime18.clone();
        mutableDateTime18.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.dayOfWeek();
        mutableDateTime18.setMillisOfDay(2);
        int int25 = instant0.compareTo((org.joda.time.ReadableInstant) mutableDateTime18);
        mutableDateTime18.setMonthOfYear(4);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration34 = duration31.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean35 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = duration29.minus(966164L);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime((long) (short) 100, chronology39);
        org.joda.time.LocalTime localTime42 = localTime40.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime43 = localTime40.toDateTimeToday();
        boolean boolean44 = dateTime43.isAfterNow();
        int int45 = dateTime43.getWeekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration29, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology47);
        org.joda.time.DateTime dateTime50 = dateTime48.plusMinutes(15);
        org.joda.time.Chronology chronology51 = dateTime48.getChronology();
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.Chronology chronology55 = instant54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.eras();
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.now(chronology55);
        org.joda.time.DurationField durationField58 = chronology55.eras();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.hourOfDay();
        org.joda.time.DateTime dateTime60 = dateTime48.withChronology(chronology55);
        org.joda.time.DateTimeField dateTimeField61 = chronology55.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField61.getType();
        int int63 = dateTime43.get(dateTimeFieldType62);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period69 = duration68.toPeriod();
        org.joda.time.Duration duration72 = duration68.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant73 = instant66.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.PeriodType periodType74 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period75 = duration72.toPeriod(periodType74);
        org.joda.time.Period period76 = period75.toPeriod();
        org.joda.time.DateTime dateTime78 = dateTime43.withPeriodAdded((org.joda.time.ReadablePeriod) period76, 930);
        org.joda.time.DateTime dateTime80 = dateTime78.plusDays(0);
        mutableDateTime18.setDate((org.joda.time.ReadableInstant) dateTime80);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "2022-02-22T07:23:39.936Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "2022-02-22T07:23:39.936Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "2022-02-22T07:23:39.936Z");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 8 + "'", int45 == 8);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 22 + "'", int63 == 22);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(dateTime80);
    }

    @Test
    public void test07362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07362");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 26157);
        mutableDateTime1.setMillis((long) 55);
        int int4 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime5.centuryOfEra();
        mutableDateTime5.addYears(0);
        mutableDateTime5.setMinuteOfDay((int) (short) 0);
        mutableDateTime5.setMillisOfDay(2);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Instant instant27 = mutableDateTime1.toInstant();
        org.joda.time.Instant instant29 = instant27.withMillis((long) 62215);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Instant instant32 = instant29.withDurationAdded(1645514266698L, 26275855);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 1645514266698 * 26275855");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(instant29);
    }

    @Test
    public void test07363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07363");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getYearOfCentury();
        int int11 = dateTime9.getWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime13 = property12.withMinimumValue();
        mutableDateTime7.setTime((org.joda.time.ReadableInstant) dateTime13);
        mutableDateTime7.add((-1L));
        mutableDateTime7.setSecondOfDay(438);
        org.joda.time.Chronology chronology19 = mutableDateTime7.getChronology();
        int int20 = mutableDateTime7.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setMinuteOfHour(27441);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 27441 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 18 + "'", int20 == 18);
    }

    @Test
    public void test07364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07364");
        org.joda.time.Duration duration0 = org.joda.time.Duration.ZERO;
        long long1 = duration0.getStandardSeconds();
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.add((long) 'a');
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.yearOfCentury();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration15 = duration12.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration16 = duration9.minus((org.joda.time.ReadableDuration) duration15);
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration9);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime4.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getYearOfCentury();
        org.joda.time.DateTime dateTime23 = dateTime20.withSecondOfMinute(53);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration31 = duration28.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration32 = duration25.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant33, readableInstant34, periodType35);
        org.joda.time.DurationFieldType durationFieldType38 = periodType35.getFieldType((int) (short) 0);
        java.lang.String str39 = periodType35.toString();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime20, (org.joda.time.ReadableDuration) duration25, periodType35);
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration25);
        mutableDateTime4.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime4.weekOfWeekyear();
        boolean boolean45 = instant2.isAfter((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj47 = mutableDateTime46.clone();
        mutableDateTime46.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime52 = property50.add(1L);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone54 = dateTimeZone53.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        long long57 = dateTimeZone53.getMillisKeepLocal(dateTimeZone55, (long) 44);
        org.joda.time.DateTime dateTime58 = org.joda.time.DateTime.now(dateTimeZone53);
        mutableDateTime52.setZoneRetainFields(dateTimeZone53);
        mutableDateTime52.addSeconds((int) (short) 10);
        java.lang.Object obj62 = mutableDateTime52.clone();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime52.era();
        boolean boolean64 = mutableDateTime4.isEqual((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime52.dayOfYear();
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime52.yearOfCentury();
        org.joda.time.Interval interval67 = duration0.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime52);
        org.junit.Assert.assertNotNull(duration0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "PeriodType[YearDayTime]" + "'", str39, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(obj47);
// flaky:         org.junit.Assert.assertEquals(obj47.toString(), "2022-02-22T07:23:40.115Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj47), "2022-02-22T07:23:40.115Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj47), "2022-02-22T07:23:40.115Z");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(timeZone54);
// flaky:         org.junit.Assert.assertEquals(timeZone54.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 44L + "'", long57 == 44L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(obj62);
        org.junit.Assert.assertEquals(obj62.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj62), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj62), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(interval67);
    }

    @Test
    public void test07365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07365");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField14 = chronology6.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        long long18 = dateTimeZone15.previousTransition(100L);
        int int20 = dateTimeZone15.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology21 = chronology6.withZone(dateTimeZone15);
        java.util.TimeZone timeZone22 = dateTimeZone15.toTimeZone();
        java.time.ZoneId zoneId23 = timeZone22.toZoneId();
        java.util.TimeZone timeZone24 = java.util.TimeZone.getTimeZone(zoneId23);
        java.time.ZoneId zoneId25 = timeZone24.toZoneId();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L + "'", long18 == 100L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(zoneId23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(zoneId25);
    }

    @Test
    public void test07366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07366");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        mutableDateTime1.addMonths(36956320);
        mutableDateTime1.setDayOfYear(49);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        int int22 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime21.minusWeeks(44);
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded((-1L), 36946953);
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean45 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Minutes minutes46 = duration39.toStandardMinutes();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.PeriodType periodType51 = period50.getPeriodType();
        org.joda.time.Period period52 = period47.withPeriodType(periodType51);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime27, periodType51);
        mutableDateTime1.addWeeks(69);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime57 = mutableDateTime1.toMutableDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMonthOfYear(24);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 24 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
    }

    @Test
    public void test07367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07367");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        java.lang.String str6 = chronology5.toString();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology5);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant9, readableInstant10, periodType11);
        org.joda.time.PeriodType periodType13 = periodType11.withHoursRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 44, chronology19);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType14.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (-292275054), periodType11, chronology19);
        org.joda.time.LocalTime localTime27 = localTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean32 = localDate29.isSupported(dateTimeFieldType31);
        int int33 = localDate29.getDayOfYear();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean36 = localDate34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate29.property(dateTimeFieldType35);
        java.util.Locale locale38 = java.util.Locale.UK;
        int int39 = property37.getMaximumTextLength(locale38);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = localTime27.toString("DateTimeField[era]", locale38);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: t");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_GB");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2 + "'", int39 == 2);
    }

    @Test
    public void test07368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07368");
        org.joda.time.Period period1 = org.joda.time.Period.months(274);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.dayOfYear();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period11 = period9.minusSeconds((-1));
        java.lang.String str12 = period9.toString();
        org.joda.time.LocalDate localDate14 = localDate4.withPeriodAdded((org.joda.time.ReadablePeriod) period9, 3);
        int int15 = localDate4.getYear();
        org.joda.time.LocalDate.Property property16 = localDate4.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = localDate4.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean22 = localDate20.isSupported(dateTimeFieldType21);
        org.joda.time.LocalDate.Property property23 = localDate20.yearOfEra();
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str29 = duration28.toString();
        org.joda.time.Instant instant30 = instant24.minus((org.joda.time.ReadableDuration) duration28);
        int int31 = property23.getDifference((org.joda.time.ReadableInstant) instant24);
        org.joda.time.Duration duration34 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant35 = instant24.plus((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str38 = duration37.toString();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours41 = duration40.toStandardHours();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = duration37.plus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration51 = duration48.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now();
        mutableDateTime52.add((long) 'a');
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime52.yearOfCentury();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration63 = duration60.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration64 = duration57.minus((org.joda.time.ReadableDuration) duration63);
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration57);
        boolean boolean66 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration57);
        boolean boolean67 = duration40.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Instant instant68 = instant35.minus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours71 = duration70.toStandardHours();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology72);
        int int74 = dateTime73.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime77 = dateTime73.plus(0L);
        org.joda.time.Instant instant78 = dateTime77.toInstant();
        boolean boolean79 = instant35.isAfter((org.joda.time.ReadableInstant) instant78);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardDays(1028704L);
        org.joda.time.Instant instant82 = instant35.plus((org.joda.time.ReadableDuration) duration81);
        org.joda.time.ReadableInstant readableInstant84 = null;
        org.joda.time.ReadableInstant readableInstant85 = null;
        org.joda.time.PeriodType periodType86 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod(readableInstant84, readableInstant85, periodType86);
        org.joda.time.PeriodType periodType88 = periodType86.withHoursRemoved();
        org.joda.time.PeriodType periodType89 = periodType88.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod(1L, periodType89);
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration81, periodType89);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod(0L, (-37771574373810L), periodType89);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period93 = period1.normalizedStandard(periodType89);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Field is not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.099S" + "'", str12, "PT0.099S");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT86400S" + "'", str29, "PT86400S");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT86400S" + "'", str38, "PT86400S");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(hours41);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 40 + "'", int44 == 40);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(hours71);
// flaky:         org.junit.Assert.assertTrue("'" + int74 + "' != '" + 40 + "'", int74 == 40);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(periodType86);
        org.junit.Assert.assertNotNull(periodType88);
        org.junit.Assert.assertNotNull(periodType89);
    }

    @Test
    public void test07369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07369");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod4.addDays((int) (byte) 10);
        int int7 = mutablePeriod4.getMonths();
        mutablePeriod4.setSeconds((int) '4');
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.set(45);
        org.joda.time.MutableDateTime mutableDateTime14 = property11.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property11.add(45);
        java.lang.String str17 = mutableDateTime16.toString();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        mutableDateTime18.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime18.copy();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration22, readableInstant23);
        org.joda.time.Period period26 = period24.withDays((int) (byte) 1);
        org.joda.time.Period period28 = period24.minusMillis(1424);
        mutableDateTime18.add((org.joda.time.ReadablePeriod) period24);
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period24);
        int int31 = mutableDateTime16.getYear();
        org.joda.time.Duration duration33 = org.joda.time.Duration.parse("PT86400S");
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration35 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime16);
        long long36 = duration35.getMillis();
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "9000-01-01T00:00:00.000Z" + "'", str17, "9000-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 9000 + "'", int31 == 9000);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 860512032L + "'", long36 == 860512032L);
    }

    @Test
    public void test07370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07370");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration15, readableInstant16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period23 = period21.minusSeconds((-1));
        java.lang.String str24 = period21.toString();
        org.joda.time.Period period25 = period21.toPeriod();
        org.joda.time.PeriodType periodType26 = period21.getPeriodType();
        org.joda.time.Period period27 = period17.normalizedStandard(periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = null;
        int int29 = periodType26.indexOf(durationFieldType28);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.eras();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.eras();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType26, chronology33);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime7.toMutableDateTime(chronology33);
        mutablePeriod4.setPeriod((long) 36946953, 960000L, chronology33);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = property42.set(45);
        org.joda.time.MutableDateTime mutableDateTime45 = property42.roundFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.eras();
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.now(chronology51);
        org.joda.time.DurationField durationField54 = chronology51.eras();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 44, chronology51);
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType46.getField(chronology51);
        org.joda.time.PeriodType periodType59 = null;
        org.joda.time.Period period60 = new org.joda.time.Period((long) 100, 1L, periodType59);
        org.joda.time.Period period62 = period60.minusSeconds((-1));
        java.lang.String str63 = period60.toString();
        long long66 = chronology51.add((org.joda.time.ReadablePeriod) period60, (long) ' ', (int) 'a');
        org.joda.time.Period period68 = period60.minusHours((-292275054));
        org.joda.time.Period period70 = period68.minusHours(2000);
        int int71 = period68.getMinutes();
        org.joda.time.Period period72 = period68.toPeriod();
        mutableDateTime45.add((org.joda.time.ReadablePeriod) period72);
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime45.minuteOfHour();
        org.joda.time.Duration duration75 = mutablePeriod4.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime45);
        int int76 = mutableDateTime45.getYearOfCentury();
        org.joda.time.Instant instant77 = new org.joda.time.Instant();
        org.joda.time.Instant instant79 = instant77.withMillis(0L);
        org.joda.time.Chronology chronology80 = instant79.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.eras();
        org.joda.time.LocalTime localTime82 = org.joda.time.LocalTime.now(chronology80);
        org.joda.time.DurationField durationField83 = chronology80.eras();
        org.joda.time.DateTimeField dateTimeField84 = chronology80.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField85 = chronology80.secondOfMinute();
        mutableDateTime45.setChronology(chronology80);
        org.joda.time.Period period87 = new org.joda.time.Period(1645514519152L, (-32850748799999L), chronology80);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.099S" + "'", str24, "PT0.099S");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PT0.099S" + "'", str63, "PT0.099S");
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + (-9571L) + "'", long66 == (-9571L));
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 42 + "'", int76 == 42);
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(durationField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test07371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07371");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime8.toMutableDateTime(dateTimeZone9);
        mutableDateTime11.add(51L);
        int int14 = mutableDateTime11.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime15.copy();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime23 = property19.set(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        int int27 = dateTime25.getWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime25.withEarlierOffsetAtOverlap();
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime28.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone31.isFixed();
        mutableDateTime30.setZoneRetainFields(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime23.toMutableDateTime(dateTimeZone31);
        mutableDateTime11.setZone(dateTimeZone31);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime41 = dateTime39.withZoneRetainFields(dateTimeZone40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone44);
        int int47 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = dateTime46.minusWeeks(44);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMinutes(15);
        org.joda.time.Chronology chronology54 = dateTime51.getChronology();
        java.lang.String str55 = chronology54.toString();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.dayOfYear();
        org.joda.time.DateTime dateTime57 = dateTime46.withChronology(chronology54);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(readableInstant59, readableInstant60, periodType61);
        org.joda.time.DurationFieldType durationFieldType64 = periodType61.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType65 = periodType61.withMillisRemoved();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime57, readableDuration58, periodType65);
        org.joda.time.Period period67 = new org.joda.time.Period(0L, periodType65);
        org.joda.time.format.DateTimePrinter dateTimePrinter68 = null;
        org.joda.time.format.DateTimeParser dateTimeParser69 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter70 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter68, dateTimeParser69);
        org.joda.time.Instant instant71 = new org.joda.time.Instant();
        org.joda.time.Instant instant73 = instant71.withMillis(0L);
        org.joda.time.Chronology chronology74 = instant73.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.eras();
        long long79 = chronology74.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter70.withChronology(chronology74);
        org.joda.time.MutablePeriod mutablePeriod81 = new org.joda.time.MutablePeriod(3600000L, periodType65, chronology74);
        org.joda.time.DateTimeZone dateTimeZone82 = chronology74.getZone();
        boolean boolean83 = dateTimeZone31.equals((java.lang.Object) chronology74);
        org.joda.time.MutableDateTime mutableDateTime84 = new org.joda.time.MutableDateTime((long) 26252, dateTimeZone31);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime84.setHourOfDay(26455312);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26455312 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T07:23:40.388Z" + "'", str29, "2022-02-22T07:23:40.388Z");
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "ISOChronology[UTC]" + "'", str55, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(durationField75);
        org.junit.Assert.assertTrue("'" + long79 + "' != '" + 105144L + "'", long79 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(dateTimeZone82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test07372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07372");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean3 = localDate1.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfEra();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str10 = duration9.toString();
        org.joda.time.Instant instant11 = instant5.minus((org.joda.time.ReadableDuration) duration9);
        int int12 = property4.getDifference((org.joda.time.ReadableInstant) instant5);
        org.joda.time.MutableDateTime mutableDateTime13 = instant5.toMutableDateTime();
        int int14 = mutableDateTime13.getHourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        int int17 = mutableDateTime13.get(dateTimeFieldType15);
        org.joda.time.DateTimeZone dateTimeZone18 = mutableDateTime13.getZone();
        int int20 = dateTimeZone18.getOffset((long) 26290);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate(1645514344095L, dateTimeZone18);
        org.joda.time.LocalDate.Property property22 = localDate21.yearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT86400S" + "'", str10, "PT86400S");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 7 + "'", int14 == 7);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 23 + "'", int17 == 23);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test07373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07373");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period10 = period8.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        mutableDateTime17.setRounding(dateTimeField33);
        org.joda.time.Duration duration38 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime17.centuryOfEra();
        org.joda.time.Duration duration42 = new org.joda.time.Duration(826665956185622L, (long) 26195);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime46 = dateTime44.withZoneRetainFields(dateTimeZone45);
        int int47 = dateTime46.getMinuteOfHour();
        org.joda.time.DateTime dateTime49 = dateTime46.plusWeeks(0);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = dateTime46.toDateTime(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusYears(73619);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(readableInstant56, readableInstant57, periodType58);
        org.joda.time.DurationFieldType durationFieldType61 = periodType58.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType62 = periodType58.withMillisRemoved();
        org.joda.time.Period period63 = new org.joda.time.Period(44L, (long) 2000, periodType58);
        org.joda.time.PeriodType periodType64 = periodType58.withMinutesRemoved();
        org.joda.time.Period period65 = duration42.toPeriodTo((org.joda.time.ReadableInstant) dateTime53, periodType58);
        boolean boolean66 = property39.equals((java.lang.Object) dateTime53);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Englisch" + "'", str35, "Englisch");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(periodType58);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
    }

    @Test
    public void test07374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07374");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        mutableDateTime1.setWeekOfWeekyear(13);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.millisOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfEven();
        int int16 = mutableDateTime15.getEra();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
    }

    @Test
    public void test07375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07375");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 44, chronology4);
        org.joda.time.DateTime dateTime10 = dateTime8.withMonthOfYear((int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.yearOfCentury();
        mutableDateTime11.addSeconds(0);
        mutableDateTime11.add((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime11.getZone();
        boolean boolean20 = dateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalTime localTime24 = localTime22.plus(readablePeriod23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant25, readableInstant26, periodType27);
        org.joda.time.DurationFieldType durationFieldType30 = periodType27.getFieldType((int) (short) 0);
        boolean boolean31 = localTime22.isSupported(durationFieldType30);
        mutableDateTime11.add(durationFieldType30, 311);
        org.joda.time.DateTimeZone dateTimeZone34 = null;
        org.joda.time.DateTime dateTime35 = mutableDateTime11.toDateTime(dateTimeZone34);
        int int36 = mutableDateTime11.getSecondOfDay();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 26620 + "'", int36 == 26620);
    }

    @Test
    public void test07376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07376");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add(51);
        long long6 = property3.remainder();
        org.joda.time.DateTimeField dateTimeField7 = property3.getField();
        org.joda.time.MutableDateTime mutableDateTime9 = property3.addWrapField(37273329);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 599L + "'", long6 == 599L);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
    }

    @Test
    public void test07377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07377");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMillis(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusMonths(26148);
        int int15 = localDateTime10.size();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minusHours(1439);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.minusDays(547820);
        int int20 = localDateTime10.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime10.minusDays(950);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime23.copy();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime30 = property27.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime30.toMutableDateTime(dateTimeZone31);
        int int35 = dateTimeZone31.getStandardOffset(60000L);
        org.joda.time.DateTime dateTime36 = localDateTime10.toDateTime(dateTimeZone31);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test07378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07378");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 44, chronology4);
        int int9 = dateTime8.getSecondOfMinute();
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime12 = instant10.toDateTime();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) 36946953);
        org.joda.time.Instant instant15 = instant10.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime16 = dateTime8.plus((org.joda.time.ReadableDuration) duration14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration19 = duration14.withDurationAdded(102405303353446571L, 738);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 102405303353446571 * 738");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test07379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07379");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.secondOfDay();
        mutableDateTime0.setMillisOfDay(26183562);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.clockhourOfHalfday();
        boolean boolean8 = localDateTime6.isSupported(dateTimeFieldType7);
        int int9 = mutableDateTime0.get(dateTimeFieldType7);
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType7.getDurationType();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 7 + "'", int9 == 7);
        org.junit.Assert.assertNotNull(durationFieldType10);
    }

    @Test
    public void test07380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07380");
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime10 = dateTime8.withZoneRetainFields(dateTimeZone9);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        int int16 = dateTime10.compareTo((org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime15.getCenturyOfEra();
        org.joda.time.DateTime dateTime19 = dateTime15.withWeekyear(44);
        org.joda.time.DateTime.Property property20 = dateTime19.millisOfSecond();
        org.joda.time.Chronology chronology21 = dateTime19.getChronology();
        int int22 = dateTime19.getDayOfYear();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime26 = dateTime24.withZoneRetainFields(dateTimeZone25);
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTime dateTime31 = localDate27.toDateTimeAtCurrentTime(dateTimeZone29);
        int int32 = dateTime26.compareTo((org.joda.time.ReadableInstant) dateTime31);
        int int33 = dateTime31.getDayOfYear();
        org.joda.time.MutableDateTime mutableDateTime34 = dateTime31.toMutableDateTimeISO();
        boolean boolean35 = dateTime19.isAfter((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime37 = dateTime31.withCenturyOfEra(2019);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime37.getZone();
        org.joda.time.LocalDate localDate39 = org.joda.time.LocalDate.now(dateTimeZone38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(26421755, 572, (-3024000), 26319, 652, 302, 37043150, dateTimeZone38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26319 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 20 + "'", int17 == 20);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 54 + "'", int22 == 54);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 53 + "'", int33 == 53);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(localDate39);
    }

    @Test
    public void test07381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07381");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime0);
        mutableDateTime0.add(1132029323999901L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:40.616Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:40.616Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:40.616Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test07382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07382");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int6 = localDateTime4.get(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(304);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusDays((-3228));
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusSeconds((int) (byte) 10);
        java.lang.Object obj22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(obj22);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration25);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime19.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.LocalDateTime.Property property28 = localDateTime19.dayOfMonth();
        org.joda.time.Chronology chronology29 = localDateTime19.getChronology();
        org.joda.time.LocalDateTime.Property property30 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.hourOfDay();
        org.joda.time.DateTimeField dateTimeField35 = property34.getField();
        boolean boolean37 = property34.equals((java.lang.Object) 10L);
        long long38 = property34.remainder();
        java.lang.String str39 = property34.getAsText();
        org.joda.time.LocalDateTime localDateTime40 = property34.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = property34.getFieldType();
        org.joda.time.Chronology chronology42 = null;
        boolean boolean43 = dateTimeFieldType41.isSupported(chronology42);
        int int44 = localDateTime19.indexOf(dateTimeFieldType41);
        int int45 = localDateTime10.get(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1439 + "'", int6 == 1439);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 1420626L + "'", long38 == 1420626L);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "7" + "'", str39, "7");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 23 + "'", int45 == 23);
    }

    @Test
    public void test07383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07383");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(5);
        org.joda.time.MutableDateTime mutableDateTime8 = property4.add(26538157);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
    }

    @Test
    public void test07384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07384");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property2.add((long) 16965);
        int int7 = mutableDateTime6.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.millisOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 68 + "'", int7 == 68);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test07385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07385");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.DateTime.Property property40 = dateTime30.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime46 = property44.set(45);
        org.joda.time.MutableDateTime mutableDateTime47 = property44.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime49 = property44.add(45);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        long long53 = dateTimeZone50.previousTransition(100L);
        int int55 = dateTimeZone50.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime56 = mutableDateTime49.toDateTime(dateTimeZone50);
        mutableDateTime42.setZoneRetainFields(dateTimeZone50);
        int int59 = dateTimeZone50.getOffsetFromLocal((long) 30);
        org.joda.time.DateTime dateTime60 = dateTime30.withZoneRetainFields(dateTimeZone50);
        org.joda.time.DateTime dateTime61 = dateTime30.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test07386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07386");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.setSecondOfDay(1973);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.set(151);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test07387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07387");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute(0);
        mutableDateTime1.addMonths(26150565);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.dayOfYear();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test07388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07388");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.era();
        org.joda.time.DateTime dateTime12 = mutableDateTime1.toDateTimeISO();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.LocalDate localDate17 = property15.roundCeilingCopy();
        org.joda.time.LocalDate localDate19 = localDate17.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.joda.time.DateMidnight dateMidnight22 = localDate19.toDateMidnight(dateTimeZone20);
        org.joda.time.LocalDate.Property property23 = localDate19.monthOfYear();
        org.joda.time.LocalDate localDate24 = property23.withMaximumValue();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getYearOfCentury();
        int int28 = dateTime26.getWeekyear();
        org.joda.time.DateTime.Property property29 = dateTime26.dayOfYear();
        org.joda.time.DateTime dateTime30 = property29.withMinimumValue();
        java.util.Locale.Builder builder31 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder33 = builder31.setLanguage("German");
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale37);
        java.lang.String str40 = locale37.getDisplayScript();
        java.util.Locale locale41 = locale37.stripExtensions();
        java.lang.String str42 = locale41.getDisplayVariant();
        java.util.Locale.Builder builder43 = builder33.setLocale(locale41);
        java.lang.String str44 = property29.getAsShortText(locale41);
        java.lang.String str45 = property23.getAsText(locale41);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = mutableDateTime1.toString("2022-02-22T07:22:38.094Z", locale41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "53" + "'", str44, "53");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "March" + "'", str45, "March");
    }

    @Test
    public void test07389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07389");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1L);
        long long2 = duration1.getStandardMinutes();
        org.joda.time.format.DateTimePrinter dateTimePrinter3 = null;
        org.joda.time.format.DateTimeParser dateTimeParser4 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter3, dateTimeParser4);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        long long14 = chronology9.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter5.withChronology(chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter5.withZoneUTC();
        boolean boolean17 = dateTimeFormatter5.isPrinter();
        org.joda.time.Chronology chronology18 = dateTimeFormatter5.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter5.withOffsetParsed();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean30 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration31 = duration21.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getYearOfCentury();
        int int35 = dateTime33.getWeekyear();
        org.joda.time.DateTime dateTime37 = dateTime33.plus((long) 15);
        org.joda.time.DateTime.Property property38 = dateTime33.year();
        org.joda.time.DateTime dateTime39 = property38.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property40 = dateTime39.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime39.toMutableDateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = dateTime43.withZoneRetainFields(dateTimeZone44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property47 = localDate46.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = localDate46.toDateTimeAtCurrentTime(dateTimeZone48);
        int int51 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime50);
        int int52 = dateTime50.getCenturyOfEra();
        org.joda.time.DateTime dateTime54 = dateTime50.withWeekyear(44);
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.PeriodType periodType59 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(readableInstant57, readableInstant58, periodType59);
        org.joda.time.DurationFieldType durationFieldType62 = periodType59.getFieldType((int) (short) 0);
        java.lang.String str63 = periodType59.toString();
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Chronology chronology67 = instant66.getChronology();
        org.joda.time.Period period68 = new org.joda.time.Period((long) 53, (long) (-1), periodType59, chronology67);
        org.joda.time.PeriodType periodType69 = periodType59.withMonthsRemoved();
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime50, periodType59);
        org.joda.time.Period period71 = period70.toPeriod();
        org.joda.time.Period period73 = period70.minusHours(26184);
        org.joda.time.PeriodType periodType74 = period73.getPeriodType();
        java.lang.Object obj75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(obj75);
        boolean boolean78 = dateTime76.isBefore((long) 7);
        java.lang.String str79 = dateTime76.toString();
        org.joda.time.DateTime dateTime81 = dateTime76.minus((long) 7);
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.Instant instant84 = instant82.withMillis(0L);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.joda.time.DateTime dateTime86 = dateTime76.toDateTime(chronology85);
        org.joda.time.Period period87 = duration31.toPeriod(periodType74, chronology85);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter88 = dateTimeFormatter5.withChronology(chronology85);
        org.joda.time.Period period89 = duration1.toPeriod(chronology85);
        // The following exception was thrown during execution in test generation
        try {
            long long95 = chronology85.getDateTimeMillis(0L, 116430109, 22774098, 26538157, 305);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 116430109 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 105144L + "'", long14 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 20 + "'", int52 == 20);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "PeriodType[YearDayTime]" + "'", str63, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "2022-02-22T07:23:40.963Z" + "'", str79, "2022-02-22T07:23:40.963Z");
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(period87);
        org.junit.Assert.assertNotNull(dateTimeFormatter88);
        org.junit.Assert.assertNotNull(period89);
    }

    @Test
    public void test07390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07390");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.setSecondOfDay(1973);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod25.addDays((int) (byte) 10);
        mutablePeriod25.addMillis((int) '4');
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period32 = duration31.toPeriod();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration39 = duration36.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean40 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration41 = duration31.minus((org.joda.time.ReadableDuration) duration34);
        mutablePeriod25.setPeriod((org.joda.time.ReadableDuration) duration41);
        long long43 = duration41.getStandardHours();
        org.joda.time.Seconds seconds44 = duration41.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMinutes(15);
        org.joda.time.Chronology chronology50 = dateTime47.getChronology();
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Chronology chronology54 = instant53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.eras();
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.now(chronology54);
        org.joda.time.DurationField durationField57 = chronology54.eras();
        org.joda.time.DateTimeField dateTimeField58 = chronology54.hourOfDay();
        org.joda.time.DateTime dateTime59 = dateTime47.withChronology(chronology54);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime62 = property61.getMutableDateTime();
        boolean boolean63 = dateTime59.isBefore((org.joda.time.ReadableInstant) mutableDateTime62);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Chronology chronology67 = instant66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.eras();
        long long72 = chronology67.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField73 = chronology67.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField74 = chronology67.minuteOfDay();
        mutableDateTime62.setChronology(chronology67);
        org.joda.time.DateTime dateTime76 = org.joda.time.DateTime.now(chronology67);
        org.joda.time.DateTimeField dateTimeField77 = chronology67.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField78 = chronology67.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period79 = new org.joda.time.Period((java.lang.Object) mutableDateTime16, chronology67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.MutableDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 23L + "'", long43 == 23L);
        org.junit.Assert.assertNotNull(seconds44);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(localTime56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 105144L + "'", long72 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
    }

    @Test
    public void test07391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07391");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        int int4 = property1.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime8 = property1.add((int) (short) 1);
        int int9 = mutableDateTime8.getYearOfEra();
        mutableDateTime8.setMillis(0L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2222 + "'", int9 == 2222);
    }

    @Test
    public void test07392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07392");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutableDateTime mutableDateTime7 = instant0.toMutableDateTime();
        mutableDateTime7.addDays(1424);
        int int10 = mutableDateTime7.getHourOfDay();
        org.joda.time.Chronology chronology11 = mutableDateTime7.getChronology();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(chronology11);
        java.lang.String str13 = chronology11.toString();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
    }

    @Test
    public void test07393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07393");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        long long8 = chronology3.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = chronology3.secondOfMinute();
        org.joda.time.DurationField durationField10 = dateTimeField9.getLeapDurationField();
        boolean boolean11 = dateTimeField9.isLenient();
        int int13 = dateTimeField9.getMinimumValue(1101724L);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj16 = mutableDateTime15.clone();
        mutableDateTime15.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.dayOfWeek();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.weekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.copy();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime27.toMutableDateTime();
        int int29 = mutableDateTime28.getSecondOfDay();
        org.joda.time.Chronology chronology30 = mutableDateTime28.getChronology();
        mutableDateTime15.setChronology(chronology30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime15.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField39 = localDateTime37.getField((int) (byte) 0);
        long long41 = dateTimeField39.roundHalfFloor((long) 51);
        int int42 = mutableDateTime15.get(dateTimeField39);
        int int44 = dateTimeField39.getLeapAmount(1645514320984L);
        java.util.Locale locale47 = java.util.Locale.forLanguageTag("-50070-09-17T12:56:24.822Z");
        java.lang.String str48 = dateTimeField39.getAsText(2404, locale47);
        java.util.Locale locale52 = new java.util.Locale("2022-02-22T07:16:36.567Z", "2022-02-22T07:17:21.119Z", "TW");
        java.lang.String str53 = locale52.getDisplayName();
        java.lang.String str54 = locale47.getDisplayScript(locale52);
        java.lang.String str55 = dateTimeField9.getAsShortText(37127812, locale52);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 105144L + "'", long8 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNull(durationField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(obj16);
// flaky:         org.junit.Assert.assertEquals(obj16.toString(), "2022-02-22T07:23:41.030Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj16), "2022-02-22T07:23:41.030Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj16), "2022-02-22T07:23:41.030Z");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 26621 + "'", int29 == 26621);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 0 + "'", int44 == 0);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "2404" + "'", str48, "2404");
        org.junit.Assert.assertEquals(locale52.toString(), "2022-02-22t07:16:36.567z_2022-02-22T07:17:21.119Z_TW");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "2022-02-22t07:16:36.567z (2022-02-22T07:17:21.119Z,TW)" + "'", str53, "2022-02-22t07:16:36.567z (2022-02-22T07:17:21.119Z,TW)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "37127812" + "'", str55, "37127812");
    }

    @Test
    public void test07394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07394");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        boolean boolean9 = mutablePeriod3.equals((java.lang.Object) dateTimeField8);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale10.getScript();
        java.util.Locale locale12 = locale10.stripExtensions();
        org.joda.time.tz.NameProvider nameProvider13 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str17 = nameProvider13.getName(locale14, "\u52a0\u62ff\u5927", "2022-02-22T10:16:14.581");
        java.lang.String str18 = locale14.getISO3Country();
        java.lang.String str19 = locale12.getDisplayCountry(locale14);
        int int20 = dateTimeField8.getMaximumShortTextLength(locale12);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(nameProvider13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
    }

    @Test
    public void test07395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07395");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property6 = localDateTime3.hourOfDay();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime3.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period14 = period12.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime15 = localDateTime8.minus((org.joda.time.ReadablePeriod) period12);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period12, 0);
        org.joda.time.PeriodType periodType18 = period12.getPeriodType();
        org.joda.time.PeriodType periodType19 = periodType18.withHoursRemoved();
        org.joda.time.PeriodType periodType20 = periodType19.withMillisRemoved();
        org.joda.time.PeriodType periodType21 = periodType19.withMonthsRemoved();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(periodType21);
    }

    @Test
    public void test07396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07396");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        int int6 = mutableDateTime5.getDayOfMonth();
        int int7 = mutableDateTime5.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfWeek();
        mutableDateTime9.setWeekyear(26290);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test07397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07397");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration11 = duration7.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean17 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str23 = duration22.toString();
        org.joda.time.Instant instant24 = instant18.minus((org.joda.time.ReadableDuration) duration22);
        boolean boolean25 = duration11.isEqual((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.add((long) 'a');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.yearOfCentury();
        mutableDateTime26.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration34, readableInstant35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 1L, periodType39);
        org.joda.time.Period period42 = period40.minusSeconds((-1));
        java.lang.String str43 = period40.toString();
        org.joda.time.Period period44 = period40.toPeriod();
        org.joda.time.PeriodType periodType45 = period40.getPeriodType();
        org.joda.time.Period period46 = period36.normalizedStandard(periodType45);
        org.joda.time.DurationFieldType durationFieldType47 = null;
        int int48 = periodType45.indexOf(durationFieldType47);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.eras();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(chronology52);
        org.joda.time.DurationField durationField55 = chronology52.eras();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType45, chronology52);
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime26.toMutableDateTime(chronology52);
        org.joda.time.DateTimeField dateTimeField59 = chronology52.yearOfEra();
        org.joda.time.DateTimeField dateTimeField60 = chronology52.dayOfMonth();
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime(chronology52);
        org.joda.time.Period period62 = duration11.toPeriod(chronology52);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableDuration) duration11);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT86400S" + "'", str23, "PT86400S");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT0.099S" + "'", str43, "PT0.099S");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(period62);
    }

    @Test
    public void test07398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07398");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        int int4 = localDate0.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight6 = localDate0.toDateMidnight(dateTimeZone5);
        org.joda.time.LocalDate.Property property7 = localDate0.year();
        java.util.Date date8 = localDate0.toDate();
        org.joda.time.LocalDate localDate10 = localDate0.withDayOfYear(13);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int12 = localDate10.get(dateTimeFieldType11);
        org.joda.time.LocalDate.Property property13 = localDate10.weekyear();
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        boolean boolean17 = dateTime15.isBefore((long) 7);
        java.lang.String str18 = dateTime15.toString();
        org.joda.time.DateTime dateTime20 = dateTime15.minus((long) 7);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DateTime dateTime25 = dateTime15.toDateTime(chronology24);
        boolean boolean26 = dateTime25.isEqualNow();
        org.joda.time.DateTime.Property property27 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime29 = property27.setCopy(26186255);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean33 = localDate30.isSupported(dateTimeFieldType32);
        org.joda.time.LocalDate.Property property34 = localDate30.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        mutableDateTime35.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime35.copy();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime35.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime35.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        mutableDateTime41.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime41.copy();
        mutableDateTime41.setDate((long) '#');
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean50 = localDate47.isSupported(dateTimeFieldType49);
        int int51 = localDate47.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight53 = localDate47.toDateMidnight(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = mutableDateTime41.toDateTime(dateTimeZone52);
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now(dateTimeZone52);
        org.joda.time.PeriodType periodType58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period((long) 100, 1L, periodType58);
        org.joda.time.PeriodType periodType60 = period59.getPeriodType();
        boolean boolean61 = dateTimeZone52.equals((java.lang.Object) periodType60);
        mutableDateTime35.setZoneRetainFields(dateTimeZone52);
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate(dateTimeZone52);
        org.joda.time.DateTime dateTime64 = localDate30.toDateTimeAtStartOfDay(dateTimeZone52);
        org.joda.time.DateTime dateTime65 = localDate30.toDateTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime65.getZone();
        org.joda.time.DateTime dateTime67 = dateTime29.withZone(dateTimeZone66);
        org.joda.time.DateTime dateTime68 = localDate10.toDateTimeAtStartOfDay(dateTimeZone66);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(date8);
        org.junit.Assert.assertEquals(date8.toString(), "Tue Feb 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 13 + "'", int12 == 13);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T07:23:41.340Z" + "'", str18, "2022-02-22T07:23:41.340Z");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 53 + "'", int51 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateMidnight53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(localDate55);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTime68);
    }

    @Test
    public void test07399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07399");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime9 = localTime7.withHourOfDay(0);
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfSecond(44);
        org.joda.time.DateTimeField[] dateTimeFieldArray12 = localTime11.getFields();
        org.joda.time.DateTime dateTime13 = localTime11.toDateTimeToday();
        boolean boolean14 = dateTime3.isEqual((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException18 = new java.io.IOException("");
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        boolean boolean20 = mutableDateTime16.equals((java.lang.Object) iOException18);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        org.joda.time.DurationFieldType durationFieldType25 = dateTimeFieldType23.getRangeDurationType();
        mutableDateTime16.set(dateTimeFieldType23, 4);
        java.lang.String str28 = dateTimeFieldType23.getName();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = dateTime30.withZoneRetainFields(dateTimeZone31);
        boolean boolean34 = dateTime32.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology35 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType23.getField(chronology35);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType23.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime39 = dateTime13.withField(dateTimeFieldType23, 53290946);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53290946 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldArray12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "minuteOfDay" + "'", str28, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationFieldType37);
    }

    @Test
    public void test07400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07400");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale4);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket6.getZone();
        org.joda.time.DateTime dateTime9 = localDateTime0.toDateTime(dateTimeZone8);
        org.joda.time.DateTime dateTime10 = org.joda.time.DateTime.now(dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.forOffsetHours(23);
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.forTimeZone(timeZone13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        java.lang.String str22 = localDateTime19.toString();
        org.joda.time.LocalDateTime.Property property23 = localDateTime19.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime26 = property23.addWrapFieldToCopy(100);
        int int27 = property23.getMaximumValue();
        boolean boolean28 = property23.isLeap();
        int int29 = property23.getMinimumValue();
        java.lang.Object obj30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(obj30);
        int int32 = dateTime31.getHourOfDay();
        boolean boolean33 = property23.equals((java.lang.Object) int32);
        org.joda.time.LocalDateTime localDateTime34 = property23.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime35 = property23.withMinimumValue();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration41 = duration37.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMinutes(15);
        org.joda.time.Interval interval46 = duration41.toIntervalTo((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.DateTime dateTime48 = dateTime45.minusWeeks((int) (short) 0);
        org.joda.time.DateTime.Property property49 = dateTime48.weekOfWeekyear();
        int int50 = property23.compareTo((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTimeZone dateTimeZone51 = dateTime48.getZone();
        long long53 = dateTimeZone14.getMillisKeepLocal(dateTimeZone51, 0L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone14);
        long long56 = dateTimeZone8.getMillisKeepLocal(dateTimeZone14, (long) 62356);
        org.joda.time.MutableDateTime mutableDateTime57 = new org.joda.time.MutableDateTime(dateTimeZone8);
        mutableDateTime57.addHours(26467);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime57.setMillisOfSecond(1898);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1898 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+23:00");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T10:23:41.481" + "'", str22, "2022-02-22T10:23:41.481");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 52 + "'", int27 == 52);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 7 + "'", int32 == 7);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(interval46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 82800000L + "'", long53 == 82800000L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + (-82737644L) + "'", long56 == (-82737644L));
    }

    @Test
    public void test07401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07401");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.DateTime dateTime9 = mutableDateTime8.toDateTime();
        org.joda.time.DateTime dateTime11 = dateTime9.plusWeeks(82);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test07402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07402");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addHours((int) (byte) 10);
        int int27 = mutableDateTime10.getSecondOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        boolean boolean37 = localDate28.isSupported(durationFieldType36);
        mutableDateTime10.add(durationFieldType36, (-292275054));
        org.joda.time.LocalDate localDate41 = localDate7.withFieldAdded(durationFieldType36, 53);
        org.joda.time.LocalDate.Property property42 = localDate7.yearOfCentury();
        int int43 = localDate7.getYearOfEra();
        org.joda.time.LocalDate.Property property44 = localDate7.weekyear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 59021 + "'", int27 == 59021);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2022 + "'", int43 == 2022);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test07403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07403");
        org.joda.time.Chronology chronology3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate(579, 1191, 26572, chronology3);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1191 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07404");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        java.lang.String str5 = property3.toString();
        org.joda.time.LocalDateTime localDateTime7 = property3.addToCopy(100L);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMinutes(46);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withMillisOfDay(20);
        int int12 = localDateTime7.size();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime7.minusDays(36988464);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException18 = new java.io.IOException("");
        java.io.IOException iOException19 = new java.io.IOException((java.lang.Throwable) iOException18);
        boolean boolean20 = mutableDateTime16.equals((java.lang.Object) iOException18);
        org.joda.time.Duration duration23 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration23, 1424);
        boolean boolean27 = duration23.equals((java.lang.Object) "2022-02-22T07:16:00.803Z");
        org.joda.time.LocalDateTime localDateTime28 = localDateTime14.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        org.joda.time.LocalDate localDate32 = property30.withMaximumValue();
        java.util.Date date33 = localDate32.toDate();
        org.joda.time.LocalDate localDate35 = localDate32.minusMonths((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean37 = localDate35.isSupported(dateTimeFieldType36);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean41 = localDate38.isSupported(dateTimeFieldType40);
        int int42 = localDate38.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight44 = localDate38.toDateMidnight(dateTimeZone43);
        org.joda.time.LocalDate.Property property45 = localDate38.year();
        org.joda.time.LocalDate localDate46 = property45.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property47 = localDate46.dayOfMonth();
        org.joda.time.LocalDate localDate49 = localDate46.minusMonths(36956320);
        java.lang.String str50 = localDate46.toString();
        org.joda.time.LocalDate localDate51 = localDate35.withFields((org.joda.time.ReadablePartial) localDate46);
        // The following exception was thrown during execution in test generation
        try {
            int int52 = localDateTime28.compareTo((org.joda.time.ReadablePartial) localDate35);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Property[hourOfDay]" + "'", str5, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4 + "'", int12 == 4);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(date33);
        org.junit.Assert.assertEquals(date33.toString(), "Fri Dec 23 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 54 + "'", int42 == 54);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateMidnight44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDate46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDate49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "2022-01-01" + "'", str50, "2022-01-01");
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test07405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07405");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj3 = mutableDateTime2.clone();
        mutableDateTime2.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add(1L);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        long long13 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 44);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone9);
        mutableDateTime8.setZoneRetainFields(dateTimeZone9);
        org.joda.time.DateTime dateTime16 = localTime1.toDateTimeToday(dateTimeZone9);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = null;
        java.lang.String str21 = dateTime18.toString(dateTimeFormatter20);
        org.joda.time.DateTime dateTime23 = dateTime18.minusMonths(22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.eras();
        org.joda.time.DateTime dateTime29 = dateTime18.withChronology(chronology27);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.centuryOfEra();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime30.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        boolean boolean34 = dateTime18.isSupported(dateTimeFieldType33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        int int36 = localDate35.getDayOfMonth();
        org.joda.time.Chronology chronology37 = localDate35.getChronology();
        boolean boolean38 = dateTimeFieldType33.isSupported(chronology37);
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType33.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime41 = localTime1.withFieldAdded(durationFieldType39, 26471738);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'weeks' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(obj3);
// flaky:         org.junit.Assert.assertEquals(obj3.toString(), "2022-02-23T06:23:41.629+23:00");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "2022-02-23T06:23:41.629+23:00");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "2022-02-23T06:23:41.629+23:00");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 44L + "'", long13 == 44L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-23T06:23:41.629+23:00" + "'", str21, "2022-02-23T06:23:41.629+23:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 23 + "'", int36 == 23);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(durationFieldType39);
    }

    @Test
    public void test07406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07406");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        long long9 = chronology4.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField10 = chronology4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = chronology4.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField12 = chronology4.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField13 = chronology4.hourOfDay();
        org.joda.time.DateTimeField dateTimeField14 = chronology4.yearOfCentury();
        java.util.Locale locale15 = java.util.Locale.FRENCH;
        java.lang.String str16 = locale15.getDisplayCountry();
        boolean boolean17 = locale15.hasExtensions();
        java.util.Set<java.lang.Character> charSet18 = locale15.getExtensionKeys();
        java.lang.String str19 = locale15.getDisplayVariant();
        java.lang.String str20 = locale15.getISO3Language();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 96, chronology4, locale15);
        org.joda.time.Chronology chronology22 = dateTimeParserBucket21.getChronology();
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 105144L + "'", long9 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "fra" + "'", str20, "fra");
        org.junit.Assert.assertNotNull(chronology22);
    }

    @Test
    public void test07407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07407");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks(44);
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded((-1L), 36946953);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        org.joda.time.Period period22 = period18.withWeeks((int) (byte) 0);
        org.joda.time.Period period24 = period22.withHours(2000);
        org.joda.time.DateTime dateTime25 = dateTime14.minus((org.joda.time.ReadablePeriod) period22);
        int int26 = dateTime25.getYearOfCentury();
        long long27 = dateTime25.getMillis();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        int int32 = localDate28.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight34 = localDate28.toDateMidnight(dateTimeZone33);
        org.joda.time.LocalDate.Property property35 = localDate28.year();
        java.util.Date date36 = localDate28.toDate();
        org.joda.time.LocalDate localDate38 = localDate28.withDayOfYear(13);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int40 = localDate38.get(dateTimeFieldType39);
        int int41 = dateTime25.get(dateTimeFieldType39);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getYearOfCentury();
        int int45 = dateTime43.getWeekyear();
        org.joda.time.DateTime dateTime47 = dateTime43.plus((long) 15);
        org.joda.time.DateTime.Property property48 = dateTime47.millisOfSecond();
        org.joda.time.DateTime dateTime50 = dateTime47.withCenturyOfEra((int) '#');
        org.joda.time.DateTime dateTime52 = dateTime47.withYear((int) 'u');
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        mutableDateTime53.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime53.copy();
        mutableDateTime53.setDate((long) '#');
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property60 = localDate59.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean62 = localDate59.isSupported(dateTimeFieldType61);
        int int63 = localDate59.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight65 = localDate59.toDateMidnight(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = mutableDateTime53.toDateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(dateTimeZone64);
        org.joda.time.DateTime dateTime68 = org.joda.time.DateTime.now(dateTimeZone64);
        org.joda.time.DateTime dateTime69 = dateTime47.toDateTime(dateTimeZone64);
        org.joda.time.Instant instant70 = new org.joda.time.Instant();
        org.joda.time.Instant instant72 = instant70.withMillis(0L);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str75 = duration74.toString();
        org.joda.time.Instant instant76 = instant70.minus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration74);
        boolean boolean78 = dateTime25.isAfter((org.joda.time.ReadableInstant) dateTime47);
        boolean boolean79 = dateTime25.isAfterNow();
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) 1, chronology81);
        int int83 = dateTime82.getMinuteOfDay();
        int int84 = dateTime82.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property85 = dateTime82.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone86 = dateTime82.getZone();
        org.joda.time.DateTime dateTime88 = dateTime82.withDayOfYear(42);
        boolean boolean89 = dateTime25.isEqual((org.joda.time.ReadableInstant) dateTime82);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 21 + "'", int26 == 21);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1618866474802L + "'", long27 == 1618866474802L);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53 + "'", int32 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(date36);
// flaky:         org.junit.Assert.assertEquals(date36.toString(), "Tue Feb 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 13 + "'", int40 == 13);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 109 + "'", int41 == 109);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int63 + "' != '" + 53 + "'", int63 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PT86400S" + "'", str75, "PT86400S");
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 0 + "'", int83 == 0);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + 1 + "'", int84 == 1);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(dateTimeZone86);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
    }

    @Test
    public void test07408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07408");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutableDateTime mutableDateTime7 = instant0.toMutableDateTime();
        mutableDateTime7.addDays(1424);
        int int10 = mutableDateTime7.getHourOfDay();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str13 = duration12.toString();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours16 = duration15.toStandardHours();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration21 = duration12.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant26, readableInstant27, periodType28);
        org.joda.time.DurationFieldType durationFieldType31 = periodType28.getFieldType((int) (short) 0);
        java.lang.String str32 = periodType28.toString();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 53, (long) (-1), periodType28, chronology36);
        org.joda.time.Period period38 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType28);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.eras();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.DurationField durationField45 = chronology42.eras();
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.Period period47 = duration12.toPeriod(periodType28, chronology42);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration12);
        mutableDateTime7.setMillisOfDay(26234);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setDayOfMonth(26368);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26368 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT86400S" + "'", str13, "PT86400S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(hours16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 41 + "'", int19 == 41);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PeriodType[YearDayTime]" + "'", str32, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(period47);
    }

    @Test
    public void test07409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07409");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale4);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (short) 100, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str12 = durationFieldType11.getName();
        boolean boolean13 = localTime10.isSupported(durationFieldType11);
        boolean boolean14 = dateTimeParserBucket6.restoreState((java.lang.Object) boolean13);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        dateTimeParserBucket6.setZone(dateTimeZone18);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime((long) 435, dateTimeZone18);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getYearOfCentury();
        int int25 = dateTime23.getWeekyear();
        org.joda.time.DateTime dateTime26 = dateTime23.withEarlierOffsetAtOverlap();
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime26.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        mutableDateTime28.setZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = localTime21.toDateTimeToday(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj34 = mutableDateTime33.clone();
        mutableDateTime33.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.dayOfWeek();
        int int38 = mutableDateTime33.getMinuteOfDay();
        boolean boolean39 = dateTime32.isEqual((org.joda.time.ReadableInstant) mutableDateTime33);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.DateTime dateTime43 = instant42.toDateTime();
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.months();
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableInstant) dateTime49, periodType50);
        boolean boolean52 = dateTime43.isBefore((org.joda.time.ReadableInstant) dateTime47);
        int int53 = dateTime47.getDayOfMonth();
        org.joda.time.DateTime.Property property54 = dateTime47.dayOfYear();
        int int55 = dateTime47.getDayOfYear();
        org.joda.time.DateTime dateTime56 = dateTime47.toDateTimeISO();
        mutableDateTime33.setDate((org.joda.time.ReadableInstant) dateTime47);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weeks" + "'", str12, "weeks");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 22 + "'", int24 == 22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "2022-02-22T07:23:41.785Z" + "'", str27, "2022-02-22T07:23:41.785Z");
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "2022-02-22T07:23:41.785Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "2022-02-22T07:23:41.785Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "2022-02-22T07:23:41.785Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test07410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07410");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.monthOfYear();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant12, readableInstant13, periodType14);
        org.joda.time.DurationFieldType durationFieldType17 = periodType14.getFieldType((int) (short) 0);
        java.lang.String str18 = periodType14.toString();
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 53, (long) (-1), periodType14, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.weekyearOfCentury();
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime1, chronology22);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PeriodType[YearDayTime]" + "'", str18, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField24);
    }

    @Test
    public void test07411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07411");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        java.lang.String str7 = mutableDateTime6.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        mutableDateTime8.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime8.copy();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.Period period16 = period14.withDays((int) (byte) 1);
        org.joda.time.Period period18 = period14.minusMillis(1424);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) period14);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period14);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime6.year();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundCeiling();
        int int23 = mutableDateTime22.getSecondOfMinute();
        int int24 = mutableDateTime22.getYear();
        mutableDateTime22.addMinutes(0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime22.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.addWrapField(26541);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9000-01-01T00:00:00.000Z" + "'", str7, "9000-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 9000 + "'", int24 == 9000);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
    }

    @Test
    public void test07412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07412");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Period period6 = period4.minusYears((-1));
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.years();
        org.joda.time.Period period9 = new org.joda.time.Period(60000L, periodType8);
        org.joda.time.Period period10 = period6.withFields((org.joda.time.ReadablePeriod) period9);
        int int11 = period9.getMonths();
        org.joda.time.PeriodType periodType12 = period9.getPeriodType();
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology14, locale16);
        java.lang.Object obj19 = dateTimeParserBucket18.saveState();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (short) 100, chronology21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str24 = durationFieldType23.getName();
        boolean boolean25 = localTime22.isSupported(durationFieldType23);
        boolean boolean26 = dateTimeParserBucket18.restoreState((java.lang.Object) boolean25);
        org.joda.time.Chronology chronology27 = dateTimeParserBucket18.getChronology();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str33 = duration32.toString();
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration32, 8);
        mutableDateTime30.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime30.weekyear();
        mutableDateTime30.addDays(0);
        mutableDateTime30.setWeekyear(62196);
        boolean boolean43 = mutableDateTime28.isAfter((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(readableInstant49, readableInstant50, periodType51);
        org.joda.time.DurationFieldType durationFieldType54 = periodType51.getFieldType((int) (short) 0);
        java.lang.String str55 = periodType51.toString();
        org.joda.time.Instant instant56 = new org.joda.time.Instant();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Chronology chronology59 = instant58.getChronology();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 53, (long) (-1), periodType51, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType46.getField(chronology59);
        org.joda.time.DateTimeField dateTimeField62 = chronology59.yearOfEra();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 765, (long) 62166, chronology59);
        org.joda.time.DateTime dateTime64 = mutableDateTime28.toDateTime(chronology59);
        org.joda.time.Period period65 = new org.joda.time.Period(43088125133009682L, periodType12, chronology59);
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 26224, chronology59);
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now(chronology59);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weeks" + "'", str24, "weeks");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT86400S" + "'", str33, "PT86400S");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PeriodType[YearDayTime]" + "'", str55, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime67);
    }

    @Test
    public void test07413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07413");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T10:16:05.670");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime2.copy();
        mutableDateTime2.setDate((long) '#');
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean11 = localDate8.isSupported(dateTimeFieldType10);
        int int12 = localDate8.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight14 = localDate8.toDateMidnight(dateTimeZone13);
        org.joda.time.DateTime dateTime15 = mutableDateTime2.toDateTime(dateTimeZone13);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone13);
        java.lang.String str18 = dateTimeZone13.getShortName((long) 37040809);
        java.util.TimeZone timeZone19 = dateTimeZone13.toTimeZone();
        boolean boolean20 = timeZone1.hasSameRules(timeZone19);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Zeit");
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateMidnight14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test07414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07414");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        int int4 = localTime3.getMinuteOfHour();
        java.lang.String str6 = localTime3.toString("1");
        org.joda.time.LocalTime localTime8 = localTime3.minusMinutes(15);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 15);
        org.joda.time.DateTime.Property property15 = dateTime10.year();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime();
        org.joda.time.LocalTime localTime19 = dateTime16.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime3.withFields((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime localTime22 = localTime3.minusMinutes(26212472);
        org.joda.time.LocalTime.Property property23 = localTime22.minuteOfHour();
        org.joda.time.LocalTime localTime24 = property23.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localTime24);
    }

    @Test
    public void test07415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07415");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        boolean boolean4 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.secondOfDay();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property6);
    }

    @Test
    public void test07416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07416");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.Instant instant5 = instant3.toInstant();
        long long6 = instant5.getMillis();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) 100);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Instant instant25 = instant5.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) -1);
        org.joda.time.Duration duration26 = duration1.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.set(45);
        org.joda.time.MutableDateTime mutableDateTime31 = property28.roundFloor();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(15);
        org.joda.time.DateTime dateTime43 = localDateTime36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = localDateTime36.toDateTime(dateTimeZone44);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        mutableDateTime31.setRounding(dateTimeField47);
        java.lang.Object obj49 = mutableDateTime31.clone();
        java.lang.String str50 = mutableDateTime31.toString();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration55 = duration52.withDurationAdded((long) (short) 100, (int) ' ');
        long long56 = duration55.getMillis();
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.months();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime66, periodType67);
        boolean boolean69 = dateTime60.isBefore((org.joda.time.ReadableInstant) dateTime64);
        int int70 = dateTime64.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(readableInstant71, readableInstant72, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime64, periodType73);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(periodType73);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) mutableDateTime31, periodType73);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime31.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime80 = property79.roundHalfCeiling();
        int int81 = mutableDateTime80.getEra();
        mutableDateTime80.addDays(37118622);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime80.secondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime86 = property84.set("2022-02-22T10:20:08.990");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T10:20:08.990\" for secondOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514622042L + "'", long6 == 1645514622042L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "4500-01-01T00:00:00.000Z" + "'", str50, "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86403200L + "'", long56 == 86403200L);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 1 + "'", int81 == 1);
        org.junit.Assert.assertNotNull(property84);
    }

    @Test
    public void test07417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07417");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod14.addSeconds(292278993);
        mutablePeriod14.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime20 = dateTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTime dateTime23 = dateTime7.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        mutableDateTime24.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime24.copy();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime24.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime31 = property28.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime31.toMutableDateTime(dateTimeZone32);
        mutableDateTime34.add(51L);
        int int37 = mutableDateTime34.getHourOfDay();
        boolean boolean38 = dateTime23.isAfter((org.joda.time.ReadableInstant) mutableDateTime34);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = dateTime40.withZoneRetainFields(dateTimeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        int int48 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime47);
        int int49 = dateTime47.getCenturyOfEra();
        org.joda.time.DateTime dateTime51 = dateTime47.withWeekyear(44);
        boolean boolean52 = mutableDateTime34.isBefore((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str57 = duration56.toString();
        boolean boolean58 = duration54.isShorterThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardMinutes(1L);
        long long61 = duration60.getStandardMinutes();
        int int62 = duration54.compareTo((org.joda.time.ReadableDuration) duration60);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.Duration duration65 = duration60.withDurationAdded(readableDuration63, (-1));
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str70 = duration69.toString();
        boolean boolean71 = duration67.isShorterThan((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Hours hours72 = duration67.toStandardHours();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardSeconds(100L);
        int int75 = duration67.compareTo((org.joda.time.ReadableDuration) duration74);
        org.joda.time.Duration duration77 = duration60.withDurationAdded((org.joda.time.ReadableDuration) duration74, 26265573);
        org.joda.time.DateTime dateTime79 = dateTime51.withDurationAdded((org.joda.time.ReadableDuration) duration60, 1260);
        int int80 = dateTime51.getEra();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 42 + "'", int13 == 42);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 20 + "'", int49 == 20);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT86400S" + "'", str57, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1L + "'", long61 == 1L);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 1 + "'", int62 == 1);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PT86400S" + "'", str70, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(hours72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 1 + "'", int75 == 1);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + 1 + "'", int80 == 1);
    }

    @Test
    public void test07418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07418");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime2.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfMonth();
        org.joda.time.Period period16 = new org.joda.time.Period(950707L, chronology9);
        org.joda.time.Period period18 = period16.withWeeks(1969);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period21 = period18.minusHours(57);
        org.joda.time.Period period23 = period21.withYears((-1));
        org.joda.time.Period period24 = period21.negated();
        int int25 = period21.getHours();
        org.joda.time.PeriodType periodType26 = period21.getPeriodType();
        org.joda.time.Period period28 = period21.withMillis(123);
        org.joda.time.Minutes minutes29 = period28.toStandardMinutes();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.add((long) 'a');
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime31.yearOfCentury();
        mutableDateTime31.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period(readableDuration39, readableInstant40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.Period period47 = period45.minusSeconds((-1));
        java.lang.String str48 = period45.toString();
        org.joda.time.Period period49 = period45.toPeriod();
        org.joda.time.PeriodType periodType50 = period45.getPeriodType();
        org.joda.time.Period period51 = period41.normalizedStandard(periodType50);
        org.joda.time.DurationFieldType durationFieldType52 = null;
        int int53 = periodType50.indexOf(durationFieldType52);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Chronology chronology57 = instant56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.eras();
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.now(chronology57);
        org.joda.time.DurationField durationField60 = chronology57.eras();
        org.joda.time.DateTimeField dateTimeField61 = chronology57.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType50, chronology57);
        org.joda.time.MutableDateTime mutableDateTime63 = mutableDateTime31.toMutableDateTime(chronology57);
        org.joda.time.DateTimeField dateTimeField64 = chronology57.yearOfEra();
        org.joda.time.DateTimeField dateTimeField65 = chronology57.dayOfMonth();
        org.joda.time.Period period66 = new org.joda.time.Period(1645514431781L, chronology57);
        org.joda.time.Period period67 = period28.minus((org.joda.time.ReadablePeriod) period66);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "P1969WT15M50.707S" + "'", str19, "P1969WT15M50.707S");
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-57) + "'", int25 == (-57));
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(minutes29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PT0.099S" + "'", str48, "PT0.099S");
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(localTime59);
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(period67);
    }

    @Test
    public void test07419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07419");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTime();
        int int10 = dateTime7.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime7.withMillisOfSecond(16);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.set(45);
        org.joda.time.MutableDateTime mutableDateTime17 = property14.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime19 = property14.add(45);
        mutableDateTime19.addWeeks(10);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str29 = dateTimeFieldType28.getName();
        int int30 = localDateTime22.indexOf(dateTimeFieldType28);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime22.minusSeconds((int) (short) 0);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.minus((long) 0);
        org.joda.time.DateTime dateTime36 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) instant35);
        boolean boolean37 = mutableDateTime19.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTimeZone dateTimeZone38 = dateTime36.getZone();
        org.joda.time.DateTime dateTime39 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = dateTime7.withZone(dateTimeZone38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime42 = dateTime7.withMonthOfYear(37235011);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37235011 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "clockhourOfDay" + "'", str29, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
    }

    @Test
    public void test07420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07420");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.year();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.yearOfCentury();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1, chronology13);
        int int15 = dateTime14.getMinuteOfDay();
        int int16 = dateTime14.getEra();
        int int17 = dateTime14.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology20, locale22);
        java.lang.Object obj25 = dateTimeParserBucket24.saveState();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (short) 100, chronology27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str30 = durationFieldType29.getName();
        boolean boolean31 = localTime28.isSupported(durationFieldType29);
        boolean boolean32 = dateTimeParserBucket24.restoreState((java.lang.Object) boolean31);
        java.lang.Integer int33 = dateTimeParserBucket24.getOffsetInteger();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket24.getChronology();
        dateTimeParserBucket24.setOffset((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str38 = dateTimeFieldType37.getName();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType37.getRangeDurationType();
        dateTimeParserBucket24.saveField(dateTimeFieldType37, 20);
        int int42 = dateTime14.get(dateTimeFieldType37);
        mutableDateTime10.set(dateTimeFieldType37, 97);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime10.yearOfCentury();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "weeks" + "'", str30, "weeks");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNull(int33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "millisOfSecond" + "'", str38, "millisOfSecond");
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(property45);
    }

    @Test
    public void test07421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07421");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks(44);
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded((-1L), 36946953);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj17 = mutableDateTime16.clone();
        mutableDateTime16.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.dayOfWeek();
        int int21 = mutableDateTime16.getMinuteOfDay();
        java.lang.String str22 = mutableDateTime16.toString();
        boolean boolean23 = dateTime14.isEqual((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(15);
        org.joda.time.Instant instant28 = dateTime27.toInstant();
        boolean boolean29 = dateTime14.isAfter((org.joda.time.ReadableInstant) dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(yearMonthDay15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(obj17);
// flaky:         org.junit.Assert.assertEquals(obj17.toString(), "2022-02-22T07:23:42.178Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "2022-02-22T07:23:42.178Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "2022-02-22T07:23:42.178Z");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "2022-02-22T00:00:00.046Z" + "'", str22, "2022-02-22T00:00:00.046Z");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
    }

    @Test
    public void test07422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07422");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        java.lang.String str12 = dateTimeField8.getName();
        int int14 = dateTimeField8.getMinimumValue((long) 36946953);
        boolean boolean15 = dateTimeField8.isSupported();
        java.lang.String str17 = dateTimeField8.getAsShortText((long) 26150803);
        long long19 = dateTimeField8.roundCeiling((-9565199866L));
        org.joda.time.DurationField durationField20 = dateTimeField8.getDurationField();
        java.lang.String str21 = dateTimeField8.getName();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "year" + "'", str12, "year");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + (-292275054) + "'", int14 == (-292275054));
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "year" + "'", str21, "year");
    }

    @Test
    public void test07423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07423");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime1.era();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDayOfWeek(62583);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62583 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test07424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07424");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.setHours(26148);
        org.joda.time.Period period5 = mutablePeriod2.toPeriod();
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException10 = new java.io.IOException("");
        java.io.IOException iOException11 = new java.io.IOException((java.lang.Throwable) iOException10);
        boolean boolean12 = mutableDateTime8.equals((java.lang.Object) iOException10);
        org.joda.time.Duration duration15 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration15, 1424);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime8.era();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = duration22.withDurationAdded((long) (short) 100, (int) ' ');
        long long26 = duration25.getMillis();
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.months();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime36, periodType37);
        boolean boolean39 = dateTime30.isBefore((org.joda.time.ReadableInstant) dateTime34);
        int int40 = dateTime34.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(readableInstant41, readableInstant42, periodType43);
        org.joda.time.PeriodType periodType45 = periodType43.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime34, periodType43);
        org.joda.time.Period period47 = new org.joda.time.Period(0L, 24L, periodType43);
        org.joda.time.Period period48 = new org.joda.time.Period(readableInstant6, (org.joda.time.ReadableInstant) mutableDateTime8, periodType43);
        org.joda.time.PeriodType periodType49 = periodType43.withHoursRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        org.joda.time.PeriodType periodType51 = periodType49.withYearsRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withHoursRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period53 = period5.withPeriodType(periodType51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Period does not support field 'years'");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 86403200L + "'", long26 == 86403200L);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
    }

    @Test
    public void test07425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07425");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str11 = durationFieldType10.getName();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) boolean12);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket5.getChronology();
        long long17 = dateTimeParserBucket5.computeMillis(true, "");
        int int18 = dateTimeParserBucket5.getOffset();
        java.lang.Object obj19 = dateTimeParserBucket5.saveState();
        java.lang.Integer int20 = dateTimeParserBucket5.getPivotYear();
        long long22 = dateTimeParserBucket5.computeMillis(false);
        java.lang.Integer int23 = dateTimeParserBucket5.getPivotYear();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField27 = property25.getField();
        int int28 = property25.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime30 = property25.add((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime32 = property25.add((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant36, readableInstant37, periodType38);
        org.joda.time.DurationFieldType durationFieldType41 = periodType38.getFieldType((int) (short) 0);
        java.lang.String str42 = periodType38.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 53, (long) (-1), periodType38, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType33.getField(chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes(15);
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        java.lang.String str54 = chronology53.toString();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType33.getField(chronology53);
        java.lang.String str56 = dateTimeFieldType33.toString();
        boolean boolean57 = mutableDateTime32.isSupported(dateTimeFieldType33);
        java.util.Locale locale59 = null;
        dateTimeParserBucket5.saveField(dateTimeFieldType33, "2022-02-22T07:18:11.675Z", locale59);
        int int61 = dateTimeParserBucket5.getOffset();
        org.joda.time.Instant instant62 = new org.joda.time.Instant();
        org.joda.time.Instant instant64 = instant62.withMillis(0L);
        org.joda.time.Chronology chronology65 = instant64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.eras();
        long long70 = chronology65.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField71 = chronology65.monthOfYear();
        org.joda.time.DateTimeField dateTimeField72 = chronology65.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField73 = chronology65.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField74 = chronology65.hourOfDay();
        long long76 = dateTimeField74.roundHalfFloor((long) 1971);
        dateTimeParserBucket5.saveField(dateTimeField74, 26527);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weeks" + "'", str11, "weeks");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 97L + "'", long17 == 97L);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNull(int20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 97L + "'", long22 == 97L);
        org.junit.Assert.assertNull(int23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PeriodType[YearDayTime]" + "'", str42, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ISOChronology[UTC]" + "'", str54, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "minuteOfDay" + "'", str56, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 105144L + "'", long70 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
    }

    @Test
    public void test07426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07426");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime15.yearOfCentury();
        mutableDateTime15.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period(readableDuration23, readableInstant24);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.Period period31 = period29.minusSeconds((-1));
        java.lang.String str32 = period29.toString();
        org.joda.time.Period period33 = period29.toPeriod();
        org.joda.time.PeriodType periodType34 = period29.getPeriodType();
        org.joda.time.Period period35 = period25.normalizedStandard(periodType34);
        org.joda.time.DurationFieldType durationFieldType36 = null;
        int int37 = periodType34.indexOf(durationFieldType36);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.now(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.eras();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType34, chronology41);
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime15.toMutableDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField48 = chronology41.clockhourOfHalfday();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) (short) 0, chronology41);
        mutableDateTime0.setChronology(chronology41);
        mutableDateTime0.addDays(48);
        org.joda.time.DateTimeField dateTimeField53 = mutableDateTime0.getRoundingField();
        boolean boolean54 = mutableDateTime0.isBeforeNow();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime0.secondOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PT0.099S" + "'", str32, "PT0.099S");
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + (-1) + "'", int37 == (-1));
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property55);
    }

    @Test
    public void test07427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07427");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        long long13 = chronology8.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField14 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.hourOfDay();
        mutableDateTime4.setChronology(chronology8);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime4.minuteOfDay();
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.DateTime dateTime31 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = localDateTime24.toDateTime(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = dateTime33.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj37 = mutableDateTime36.clone();
        mutableDateTime36.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime36.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.add(1L);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone44 = dateTimeZone43.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        long long47 = dateTimeZone43.getMillisKeepLocal(dateTimeZone45, (long) 44);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone43);
        mutableDateTime42.setZoneRetainFields(dateTimeZone43);
        java.util.Locale.Builder builder51 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder52 = builder51.clear();
        java.util.Locale locale53 = builder52.build();
        java.lang.String str54 = dateTimeZone43.getName(555370422L, locale53);
        java.lang.String str56 = dateTimeZone43.getShortName(962578L);
        long long59 = dateTimeZone43.convertLocalToUTC((long) 62151, false);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 26150565, dateTimeZone43);
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period66 = duration65.toPeriod();
        org.joda.time.Duration duration69 = duration65.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant70 = instant63.plus((org.joda.time.ReadableDuration) duration69);
        long long71 = instant70.getMillis();
        long long72 = instant70.getMillis();
        org.joda.time.Instant instant73 = new org.joda.time.Instant();
        org.joda.time.Instant instant75 = instant73.withMillis(0L);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str78 = duration77.toString();
        org.joda.time.Instant instant79 = instant73.minus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.MutableDateTime mutableDateTime80 = instant73.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime83 = localDateTime81.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property84 = localDateTime81.hourOfDay();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime81.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str88 = dateTimeFieldType87.getName();
        int int89 = localDateTime81.indexOf(dateTimeFieldType87);
        java.lang.String str90 = dateTimeFieldType87.getName();
        int int91 = mutableDateTime80.get(dateTimeFieldType87);
        int int92 = instant70.get(dateTimeFieldType87);
        java.lang.String str93 = dateTimeFieldType87.toString();
        int int94 = localDateTime60.indexOf(dateTimeFieldType87);
        int int95 = dateTime34.get(dateTimeFieldType87);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.set(dateTimeFieldType87, 26497);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26497 for clockhourOfDay must be in the range [1,24]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 105144L + "'", long13 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(obj37);
// flaky:         org.junit.Assert.assertEquals(obj37.toString(), "2022-02-22T07:23:42.342Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj37), "2022-02-22T07:23:42.342Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj37), "2022-02-22T07:23:42.342Z");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 44L + "'", long47 == 44L);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "+00:00" + "'", str54, "+00:00");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 62151L + "'", long59 == 62151L);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 86400000L + "'", long71 == 86400000L);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 86400000L + "'", long72 == 86400000L);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "PT86400S" + "'", str78, "PT86400S");
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDateTime83);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(dateTimeFieldType87);
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "clockhourOfDay" + "'", str88, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + (-1) + "'", int89 == (-1));
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "clockhourOfDay" + "'", str90, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 7 + "'", int91 == 7);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 24 + "'", int92 == 24);
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "clockhourOfDay" + "'", str93, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + (-1) + "'", int94 == (-1));
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 24 + "'", int95 == 24);
    }

    @Test
    public void test07428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07428");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType4);
        org.joda.time.DurationFieldType durationFieldType7 = periodType4.getFieldType((int) (short) 0);
        java.lang.String str8 = periodType4.toString();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 53, (long) (-1), periodType4, chronology12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.LocalDate.Property property15 = localDate14.centuryOfEra();
        java.util.Locale locale18 = new java.util.Locale("2022-02-22T07:16:18.126Z", "2022-02-22T07:16:34.455Z");
        int int19 = property15.getMaximumTextLength(locale18);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[YearDayTime]" + "'", str8, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals(locale18.toString(), "2022-02-22t07:16:18.126z_2022-02-22T07:16:34.455Z");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
    }

    @Test
    public void test07429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07429");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.MutableDateTime mutableDateTime8 = property4.add(126);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.eras();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 44, chronology13);
        org.joda.time.DateTimeField dateTimeField18 = chronology13.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology13.minuteOfDay();
        int int21 = dateTimeField19.getMaximumValue(0L);
        int int22 = mutableDateTime8.get(dateTimeField19);
        mutableDateTime8.add((long) 900);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:42.400Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:42.400Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:42.400Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1439 + "'", int21 == 1439);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test07430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07430");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale4);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (short) 100, chronology9);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str12 = durationFieldType11.getName();
        boolean boolean13 = localTime10.isSupported(durationFieldType11);
        boolean boolean14 = dateTimeParserBucket6.restoreState((java.lang.Object) boolean13);
        org.joda.time.Chronology chronology15 = dateTimeParserBucket6.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(0L, chronology15);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(obj7);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "weeks" + "'", str12, "weeks");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test07431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07431");
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.LocalDate localDate10 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate11 = property8.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property8.getLocalDate();
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.yearOfCentury();
        org.joda.time.DurationField durationField16 = chronology13.seconds();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(832, 890, 38560276, 241, 26369, 723, 1041, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 241 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
    }

    @Test
    public void test07432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07432");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.addSeconds(0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours25 = duration24.toStandardHours();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.months();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime42 = dateTime16.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime44 = dateTime16.minusYears(29);
        org.joda.time.DateTime.Property property45 = dateTime16.minuteOfDay();
        org.joda.time.DateTime dateTime47 = property45.addWrapFieldToCopy(36985848);
        org.joda.time.DateTime.Property property48 = dateTime47.dayOfWeek();
        org.joda.time.DurationField durationField49 = property48.getRangeDurationField();
        long long52 = durationField49.getValueAsLong((-1645514428769L), 2208988800041L);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(hours25);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 42 + "'", int28 == 42);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-2720L) + "'", long52 == (-2720L));
    }

    @Test
    public void test07433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07433");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        mutableDateTime1.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.DurationFieldType durationFieldType22 = null;
        int int23 = periodType20.indexOf(durationFieldType22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.eras();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.DurationField durationField30 = chronology27.eras();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType20, chronology27);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime1.toMutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 0, chronology27);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfMonth();
        org.joda.time.DateTime dateTime38 = property36.addWrapFieldToCopy((int) 'a');
        org.joda.time.Instant instant39 = dateTime38.toInstant();
        boolean boolean40 = instant39.isBeforeNow();
        org.joda.time.LocalDate localDate41 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.centuryOfEra();
        boolean boolean43 = localDate41.isSupported(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = localDate41.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((java.lang.Object) boolean40, chronology44);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.099S" + "'", str18, "PT0.099S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(chronology44);
    }

    @Test
    public void test07434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07434");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology1, locale3, (java.lang.Integer) 10);
        long long9 = dateTimeParserBucket6.computeMillis(true, "deu");
        long long10 = dateTimeParserBucket6.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        long long15 = dateTimeZone11.getMillisKeepLocal(dateTimeZone13, (long) 44);
        boolean boolean17 = dateTimeZone13.isStandardOffset((long) (-1));
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str25 = dateTimeFieldType24.getName();
        int int26 = localDateTime18.indexOf(dateTimeFieldType24);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime18.minusSeconds((int) (short) 0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getYearOfCentury();
        int int32 = dateTime30.getWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime30.plus((long) 15);
        org.joda.time.DateTime.Property property35 = dateTime30.year();
        org.joda.time.DateTime dateTime36 = property35.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property37 = dateTime36.millisOfSecond();
        org.joda.time.DateTime dateTime38 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime40 = dateTime36.minusMinutes(55);
        int int41 = dateTimeZone13.getOffset((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.plusYears((int) (short) 100);
        int int49 = localDateTime48.getEra();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusHours(45);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime51.plusHours(435);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.plusHours(51);
        boolean boolean58 = dateTimeZone13.isLocalDateTimeGap(localDateTime51);
        dateTimeParserBucket6.setZone(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.joda.time.DateTime dateTime61 = org.joda.time.DateTime.now(dateTimeZone13);
        int int63 = dateTimeZone13.getOffset(26411731L);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 44L + "'", long15 == 44L);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "clockhourOfDay" + "'", str25, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + (-1) + "'", int26 == (-1));
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 0 + "'", int63 == 0);
    }

    @Test
    public void test07435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07435");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        int int15 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays(0);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime17.plusDays(41);
        org.joda.time.DateTime dateTime22 = dateTime17.plusMonths(27);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTime();
        org.joda.time.DateTime.Property property24 = dateTime22.secondOfMinute();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 26622 + "'", int15 == 26622);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test07436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07436");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.DateTimeField dateTimeField7 = mutableDateTime6.getRoundingField();
        mutableDateTime6.setSecondOfMinute(0);
        org.joda.time.DateTime dateTime10 = mutableDateTime6.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        boolean boolean20 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Hours hours21 = duration16.toStandardHours();
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration16, 20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime25.toString(dateTimeFormatter27);
        org.joda.time.DateTime dateTime30 = dateTime25.minusMonths(22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.DateTime dateTime36 = dateTime25.withChronology(chronology34);
        org.joda.time.Period period37 = duration16.toPeriod(chronology34);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableDuration40, readableInstant41);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) 100, 1L, periodType45);
        org.joda.time.Period period48 = period46.minusSeconds((-1));
        java.lang.String str49 = period46.toString();
        org.joda.time.Period period50 = period46.toPeriod();
        org.joda.time.PeriodType periodType51 = period46.getPeriodType();
        org.joda.time.Period period52 = period42.normalizedStandard(periodType51);
        java.lang.String str53 = periodType51.getName();
        java.lang.String str54 = periodType51.toString();
        org.joda.time.PeriodType periodType55 = periodType51.withDaysRemoved();
        org.joda.time.PeriodType periodType56 = periodType55.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType56);
        int[] intArray59 = chronology34.get((org.joda.time.ReadablePeriod) mutablePeriod57, 1L);
        org.joda.time.DateTimeField dateTimeField60 = chronology34.clockhourOfHalfday();
        org.joda.time.LocalTime localTime61 = org.joda.time.LocalTime.fromMillisOfDay(25L, chronology34);
        org.joda.time.DateTimeField dateTimeField62 = chronology34.weekOfWeekyear();
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime(chronology34);
        org.joda.time.DateTime dateTime64 = dateTime10.toDateTime(chronology34);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property71 = localDateTime68.hourOfDay();
        org.joda.time.DateTimeField dateTimeField72 = property71.getField();
        java.lang.String str73 = property71.toString();
        org.joda.time.LocalDateTime localDateTime75 = property71.addToCopy(100L);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.minusMinutes(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType78.getDurationType();
        org.joda.time.LocalDateTime.Property property80 = localDateTime77.property(dateTimeFieldType78);
        org.joda.time.LocalDateTime.Property property81 = localDateTime65.property(dateTimeFieldType78);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime83 = dateTime64.withField(dateTimeFieldType78, 37031394);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37031394 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT86400S" + "'", str19, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T07:23:42.553Z" + "'", str28, "2022-02-22T07:23:42.553Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "PT0.099S" + "'", str49, "PT0.099S");
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "Standard" + "'", str53, "Standard");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PeriodType[Standard]" + "'", str54, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(intArray59);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray59), "[0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "Property[hourOfDay]" + "'", str73, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test07437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07437");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        int int17 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property19 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime21 = property19.roundHalfEvenCopy();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours24 = duration23.toStandardHours();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26);
        mutablePeriod28.addSeconds(292278993);
        mutablePeriod28.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime34 = dateTime21.minus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        mutableDateTime36.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime36.copy();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime36.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime41 = property40.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime43 = property40.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime43.toMutableDateTime(dateTimeZone44);
        int int48 = dateTimeZone44.getStandardOffset(60000L);
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder50.clear();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale52.getDisplayName();
        java.lang.String str54 = locale52.getISO3Language();
        java.util.Locale.Builder builder55 = builder51.setLocale(locale52);
        java.lang.String str56 = dateTimeZone44.getName(950707L, locale52);
        org.joda.time.DateTime dateTime57 = dateTime34.toDateTime(dateTimeZone44);
        org.joda.time.DateTime.Property property58 = dateTime57.dayOfYear();
        java.lang.String str60 = dateTime57.toString("1910");
        mutableDateTime0.setTime((org.joda.time.ReadableInstant) dateTime57);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime63 = dateTime57.withMonthOfYear(86398999);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 86398999 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(hours24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 42 + "'", int27 == 42);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u5fb7\u6587" + "'", str53, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "deu" + "'", str54, "deu");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1910" + "'", str60, "1910");
    }

    @Test
    public void test07438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07438");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        mutableDateTime6.setDate((long) '#');
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime6.toDateTime(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) periodType25);
        mutableDateTime0.setZoneRetainFields(dateTimeZone17);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate localDate30 = property29.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime31 = localDate30.toDateTimeAtStartOfDay();
        int int32 = dateTime31.getYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 2022 + "'", int32 == 2022);
    }

    @Test
    public void test07439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07439");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 44);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.weekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(2922789);
        mutableDateTime14.setZone(dateTimeZone17);
        int int19 = mutableDateTime14.getYearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:42.610Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:42.610Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:42.610Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 44L + "'", long11 == 44L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
    }

    @Test
    public void test07440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07440");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        int int5 = mutableDateTime0.getHourOfDay();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime0.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.add(26212118);
        org.joda.time.MutableDateTime mutableDateTime9 = property6.roundHalfEven();
        java.util.Locale locale11 = java.util.Locale.CHINESE;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = mutableDateTime9.toString("", locale11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid pattern specification");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:42.677Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:42.677Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:42.677Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh");
    }

    @Test
    public void test07441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07441");
        org.joda.time.Period period1 = org.joda.time.Period.months(53);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.months();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime10, periodType11);
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property13.getFieldType();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.property(dateTimeFieldType14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = duration21.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant26 = instant19.plus((org.joda.time.ReadableDuration) duration25);
        long long27 = instant26.getMillis();
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.months();
        org.joda.time.Period period30 = new org.joda.time.Period((-205878993L), chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology28.getZone();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime2, chronology28);
        mutableDateTime2.addSeconds(152);
        mutableDateTime2.addDays(57);
        org.joda.time.Duration duration38 = period1.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime2);
        mutableDateTime2.addWeekyears(435);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.add((long) 26221);
        mutableDateTime43.addMonths(0);
        mutableDateTime43.addWeekyears(26280146);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime43.setSecondOfMinute(37237425);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37237425 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 86400000L + "'", long27 == 86400000L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test07442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07442");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        boolean boolean20 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Hours hours21 = duration16.toStandardHours();
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration16, 20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime25.toString(dateTimeFormatter27);
        org.joda.time.DateTime dateTime30 = dateTime25.minusMonths(22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.DateTime dateTime36 = dateTime25.withChronology(chronology34);
        org.joda.time.Period period37 = duration16.toPeriod(chronology34);
        org.joda.time.Instant instant39 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration16, 16);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean41 = instant39.isSupported(dateTimeFieldType40);
        java.lang.String str42 = dateTimeFieldType40.getName();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = null;
        org.joda.time.format.DateTimeParser dateTimeParser44 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter43, dateTimeParser44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter45.withChronology(chronology49);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType40.getField(chronology49);
        org.joda.time.DateTimeField dateTimeField58 = chronology49.clockhourOfDay();
        long long60 = dateTimeField58.roundFloor((long) 26310348);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT86400S" + "'", str19, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(hours21);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "2022-02-22T07:23:42.734Z" + "'", str28, "2022-02-22T07:23:42.734Z");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "dayOfYear" + "'", str42, "dayOfYear");
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 105144L + "'", long54 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 25200000L + "'", long60 == 25200000L);
    }

    @Test
    public void test07443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07443");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.toMutableDateTime();
        int int8 = mutableDateTime7.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.millisOfSecond();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant13 = mutableDateTime7.toInstant();
        java.util.Date date14 = mutableDateTime7.toDate();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.fromDateFields(date14);
        int int16 = localDateTime15.getSecondOfMinute();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26622 + "'", int8 == 26622);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Mon Feb 22 17:40:43 GMT 64173");
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 43 + "'", int16 == 43);
    }

    @Test
    public void test07444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07444");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod14.addSeconds(292278993);
        mutablePeriod14.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime20 = dateTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        int int25 = dateTime20.get(dateTimeFieldType23);
        org.joda.time.Period period27 = org.joda.time.Period.millis(62166);
        org.joda.time.DateTime dateTime28 = dateTime20.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime20.toMutableDateTimeISO();
        int int30 = dateTime20.getYear();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 42 + "'", int13 == 42);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1424 + "'", int25 == 1424);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2021 + "'", int30 == 2021);
    }

    @Test
    public void test07445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07445");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime0.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setTime(73, 38219999, 26256, 26427838);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 73 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:42.796Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:42.796Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:42.796Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
    }

    @Test
    public void test07446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07446");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        boolean boolean37 = dateTimeFormatter36.isOffsetParsed();
        boolean boolean38 = dateTimeFormatter36.isOffsetParsed();
        java.lang.Integer int39 = dateTimeFormatter36.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter36.withOffsetParsed();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str34, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
    }

    @Test
    public void test07447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07447");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        boolean boolean6 = dateTime4.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology7 = dateTime4.getChronology();
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology7, locale8, (java.lang.Integer) 50);
        org.joda.time.DateTimeZone dateTimeZone11 = dateTimeParserBucket10.getZone();
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int20 = localDateTime18.get(dateTimeFieldType19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.weekOfWeekyear();
        int int22 = localDateTime18.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int24 = localDateTime18.get(dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.set(dateTimeFieldType23, 435);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 435 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1439 + "'", int20 == 1439);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 86399999 + "'", int22 == 86399999);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 31 + "'", int24 == 31);
    }

    @Test
    public void test07448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07448");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setYear(2);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime26.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.add((long) 47892750);
        org.joda.time.MutableDateTime mutableDateTime44 = property41.getMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime44.setWeekOfWeekyear(26175904);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26175904 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:23:42.832Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:23:42.832Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:23:42.832Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
    }

    @Test
    public void test07449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07449");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZoneUTC();
        boolean boolean14 = dateTimeFormatter2.isPrinter();
        java.lang.Integer int15 = dateTimeFormatter2.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.DateTimeZone dateTimeZone17 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withDefaultYear(43);
        org.joda.time.Chronology chronology20 = dateTimeFormatter19.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter19.withPivotYear((java.lang.Integer) 302);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(int15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
    }

    @Test
    public void test07450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07450");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.millisOfDay();
        org.joda.time.DateTime dateTime3 = mutableDateTime0.toDateTime();
        java.lang.String str4 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.secondOfMinute();
        int int6 = mutableDateTime0.getSecondOfDay();
        int int7 = mutableDateTime0.getYearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:42.860Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:42.860Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:42.860Z");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:23:42.860Z" + "'", str4, "2022-02-22T07:23:42.860Z");
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 26622 + "'", int6 == 26622);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
    }

    @Test
    public void test07451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07451");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours(20070221472000L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 20070221472000 * 3600000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
    }

    @Test
    public void test07452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07452");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime4.getFields();
        int int8 = localDateTime4.getMillisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.weekyear();
        int int10 = localDateTime4.get(dateTimeFieldType9);
        java.lang.String str11 = dateTimeFieldType9.getName();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType9.getRangeDurationType();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(15);
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(chronology17);
        org.joda.time.DateTimeField dateTimeField20 = dateTimeFieldType9.getField(chronology17);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField27 = localDateTime25.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray28 = localDateTime25.getFields();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.withDayOfWeek(1);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withDurationAdded((org.joda.time.ReadableDuration) duration32, 53);
        org.joda.time.LocalDateTime.Property property35 = localDateTime30.millisOfSecond();
        java.lang.String str36 = property35.toString();
        org.joda.time.LocalDateTime localDateTime37 = property35.roundFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        mutableDateTime38.add((long) 'a');
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str45 = duration44.toString();
        boolean boolean46 = duration42.isShorterThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Hours hours47 = duration42.toStandardHours();
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration42, 20);
        mutableDateTime38.setMillisOfDay(36946953);
        org.joda.time.DateTimeField dateTimeField52 = mutableDateTime38.getRoundingField();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period55 = duration54.toPeriod();
        org.joda.time.Duration duration58 = duration54.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration63 = duration60.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean64 = duration58.isLongerThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime38, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime37.minus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime37.minusSeconds(26414970);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration71 = duration70.toDuration();
        java.lang.String str72 = duration71.toString();
        org.joda.time.LocalDateTime localDateTime73 = localDateTime37.minus((org.joda.time.ReadableDuration) duration71);
        int int74 = dateTimeField20.getMinimumValue((org.joda.time.ReadablePartial) localDateTime73);
        java.lang.String str76 = dateTimeField20.getAsShortText(1163292L);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 37422884 + "'", int8 == 37422884);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2022 + "'", int10 == 2022);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekyear" + "'", str11, "weekyear");
        org.junit.Assert.assertNull(durationFieldType12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldArray28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Property[millisOfSecond]" + "'", str36, "Property[millisOfSecond]");
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT86400S" + "'", str45, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(hours47);
        org.junit.Assert.assertNull(dateTimeField52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT100S" + "'", str72, "PT100S");
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-292275054) + "'", int74 == (-292275054));
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "1970" + "'", str76, "1970");
    }

    @Test
    public void test07453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07453");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology1, locale3, (java.lang.Integer) 10);
        long long9 = dateTimeParserBucket6.computeMillis(true, "deu");
        java.lang.Integer int10 = dateTimeParserBucket6.getOffsetInteger();
        dateTimeParserBucket6.setOffset((java.lang.Integer) 295);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = dateTimeZone14.getName(100L, locale16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(948227L, dateTimeZone14);
        java.lang.String str21 = dateTimeZone14.getName(950707L);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.set(45);
        org.joda.time.MutableDateTime mutableDateTime29 = property26.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime31 = property26.add(45);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        long long35 = dateTimeZone32.previousTransition(100L);
        int int37 = dateTimeZone32.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime38 = mutableDateTime31.toDateTime(dateTimeZone32);
        mutableDateTime24.setZoneRetainFields(dateTimeZone32);
        java.lang.String str41 = dateTimeZone32.getNameKey(23L);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(51L, dateTimeZone32);
        long long44 = dateTimeZone14.getMillisKeepLocal(dateTimeZone32, 458119L);
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime(dateTimeZone14);
        dateTimeParserBucket6.setZone(dateTimeZone14);
        long long49 = dateTimeZone14.adjustOffset(1644909607052L, true);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNull(int10);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str17, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L + "'", long35 == 100L);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "UTC" + "'", str41, "UTC");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 458119L + "'", long44 == 458119L);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1644909607052L + "'", long49 == 1644909607052L);
    }

    @Test
    public void test07454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07454");
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.DateTime dateTime14 = dateTime10.withDurationAdded(0L, (int) '4');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        int int18 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime16.plus((long) 15);
        org.joda.time.DateTime.Property property21 = dateTime16.year();
        org.joda.time.DateTime dateTime22 = property21.roundHalfFloorCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.eras();
        long long34 = chronology29.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter25.withChronology(chronology29);
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField37 = chronology29.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        long long41 = dateTimeZone38.previousTransition(100L);
        int int43 = dateTimeZone38.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology44 = chronology29.withZone(dateTimeZone38);
        java.util.TimeZone timeZone45 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTime dateTime46 = dateTime22.toDateTime(dateTimeZone38);
        org.joda.time.DateTime dateTime47 = dateTime10.withZone(dateTimeZone38);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(1020000L, dateTimeZone38);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime((long) 26223641, dateTimeZone38);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(37051857, 1989, 62467, 37079542, 26547, 26368, 37257524, dateTimeZone38);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37079542 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 43 + "'", int11 == 43);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2022 + "'", int18 == 2022);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 105144L + "'", long34 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L + "'", long41 == 100L);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test07455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07455");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str6 = duration5.toString();
        boolean boolean7 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean18 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration19 = duration9.minus((org.joda.time.ReadableDuration) duration12);
        boolean boolean20 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.Period period25 = period23.withDays((int) (byte) 1);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours28 = duration27.toStandardHours();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = period23.toDurationFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration35 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) ' ');
        int int36 = duration1.compareTo((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration38 = duration19.plus(232051062L);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(5L);
        org.joda.time.Period period41 = duration19.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime40);
        mutableDateTime40.setWeekyear(26553);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT86400S" + "'", str6, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(hours28);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 43 + "'", int31 == 43);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test07456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07456");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.millisOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.dayOfMonth();
        org.joda.time.DurationField durationField14 = property13.getDurationField();
        long long17 = durationField14.add(1645514563113L, (long) 1969);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT86400S" + "'", str7, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1815636163113L + "'", long17 == 1815636163113L);
    }

    @Test
    public void test07457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07457");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime41 = property40.roundHalfCeiling();
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime41);
        int int43 = localDateTime42.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.minuteOfHour();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[YearDayTime]" + "'", str35, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 20 + "'", int43 == 20);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test07458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07458");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        mutableDateTime10.add(51L);
        mutableDateTime10.setWeekyear(26389588);
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField23 = localDateTime21.getField((int) (byte) 0);
        long long25 = dateTimeField23.roundHalfEven((long) 1);
        int int26 = dateTime16.get(dateTimeField23);
        boolean boolean27 = dateTime16.isBeforeNow();
        org.joda.time.DateTime dateTime29 = dateTime16.plusDays(32);
        org.joda.time.DateTime dateTime30 = dateTime29.withTimeAtStartOfDay();
        int int31 = dateTime30.getEra();
        org.joda.time.DateTime dateTime32 = dateTime30.toDateTime();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration39 = duration36.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean40 = duration34.isLongerThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration42 = duration34.minus(966164L);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period44 = duration34.toPeriod(periodType43);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime10, (org.joda.time.ReadableInstant) dateTime30, periodType43);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: -9637860612");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2022 + "'", int26 == 2022);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period44);
    }

    @Test
    public void test07459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07459");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.Period period5 = period3.minusSeconds((-1));
        org.joda.time.Period period7 = period3.withWeeks((int) (byte) 0);
        org.joda.time.LocalDate localDate8 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property9 = localDate8.monthOfYear();
        org.joda.time.LocalDate.Property property10 = localDate8.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant11, readableInstant12, periodType13);
        org.joda.time.DurationFieldType durationFieldType16 = periodType13.getFieldType((int) (short) 0);
        boolean boolean17 = localDate8.isSupported(durationFieldType16);
        boolean boolean18 = period3.isSupported(durationFieldType16);
        org.joda.time.Period period20 = period3.plusYears((-1));
        int int21 = period3.getWeeks();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant25, readableInstant26, periodType27);
        org.joda.time.DurationFieldType durationFieldType30 = periodType27.getFieldType((int) (short) 0);
        java.lang.String str31 = periodType27.toString();
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.Period period36 = new org.joda.time.Period((long) 53, (long) (-1), periodType27, chronology35);
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType22.getField(chronology35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMinutes(15);
        org.joda.time.Chronology chronology42 = dateTime39.getChronology();
        java.lang.String str43 = chronology42.toString();
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType22.getField(chronology42);
        boolean boolean45 = period3.equals((java.lang.Object) dateTimeFieldType22);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration51 = duration47.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusMinutes(15);
        org.joda.time.Interval interval56 = duration51.toIntervalTo((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime dateTime58 = dateTime55.minusWeeks((int) (short) 0);
        org.joda.time.DateTime dateTime60 = dateTime55.plusMillis(32);
        org.joda.time.LocalDate localDate61 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property62 = localDate61.monthOfYear();
        org.joda.time.DateTimeField dateTimeField63 = property62.getField();
        org.joda.time.LocalDate localDate64 = property62.roundCeilingCopy();
        org.joda.time.LocalDate localDate66 = localDate64.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        org.joda.time.DateMidnight dateMidnight69 = localDate66.toDateMidnight(dateTimeZone67);
        int int71 = dateTimeZone67.getOffset(15593411790997L);
        org.joda.time.MutableDateTime mutableDateTime72 = dateTime60.toMutableDateTime(dateTimeZone67);
        java.lang.String str74 = dateTimeZone67.getName((long) 42);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((java.lang.Object) boolean45, dateTimeZone67);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Boolean");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(periodType27);
        org.junit.Assert.assertNotNull(durationFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PeriodType[YearDayTime]" + "'", str31, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[UTC]" + "'", str43, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(interval56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(localDate64);
        org.junit.Assert.assertNotNull(localDate66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00" + "'", str74, "+00:00");
    }

    @Test
    public void test07460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07460");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType15 = periodType12.getFieldType((int) (short) 0);
        java.lang.String str16 = periodType12.toString();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 53, (long) (-1), periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType7.getField(chronology20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(15);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        java.lang.String str28 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType7.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = chronology27.dayOfYear();
        java.util.Locale locale31 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology27, locale31, (java.lang.Integer) 5);
        int int34 = property4.getMaximumShortTextLength(locale31);
        org.joda.time.MutableDateTime mutableDateTime35 = property4.getMutableDateTime();
        org.joda.time.DurationFieldType durationFieldType36 = org.joda.time.DurationFieldType.millis();
        java.lang.String str37 = durationFieldType36.getName();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(15);
        org.joda.time.Chronology chronology43 = dateTime40.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.hours();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(1440L, chronology43);
        boolean boolean46 = durationFieldType36.isSupported(chronology43);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusMinutes(15);
        org.joda.time.Chronology chronology52 = dateTime49.getChronology();
        java.lang.String str53 = chronology52.toString();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology52);
        org.joda.time.DateTimeField dateTimeField55 = chronology52.millisOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.millisOfSecond();
        boolean boolean57 = durationFieldType36.isSupported(chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.hourOfHalfday();
        mutableDateTime35.setChronology(chronology52);
        org.joda.time.DateTimeField dateTimeField60 = chronology52.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            long long63 = dateTimeField60.set(1645514190997L, 63704);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 63704 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PeriodType[YearDayTime]" + "'", str16, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 9 + "'", int34 == 9);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "millis" + "'", str37, "millis");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ISOChronology[UTC]" + "'", str53, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField60);
    }

    @Test
    public void test07461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07461");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.Instant instant2 = instant0.toInstant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj5 = mutableDateTime4.clone();
        mutableDateTime4.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.dayOfWeek();
        int int9 = mutableDateTime4.getHourOfDay();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) mutableDateTime4);
        int int11 = mutableDateTime3.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime3.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(569L, 1097130L);
        mutablePeriod15.setHours(298);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes(15);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.DurationField durationField25 = chronology23.halfdays();
        long long31 = chronology23.getDateTimeMillis((long) 26175904, 0, 25, 53, 14);
        org.joda.time.DateTimeField dateTimeField32 = chronology23.hourOfDay();
        mutablePeriod15.setPeriod(1227121L, chronology23);
        org.joda.time.DateTime dateTime34 = mutableDateTime3.toDateTime(chronology23);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "2022-02-22T07:23:43.314Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "2022-02-22T07:23:43.314Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "2022-02-22T07:23:43.314Z");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 46 + "'", int11 == 46);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ISOChronology[UTC]" + "'", str24, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1553014L + "'", long31 == 1553014L);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime34);
    }

    @Test
    public void test07462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07462");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        java.lang.String str6 = chronology5.toString();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology5);
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod(readableInstant9, readableInstant10, periodType11);
        org.joda.time.PeriodType periodType13 = periodType11.withHoursRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 44, chronology19);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType14.getField(chronology19);
        org.joda.time.DateTimeField dateTimeField25 = chronology19.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((long) (-292275054), periodType11, chronology19);
        org.joda.time.LocalTime localTime27 = localTime7.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.LocalTime localTime29 = localTime7.minusMillis(27);
        org.joda.time.LocalTime localTime31 = localTime7.minusSeconds(37129311);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime33 = localTime31.withMillisOfDay((-6977));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -6977 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
    }

    @Test
    public void test07463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07463");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("days");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.Chronology chronology13 = dateTime10.getChronology();
        java.lang.String str14 = chronology13.toString();
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfYear();
        org.joda.time.DateTimeField dateTimeField16 = chronology13.era();
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField25 = localDateTime23.getField((int) (byte) 0);
        long long27 = dateTimeField25.roundHalfEven((long) 1);
        int int28 = dateTime18.get(dateTimeField25);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withCenturyOfEra((int) 'a');
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getDisplayName();
        java.lang.String str39 = dateTimeField25.getAsText((org.joda.time.ReadablePartial) localDateTime33, 53, locale37);
        java.lang.String str41 = dateTimeField25.getAsShortText((long) (byte) 100);
        long long43 = dateTimeField25.roundHalfEven((long) '4');
        java.util.Locale locale45 = java.util.Locale.getDefault();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField52 = localDateTime50.getField((int) (byte) 0);
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.lang.String str55 = dateTimeField52.getAsShortText((long) '4', locale54);
        java.lang.String str56 = locale54.getVariant();
        java.lang.String str57 = locale45.getDisplayScript(locale54);
        java.lang.String str58 = dateTimeField25.getAsShortText((int) (short) 1, locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket60 = new org.joda.time.format.DateTimeParserBucket((long) 2100, chronology13, locale45, (java.lang.Integer) 26158);
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now(chronology13);
        boolean boolean62 = languageRange1.equals((java.lang.Object) chronology13);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "days" + "'", str7, "days");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[UTC]" + "'", str14, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "German" + "'", str38, "German");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "53" + "'", str39, "53");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "1970" + "'", str41, "1970");
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(locale45);
// flaky:         org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "1970" + "'", str55, "1970");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "1" + "'", str58, "1");
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
    }

    @Test
    public void test07464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07464");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.getMillisKeepLocal(dateTimeZone2, (long) 44);
        boolean boolean6 = dateTimeZone2.isStandardOffset((long) (-1));
        java.lang.String str7 = dateTimeZone2.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime8.setSecondOfMinute(41);
        mutableDateTime8.addMillis(10);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.Duration duration18 = duration14.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str23 = duration22.toString();
        boolean boolean24 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration30 = duration26.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration35 = duration32.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean36 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration32);
        boolean boolean37 = duration22.isEqual((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration38 = duration14.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.minusSeconds((int) (byte) 10);
        java.lang.Object obj48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(obj48);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime45.minus((org.joda.time.ReadableDuration) duration51);
        java.util.TimeZone timeZone55 = java.util.TimeZone.getTimeZone("2022-02-22T10:15:47.721");
        boolean boolean56 = duration51.equals((java.lang.Object) "2022-02-22T10:15:47.721");
        org.joda.time.Duration duration58 = duration51.withMillis(27418772L);
        int int59 = duration22.compareTo((org.joda.time.ReadableDuration) duration58);
        java.lang.Object obj60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(obj60);
        boolean boolean63 = dateTime61.isBefore((long) 7);
        java.lang.String str64 = dateTime61.toString();
        org.joda.time.DateTime dateTime66 = dateTime61.minus((long) 7);
        org.joda.time.Instant instant67 = new org.joda.time.Instant();
        org.joda.time.Instant instant69 = instant67.withMillis(0L);
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.DateTime dateTime71 = dateTime61.toDateTime(chronology70);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(chronology70);
        org.joda.time.DateTime dateTime74 = dateTime72.minusDays(2100);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod79.addDays((int) (byte) 10);
        mutablePeriod79.addMillis((int) '4');
        mutablePeriod79.setSeconds((int) (short) -1);
        int int86 = mutablePeriod79.getMonths();
        org.joda.time.DateTime dateTime87 = dateTime74.minus((org.joda.time.ReadablePeriod) mutablePeriod79);
        org.joda.time.Interval interval88 = duration22.toIntervalTo((org.joda.time.ReadableInstant) dateTime87);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration22, 33711);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT86400S" + "'", str23, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "2022-02-22T07:23:43.407Z" + "'", str64, "2022-02-22T07:23:43.407Z");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 0 + "'", int86 == 0);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(interval88);
    }

    @Test
    public void test07465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07465");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 44, chronology4);
        org.joda.time.DateTimeField dateTimeField9 = chronology4.dayOfWeek();
        org.joda.time.DateTimeZone dateTimeZone10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(dateTimeZone10);
        org.joda.time.LocalTime localTime13 = localTime11.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime15 = localTime11.plusMillis(9);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (short) 100, chronology17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str20 = durationFieldType19.getName();
        boolean boolean21 = localTime18.isSupported(durationFieldType19);
        boolean boolean22 = localTime11.isEqual((org.joda.time.ReadablePartial) localTime18);
        org.joda.time.Chronology chronology23 = localTime11.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) chronology4, chronology23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.chrono.ISOChronology");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "weeks" + "'", str20, "weeks");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
    }

    @Test
    public void test07466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07466");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra((int) '#');
        org.joda.time.DateTime dateTime10 = dateTime5.withYear((int) 'u');
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        mutableDateTime11.setDate((long) '#');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        int int21 = localDate17.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime5.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime29 = dateTime5.plusMinutes(0);
        org.joda.time.DateTime dateTime30 = dateTime29.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
    }

    @Test
    public void test07467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07467");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        boolean boolean17 = instant0.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime mutableDateTime18 = instant0.toMutableDateTimeISO();
        org.joda.time.Instant instant19 = instant0.toInstant();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(instant19);
    }

    @Test
    public void test07468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07468");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.eras();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 44, chronology10);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType5.getField(chronology10);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        long long25 = chronology10.add((org.joda.time.ReadablePeriod) period19, (long) ' ', (int) 'a');
        org.joda.time.Period period27 = period19.minusHours((-292275054));
        org.joda.time.Period period29 = period27.minusHours(2000);
        int int30 = period27.getMinutes();
        org.joda.time.Period period31 = period27.toPeriod();
        mutableDateTime4.add((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale36);
        java.util.Locale locale39 = dateTimeParserBucket38.getLocale();
        long long40 = dateTimeParserBucket38.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket38.getZone();
        mutableDateTime4.setZone(dateTimeZone41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        long long47 = dateTimeZone44.previousTransition(100L);
        mutableDateTime4.setZone(dateTimeZone44);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setDateTime(62266, 26309196, 0, 37242433, 26256523, 10, 26541601);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37242433 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.099S" + "'", str22, "PT0.099S");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-9571L) + "'", long25 == (-9571L));
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 97L + "'", long40 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L + "'", long47 == 100L);
    }

    @Test
    public void test07469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07469");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMillis(49);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withSecondOfMinute(3);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond(52);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.property(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime15 = property14.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime16 = property14.roundCeilingCopy();
        java.lang.Object obj18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(obj18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDate localDate23 = dateTime19.toLocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.dayOfMonth();
        java.util.Date date25 = localDate23.toDate();
        org.joda.time.LocalDate.Property property26 = localDate23.dayOfYear();
        java.util.Locale locale27 = java.util.Locale.GERMAN;
        java.lang.String str28 = property26.getAsText(locale27);
        java.util.Set<java.lang.String> strSet29 = locale27.getUnicodeLocaleAttributes();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = dateTime31.withZoneRetainFields(dateTimeZone32);
        boolean boolean35 = dateTime33.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology36 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.era();
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean41 = localDate38.isSupported(dateTimeFieldType40);
        org.joda.time.LocalDate.Property property42 = localDate38.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        mutableDateTime43.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime43.copy();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime43.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime43.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now();
        mutableDateTime49.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime49.copy();
        mutableDateTime49.setDate((long) '#');
        org.joda.time.LocalDate localDate55 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property56 = localDate55.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean58 = localDate55.isSupported(dateTimeFieldType57);
        int int59 = localDate55.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight61 = localDate55.toDateMidnight(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = mutableDateTime49.toDateTime(dateTimeZone60);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now(dateTimeZone60);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) 100, 1L, periodType66);
        org.joda.time.PeriodType periodType68 = period67.getPeriodType();
        boolean boolean69 = dateTimeZone60.equals((java.lang.Object) periodType68);
        mutableDateTime43.setZoneRetainFields(dateTimeZone60);
        org.joda.time.LocalDate localDate71 = new org.joda.time.LocalDate(dateTimeZone60);
        org.joda.time.DateTime dateTime72 = localDate38.toDateTimeAtStartOfDay(dateTimeZone60);
        org.joda.time.DateTime dateTime73 = localDate38.toDateTimeAtStartOfDay();
        org.joda.time.Instant instant74 = new org.joda.time.Instant();
        org.joda.time.Instant instant76 = instant74.withMillis(0L);
        org.joda.time.Chronology chronology77 = instant76.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.eras();
        long long82 = chronology77.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField83 = chronology77.secondOfMinute();
        boolean boolean84 = dateTimeField83.isSupported();
        long long86 = dateTimeField83.roundHalfEven(946312L);
        java.util.Locale locale88 = java.util.Locale.GERMAN;
        java.util.Locale locale89 = java.util.Locale.CANADA;
        java.lang.String str90 = locale88.getDisplayVariant(locale89);
        java.lang.String str91 = dateTimeField83.getAsText(86400000L, locale89);
        java.util.Set<java.lang.String> strSet92 = locale89.getUnicodeLocaleAttributes();
        boolean boolean93 = locale89.hasExtensions();
        java.lang.String str94 = dateTimeField37.getAsText((org.joda.time.ReadablePartial) localDate38, locale89);
        java.util.Set<java.lang.Character> charSet95 = locale89.getExtensionKeys();
        java.lang.String str96 = locale27.getDisplayVariant(locale89);
        java.lang.String str97 = locale89.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str98 = localDateTime16.toString("2022-02-22T07:19:36.335Z", locale89);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(date25);
// flaky:         org.junit.Assert.assertEquals(date25.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "53" + "'", str28, "53");
        org.junit.Assert.assertNotNull(strSet29);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 53 + "'", int59 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateMidnight61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 105144L + "'", long82 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 946000L + "'", long86 == 946000L);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "de");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "0" + "'", str91, "0");
        org.junit.Assert.assertNotNull(strSet92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "AD" + "'", str94, "AD");
        org.junit.Assert.assertNotNull(charSet95);
        org.junit.Assert.assertEquals("'" + str96 + "' != '" + "" + "'", str96, "");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
    }

    @Test
    public void test07470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07470");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours((int) (byte) 100);
        int int8 = localTime7.getMinuteOfHour();
        java.lang.String str10 = localTime7.toString("1");
        org.joda.time.LocalTime localTime12 = localTime7.minusMinutes(15);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfCentury();
        int int16 = dateTime14.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime14.plus((long) 15);
        org.joda.time.DateTime.Property property19 = dateTime14.year();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property21 = dateTime20.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime22 = dateTime20.toMutableDateTime();
        org.joda.time.LocalTime localTime23 = dateTime20.toLocalTime();
        org.joda.time.LocalTime localTime24 = localTime7.withFields((org.joda.time.ReadablePartial) localTime23);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalTime localTime26 = localTime23.minus(readablePeriod25);
        java.lang.String[] strArray54 = new java.lang.String[] { "Property[hourOfDay]", "hi!", "year", "2022-02-22T07:15:44.894Z", "2022-02-22T07:15:46.416Z", "weeks", "2022-02-22T07:15:45.105Z", "ISOChronology[Etc/UTC]", "Standard", "en_CA", "millisOfSecond", "2022-02-22T07:15:45.105Z", "hi!", "clockhourOfDay", "+00:00", "2022-02-22T10:15:45.103", "PeriodType[YearDayTime]", "2022-02-22T07:15:45.105Z", "53", "year", "2022-02-22T07:15:46.956Z", "millis", "PT86400S", "Property[hourOfDay]", "2022-02-22T10:15:45.103", "millisOfSecond", "PT86400S" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        strSet55.clear();
        strSet55.clear();
        java.util.Locale.LanguageRange[] languageRangeArray59 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList60 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60, languageRangeArray59);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream62 = languageRangeList60.stream();
        boolean boolean63 = strSet55.containsAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList60);
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period(readableDuration64, readableInstant65);
        org.joda.time.DateTimeZone dateTimeZone69 = null;
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime(dateTimeZone69);
        org.joda.time.LocalTime localTime72 = localTime70.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology73 = localTime72.getChronology();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology73);
        int int75 = mutablePeriod74.getHours();
        org.joda.time.Period period76 = period66.minus((org.joda.time.ReadablePeriod) mutablePeriod74);
        boolean boolean77 = strSet55.equals((java.lang.Object) period76);
        org.joda.time.LocalTime localTime78 = localTime23.minus((org.joda.time.ReadablePeriod) period76);
        org.joda.time.LocalTime localTime80 = localTime78.minusMinutes(26150803);
        org.joda.time.Chronology chronology81 = localTime78.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime(0, 62371, 50, 26342498, chronology81);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62371 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 23 + "'", int8 == 23);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1" + "'", str10, "1");
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(languageRangeArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(languageRangeStream62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(localTime78);
        org.junit.Assert.assertNotNull(localTime80);
        org.junit.Assert.assertNotNull(chronology81);
    }

    @Test
    public void test07471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07471");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfCentury();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.add((long) 62176);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime23.setMonthOfYear(26371489);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26371489 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:23:43.591Z" + "'", str14, "2022-02-22T07:23:43.591Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
    }

    @Test
    public void test07472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07472");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTime();
        int int10 = dateTime7.getMillisOfSecond();
        int int11 = dateTime7.getMillisOfSecond();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType14.getRangeDurationType();
        java.lang.String str17 = durationFieldType16.toString();
        org.joda.time.DateTime dateTime19 = dateTime7.withFieldAdded(durationFieldType16, 274);
        int int20 = dateTime7.getDayOfMonth();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.LocalDate localDate24 = property22.roundCeilingCopy();
        org.joda.time.Chronology chronology25 = localDate24.getChronology();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime29 = localDate24.toDateTimeAtCurrentTime(dateTimeZone28);
        boolean boolean30 = dateTime29.isEqualNow();
        org.joda.time.DateTime dateTime32 = dateTime29.minusDays(62262);
        boolean boolean33 = dateTime7.equals((java.lang.Object) 62262);
        org.joda.time.DateTime dateTime35 = dateTime7.plusMinutes(26439);
        org.joda.time.DateTime dateTime36 = dateTime7.toDateTimeISO();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "days" + "'", str17, "days");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test07473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07473");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(chronology13);
        org.joda.time.LocalDate.Property property16 = localDate15.centuryOfEra();
        org.joda.time.LocalDate localDate17 = property16.roundCeilingCopy();
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology20, locale22);
        java.lang.Object obj25 = dateTimeParserBucket24.saveState();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket24.getZone();
        org.joda.time.DateTime dateTime27 = localDate17.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((-205878993L), dateTimeZone26);
        int int29 = mutableDateTime28.getSecondOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime28.setDateTime(23018438, 0, 1324, 26237, 1326, 26572, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26237 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(obj25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53321 + "'", int29 == 53321);
    }

    @Test
    public void test07474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07474");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = duration9.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration13 = duration6.minus((org.joda.time.ReadableDuration) duration12);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration6);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.centuryOfEra();
        mutableDateTime1.addHours((int) (byte) 10);
        int int18 = mutableDateTime1.getSecondOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.monthOfYear();
        org.joda.time.LocalDate.Property property21 = localDate19.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.DurationFieldType durationFieldType27 = periodType24.getFieldType((int) (short) 0);
        boolean boolean28 = localDate19.isSupported(durationFieldType27);
        mutableDateTime1.add(durationFieldType27, (-292275054));
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) mutableDateTime1);
        mutablePeriod31.addMinutes(26618);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 62623 + "'", int18 == 62623);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test07475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07475");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        org.joda.time.Period period23 = period19.toPeriod();
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.Period period25 = period15.normalizedStandard(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = periodType24.indexOf(durationFieldType26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType24, chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime5.toMutableDateTime(chronology31);
        mutablePeriod2.setPeriod((long) 36946953, 960000L, chronology31);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        mutableDateTime39.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime39.copy();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration43, readableInstant44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period51 = period49.minusSeconds((-1));
        java.lang.String str52 = period49.toString();
        org.joda.time.Period period53 = period49.toPeriod();
        org.joda.time.PeriodType periodType54 = period49.getPeriodType();
        org.joda.time.Period period55 = period45.normalizedStandard(periodType54);
        int int56 = period55.getWeeks();
        mutableDateTime42.add((org.joda.time.ReadablePeriod) period55, 36946953);
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period61 = period55.minusMonths(10);
        java.lang.Object obj62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(obj62);
        boolean boolean65 = dateTime63.isBefore((long) 7);
        java.lang.String str66 = dateTime63.toString();
        org.joda.time.DateTime dateTime68 = dateTime63.minus((long) 7);
        org.joda.time.Instant instant69 = new org.joda.time.Instant();
        org.joda.time.Instant instant71 = instant69.withMillis(0L);
        org.joda.time.Chronology chronology72 = instant71.getChronology();
        org.joda.time.DateTime dateTime73 = dateTime63.toDateTime(chronology72);
        org.joda.time.DateTime dateTime75 = dateTime73.plusHours(21);
        org.joda.time.DateTime.Property property76 = dateTime75.yearOfCentury();
        org.joda.time.Duration duration77 = period61.toDurationTo((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.DurationFieldType durationFieldType79 = dateTimeFieldType78.getDurationType();
        boolean boolean80 = dateTime75.isSupported(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.099S" + "'", str22, "PT0.099S");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0.099S" + "'", str52, "PT0.099S");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "2022-02-22T07:23:43.766Z" + "'", str66, "2022-02-22T07:23:43.766Z");
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(durationFieldType79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test07476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07476");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        int int5 = mutableDateTime0.getHourOfDay();
        mutableDateTime0.addWeeks(99);
        mutableDateTime0.add((long) 26252);
        boolean boolean11 = mutableDateTime0.isEqual((long) 15559679);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime0.getZone();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:43.807Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:43.807Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:43.807Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
    }

    @Test
    public void test07477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07477");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter2.withZone(dateTimeZone38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(readableInstant45, readableInstant46, periodType47);
        org.joda.time.DurationFieldType durationFieldType50 = periodType47.getFieldType((int) (short) 0);
        java.lang.String str51 = periodType47.toString();
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.Chronology chronology55 = instant54.getChronology();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 53, (long) (-1), periodType47, chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.secondOfMinute();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter42.withChronology(chronology55);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter42.withPivotYear(437);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property63 = localDate62.monthOfYear();
        org.joda.time.DateTimeField dateTimeField64 = property63.getField();
        org.joda.time.LocalDate localDate65 = property63.roundCeilingCopy();
        org.joda.time.LocalDate localDate67 = localDate65.minusMonths(22);
        org.joda.time.DateTimeZone dateTimeZone68 = null;
        org.joda.time.DateTime dateTime69 = localDate67.toDateTimeAtMidnight(dateTimeZone68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusDays(25);
        org.joda.time.MutableDateTime mutableDateTime72 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime75 = property73.set(45);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.minuteOfHour();
        boolean boolean77 = mutableDateTime75.isSupported(dateTimeFieldType76);
        int int78 = dateTime71.get(dateTimeFieldType76);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str79 = dateTimeFormatter42.print((org.joda.time.ReadableInstant) dateTime71);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "German" + "'", str34, "German");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimePrinter37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(durationFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PeriodType[YearDayTime]" + "'", str51, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(localDate65);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(mutableDateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertNotNull(dateTimeFieldType76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
    }

    @Test
    public void test07478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07478");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str6 = duration5.toString();
        boolean boolean7 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean18 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration19 = duration9.minus((org.joda.time.ReadableDuration) duration12);
        boolean boolean20 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.Period period25 = period23.withDays((int) (byte) 1);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours28 = duration27.toStandardHours();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = period23.toDurationFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration35 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) ' ');
        int int36 = duration1.compareTo((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration38 = duration19.plus(232051062L);
        org.joda.time.Duration duration39 = duration38.toDuration();
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) 26290, 184);
        org.joda.time.Duration duration43 = duration42.toDuration();
        org.joda.time.Duration duration46 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        long long47 = duration46.getMillis();
        boolean boolean48 = duration43.isEqual((org.joda.time.ReadableDuration) duration46);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now();
        mutableDateTime49.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime49.copy();
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime49.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime55 = property53.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime57 = property53.addWrapField(26150);
        org.joda.time.DateTimeZone dateTimeZone58 = mutableDateTime57.getZone();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime57.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod64.addDays((int) (byte) 10);
        mutablePeriod64.addMillis((int) (short) 100);
        org.joda.time.PeriodType periodType69 = mutablePeriod64.getPeriodType();
        org.joda.time.DurationFieldType durationFieldType70 = null;
        boolean boolean71 = periodType69.isSupported(durationFieldType70);
        org.joda.time.Period period72 = duration46.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime57, periodType69);
        org.joda.time.ReadableDuration readableDuration73 = null;
        boolean boolean74 = duration46.isLongerThan(readableDuration73);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT86400S" + "'", str6, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(hours28);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 43 + "'", int31 == 43);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-292275053L) + "'", long47 == (-292275053L));
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
    }

    @Test
    public void test07479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07479");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime2 = instant0.toMutableDateTimeISO();
        mutableDateTime2.addYears((-292275054));
        mutableDateTime2.addMinutes(2026);
        java.lang.String str7 = mutableDateTime2.toString();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "-292273032-02-23T17:09:43.865Z" + "'", str7, "-292273032-02-23T17:09:43.865Z");
    }

    @Test
    public void test07480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07480");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = duration3.withDurationAdded((long) (short) 100, (int) ' ');
        long long7 = duration6.getMillis();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.months();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17, periodType18);
        boolean boolean20 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime15);
        int int21 = dateTime15.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime15, periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.Chronology chronology32 = dateTime29.getChronology();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime29.withChronology(chronology36);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.getMutableDateTime();
        boolean boolean45 = dateTime41.isBefore((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField55 = chronology49.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology49.minuteOfDay();
        mutableDateTime44.setChronology(chronology49);
        org.joda.time.DateTime dateTime58 = dateTime15.toDateTime(chronology49);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 99, chronology49);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 62166, chronology49);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime60.setMinuteOfHour(1326);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1326 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 86403200L + "'", long7 == 86403200L);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 105144L + "'", long54 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test07481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07481");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime4.getFields();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.centuryOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period23 = period21.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minus((org.joda.time.ReadablePeriod) period21);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) period21, 0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1, dateTimeZone30);
        mutableDateTime28.setZone(dateTimeZone30);
        int int34 = dateTime8.compareTo((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod37.clear();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMinutes(15);
        org.joda.time.Interval interval49 = duration44.toIntervalTo((org.joda.time.ReadableInstant) dateTime48);
        mutablePeriod37.setPeriod((org.joda.time.ReadableInterval) interval49);
        mutablePeriod37.setMonths(152);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod55.clear();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period59 = duration58.toPeriod();
        org.joda.time.Duration duration62 = duration58.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusMinutes(15);
        org.joda.time.Interval interval67 = duration62.toIntervalTo((org.joda.time.ReadableInstant) dateTime66);
        mutablePeriod55.setPeriod((org.joda.time.ReadableInterval) interval67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(readableInstant69, readableInstant70, periodType71);
        org.joda.time.DurationFieldType durationFieldType74 = periodType71.getFieldType((int) (short) 0);
        int int75 = mutablePeriod55.get(durationFieldType74);
        int int76 = mutablePeriod37.indexOf(durationFieldType74);
        org.joda.time.DateTime dateTime78 = dateTime8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod37, 62290);
        org.joda.time.Chronology chronology79 = dateTime8.getChronology();
        org.joda.time.DateTime.Property property80 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime81 = property80.getDateTime();
        org.joda.time.DateTime dateTime82 = property80.getDateTime();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(interval67);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test07482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07482");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.Instant instant2 = instant0.toInstant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj5 = mutableDateTime4.clone();
        mutableDateTime4.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.dayOfWeek();
        int int9 = mutableDateTime4.getHourOfDay();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) mutableDateTime4);
        int int11 = mutableDateTime3.getCenturyOfEra();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(obj5);
// flaky:         org.junit.Assert.assertEquals(obj5.toString(), "2022-02-22T07:23:43.985Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "2022-02-22T07:23:43.985Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "2022-02-22T07:23:43.985Z");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 20 + "'", int11 == 20);
    }

    @Test
    public void test07483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07483");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        int int6 = localTime5.getMillisOfDay();
        org.joda.time.LocalTime localTime8 = localTime5.plusHours(40);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.Duration duration22 = period21.toStandardDuration();
        org.joda.time.LocalTime localTime23 = localTime5.minus((org.joda.time.ReadablePeriod) period21);
        java.lang.String str24 = localTime5.toString();
        org.joda.time.DateTimeField[] dateTimeFieldArray25 = localTime5.getFields();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 26623996 + "'", int6 == 26623996);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.099S" + "'", str18, "PT0.099S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(localTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "07:23:43.996" + "'", str24, "07:23:43.996");
        org.junit.Assert.assertNotNull(dateTimeFieldArray25);
    }

    @Test
    public void test07484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07484");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.DateTime dateTime17 = dateTime5.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.DurationFieldType durationFieldType40 = periodType37.getFieldType((int) (short) 0);
        java.lang.String str41 = periodType37.toString();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 53, (long) (-1), periodType37, chronology45);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) (short) 10, periodType23, chronology45);
        org.joda.time.DateTime dateTime48 = dateTime17.toDateTime(chronology45);
        org.joda.time.DateTime dateTime50 = dateTime17.withYear(25);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str55 = duration54.toString();
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration54, 8);
        mutableDateTime52.addSeconds(1970);
        mutableDateTime52.setMillisOfSecond(49);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(readableInstant65, readableInstant66, periodType67);
        org.joda.time.DurationFieldType durationFieldType70 = periodType67.getFieldType((int) (short) 0);
        java.lang.String str71 = periodType67.toString();
        org.joda.time.Instant instant72 = new org.joda.time.Instant();
        org.joda.time.Instant instant74 = instant72.withMillis(0L);
        org.joda.time.Chronology chronology75 = instant74.getChronology();
        org.joda.time.Period period76 = new org.joda.time.Period((long) 53, (long) (-1), periodType67, chronology75);
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType62.getField(chronology75);
        org.joda.time.DateTimeField dateTimeField78 = chronology75.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone79 = chronology75.getZone();
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime(dateTimeZone79);
        mutableDateTime52.setZone(dateTimeZone79);
        long long83 = dateTimeZone79.convertUTCToLocal((long) 1973);
        java.lang.String str84 = dateTimeZone79.getID();
        org.joda.time.DateTime dateTime85 = dateTime50.withZone(dateTimeZone79);
        java.util.GregorianCalendar gregorianCalendar86 = dateTime50.toGregorianCalendar();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PeriodType[YearDayTime]" + "'", str41, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PT86400S" + "'", str55, "PT86400S");
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(durationFieldType70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PeriodType[YearDayTime]" + "'", str71, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 1973L + "'", long83 == 1973L);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "UTC" + "'", str84, "UTC");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(gregorianCalendar86);
    }

    @Test
    public void test07485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07485");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(15);
        org.joda.time.DateTime dateTime17 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = localDateTime10.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime5.withZoneRetainFields(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.toString();
        java.lang.String str22 = dateTimeZone18.getID();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime25.copy();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.yearOfCentury();
        mutableDateTime25.setHourOfDay(9);
        int int32 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) mutableDateTime25);
        int int33 = mutableDateTime25.getSecondOfDay();
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime25.setSecondOfDay(833);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 33824 + "'", int33 == 33824);
    }

    @Test
    public void test07486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07486");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        mutableDateTime5.addMillis((-2022));
        int int8 = mutableDateTime5.getSecondOfMinute();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str15 = duration14.toString();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours18 = duration17.toStandardHours();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration17, (org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = duration14.plus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration28 = duration25.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        mutableDateTime29.add((long) 'a');
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime29.yearOfCentury();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration40 = duration37.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration41 = duration34.minus((org.joda.time.ReadableDuration) duration40);
        mutableDateTime29.add((org.joda.time.ReadableDuration) duration34);
        boolean boolean43 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration34);
        boolean boolean44 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration52 = duration48.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration54 = duration28.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        int int57 = dateTime56.getYearOfCentury();
        int int58 = dateTime56.getWeekyear();
        org.joda.time.DateTime dateTime60 = dateTime56.plus((long) 15);
        org.joda.time.DateTime.Property property61 = dateTime56.year();
        org.joda.time.DateTime dateTime62 = property61.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period(readableDuration63, readableInstant64);
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) 100, 1L, periodType68);
        org.joda.time.Period period71 = period69.minusSeconds((-1));
        java.lang.String str72 = period69.toString();
        org.joda.time.Period period73 = period69.toPeriod();
        org.joda.time.PeriodType periodType74 = period69.getPeriodType();
        org.joda.time.Period period75 = period65.normalizedStandard(periodType74);
        java.lang.String str76 = periodType74.getName();
        org.joda.time.PeriodType periodType77 = periodType74.withYearsRemoved();
        org.joda.time.Period period78 = duration52.toPeriodTo((org.joda.time.ReadableInstant) dateTime62, periodType77);
        org.joda.time.Period period79 = new org.joda.time.Period(51L, 86400L, periodType77);
        org.joda.time.Period period80 = new org.joda.time.Period(4801285047506L, (long) 18966, periodType77);
        org.joda.time.Period period81 = period80.negated();
        mutableDateTime5.add((org.joda.time.ReadablePeriod) period81, (-164));
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 57 + "'", int8 == 57);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT86400S" + "'", str15, "PT86400S");
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(hours18);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 44 + "'", int21 == 44);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 22 + "'", int57 == 22);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT0.099S" + "'", str72, "PT0.099S");
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Standard" + "'", str76, "Standard");
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period81);
    }

    @Test
    public void test07487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07487");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = mutableDateTime17.getRoundingField();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime17.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getDisplayName();
        java.lang.String str25 = dateTimeZone21.getName(100L, locale23);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(948227L, dateTimeZone21);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.year();
        org.joda.time.ReadableInstant readableInstant28 = null;
        mutableDateTime26.setMillis(readableInstant28);
        mutableDateTime26.setMillisOfDay(54);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getYearOfCentury();
        int int35 = dateTime33.getWeekyear();
        org.joda.time.DateTime dateTime37 = dateTime33.plus((long) 15);
        org.joda.time.DateTime.Property property38 = dateTime33.year();
        org.joda.time.DateTime dateTime40 = property38.addToCopy((long) 25);
        org.joda.time.DateTime dateTime41 = property38.roundCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj43 = mutableDateTime42.clone();
        mutableDateTime42.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.dayOfWeek();
        int int47 = mutableDateTime42.getMinuteOfDay();
        boolean boolean48 = dateTime41.isEqual((org.joda.time.ReadableInstant) mutableDateTime42);
        int int49 = dateTime41.getYearOfCentury();
        boolean boolean50 = mutableDateTime26.isAfter((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime52 = dateTime41.plusWeeks(26345);
        org.joda.time.Chronology chronology53 = dateTime41.getChronology();
        mutableDateTime17.setChronology(chronology53);
        org.joda.time.DateTimeZone dateTimeZone57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime(dateTimeZone57);
        org.joda.time.LocalTime localTime60 = localTime58.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology61 = localTime60.getChronology();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.millisOfDay();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.dayOfYear();
        org.joda.time.DateTimeField dateTimeField66 = chronology61.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField67 = chronology61.clockhourOfHalfday();
        mutableDateTime17.setChronology(chronology61);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str24, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "+00:00" + "'", str25, "+00:00");
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(obj43);
// flaky:         org.junit.Assert.assertEquals(obj43.toString(), "2022-02-22T07:23:44.217Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj43), "2022-02-22T07:23:44.217Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj43), "2022-02-22T07:23:44.217Z");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 23 + "'", int49 == 23);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test07488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07488");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.Period period4 = period2.withDays((int) (byte) 1);
        org.joda.time.Period period6 = period2.withMonths(26148);
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod9.clear();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration16 = duration12.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(15);
        org.joda.time.Interval interval21 = duration16.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        mutablePeriod9.setPeriod((org.joda.time.ReadableInterval) interval21);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        org.joda.time.DurationFieldType durationFieldType28 = periodType25.getFieldType((int) (short) 0);
        int int29 = mutablePeriod9.get(durationFieldType28);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime32.copy();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime32.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration31, (org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        org.joda.time.LocalTime localTime43 = org.joda.time.LocalTime.now(chronology41);
        org.joda.time.DurationField durationField44 = chronology41.eras();
        mutablePeriod9.setPeriod((org.joda.time.ReadableDuration) duration31, chronology41);
        org.joda.time.Period period54 = new org.joda.time.Period(1439, 26157, 26182, 36985848, 62188, 36988464, 0, 36956320);
        mutablePeriod9.setPeriod((org.joda.time.ReadablePeriod) period54);
        org.joda.time.Period period56 = period2.minus((org.joda.time.ReadablePeriod) period54);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(interval21);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(localTime43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(period56);
    }

    @Test
    public void test07489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07489");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) 26494006);
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant2.toMutableDateTime();
        org.joda.time.Instant instant5 = instant2.plus(232051062L);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.yearOfCentury();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration18 = duration11.minus((org.joda.time.ReadableDuration) duration17);
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration11);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusMillis((int) (byte) 0);
        int int31 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.Chronology chronology32 = localDateTime25.getChronology();
        boolean boolean33 = duration11.equals((java.lang.Object) chronology32);
        long long34 = duration11.getStandardHours();
        org.joda.time.Instant instant35 = instant2.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime1.minus((org.joda.time.ReadableDuration) duration11);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 24L + "'", long34 == 24L);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(localDateTime36);
    }

    @Test
    public void test07490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07490");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks(44);
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded((-1L), 36946953);
        int int15 = dateTime11.getHourOfDay();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime17 = instant16.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        mutableDateTime18.add((long) 'a');
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.yearOfCentury();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration30 = duration23.minus((org.joda.time.ReadableDuration) duration29);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration23);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime18.centuryOfEra();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        int int35 = dateTime34.getYearOfCentury();
        org.joda.time.DateTime dateTime37 = dateTime34.withSecondOfMinute(53);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration45 = duration42.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration46 = duration39.minus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(readableInstant47, readableInstant48, periodType49);
        org.joda.time.DurationFieldType durationFieldType52 = periodType49.getFieldType((int) (short) 0);
        java.lang.String str53 = periodType49.toString();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableDuration) duration39, periodType49);
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration39);
        mutableDateTime18.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime18.weekOfWeekyear();
        boolean boolean59 = instant16.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj61 = mutableDateTime60.clone();
        mutableDateTime60.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime60.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime66 = property64.add(1L);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone68 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.UTC;
        long long71 = dateTimeZone67.getMillisKeepLocal(dateTimeZone69, (long) 44);
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(dateTimeZone67);
        mutableDateTime66.setZoneRetainFields(dateTimeZone67);
        mutableDateTime66.addSeconds((int) (short) 10);
        java.lang.Object obj76 = mutableDateTime66.clone();
        org.joda.time.MutableDateTime.Property property77 = mutableDateTime66.era();
        boolean boolean78 = mutableDateTime18.isEqual((org.joda.time.ReadableInstant) mutableDateTime66);
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 7 + "'", int15 == 7);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 22 + "'", int35 == 22);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PeriodType[YearDayTime]" + "'", str53, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(obj61);
// flaky:         org.junit.Assert.assertEquals(obj61.toString(), "2022-02-22T07:23:44.337Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj61), "2022-02-22T07:23:44.337Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj61), "2022-02-22T07:23:44.337Z");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 44L + "'", long71 == 44L);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
    }

    @Test
    public void test07491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07491");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.Chronology chronology13 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withDefaultYear(999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withDefaultYear((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = dateTimeFormatter17.parseLocalDateTime("2022-02-22T10:17:06.131");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test07492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07492");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone11);
        java.util.TimeZone timeZone16 = dateTimeZone11.toTimeZone();
        timeZone16.setRawOffset(26196);
        java.util.TimeZone timeZone19 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId20 = timeZone19.toZoneId();
        java.util.TimeZone timeZone21 = java.util.TimeZone.getTimeZone(zoneId20);
        boolean boolean22 = timeZone16.hasSameRules(timeZone21);
        java.lang.String str23 = timeZone21.getID();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(zoneId20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "GMT" + "'", str23, "GMT");
    }

    @Test
    public void test07493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07493");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        int int17 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property19 = dateTime15.yearOfEra();
        org.joda.time.DateTime dateTime20 = property19.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime21 = property19.roundHalfEvenCopy();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours24 = duration23.toStandardHours();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime26);
        mutablePeriod28.addSeconds(292278993);
        mutablePeriod28.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime34 = dateTime21.minus((org.joda.time.ReadablePeriod) mutablePeriod28);
        org.joda.time.DateTime.Property property35 = dateTime34.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now();
        mutableDateTime36.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime36.copy();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime36.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime41 = property40.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime43 = property40.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime43.toMutableDateTime(dateTimeZone44);
        int int48 = dateTimeZone44.getStandardOffset(60000L);
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder51 = builder50.clear();
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.lang.String str53 = locale52.getDisplayName();
        java.lang.String str54 = locale52.getISO3Language();
        java.util.Locale.Builder builder55 = builder51.setLocale(locale52);
        java.lang.String str56 = dateTimeZone44.getName(950707L, locale52);
        org.joda.time.DateTime dateTime57 = dateTime34.toDateTime(dateTimeZone44);
        org.joda.time.DateTime.Property property58 = dateTime57.dayOfYear();
        java.lang.String str60 = dateTime57.toString("1910");
        mutableDateTime0.setTime((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime63 = dateTime57.withWeekyear(0);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(hours24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 44 + "'", int27 == 44);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str53, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "deu" + "'", str54, "deu");
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "1910" + "'", str60, "1910");
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test07494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07494");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        int int4 = localTime3.getMinuteOfHour();
        java.lang.String str6 = localTime3.toString("1");
        org.joda.time.LocalTime localTime8 = localTime3.minusMinutes(15);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 15);
        org.joda.time.DateTime.Property property15 = dateTime10.year();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime();
        org.joda.time.LocalTime localTime19 = dateTime16.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime3.withFields((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime22 = localTime19.minus(readablePeriod21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str24 = dateTimeFieldType23.getName();
        int int25 = localTime22.get(dateTimeFieldType23);
        int int26 = localTime22.getMillisOfSecond();
        org.joda.time.Chronology chronology27 = localTime22.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.days();
        long long31 = durationField28.add((long) 26269, 62555);
        boolean boolean32 = durationField28.isPrecise();
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 23 + "'", int4 == 23);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "clockhourOfDay" + "'", str24, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 24 + "'", int25 == 24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 5404752026269L + "'", long31 == 5404752026269L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
    }

    @Test
    public void test07495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07495");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 44);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        java.util.TimeZone timeZone14 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration31 = duration28.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean32 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Minutes minutes33 = duration26.toStandardMinutes();
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration26);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime((long) (short) 100, chronology36);
        int int38 = localTime37.getMillisOfDay();
        org.joda.time.LocalTime.Property property39 = localTime37.millisOfSecond();
        org.joda.time.DurationField durationField40 = property39.getLeapDurationField();
        org.joda.time.LocalTime localTime41 = property39.roundHalfCeilingCopy();
        java.util.Locale locale42 = java.util.Locale.getDefault();
        java.util.Locale locale43 = locale42.stripExtensions();
        java.lang.String str44 = property39.getAsText(locale43);
        boolean boolean45 = duration26.equals((java.lang.Object) locale43);
        java.lang.String str46 = locale43.toLanguageTag();
        java.lang.String str47 = locale43.getDisplayScript();
        java.lang.String str48 = dateTimeZone7.getShortName((long) 949, locale43);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:23:44.611Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:23:44.611Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:23:44.611Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 44L + "'", long11 == 44L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\uc138\uacc4\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(minutes33);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 100 + "'", int38 == 100);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNull(durationField40);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "100" + "'", str44, "100");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "zh-CN" + "'", str46, "zh-CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
    }

    @Test
    public void test07496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07496");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        int int8 = mutableDateTime7.getCenturyOfEra();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int15 = localDateTime13.get(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusMinutes(7);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period23 = period21.minusSeconds((-1));
        org.joda.time.Period period25 = period23.multipliedBy((int) '#');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime13.minus((org.joda.time.ReadablePeriod) period25);
        org.joda.time.Period period28 = period25.withWeeks(7);
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(999, 12, 8, (int) (byte) 10, 5, (-292275054), 15, 50);
        org.joda.time.Period period38 = period28.withFields((org.joda.time.ReadablePeriod) mutablePeriod37);
        mutableDateTime7.add((org.joda.time.ReadablePeriod) mutablePeriod37);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str44 = duration43.toString();
        boolean boolean45 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration51 = duration47.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration56 = duration53.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean57 = duration51.isLongerThan((org.joda.time.ReadableDuration) duration53);
        boolean boolean58 = duration43.isEqual((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period63 = duration62.toPeriod();
        org.joda.time.Duration duration64 = duration60.minus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration65 = duration43.minus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Hours hours66 = duration43.toStandardHours();
        org.joda.time.Duration duration68 = new org.joda.time.Duration((long) 26158);
        org.joda.time.Duration duration69 = duration68.toDuration();
        int int70 = duration43.compareTo((org.joda.time.ReadableDuration) duration68);
        boolean boolean71 = mutablePeriod37.equals((java.lang.Object) duration43);
        mutablePeriod37.setMonths(26360);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1439 + "'", int15 == 1439);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PT86400S" + "'", str44, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(hours66);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test07497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07497");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.yearOfCentury();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration21 = duration14.minus((org.joda.time.ReadableDuration) duration20);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime9.centuryOfEra();
        mutableDateTime9.addYears(0);
        mutableDateTime9.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant37 = instant30.plus((org.joda.time.ReadableDuration) duration36);
        long long38 = instant37.getMillis();
        org.joda.time.Duration duration39 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime9, (org.joda.time.ReadableInstant) instant37);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration39, 999);
        mutableDateTime8.setSecondOfMinute(24);
        java.lang.String str44 = mutableDateTime8.toString();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime8.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.roundHalfCeiling();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.yearOfEra();
        mutableDateTime46.addDays(62172);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.weekOfWeekyear();
        org.joda.time.Instant instant52 = new org.joda.time.Instant((long) 26222789);
        long long53 = instant52.getMillis();
        org.joda.time.MutableDateTime mutableDateTime54 = instant52.toMutableDateTimeISO();
        org.joda.time.Instant instant56 = new org.joda.time.Instant((java.lang.Object) 0L);
        org.joda.time.DateTime dateTime57 = instant56.toDateTime();
        org.joda.time.LocalDate localDate58 = dateTime57.toLocalDate();
        org.joda.time.DateTimeZone dateTimeZone59 = dateTime57.getZone();
        mutableDateTime54.setZoneRetainFields(dateTimeZone59);
        mutableDateTime46.setZone(dateTimeZone59);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 86400000L + "'", long38 == 86400000L);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "-50070-09-17T11:34:24.773Z" + "'", str44, "-50070-09-17T11:34:24.773Z");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 26222789L + "'", long53 == 26222789L);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
    }

    @Test
    public void test07498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07498");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant24 = instant17.plus((org.joda.time.ReadableDuration) duration23);
        long long25 = instant24.getMillis();
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.months();
        org.joda.time.Period period28 = new org.joda.time.Period((-205878993L), chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology26.getZone();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime0, chronology26);
        org.joda.time.LocalTime localTime33 = localTime31.withMillisOfDay((int) (short) 100);
        org.joda.time.Chronology chronology35 = null;
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.lang.String str38 = locale36.getDisplayVariant(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket39 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology35, locale37);
        java.lang.Object obj40 = dateTimeParserBucket39.saveState();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalTime localTime43 = new org.joda.time.LocalTime((long) (short) 100, chronology42);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str45 = durationFieldType44.getName();
        boolean boolean46 = localTime43.isSupported(durationFieldType44);
        boolean boolean47 = dateTimeParserBucket39.restoreState((java.lang.Object) boolean46);
        org.joda.time.Chronology chronology48 = dateTimeParserBucket39.getChronology();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime52 = dateTime50.withZoneRetainFields(dateTimeZone51);
        dateTimeParserBucket39.setZone(dateTimeZone51);
        long long54 = dateTimeParserBucket39.computeMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.dayOfWeek();
        dateTimeParserBucket39.saveField(dateTimeFieldType55, (int) (short) -1);
        dateTimeParserBucket39.setPivotYear((java.lang.Integer) 26177);
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        java.util.Locale locale62 = null;
        dateTimeParserBucket39.saveField(dateTimeFieldType60, "PT0S", locale62);
        org.joda.time.LocalTime.Property property64 = localTime31.property(dateTimeFieldType60);
        org.joda.time.DateTime dateTime65 = localTime31.toDateTimeToday();
        org.joda.time.Chronology chronology66 = localTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField67 = chronology66.hourOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(obj40);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "weeks" + "'", str45, "weeks");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 97L + "'", long54 == 97L);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(dateTimeField67);
    }

    @Test
    public void test07499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07499");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = property14.roundHalfEvenCopy();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours19 = duration18.toStandardHours();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime21);
        mutablePeriod23.addSeconds(292278993);
        mutablePeriod23.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime29 = dateTime16.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTime dateTime32 = dateTime16.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean43 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration44 = duration34.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration49 = duration46.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean50 = duration37.equals((java.lang.Object) duration46);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.eras();
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.now(chronology56);
        org.joda.time.Period period59 = duration37.toPeriod(periodType52, chronology56);
        org.joda.time.DurationFieldType durationFieldType61 = period59.getFieldType(1);
        mutableDateTime8.add(durationFieldType61, 61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime8.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone65 = mutableDateTime8.getZone();
        int int66 = mutableDateTime8.getMillisOfSecond();
        int int67 = mutableDateTime8.getDayOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "53" + "'", str6, "53");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(hours19);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 44 + "'", int22 == 44);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeZone65);
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 841 + "'", int66 == 841);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 81 + "'", int67 == 81);
    }

    @Test
    public void test07500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest14.test07500");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(15);
        org.joda.time.Chronology chronology6 = dateTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1440L, chronology6);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.Chronology chronology10 = chronology6.withUTC();
        java.util.Locale.Category category11 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale12 = java.util.Locale.getDefault(category11);
        java.util.Locale locale13 = java.util.Locale.getDefault(category11);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayScript(locale14);
        java.util.Locale.Category category16 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale17 = java.util.Locale.getDefault(category16);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = duration21.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableDuration) duration25);
        java.util.Locale locale27 = java.util.Locale.UK;
        java.util.Calendar calendar28 = dateTime19.toCalendar(locale27);
        java.lang.Object obj29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(obj29);
        org.joda.time.LocalDateTime localDateTime31 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField37 = localDateTime35.getField((int) (byte) 0);
        long long39 = dateTimeField37.roundHalfEven((long) 1);
        int int40 = dateTime30.get(dateTimeField37);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withCenturyOfEra((int) 'a');
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getDisplayName();
        java.lang.String str51 = dateTimeField37.getAsText((org.joda.time.ReadablePartial) localDateTime45, 53, locale49);
        java.lang.String str53 = dateTimeField37.getAsShortText((long) (byte) 100);
        long long55 = dateTimeField37.roundHalfEven((long) '4');
        java.util.Locale locale57 = java.util.Locale.getDefault();
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField64 = localDateTime62.getField((int) (byte) 0);
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.lang.String str67 = dateTimeField64.getAsShortText((long) '4', locale66);
        java.lang.String str68 = locale66.getVariant();
        java.lang.String str69 = locale57.getDisplayScript(locale66);
        java.lang.String str70 = dateTimeField37.getAsShortText((int) (short) 1, locale57);
        java.lang.String str71 = locale27.getDisplayLanguage(locale57);
        java.util.Locale.setDefault(locale27);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(readableInstant76, readableInstant77, periodType78);
        org.joda.time.DurationFieldType durationFieldType81 = periodType78.getFieldType((int) (short) 0);
        java.lang.String str82 = periodType78.toString();
        org.joda.time.Instant instant83 = new org.joda.time.Instant();
        org.joda.time.Instant instant85 = instant83.withMillis(0L);
        org.joda.time.Chronology chronology86 = instant85.getChronology();
        org.joda.time.Period period87 = new org.joda.time.Period((long) 53, (long) (-1), periodType78, chronology86);
        org.joda.time.DateTimeField dateTimeField88 = dateTimeFieldType73.getField(chronology86);
        java.util.Locale locale89 = java.util.Locale.UK;
        java.lang.String str90 = locale89.getDisplayLanguage();
        int int91 = dateTimeField88.getMaximumTextLength(locale89);
        java.lang.String str92 = locale27.getDisplayCountry(locale89);
        java.util.Locale.setDefault(category16, locale89);
        java.util.Locale locale94 = java.util.Locale.getDefault(category16);
        java.lang.String str95 = locale14.getDisplayLanguage(locale94);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket96 = new org.joda.time.format.DateTimeParserBucket(987048L, chronology6, locale94);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category11.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale12);
// flaky:         org.junit.Assert.assertEquals(locale12.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + category16 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category16.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale17);
// flaky:         org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_GB");
        org.junit.Assert.assertNotNull(calendar28);
        org.junit.Assert.assertEquals(calendar28.toString(), "java.util.GregorianCalendar[time=1,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=1,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 2022 + "'", int40 == 2022);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\ub3c5\uc77c\uc5b4" + "'", str50, "\ub3c5\uc77c\uc5b4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "53" + "'", str51, "53");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970" + "'", str53, "1970");
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970" + "'", str67, "1970");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1" + "'", str70, "1");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\u82f1\u6587" + "'", str71, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "PeriodType[YearDayTime]" + "'", str82, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField88);
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "English" + "'", str90, "English");
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 4 + "'", int91 == 4);
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "United Kingdom" + "'", str92, "United Kingdom");
        org.junit.Assert.assertNotNull(locale94);
        org.junit.Assert.assertEquals(locale94.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "Korean" + "'", str95, "Korean");
    }
}

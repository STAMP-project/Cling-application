import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest10 {

    public static boolean debug = false;

    @Test
    public void test05001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05001");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime12.withChronology(chronology19);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.getMutableDateTime();
        boolean boolean28 = dateTime24.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.setHourOfDay(0);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.weekyear();
        int int33 = mutableDateTime27.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime27.dayOfYear();
        boolean boolean35 = mutableDateTime27.isAfterNow();
        org.joda.time.Period period38 = new org.joda.time.Period(27425236L, 26171014L);
        mutableDateTime27.add((org.joda.time.ReadablePeriod) period38, (int) (byte) 10);
        mutableDateTime27.setMillisOfDay(138);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime27.setWeekOfWeekyear(37842);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37842 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
// flaky:         org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test05002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05002");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime2.copy();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime2.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime9 = property6.add((long) (byte) 10);
        int int10 = mutableDateTime9.getCenturyOfEra();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int17 = localDateTime15.get(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusMinutes(7);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period25 = period23.minusSeconds((-1));
        org.joda.time.Period period27 = period25.multipliedBy((int) '#');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime15.minus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period30 = period27.withWeeks(7);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(999, 12, 8, (int) (byte) 10, 5, (-292275054), 15, 50);
        org.joda.time.Period period40 = period30.withFields((org.joda.time.ReadablePeriod) mutablePeriod39);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.PeriodType periodType42 = mutablePeriod39.getPeriodType();
        org.joda.time.PeriodType periodType43 = periodType42.withWeeksRemoved();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.hourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str51 = dateTimeFieldType50.getName();
        int int52 = localDateTime44.indexOf(dateTimeFieldType50);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime44.minusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.plusMillis(10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime54.minusWeeks(21);
        org.joda.time.LocalDateTime.Property property59 = localDateTime54.millisOfDay();
        org.joda.time.LocalDateTime localDateTime60 = property59.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withYearOfEra(55);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime60.minusMinutes(2122);
        org.joda.time.Chronology chronology65 = localDateTime60.getChronology();
        org.joda.time.Period period66 = new org.joda.time.Period(1109678L, (long) 26263180, periodType42, chronology65);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1439 + "'", int17 == 1439);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "clockhourOfDay" + "'", str51, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(chronology65);
    }

    @Test
    public void test05003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05003");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet2 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet3 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet4 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet5 = provider0.getAvailableIDs();
        java.util.Set<java.lang.String> strSet6 = provider0.getAvailableIDs();
        org.joda.time.DateTimeZone dateTimeZone8 = provider0.getZone("2022-02-22T10:16:18.754");
        org.joda.time.DateTimeZone.setProvider(provider0);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(dateTimeZone8);
    }

    @Test
    public void test05004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05004");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.addSeconds(0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours25 = duration24.toStandardHours();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.months();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime42 = dateTime16.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime44 = dateTime16.minusYears(29);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime48 = property46.set(45);
        org.joda.time.MutableDateTime mutableDateTime49 = property46.roundFloor();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusMinutes(15);
        org.joda.time.DateTime dateTime61 = localDateTime54.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime63 = localDateTime54.toDateTime(dateTimeZone62);
        org.joda.time.DateTime.Property property64 = dateTime63.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField65 = property64.getField();
        mutableDateTime49.setRounding(dateTimeField65);
        boolean boolean67 = dateTime44.isBefore((org.joda.time.ReadableInstant) mutableDateTime49);
        mutableDateTime49.setSecondOfDay(365);
        org.joda.time.LocalDateTime localDateTime70 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property75 = localDateTime74.dayOfMonth();
        org.joda.time.LocalDateTime.Property property76 = localDateTime74.weekyear();
        org.joda.time.LocalDateTime localDateTime77 = property76.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime78 = property76.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str80 = dateTimeFieldType79.getName();
        int int81 = localDateTime78.get(dateTimeFieldType79);
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime49.property(dateTimeFieldType79);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(hours25);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 6 + "'", int28 == 6);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "millisOfSecond" + "'", str80, "millisOfSecond");
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 0 + "'", int81 == 0);
        org.junit.Assert.assertNotNull(property82);
    }

    @Test
    public void test05005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05005");
        java.lang.Object obj0 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getYearOfCentury();
        int int5 = dateTime3.getWeekyear();
        org.joda.time.DateTime dateTime7 = dateTime3.plus((long) 15);
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime10 = dateTime7.withCenturyOfEra((int) '#');
        org.joda.time.DateTime dateTime12 = dateTime7.withYear((int) 'u');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(15);
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.hours();
        org.joda.time.DurationField durationField19 = chronology17.years();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime(chronology17);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(1645514319427L, chronology17);
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj0, chronology17);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 2022 + "'", int5 == 2022);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test05006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05006");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.getMillisKeepLocal(dateTimeZone2, (long) 44);
        boolean boolean6 = dateTimeZone2.isStandardOffset((long) (-1));
        java.lang.String str7 = dateTimeZone2.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime8.setSecondOfMinute(41);
        java.util.GregorianCalendar gregorianCalendar11 = mutableDateTime8.toGregorianCalendar();
        int int12 = mutableDateTime8.getRoundingMode();
        mutableDateTime8.setMillisOfDay(0);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(gregorianCalendar11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
    }

    @Test
    public void test05007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05007");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale5.getScript();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet7);
        java.util.Locale locale9 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet10 = locale9.getUnicodeLocaleKeys();
        java.lang.Object[] objArray11 = strSet10.toArray();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getDisplayName();
        java.lang.String str17 = dateTimeZone13.getName(100L, locale15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(948227L, dateTimeZone13);
        long long19 = mutableDateTime18.getMillis();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration26 = duration23.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean27 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration26);
        java.lang.Object obj28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(obj28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField36 = localDateTime34.getField((int) (byte) 0);
        long long38 = dateTimeField36.roundHalfEven((long) 1);
        int int39 = dateTime29.get(dateTimeField36);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withCenturyOfEra((int) 'a');
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale48.getDisplayName();
        java.lang.String str50 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime44, 53, locale48);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period53 = duration52.toPeriod();
        org.joda.time.Duration duration56 = duration52.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime44.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.hourOfDay();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusMillis((int) (byte) 0);
        int int64 = localDateTime44.compareTo((org.joda.time.ReadablePartial) localDateTime58);
        boolean boolean65 = duration21.equals((java.lang.Object) int64);
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        int int68 = dateTime67.getSecondOfMinute();
        int int69 = dateTime67.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(readableInstant70, readableInstant71, periodType72);
        mutablePeriod73.setYears((int) '#');
        mutablePeriod73.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime78 = dateTime67.plus((org.joda.time.ReadablePeriod) mutablePeriod73);
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime18, (org.joda.time.ReadableDuration) duration21);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime.Property property83 = dateTime82.millisOfSecond();
        org.joda.time.DateTime dateTime84 = dateTime82.toDateTime();
        int int85 = dateTime82.getMinuteOfDay();
        org.joda.time.Interval interval86 = duration21.toIntervalTo((org.joda.time.ReadableInstant) dateTime82);
        boolean boolean87 = strSet10.contains((java.lang.Object) duration21);
        java.lang.String str88 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet10);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str8);
        org.junit.Assert.assertNotNull(locale9);
// flaky:         org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertNotNull(objArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray11), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray11), "[]");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "German" + "'", str16, "German");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 948227L + "'", long19 == 948227L);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "German" + "'", str49, "German");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "53" + "'", str50, "53");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 6 + "'", int68 == 6);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 2022 + "'", int69 == 2022);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertNotNull(interval86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNull(str88);
    }

    @Test
    public void test05008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05008");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        mutableDateTime1.addMonths(36956320);
        mutableDateTime1.setDayOfYear(49);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        int int22 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime24 = dateTime21.minusWeeks(44);
        org.joda.time.DateTime dateTime27 = dateTime24.withDurationAdded((-1L), 36946953);
        org.joda.time.YearMonthDay yearMonthDay28 = dateTime27.toYearMonthDay();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean45 = duration39.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Minutes minutes46 = duration39.toStandardMinutes();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.PeriodType periodType51 = period50.getPeriodType();
        org.joda.time.Period period52 = period47.withPeriodType(periodType51);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime27, periodType51);
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property55 = localDate54.monthOfYear();
        org.joda.time.DateTimeField dateTimeField56 = property55.getField();
        org.joda.time.LocalDate localDate57 = property55.roundCeilingCopy();
        org.joda.time.Chronology chronology58 = localDate57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.months();
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime1.toMutableDateTime(chronology58);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime60.weekOfWeekyear();
        mutableDateTime60.addMonths(26417);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(yearMonthDay28);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(minutes46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(localDate57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property61);
    }

    @Test
    public void test05009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05009");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        int int5 = mutableDateTime1.getWeekyear();
        boolean boolean6 = mutableDateTime1.isBeforeNow();
        int int7 = mutableDateTime1.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.minuteOfHour();
        org.joda.time.DurationField durationField10 = property9.getDurationField();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1970 + "'", int5 == 1970);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 69 + "'", int7 == 69);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(durationField10);
    }

    @Test
    public void test05010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05010");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        mutableDateTime1.addMonths(36956320);
        mutableDateTime1.addWeekyears(26195);
        mutableDateTime1.setMillisOfDay(57);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.add(1696508);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test05011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05011");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.withDayOfMonth(20);
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = dateTimeZone14.getName(100L, locale16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(948227L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.year();
        mutableDateTime19.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant26, readableInstant27, periodType28);
        org.joda.time.DurationFieldType durationFieldType31 = periodType28.getFieldType((int) (short) 0);
        java.lang.String str32 = periodType28.toString();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 53, (long) (-1), periodType28, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType23.getField(chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(15);
        org.joda.time.Chronology chronology43 = dateTime40.getChronology();
        java.lang.String str44 = chronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType23.getField(chronology43);
        org.joda.time.DurationField durationField46 = chronology43.centuries();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.millisOfDay();
        mutableDateTime19.setChronology(chronology43);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime11.toMutableDateTime(chronology43);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime51.setSecondOfMinute(53);
        mutableDateTime51.setMillis(966164L);
        mutableDateTime49.setMillis((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        long long61 = dateTimeZone59.convertUTCToLocal((long) 52);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime51, dateTimeZone59);
        org.joda.time.Instant instant63 = dateTime62.toInstant();
        org.joda.time.DateTime dateTime65 = dateTime62.plusMinutes(1970);
        boolean boolean66 = dateTime62.isEqualNow();
        org.joda.time.DateTime dateTime68 = dateTime62.withYearOfCentury(39);
        int int69 = dateTime62.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "German" + "'", str17, "German");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PeriodType[YearDayTime]" + "'", str32, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 190800052L + "'", long61 == 190800052L);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1970 + "'", int69 == 1970);
    }

    @Test
    public void test05012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05012");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        int int5 = dateTime1.getHourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime1.plus(960800L);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str9 = dateTimeFieldType8.getName();
        int int10 = dateTime1.get(dateTimeFieldType8);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType16);
        org.joda.time.DurationFieldType durationFieldType19 = periodType16.getFieldType((int) (short) 0);
        java.lang.String str20 = periodType16.toString();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 53, (long) (-1), periodType16, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        java.lang.String str32 = chronology31.toString();
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType11.getField(chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime1, chronology31);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        mutableDateTime35.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime35.copy();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime35.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime40 = property39.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime41 = property39.roundHalfCeiling();
        org.joda.time.DateTimeField dateTimeField42 = mutableDateTime41.getRoundingField();
        mutableDateTime41.setWeekyear((int) 'a');
        org.joda.time.Duration duration45 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableInstant) mutableDateTime41);
        mutableDateTime41.addYears(1326);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 6 + "'", int2 == 6);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "secondOfDay" + "'", str9, "secondOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 26526 + "'", int10 == 26526);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PeriodType[YearDayTime]" + "'", str20, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ISOChronology[UTC]" + "'", str32, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNull(dateTimeField42);
    }

    @Test
    public void test05013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05013");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        int int20 = mutableDateTime0.getWeekyear();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.LocalDate localDate24 = property22.roundCeilingCopy();
        org.joda.time.LocalDate localDate26 = localDate24.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight29 = localDate26.toDateMidnight(dateTimeZone27);
        mutableDateTime0.setZoneRetainFields(dateTimeZone27);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone27);
        org.joda.time.DateTimeField[] dateTimeFieldArray32 = localDate31.getFields();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTimeFieldArray32);
    }

    @Test
    public void test05014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05014");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = localDateTime9.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        mutableDateTime4.setRounding(dateTimeField20);
        java.lang.Object obj22 = mutableDateTime4.clone();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setWeekOfWeekyear(62357);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62357 for weekOfWeekyear must be in the range [1,53]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "4500-01-01T00:00:00.000Z");
    }

    @Test
    public void test05015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05015");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths(0);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMonths(62166);
        org.joda.time.Instant instant21 = dateTime18.toInstant();
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime23.copy();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundCeiling();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardMinutes(1645514161062L);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.DurationFieldType durationFieldType40 = periodType37.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType41 = periodType37.withMillisRemoved();
        org.joda.time.Period period42 = new org.joda.time.Period(44L, (long) 2000, periodType37);
        org.joda.time.PeriodType periodType43 = periodType37.withMinutesRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withHoursRemoved();
        org.joda.time.Period period45 = new org.joda.time.Period((long) 36, 1645514179482L, periodType44);
        org.joda.time.PeriodType periodType46 = periodType44.withMillisRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime28, (org.joda.time.ReadableDuration) duration30, periodType46);
        org.joda.time.Instant instant48 = instant21.plus((org.joda.time.ReadableDuration) duration30);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(instant48);
    }

    @Test
    public void test05016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05016");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(dateTimeZone11);
        org.joda.time.LocalDate.Property property16 = localDate15.dayOfMonth();
        org.joda.time.LocalDate localDate17 = property16.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test05017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05017");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableDuration2, readableInstant3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.Period period10 = period8.minusSeconds((-1));
        java.lang.String str11 = period8.toString();
        org.joda.time.Period period12 = period8.toPeriod();
        org.joda.time.PeriodType periodType13 = period8.getPeriodType();
        org.joda.time.Period period14 = period4.normalizedStandard(periodType13);
        java.lang.String str15 = periodType13.getName();
        org.joda.time.PeriodType periodType16 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withSecondsRemoved();
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.eras();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.clockhourOfHalfday();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.Period period28 = new org.joda.time.Period((long) 55, periodType16, chronology21);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        org.joda.time.DurationFieldType durationFieldType37 = periodType34.getFieldType((int) (short) 0);
        java.lang.String str38 = periodType34.toString();
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.Period period43 = new org.joda.time.Period((long) 53, (long) (-1), periodType34, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType29.getField(chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(3600000L, periodType16, chronology42);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime47.monthOfYear();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime47.minuteOfDay();
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT0.099S" + "'", str11, "PT0.099S");
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Standard" + "'", str15, "Standard");
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PeriodType[YearDayTime]" + "'", str38, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test05018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05018");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property2.addWrapField(52);
        org.joda.time.DateTimeField dateTimeField7 = property2.getField();
        java.lang.String str8 = property2.getName();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "dayOfWeek" + "'", str8, "dayOfWeek");
    }

    @Test
    public void test05019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05019");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        java.lang.String str5 = property4.getAsText();
        int int6 = property4.getMaximumValue();
        org.joda.time.LocalDate localDate7 = property4.withMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.PeriodType periodType13 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(readableInstant11, readableInstant12, periodType13);
        org.joda.time.DurationFieldType durationFieldType16 = periodType13.getFieldType((int) (short) 0);
        java.lang.String str17 = periodType13.toString();
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.Period period22 = new org.joda.time.Period((long) 53, (long) (-1), periodType13, chronology21);
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType8.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (short) 100, chronology27);
        int int29 = localTime28.getMillisOfDay();
        org.joda.time.LocalTime.Property property30 = localTime28.millisOfSecond();
        org.joda.time.DurationField durationField31 = property30.getLeapDurationField();
        org.joda.time.LocalTime localTime32 = property30.roundHalfEvenCopy();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration41 = duration37.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant42 = instant35.plus((org.joda.time.ReadableDuration) duration41);
        long long43 = instant42.getMillis();
        org.joda.time.Chronology chronology44 = instant42.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        mutableDateTime45.add((long) 'a');
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str52 = duration51.toString();
        boolean boolean53 = duration49.isShorterThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Hours hours54 = duration49.toStandardHours();
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration49, 20);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        int int59 = dateTime58.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = null;
        java.lang.String str61 = dateTime58.toString(dateTimeFormatter60);
        org.joda.time.DateTime dateTime63 = dateTime58.minusMonths(22);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Chronology chronology67 = instant66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.eras();
        org.joda.time.DateTime dateTime69 = dateTime58.withChronology(chronology67);
        org.joda.time.Period period70 = duration49.toPeriod(chronology67);
        org.joda.time.Instant instant72 = instant42.withDurationAdded((org.joda.time.ReadableDuration) duration49, 16);
        boolean boolean73 = localTime32.equals((java.lang.Object) instant42);
        org.joda.time.Instant instant76 = instant42.withDurationAdded(3155695200000L, 44);
        org.joda.time.DateTimeZone dateTimeZone77 = instant42.getZone();
        java.lang.String str78 = dateTimeZone77.toString();
        org.joda.time.Chronology chronology79 = chronology21.withZone(dateTimeZone77);
        java.lang.String str81 = dateTimeZone77.getName(1640995200000L);
        java.lang.String str83 = dateTimeZone77.getNameKey(1056868L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime((java.lang.Object) property4, dateTimeZone77);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\u661f\u671f\u4e8c" + "'", str5, "\u661f\u671f\u4e8c");
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7 + "'", int6 == 7);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PeriodType[YearDayTime]" + "'", str17, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 100 + "'", int29 == 100);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNull(durationField31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 86400000L + "'", long43 == 86400000L);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT86400S" + "'", str52, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(hours54);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 22 + "'", int59 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "2022-02-22T07:22:07.210Z" + "'", str61, "2022-02-22T07:22:07.210Z");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "UTC" + "'", str78, "UTC");
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "+00:00" + "'", str81, "+00:00");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "UTC" + "'", str83, "UTC");
    }

    @Test
    public void test05020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05020");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.withMaximumValue();
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate.Property property5 = localDate3.dayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate3.withEra(0);
        org.joda.time.LocalDate localDate9 = localDate3.withCenturyOfEra(36);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.Instant instant12 = instant10.toInstant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant10.toMutableDateTime();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = instant14.toInstant();
        long long17 = instant16.getMillis();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getSecondOfMinute();
        boolean boolean21 = dateTime19.isEqualNow();
        int int22 = dateTime19.getDayOfYear();
        org.joda.time.DateTime dateTime24 = dateTime19.plusDays((int) '#');
        boolean boolean25 = instant16.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean26 = instant10.isAfter((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime27 = localDate3.toDateTime((org.joda.time.ReadableInstant) instant10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate29 = localDate3.withWeekOfWeekyear(2017);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2017 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(date4);
// flaky:         org.junit.Assert.assertEquals(date4.toString(), "Thu Dec 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1645514527274L + "'", long17 == 1645514527274L);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 7 + "'", int20 == 7);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test05021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05021");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.millisOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
    }

    @Test
    public void test05022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05022");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("2022-02-22T10:16:18.881");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        boolean boolean7 = dateTime5.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology8 = dateTime5.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.era();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property11 = localDate10.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean13 = localDate10.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate10.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime15.copy();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime15.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.copy();
        mutableDateTime21.setDate((long) '#');
        org.joda.time.LocalDate localDate27 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property28 = localDate27.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean30 = localDate27.isSupported(dateTimeFieldType29);
        int int31 = localDate27.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight33 = localDate27.toDateMidnight(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = mutableDateTime21.toDateTime(dateTimeZone32);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone32);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) 100, 1L, periodType38);
        org.joda.time.PeriodType periodType40 = period39.getPeriodType();
        boolean boolean41 = dateTimeZone32.equals((java.lang.Object) periodType40);
        mutableDateTime15.setZoneRetainFields(dateTimeZone32);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate(dateTimeZone32);
        org.joda.time.DateTime dateTime44 = localDate10.toDateTimeAtStartOfDay(dateTimeZone32);
        org.joda.time.DateTime dateTime45 = localDate10.toDateTimeAtStartOfDay();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField55 = chronology49.secondOfMinute();
        boolean boolean56 = dateTimeField55.isSupported();
        long long58 = dateTimeField55.roundHalfEven(946312L);
        java.util.Locale locale60 = java.util.Locale.GERMAN;
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.lang.String str62 = locale60.getDisplayVariant(locale61);
        java.lang.String str63 = dateTimeField55.getAsText(86400000L, locale61);
        java.util.Set<java.lang.String> strSet64 = locale61.getUnicodeLocaleAttributes();
        boolean boolean65 = locale61.hasExtensions();
        java.lang.String str66 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDate10, locale61);
        java.util.Set<java.lang.Character> charSet67 = locale61.getExtensionKeys();
        java.lang.String str68 = locale1.getDisplayName(locale61);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 53 + "'", int31 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 105144L + "'", long54 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 946000L + "'", long58 == 946000L);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "de");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "0" + "'", str63, "0");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "AD" + "'", str66, "AD");
        org.junit.Assert.assertNotNull(charSet67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
    }

    @Test
    public void test05023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05023");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.DateTimeField dateTimeField4 = property2.getField();
        org.joda.time.DateTimeField dateTimeField5 = property2.getField();
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(dateTimeZone6);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusMillis(10);
        int int10 = localDateTime7.getCenturyOfEra();
        org.joda.time.DateTimeField dateTimeField12 = localDateTime7.getField(0);
        int int13 = dateTimeField5.getMinimumValue((org.joda.time.ReadablePartial) localDateTime7);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = dateTime15.withZoneRetainFields(dateTimeZone16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime22 = localDate18.toDateTimeAtCurrentTime(dateTimeZone20);
        int int23 = dateTime17.compareTo((org.joda.time.ReadableInstant) dateTime22);
        java.util.Locale locale24 = null;
        java.util.Calendar calendar25 = dateTime22.toCalendar(locale24);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.fromCalendarFields(calendar25);
        org.joda.time.LocalDate.Property property27 = localDate26.era();
        java.util.Locale locale29 = java.util.Locale.getDefault();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField36 = localDateTime34.getField((int) (byte) 0);
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = dateTimeField36.getAsShortText((long) '4', locale38);
        java.lang.String str40 = locale38.getVariant();
        java.lang.String str41 = locale29.getDisplayScript(locale38);
        java.util.Locale locale42 = locale38.stripExtensions();
        java.lang.String str43 = locale42.getCountry();
        java.util.Locale locale44 = java.util.Locale.JAPANESE;
        boolean boolean45 = locale44.hasExtensions();
        java.lang.String str46 = locale42.getDisplayVariant(locale44);
        java.lang.String str47 = locale44.getISO3Language();
        java.lang.String str48 = locale44.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str49 = dateTimeField5.getAsText((org.joda.time.ReadablePartial) localDate26, 671, locale44);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 671");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(dateTimeField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(calendar25);
// flaky:         org.junit.Assert.assertEquals(calendar25.toString(), "java.util.GregorianCalendar[time=1645514527408,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=7,MILLISECOND=408,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale29);
// flaky:         org.junit.Assert.assertEquals(locale29.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970" + "'", str39, "1970");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "CA" + "'", str43, "CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "jpn" + "'", str47, "jpn");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ja" + "'", str48, "ja");
    }

    @Test
    public void test05024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05024");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        mutableDateTime3.add((long) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.yearOfCentury();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration15 = duration8.minus((org.joda.time.ReadableDuration) duration14);
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration8);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        mutableDateTime18.add((long) 'a');
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.yearOfCentury();
        mutableDateTime18.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period(readableDuration26, readableInstant27);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 1L, periodType31);
        org.joda.time.Period period34 = period32.minusSeconds((-1));
        java.lang.String str35 = period32.toString();
        org.joda.time.Period period36 = period32.toPeriod();
        org.joda.time.PeriodType periodType37 = period32.getPeriodType();
        org.joda.time.Period period38 = period28.normalizedStandard(periodType37);
        org.joda.time.DurationFieldType durationFieldType39 = null;
        int int40 = periodType37.indexOf(durationFieldType39);
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.Chronology chronology44 = instant43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.eras();
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(chronology44);
        org.joda.time.DurationField durationField47 = chronology44.eras();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType37, chronology44);
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime18.toMutableDateTime(chronology44);
        org.joda.time.DateTimeField dateTimeField51 = chronology44.clockhourOfHalfday();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) (short) 0, chronology44);
        mutableDateTime3.setChronology(chronology44);
        org.joda.time.Duration duration56 = new org.joda.time.Duration(960000L, 3155760000000L);
        mutableDateTime3.add((org.joda.time.ReadableDuration) duration56, 0);
        int int59 = property2.compareTo((org.joda.time.ReadableInstant) mutableDateTime3);
        mutableDateTime3.addMinutes(36950209);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PT0.099S" + "'", str35, "PT0.099S");
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-1) + "'", int40 == (-1));
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test05025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05025");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 44);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = builder16.build();
        java.lang.String str18 = dateTimeZone7.getName(555370422L, locale17);
        long long21 = dateTimeZone7.convertLocalToUTC((long) 24, true);
        java.lang.String str23 = dateTimeZone7.getNameKey((long) 26514);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:07.504Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:07.504Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:07.504Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 44L + "'", long11 == 44L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 24L + "'", long21 == 24L);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "UTC" + "'", str23, "UTC");
    }

    @Test
    public void test05026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05026");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.PeriodType periodType5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period((long) 100, 1L, periodType5);
        org.joda.time.Period period8 = period6.minusSeconds((-1));
        java.lang.String str9 = period6.toString();
        org.joda.time.Period period10 = period6.toPeriod();
        org.joda.time.PeriodType periodType11 = period6.getPeriodType();
        org.joda.time.Period period12 = period2.normalizedStandard(periodType11);
        java.lang.String str13 = periodType11.getName();
        java.lang.String str14 = periodType11.toString();
        org.joda.time.PeriodType periodType15 = periodType11.withDaysRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withDaysRemoved();
        org.joda.time.PeriodType periodType17 = periodType15.withDaysRemoved();
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT0.099S" + "'", str9, "PT0.099S");
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Standard" + "'", str13, "Standard");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PeriodType[Standard]" + "'", str14, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(periodType17);
    }

    @Test
    public void test05027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05027");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration4 = duration1.withDurationAdded((long) (short) 100, (int) ' ');
        long long5 = duration4.getMillis();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.months();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15, periodType16);
        boolean boolean18 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime13);
        int int19 = dateTime13.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime13, periodType22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime27.withChronology(chronology34);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.getMutableDateTime();
        boolean boolean43 = dateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.eras();
        long long52 = chronology47.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField53 = chronology47.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.minuteOfDay();
        mutableDateTime42.setChronology(chronology47);
        org.joda.time.DateTime dateTime56 = dateTime13.toDateTime(chronology47);
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.Period period59 = new org.joda.time.Period(readableDuration57, readableInstant58);
        org.joda.time.Period period61 = period59.withDays((int) (byte) 1);
        org.joda.time.Period period63 = period61.minusWeeks(100);
        org.joda.time.Period period65 = period61.plusWeeks((int) (short) -1);
        long long68 = chronology47.add((org.joda.time.ReadablePeriod) period65, 86403200L, 443);
        org.joda.time.Period period70 = period65.withMinutes(161);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.Duration duration72 = period65.toDurationTo(readableInstant71);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 86403200L + "'", long5 == 86403200L);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(instant33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 105144L + "'", long52 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(period65);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + (-229564796800L) + "'", long68 == (-229564796800L));
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(duration72);
    }

    @Test
    public void test05028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05028");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException4 = new java.io.IOException("");
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        boolean boolean6 = mutableDateTime2.equals((java.lang.Object) iOException4);
        org.joda.time.Duration duration9 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration9, 1424);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration19 = duration16.withDurationAdded((long) (short) 100, (int) ' ');
        long long20 = duration19.getMillis();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.months();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime30, periodType31);
        boolean boolean33 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        int int34 = dateTime28.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime28, periodType37);
        org.joda.time.Period period41 = new org.joda.time.Period(0L, 24L, periodType37);
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableInstant) mutableDateTime2, periodType37);
        boolean boolean44 = mutableDateTime2.isBefore(25200000L);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType46 = dateTimeFieldType45.getDurationType();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType45.getRangeDurationType();
        mutableDateTime2.add(durationFieldType47, 2017);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 86403200L + "'", long20 == 86403200L);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(durationFieldType46);
        org.junit.Assert.assertNotNull(durationFieldType47);
    }

    @Test
    public void test05029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05029");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.DateTime dateTime15 = localDateTime8.toDateTime((org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime17 = localDateTime8.toDateTime(dateTimeZone16);
        org.joda.time.DateTime.Property property18 = dateTime17.minuteOfHour();
        org.joda.time.DateTime dateTime19 = property18.roundFloorCopy();
        org.joda.time.DateTime dateTime21 = dateTime19.withDayOfYear(46);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        boolean boolean23 = dateTimeZone22.isFixed();
        org.joda.time.DateTime dateTime24 = dateTime19.withZone(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime0.toMutableDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getYearOfCentury();
        int int29 = dateTime27.getWeekyear();
        org.joda.time.DateTime dateTime31 = dateTime27.plus((long) 15);
        org.joda.time.DateTime.Property property32 = dateTime27.year();
        org.joda.time.DateTime dateTime33 = property32.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime35 = property32.addToCopy((long) 61);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardHours((-229564796800L));
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.DateTime dateTime40 = dateTime35.withWeekyear(0);
        boolean boolean41 = mutableDateTime25.isBefore((org.joda.time.ReadableInstant) dateTime40);
        mutableDateTime25.addMillis(26290);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test05030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05030");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.Chronology chronology14 = dateTimeFormatter3.getChronolgy();
        java.util.Locale locale15 = java.util.Locale.PRC;
        boolean boolean16 = locale15.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter3.withLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.parse("2022-02-22T07:16:55.984Z", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 105144L + "'", long12 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
    }

    @Test
    public void test05031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05031");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField22 = localDateTime20.getField((int) (byte) 0);
        long long24 = dateTimeField22.roundHalfEven((long) 1);
        int int25 = dateTime15.get(dateTimeField22);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) 'a');
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime30, 53, locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter3.withLocale(locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter3.withZoneUTC();
        org.joda.time.Chronology chronology39 = dateTimeFormatter3.getChronology();
        org.joda.time.Chronology chronology40 = dateTimeFormatter3.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.parse("00:00:00.001", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 105144L + "'", long12 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u5fb7\u6587" + "'", str35, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "53" + "'", str36, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNull(chronology39);
        org.junit.Assert.assertNull(chronology40);
    }

    @Test
    public void test05032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05032");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime12.withChronology(chronology19);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.getMutableDateTime();
        boolean boolean28 = dateTime24.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.setHourOfDay(0);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime10.addSeconds(18966);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test05033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05033");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        int int5 = mutableDateTime0.getMinuteOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMinutes(15);
        org.joda.time.Chronology chronology10 = dateTime7.getChronology();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.now(chronology14);
        org.joda.time.DurationField durationField17 = chronology14.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology14.hourOfDay();
        org.joda.time.DateTime dateTime19 = dateTime7.withChronology(chronology14);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime21 = dateTime19.toDateTimeISO();
        org.joda.time.DateTime dateTime22 = dateTime19.toDateTime();
        org.joda.time.DateTime.Property property23 = dateTime19.secondOfDay();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime0.millisOfDay();
        int int26 = property25.getMaximumValue();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:07.696Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:07.696Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:07.696Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1645514527696L + "'", long20 == 1645514527696L);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 86399999 + "'", int26 == 86399999);
    }

    @Test
    public void test05034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05034");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime1.plusMillis(9);
        org.joda.time.LocalTime localTime7 = localTime1.withMinuteOfHour(6);
        org.joda.time.LocalTime.Property property8 = localTime7.secondOfMinute();
        org.joda.time.LocalTime localTime10 = property8.addNoWrapToCopy(310);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test05035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05035");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZoneUTC();
        java.util.Locale locale14 = java.util.Locale.getDefault();
        java.util.Locale locale15 = locale14.stripExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withLocale(locale14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter2.withPivotYear(489);
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeFormatter2.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter2.withPivotYear((java.lang.Integer) 26176);
        java.lang.StringBuffer stringBuffer22 = null;
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(15);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfDay();
        org.joda.time.DateTime dateTime36 = dateTime24.withChronology(chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime39 = property38.getMutableDateTime();
        boolean boolean40 = dateTime36.isBefore((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.Chronology chronology44 = instant43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.eras();
        long long49 = chronology44.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField50 = chronology44.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.minuteOfDay();
        mutableDateTime39.setChronology(chronology44);
        mutableDateTime39.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(readableInstant55, readableInstant56, periodType57);
        mutablePeriod58.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod61 = mutablePeriod58.toMutablePeriod();
        mutableDateTime39.add((org.joda.time.ReadablePeriod) mutablePeriod61, 1439);
        mutableDateTime39.setSecondOfDay(100);
        int int66 = mutableDateTime39.getYear();
        mutableDateTime39.addHours(557);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter21.printTo(stringBuffer22, (org.joda.time.ReadableInstant) mutableDateTime39);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(locale14);
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 105144L + "'", long49 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(mutablePeriod61);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2227 + "'", int66 == 2227);
    }

    @Test
    public void test05036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05036");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        mutableDateTime6.setDate((long) '#');
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime6.toDateTime(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) periodType25);
        mutableDateTime0.setZoneRetainFields(dateTimeZone17);
        mutableDateTime0.setSecondOfMinute(48);
        int int30 = mutableDateTime0.getMillisOfSecond();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime0.millisOfSecond();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 831 + "'", int30 == 831);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test05037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05037");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime9 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        mutableDateTime10.addWeekyears((int) (byte) 1);
        int int16 = dateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.add(985937L);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        org.joda.time.DurationFieldType durationFieldType28 = periodType25.getFieldType((int) (short) 0);
        java.lang.String str29 = periodType25.toString();
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 53, (long) (-1), periodType25, chronology33);
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType20.getField(chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes(15);
        org.joda.time.Chronology chronology40 = dateTime37.getChronology();
        java.lang.String str41 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType20.getField(chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.dayOfYear();
        java.util.Locale locale44 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology40, locale44, (java.lang.Integer) 5);
        org.joda.time.DateTimeField dateTimeField47 = chronology40.dayOfYear();
        org.joda.time.DateTimeField dateTimeField48 = chronology40.weekyear();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime10, chronology40);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now(chronology40);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PeriodType[YearDayTime]" + "'", str29, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ISOChronology[UTC]" + "'", str41, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
    }

    @Test
    public void test05038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05038");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.secondOfDay();
        int int4 = mutableDateTime0.getDayOfWeek();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = duration9.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration13 = duration6.minus((org.joda.time.ReadableDuration) duration12);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration6, 19045);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.months();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime25, periodType26);
        boolean boolean28 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime23);
        int int29 = dateTime23.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        boolean boolean36 = property33.equals((java.lang.Object) 10L);
        long long37 = property33.remainder();
        java.lang.String str38 = property33.getAsText();
        org.joda.time.LocalDateTime localDateTime39 = property33.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property33.getFieldType();
        int int41 = dateTime23.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime42 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration43, readableInstant44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period51 = period49.minusSeconds((-1));
        java.lang.String str52 = period49.toString();
        org.joda.time.Period period53 = period49.toPeriod();
        org.joda.time.PeriodType periodType54 = period49.getPeriodType();
        org.joda.time.Period period55 = period45.normalizedStandard(periodType54);
        org.joda.time.Period period57 = period55.withSeconds(10);
        org.joda.time.Minutes minutes58 = period55.toStandardMinutes();
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = period55.getFieldTypes();
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.forFields(durationFieldTypeArray59);
        org.joda.time.Period period61 = duration6.toPeriodTo((org.joda.time.ReadableInstant) dateTime23, periodType60);
        org.joda.time.Minutes minutes62 = duration6.toStandardMinutes();
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        int int65 = dateTime64.getYearOfCentury();
        int int66 = dateTime64.getWeekyear();
        org.joda.time.DateTime dateTime68 = dateTime64.plus((long) 15);
        org.joda.time.DateTime.Property property69 = dateTime68.millisOfSecond();
        org.joda.time.DateTime dateTime70 = property69.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime72 = dateTime70.withMillisOfDay(50);
        org.joda.time.DateTime.Property property73 = dateTime72.yearOfEra();
        org.joda.time.DateTime dateTime75 = dateTime72.plusMinutes(54);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period78 = duration77.toPeriod();
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration85 = duration82.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean86 = duration80.isLongerThan((org.joda.time.ReadableDuration) duration85);
        org.joda.time.Duration duration87 = duration77.minus((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Duration duration89 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration92 = duration89.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean93 = duration80.equals((java.lang.Object) duration89);
        org.joda.time.DateTime dateTime94 = dateTime75.plus((org.joda.time.ReadableDuration) duration89);
        boolean boolean95 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration89);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1327783L + "'", long37 == 1327783L);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "7" + "'", str38, "7");
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeFieldType40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT0.099S" + "'", str52, "PT0.099S");
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(minutes58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(period61);
        org.junit.Assert.assertNotNull(minutes62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + false + "'", boolean93 == false);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
    }

    @Test
    public void test05039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05039");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        boolean boolean20 = mutableDateTime19.isEqualNow();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str23 = duration22.toString();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours26 = duration25.toStandardHours();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = duration22.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration36 = duration33.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        mutableDateTime37.add((long) 'a');
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.yearOfCentury();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period43 = duration42.toPeriod();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration48 = duration45.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration49 = duration42.minus((org.joda.time.ReadableDuration) duration48);
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration42);
        boolean boolean51 = duration36.isShorterThan((org.joda.time.ReadableDuration) duration42);
        boolean boolean52 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration60 = duration56.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime54, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration62 = duration36.plus((org.joda.time.ReadableDuration) duration60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        int int65 = dateTime64.getYearOfCentury();
        int int66 = dateTime64.getWeekyear();
        org.joda.time.DateTime dateTime68 = dateTime64.plus((long) 15);
        org.joda.time.DateTime.Property property69 = dateTime64.year();
        org.joda.time.DateTime dateTime70 = property69.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(readableDuration71, readableInstant72);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) 100, 1L, periodType76);
        org.joda.time.Period period79 = period77.minusSeconds((-1));
        java.lang.String str80 = period77.toString();
        org.joda.time.Period period81 = period77.toPeriod();
        org.joda.time.PeriodType periodType82 = period77.getPeriodType();
        org.joda.time.Period period83 = period73.normalizedStandard(periodType82);
        java.lang.String str84 = periodType82.getName();
        org.joda.time.PeriodType periodType85 = periodType82.withYearsRemoved();
        org.joda.time.Period period86 = duration60.toPeriodTo((org.joda.time.ReadableInstant) dateTime70, periodType85);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime19, (org.joda.time.ReadableDuration) duration60);
        org.joda.time.Duration duration89 = duration60.withMillis((long) 26150803);
        long long90 = duration89.getStandardMinutes();
        long long91 = duration89.getStandardSeconds();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:22:07.852Z" + "'", str14, "2022-02-22T07:22:07.852Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT86400S" + "'", str23, "PT86400S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(hours26);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 7 + "'", int29 == 7);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "PT0.099S" + "'", str80, "PT0.099S");
        org.junit.Assert.assertNotNull(period81);
        org.junit.Assert.assertNotNull(periodType82);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "Standard" + "'", str84, "Standard");
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + long90 + "' != '" + 435L + "'", long90 == 435L);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 26150L + "'", long91 == 26150L);
    }

    @Test
    public void test05040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05040");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.getMillisKeepLocal(dateTimeZone2, (long) 44);
        boolean boolean6 = dateTimeZone2.isStandardOffset((long) (-1));
        java.lang.String str7 = dateTimeZone2.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone2);
        long long11 = dateTimeZone2.convertLocalToUTC((long) 56, false);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now(dateTimeZone2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withWeekOfWeekyear((-369858));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -369858 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 56L + "'", long11 == 56L);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test05041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05041");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.add(26256);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test05042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05042");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType4);
        org.joda.time.DurationFieldType durationFieldType7 = periodType4.getFieldType((int) (short) 0);
        java.lang.String str8 = periodType4.toString();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 53, (long) (-1), periodType4, chronology12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.LocalDate.Property property15 = localDate14.centuryOfEra();
        org.joda.time.LocalDate localDate16 = property15.roundCeilingCopy();
        java.util.Date date17 = localDate16.toDate();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        int int22 = localDate18.getDayOfYear();
        org.joda.time.Interval interval23 = localDate18.toInterval();
        int int24 = localDate16.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.LocalDate.Property property25 = localDate16.dayOfYear();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 1, chronology27);
        java.util.GregorianCalendar gregorianCalendar29 = dateTime28.toGregorianCalendar();
        org.joda.time.LocalDate localDate30 = org.joda.time.LocalDate.fromCalendarFields((java.util.Calendar) gregorianCalendar29);
        org.joda.time.Chronology chronology31 = localDate30.getChronology();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean35 = localDate32.isSupported(dateTimeFieldType34);
        int int36 = localDate32.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight38 = localDate32.toDateMidnight(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        mutableDateTime39.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime39.copy();
        mutableDateTime39.setDate((long) '#');
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean48 = localDate45.isSupported(dateTimeFieldType47);
        int int49 = localDate45.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight51 = localDate45.toDateMidnight(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = mutableDateTime39.toDateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.Interval interval54 = localDate32.toInterval(dateTimeZone50);
        java.util.TimeZone timeZone55 = dateTimeZone50.toTimeZone();
        java.lang.String str57 = dateTimeZone50.getName(0L);
        org.joda.time.DateTime dateTime58 = localDate30.toDateTimeAtMidnight(dateTimeZone50);
        org.joda.time.DateMidnight dateMidnight59 = localDate16.toDateMidnight(dateTimeZone50);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[YearDayTime]" + "'", str8, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Fri Jan 01 00:00:00 GMT+00:00 2100");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(gregorianCalendar29);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 53 + "'", int36 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateMidnight38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 53 + "'", int49 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(dateMidnight51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(interval54);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00" + "'", str57, "+00:00");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateMidnight59);
    }

    @Test
    public void test05043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05043");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(dateTimeZone11);
        int int16 = localDate15.size();
        int int17 = localDate15.getEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (short) 100, chronology19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.millis();
        java.lang.String str22 = durationFieldType21.getName();
        boolean boolean23 = localTime20.isSupported(durationFieldType21);
        org.joda.time.LocalTime.Property property24 = localTime20.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            int int25 = localDate15.compareTo((org.joda.time.ReadablePartial) localTime20);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "millis" + "'", str22, "millis");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test05044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05044");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale2.getISO3Language();
        java.util.Locale.Builder builder5 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder11 = builder7.setExtension('a', "");
        java.util.Locale locale12 = java.util.Locale.CHINESE;
        java.util.Locale locale13 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str14 = locale12.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getLanguage();
        java.util.Locale.Builder builder16 = builder7.setLocale(locale13);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.centuryOfEra();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime17.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = property19.getFieldType();
        org.joda.time.DateTimeField dateTimeField21 = property19.getField();
        org.joda.time.DateTimeField dateTimeField22 = property19.getField();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.eras();
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(chronology28);
        org.joda.time.DurationField durationField31 = chronology28.eras();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 44, chronology28);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType23.getField(chronology28);
        org.joda.time.DateTimeField dateTimeField34 = chronology28.weekOfWeekyear();
        long long37 = dateTimeField34.set(950707L, 45);
        java.util.Locale.Category category38 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale39 = java.util.Locale.getDefault(category38);
        java.util.Locale locale40 = java.util.Locale.TAIWAN;
        java.util.Locale.setDefault(category38, locale40);
        int int42 = dateTimeField34.getMaximumTextLength(locale40);
        int int43 = property19.getMaximumShortTextLength(locale40);
        java.lang.String str45 = locale40.getExtension('a');
        java.util.Locale.Builder builder46 = builder16.setLocale(locale40);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder49 = builder16.setExtension('a', "2022-02-22T10:15:53.598");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: 22T10:15:53.598 [at index 8]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "German" + "'", str3, "German");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh" + "'", str15, "zh");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 26612150707L + "'", long37 == 26612150707L);
        org.junit.Assert.assertTrue("'" + category38 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category38.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale39);
// flaky:         org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 3 + "'", int43 == 3);
        org.junit.Assert.assertNull(str45);
        org.junit.Assert.assertNotNull(builder46);
    }

    @Test
    public void test05045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05045");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfEven();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.millisOfDay();
        mutableDateTime4.setMinuteOfHour(0);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
    }

    @Test
    public void test05046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05046");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int6 = localDateTime4.get(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime11.getFields();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withDayOfWeek(1);
        boolean boolean17 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.plus(readablePeriod18);
        int int20 = localDateTime11.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        boolean boolean27 = property24.equals((java.lang.Object) 10L);
        long long28 = property24.remainder();
        java.lang.String str29 = property24.getAsText();
        java.util.Locale locale33 = new java.util.Locale("2022-02-22T10:15:47.721", "53", "2022-02-22T07:15:46.416Z");
        int int34 = property24.getMaximumShortTextLength(locale33);
        org.joda.time.LocalDateTime localDateTime35 = property24.roundFloorCopy();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime11, (org.joda.time.ReadablePartial) localDateTime35, periodType36);
        org.joda.time.Duration duration39 = new org.joda.time.Duration(995259L);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.withDurationAdded((org.joda.time.ReadableDuration) duration39, 442);
        org.joda.time.Duration duration42 = duration39.toDuration();
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusMinutes(15);
        org.joda.time.DateTime dateTime56 = localDateTime49.toDateTime((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime58 = localDateTime49.toDateTime(dateTimeZone57);
        org.joda.time.DateTime dateTime59 = dateTime44.withZoneRetainFields(dateTimeZone57);
        java.lang.String str60 = dateTimeZone57.toString();
        java.lang.String str61 = dateTimeZone57.getID();
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime(dateTimeZone57);
        boolean boolean63 = mutableDateTime62.isEqualNow();
        org.joda.time.Interval interval64 = duration42.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime62);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime62.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 999 + "'", int6 == 999);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeFieldArray14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1328162L + "'", long28 == 1328162L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "7" + "'", str29, "7");
        org.junit.Assert.assertEquals(locale33.toString(), "2022-02-22t10:15:47.721_53_2022-02-22T07:15:46.416Z");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 2 + "'", int34 == 2);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTimeZone57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "UTC" + "'", str61, "UTC");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(interval64);
        org.junit.Assert.assertNotNull(property65);
    }

    @Test
    public void test05047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05047");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.months();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.dayOfWeek();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean17 = localDate15.isSupported(dateTimeFieldType16);
        org.joda.time.DateTime dateTime18 = localDate15.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property19 = localDate15.dayOfWeek();
        org.joda.time.LocalDate localDate21 = property19.addToCopy(61);
        org.joda.time.LocalDate localDate23 = localDate21.minusDays((-3077672));
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusMillis((int) (byte) 0);
        int int36 = localDateTime29.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime30.minusYears(70);
        org.joda.time.LocalDateTime.Property property39 = localDateTime30.weekOfWeekyear();
        int[] intArray40 = localDateTime30.getValues();
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.eras();
        long long51 = chronology46.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField52 = chronology46.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField53 = chronology46.dayOfYear();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property57 = localDateTime54.hourOfDay();
        org.joda.time.DateTimeField dateTimeField58 = property57.getField();
        org.joda.time.LocalDateTime localDateTime59 = property57.roundHalfFloorCopy();
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.weekyear();
        long long62 = chronology46.set((org.joda.time.ReadablePartial) localDateTime59, 4801285094859L);
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(readableInstant66, readableInstant67, periodType68);
        org.joda.time.DurationFieldType durationFieldType71 = periodType68.getFieldType((int) (short) 0);
        java.lang.String str72 = periodType68.toString();
        org.joda.time.Instant instant73 = new org.joda.time.Instant();
        org.joda.time.Instant instant75 = instant73.withMillis(0L);
        org.joda.time.Chronology chronology76 = instant75.getChronology();
        org.joda.time.Period period77 = new org.joda.time.Period((long) 53, (long) (-1), periodType68, chronology76);
        org.joda.time.DateTimeField dateTimeField78 = dateTimeFieldType63.getField(chronology76);
        java.util.Locale locale79 = java.util.Locale.getDefault();
        org.joda.time.LocalDateTime localDateTime80 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField86 = localDateTime84.getField((int) (byte) 0);
        java.util.Locale locale88 = java.util.Locale.CANADA;
        java.lang.String str89 = dateTimeField86.getAsShortText((long) '4', locale88);
        java.lang.String str90 = locale88.getVariant();
        java.lang.String str91 = locale79.getDisplayScript(locale88);
        int int92 = dateTimeField78.getMaximumShortTextLength(locale88);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket95 = new org.joda.time.format.DateTimeParserBucket((long) 26199, chronology46, locale88, (java.lang.Integer) 27921282, 1979);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray96 = dateTimeField14.set((org.joda.time.ReadablePartial) localDate21, (-19045), intArray40, "2022-02-22T07:21:34.221Z", locale88);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:21:34.221Z\" for dayOfWeek is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(intArray40);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray40), "[2022, 2, 22, 26528202]");
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 105144L + "'", long51 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645513200000L + "'", long62 == 1645513200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PeriodType[YearDayTime]" + "'", str72, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(locale79);
// flaky:         org.junit.Assert.assertEquals(locale79.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "1970" + "'", str89, "1970");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 4 + "'", int92 == 4);
    }

    @Test
    public void test05048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05048");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int6 = localDateTime4.get(dateTimeFieldType5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = property7.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusMonths(304);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.dayOfYear();
        java.util.Locale locale17 = java.util.Locale.KOREA;
        int int18 = property16.getMaximumTextLength(locale17);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = property16.getFieldType();
        int int20 = localDateTime10.get(dateTimeFieldType19);
        int int21 = localDateTime10.getYearOfEra();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1439 + "'", int6 == 1439);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 3 + "'", int18 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 239 + "'", int20 == 239);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1948 + "'", int21 == 1948);
    }

    @Test
    public void test05049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05049");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        int int17 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.withEarlierOffsetAtOverlap();
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime18.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime13.toMutableDateTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone21);
        java.lang.Object obj27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDate localDate32 = dateTime28.toLocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfMonth();
        java.util.Date date34 = localDate32.toDate();
        org.joda.time.LocalDate.Property property35 = localDate32.dayOfYear();
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = property35.getAsText(locale36);
        java.lang.String str38 = dateTimeZone21.getShortName(360000000L, locale36);
        java.lang.String str39 = property4.getAsText(locale36);
        java.util.Set<java.lang.String> strSet40 = locale36.getUnicodeLocaleKeys();
        java.util.Iterator<java.lang.String> strItor41 = strSet40.iterator();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:22:08.258Z" + "'", str19, "2022-02-22T07:22:08.258Z");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(date34);
// flaky:         org.junit.Assert.assertEquals(date34.toString(), "Tue Feb 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "53" + "'", str37, "53");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Dienstag" + "'", str39, "Dienstag");
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(strItor41);
    }

    @Test
    public void test05050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05050");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str8 = duration7.toString();
        boolean boolean9 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Hours hours10 = duration5.toStandardHours();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration5, 20);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime14.toString(dateTimeFormatter16);
        org.joda.time.DateTime dateTime19 = dateTime14.minusMonths(22);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.DateTime dateTime25 = dateTime14.withChronology(chronology23);
        org.joda.time.Period period26 = duration5.toPeriod(chronology23);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableDuration29, readableInstant30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) 100, 1L, periodType34);
        org.joda.time.Period period37 = period35.minusSeconds((-1));
        java.lang.String str38 = period35.toString();
        org.joda.time.Period period39 = period35.toPeriod();
        org.joda.time.PeriodType periodType40 = period35.getPeriodType();
        org.joda.time.Period period41 = period31.normalizedStandard(periodType40);
        java.lang.String str42 = periodType40.getName();
        java.lang.String str43 = periodType40.toString();
        org.joda.time.PeriodType periodType44 = periodType40.withDaysRemoved();
        org.joda.time.PeriodType periodType45 = periodType44.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType45);
        int[] intArray48 = chronology23.get((org.joda.time.ReadablePeriod) mutablePeriod46, 1L);
        org.joda.time.DateTimeField dateTimeField49 = chronology23.clockhourOfHalfday();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.fromMillisOfDay(25L, chronology23);
        org.joda.time.DateTimeField dateTimeField51 = chronology23.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField52 = chronology23.secondOfDay();
        java.lang.String str54 = dateTimeField52.getAsShortText((long) 1345);
        org.joda.time.DurationField durationField55 = dateTimeField52.getLeapDurationField();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT86400S" + "'", str8, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:22:08.287Z" + "'", str17, "2022-02-22T07:22:08.287Z");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0.099S" + "'", str38, "PT0.099S");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Standard" + "'", str42, "Standard");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PeriodType[Standard]" + "'", str43, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "1" + "'", str54, "1");
        org.junit.Assert.assertNull(durationField55);
    }

    @Test
    public void test05051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05051");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate2 = property1.roundFloorCopy();
        org.joda.time.DateTime dateTime3 = localDate2.toDateTimeAtMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean8 = localDate5.isSupported(dateTimeFieldType7);
        int int9 = localDate5.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight11 = localDate5.toDateMidnight(dateTimeZone10);
        org.joda.time.LocalDate.Property property12 = localDate5.year();
        org.joda.time.LocalDate localDate13 = property12.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfMonth();
        org.joda.time.LocalDate localDate16 = localDate13.minusMonths(36956320);
        java.lang.String str17 = localDate13.toString();
        org.joda.time.Period period18 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDate2, (org.joda.time.ReadablePartial) localDate13);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        mutableDateTime20.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime20.copy();
        mutableDateTime20.setDate((long) '#');
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        int int30 = localDate26.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight32 = localDate26.toDateMidnight(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = mutableDateTime20.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 1L, periodType37);
        org.joda.time.PeriodType periodType39 = period38.getPeriodType();
        boolean boolean40 = dateTimeZone31.equals((java.lang.Object) periodType39);
        org.joda.time.PeriodType periodType41 = periodType39.withHoursRemoved();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime43 = instant42.toDateTime();
        org.joda.time.Instant instant44 = instant42.toInstant();
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 54, periodType41, chronology45);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate((java.lang.Object) localDate2, chronology45);
        org.joda.time.LocalDate localDate49 = localDate47.minusMonths(2069);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-01" + "'", str4, "2022-02-01");
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateMidnight11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-01-01" + "'", str17, "2022-01-01");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 53 + "'", int30 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateMidnight32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(chronology45);
        org.junit.Assert.assertNotNull(localDate49);
    }

    @Test
    public void test05052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05052");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((-100));
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime18 = property15.add((long) (byte) 10);
        int int19 = mutableDateTime18.getCenturyOfEra();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int26 = localDateTime24.get(dateTimeFieldType25);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime24.plusMinutes(7);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 1L, periodType31);
        org.joda.time.Period period34 = period32.minusSeconds((-1));
        org.joda.time.Period period36 = period34.multipliedBy((int) '#');
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.minus((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Period period39 = period36.withWeeks(7);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(999, 12, 8, (int) (byte) 10, 5, (-292275054), 15, 50);
        org.joda.time.Period period49 = period39.withFields((org.joda.time.ReadablePeriod) mutablePeriod48);
        mutableDateTime18.add((org.joda.time.ReadablePeriod) mutablePeriod48);
        org.joda.time.PeriodType periodType51 = mutablePeriod48.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) 436, periodType51);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(readableInstant53, readableInstant54, periodType55);
        mutablePeriod56.setYears((int) '#');
        org.joda.time.Chronology chronology60 = null;
        mutablePeriod56.add((long) 1, chronology60);
        org.joda.time.ReadableInterval readableInterval62 = null;
        mutablePeriod56.setPeriod(readableInterval62);
        int int64 = mutablePeriod56.getDays();
        mutablePeriod56.add(315532800000L);
        mutablePeriod56.setDays(58);
        mutablePeriod52.add((org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime9.plus((org.joda.time.ReadablePeriod) mutablePeriod56);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime9.withYear(43150228);
        java.util.Date date73 = localDateTime9.toDate();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 20 + "'", int19 == 20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1439 + "'", int26 == 1439);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(date73);
// flaky:         org.junit.Assert.assertEquals(date73.toString(), "Tue Jan 03 00:00:00 GMT+00:00 1922");
    }

    @Test
    public void test05053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05053");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.TAIWAN;
        java.util.Locale.setDefault(category0, locale2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeField dateTimeField6 = property5.getField();
        org.joda.time.LocalDate localDate7 = property5.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = localDate7.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property11 = localDate7.yearOfEra();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) (byte) -1);
        int int14 = localDate13.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        long long19 = dateTimeZone15.getMillisKeepLocal(dateTimeZone17, (long) 44);
        org.joda.time.DateTime dateTime20 = localDate13.toDateTimeAtMidnight(dateTimeZone15);
        java.util.Locale locale22 = null;
        java.lang.String str23 = dateTimeZone15.getName(946000L, locale22);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone15);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone15);
        long long27 = dateTimeZone15.nextTransition((long) 25);
        org.joda.time.Interval interval28 = localDate7.toInterval(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        mutableDateTime29.add((long) 'a');
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime29.yearOfCentury();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration40 = duration37.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration41 = duration34.minus((org.joda.time.ReadableDuration) duration40);
        mutableDateTime29.add((org.joda.time.ReadableDuration) duration34);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime29.centuryOfEra();
        mutableDateTime29.addHours((int) (byte) 10);
        mutableDateTime29.addWeeks(20);
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.lang.String str49 = locale48.getDisplayScript();
        java.util.Locale locale50 = java.util.Locale.getDefault();
        java.util.Locale locale51 = locale50.stripExtensions();
        java.lang.String str52 = locale48.getDisplayCountry(locale50);
        java.util.Calendar calendar53 = mutableDateTime29.toCalendar(locale50);
        boolean boolean54 = localDate7.equals((java.lang.Object) locale50);
        java.lang.String str55 = locale2.getDisplayScript(locale50);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1969 + "'", int14 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 44L + "'", long19 == 44L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00" + "'", str23, "+00:00");
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 25L + "'", long27 == 25L);
        org.junit.Assert.assertNotNull(interval28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
// flaky:         org.junit.Assert.assertEquals(locale50.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale51);
// flaky:         org.junit.Assert.assertEquals(locale51.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\u4e2d\u56fd" + "'", str52, "\u4e2d\u56fd");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=1657732928729,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=6,WEEK_OF_YEAR=29,WEEK_OF_MONTH=3,DAY_OF_MONTH=13,DAY_OF_YEAR=194,DAY_OF_WEEK=4,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=5,HOUR_OF_DAY=17,MINUTE=22,SECOND=8,MILLISECOND=729,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
    }

    @Test
    public void test05054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05054");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.weekyear();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int13 = localDateTime11.get(dateTimeFieldType12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.plusMinutes(7);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        org.joda.time.Period period23 = period21.multipliedBy((int) '#');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime11.minus((org.joda.time.ReadablePeriod) period23);
        boolean boolean25 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.Period period27 = org.joda.time.Period.months(44);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime11.plus((org.joda.time.ReadablePeriod) period27);
        int int29 = localDateTime11.getWeekyear();
        org.joda.time.LocalDateTime.Property property30 = localDateTime11.era();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime11.plusWeeks(26284);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusYears(999);
        int int35 = localDateTime34.getDayOfMonth();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1439 + "'", int13 == 1439);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1973 + "'", int29 == 1973);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 28 + "'", int35 == 28);
    }

    @Test
    public void test05055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05055");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        mutableDateTime8.add((long) 'a');
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str15 = duration14.toString();
        boolean boolean16 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Hours hours17 = duration12.toStandardHours();
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration12, 20);
        mutableDateTime8.setMillisOfDay(36946953);
        org.joda.time.DateTimeField dateTimeField22 = mutableDateTime8.getRoundingField();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration28 = duration24.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean34 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime7.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDateTime.Property property37 = localDateTime7.weekOfWeekyear();
        int int38 = localDateTime7.getMillisOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime7.minusSeconds(2000);
        boolean boolean42 = localDateTime40.equals((java.lang.Object) 2622452L);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT86400S" + "'", str15, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNull(dateTimeField22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 26528806 + "'", int38 == 26528806);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test05056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05056");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.setDayOfMonth(3);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        int int5 = property4.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfFloor();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 53 + "'", int5 == 53);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test05057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05057");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.withDayOfMonth(20);
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = dateTimeZone14.getName(100L, locale16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(948227L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.year();
        mutableDateTime19.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant26, readableInstant27, periodType28);
        org.joda.time.DurationFieldType durationFieldType31 = periodType28.getFieldType((int) (short) 0);
        java.lang.String str32 = periodType28.toString();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 53, (long) (-1), periodType28, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType23.getField(chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(15);
        org.joda.time.Chronology chronology43 = dateTime40.getChronology();
        java.lang.String str44 = chronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType23.getField(chronology43);
        org.joda.time.DurationField durationField46 = chronology43.centuries();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.millisOfDay();
        mutableDateTime19.setChronology(chronology43);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime11.toMutableDateTime(chronology43);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime51.setSecondOfMinute(53);
        mutableDateTime51.setMillis(966164L);
        mutableDateTime49.setMillis((org.joda.time.ReadableInstant) mutableDateTime51);
        int int57 = mutableDateTime49.getMinuteOfHour();
        mutableDateTime49.addWeeks(26480210);
        org.joda.time.format.DateTimePrinter dateTimePrinter60 = null;
        org.joda.time.format.DateTimeParser dateTimeParser61 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter60, dateTimeParser61);
        org.joda.time.Instant instant63 = new org.joda.time.Instant();
        org.joda.time.Instant instant65 = instant63.withMillis(0L);
        org.joda.time.Chronology chronology66 = instant65.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.eras();
        long long71 = chronology66.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter72 = dateTimeFormatter62.withChronology(chronology66);
        org.joda.time.format.DateTimePrinter dateTimePrinter73 = dateTimeFormatter72.getPrinter();
        org.joda.time.Chronology chronology74 = dateTimeFormatter72.getChronology();
        org.joda.time.DateTimeField dateTimeField75 = chronology74.hourOfDay();
        long long77 = dateTimeField75.remainder((long) 50);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime49.setRounding(dateTimeField75, 26430);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 26430");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u5fb7\u6587" + "'", str17, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "PeriodType[YearDayTime]" + "'", str32, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ISOChronology[UTC]" + "'", str44, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 16 + "'", int57 == 16);
        org.junit.Assert.assertNotNull(instant65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 105144L + "'", long71 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter72);
        org.junit.Assert.assertNull(dateTimePrinter73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 50L + "'", long77 == 50L);
    }

    @Test
    public void test05058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05058");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addHours((int) (byte) 10);
        int int27 = mutableDateTime10.getSecondOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        boolean boolean37 = localDate28.isSupported(durationFieldType36);
        mutableDateTime10.add(durationFieldType36, (-292275054));
        org.joda.time.LocalDate localDate41 = localDate7.withFieldAdded(durationFieldType36, 53);
        org.joda.time.LocalDate.Property property42 = localDate7.yearOfCentury();
        int int43 = property42.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.set(45);
        org.joda.time.MutableDateTime mutableDateTime48 = property45.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime50 = property45.add(45);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        long long54 = dateTimeZone51.previousTransition(100L);
        int int56 = dateTimeZone51.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime57 = mutableDateTime50.toDateTime(dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.withDurationAdded(readableDuration58, (int) (byte) -1);
        int int61 = property42.getDifference((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDate localDate62 = dateTime60.toLocalDate();
        int int63 = dateTime60.getYear();
        org.joda.time.DateTime.Property property64 = dateTime60.dayOfWeek();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property66 = localDate65.monthOfYear();
        org.joda.time.DateTimeField dateTimeField67 = property66.getField();
        org.joda.time.LocalDate localDate68 = property66.roundCeilingCopy();
        org.joda.time.LocalDate localDate70 = localDate68.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate72 = localDate68.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate74 = localDate68.plusMonths(62172);
        boolean boolean75 = property64.equals((java.lang.Object) localDate74);
        org.joda.time.DateTime dateTime76 = property64.roundHalfCeilingCopy();
        int int77 = property64.getMaximumValue();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 62528 + "'", int27 == 62528);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 99 + "'", int43 == 99);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-6977) + "'", int61 == (-6977));
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 9000 + "'", int63 == 9000);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(localDate68);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate72);
        org.junit.Assert.assertNotNull(localDate74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 7 + "'", int77 == 7);
    }

    @Test
    public void test05059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05059");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        mutableDateTime8.add((long) 'a');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime8.yearOfCentury();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration19 = duration16.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration20 = duration13.minus((org.joda.time.ReadableDuration) duration19);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration13);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime8.centuryOfEra();
        mutableDateTime8.addHours((int) (byte) 10);
        mutableDateTime8.addYears(12);
        int int27 = mutableDateTime8.getRoundingMode();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration32 = duration29.withDurationAdded((long) (short) 100, (int) ' ');
        long long33 = duration32.getMillis();
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.months();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime43, periodType44);
        boolean boolean46 = dateTime37.isBefore((org.joda.time.ReadableInstant) dateTime41);
        int int47 = dateTime41.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(readableInstant48, readableInstant49, periodType50);
        org.joda.time.PeriodType periodType52 = periodType50.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime41, periodType50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTime dateTime57 = dateTime55.plusMinutes(15);
        org.joda.time.Chronology chronology58 = dateTime55.getChronology();
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.Chronology chronology62 = instant61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.eras();
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.now(chronology62);
        org.joda.time.DurationField durationField65 = chronology62.eras();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.hourOfDay();
        org.joda.time.DateTime dateTime67 = dateTime55.withChronology(chronology62);
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime68.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime70 = property69.getMutableDateTime();
        boolean boolean71 = dateTime67.isBefore((org.joda.time.ReadableInstant) mutableDateTime70);
        org.joda.time.Instant instant72 = new org.joda.time.Instant();
        org.joda.time.Instant instant74 = instant72.withMillis(0L);
        org.joda.time.Chronology chronology75 = instant74.getChronology();
        org.joda.time.DurationField durationField76 = chronology75.eras();
        long long80 = chronology75.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField81 = chronology75.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField82 = chronology75.minuteOfDay();
        mutableDateTime70.setChronology(chronology75);
        org.joda.time.DateTime dateTime84 = dateTime41.toDateTime(chronology75);
        org.joda.time.DateTime dateTime86 = dateTime41.plus(953015L);
        mutableDateTime8.setTime((org.joda.time.ReadableInstant) dateTime41);
        mutableDateTime8.setDate((long) (-3077672));
        mutableDateTime8.addSeconds(2026);
        java.lang.Object obj92 = mutableDateTime8.clone();
        org.joda.time.MutablePeriod mutablePeriod93 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:08.899Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:08.899Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:08.899Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86403200L + "'", long33 == 86403200L);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(periodType50);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(localTime64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(mutableDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(mutableDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 105144L + "'", long80 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(obj92);
        org.junit.Assert.assertEquals(obj92.toString(), "1969-12-31T00:33:46.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj92), "1969-12-31T00:33:46.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj92), "1969-12-31T00:33:46.000Z");
    }

    @Test
    public void test05060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05060");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime4.plus(0L);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.DateTime.Property property10 = dateTime8.weekOfWeekyear();
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((long) 311);
        org.joda.time.DateTime dateTime15 = property12.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear(3081668);
        org.joda.time.DateTime dateTime19 = dateTime15.withYearOfEra(26265573);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 8 + "'", int5 == 8);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test05061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05061");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        long long13 = chronology8.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField14 = chronology8.secondOfMinute();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withChronology(chronology21);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minusYears(26148950);
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = dateTimeField14.getAsShortText((org.joda.time.ReadablePartial) localDateTime30, locale31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime30.withCenturyOfEra((int) ' ');
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = localDateTime34.getFieldType((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.minusYears(21);
        org.joda.time.Period period42 = org.joda.time.Period.minutes(1439);
        java.lang.String str43 = period42.toString();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime34.withPeriodAdded((org.joda.time.ReadablePeriod) period42, 28);
        int int46 = localDateTime45.size();
        int int47 = localDateTime45.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.minusMillis((int) (short) -1);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.plusDays(26164766);
        boolean boolean60 = localDateTime45.isAfter((org.joda.time.ReadablePartial) localDateTime56);
        int int61 = property2.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.joda.time.MutableDateTime mutableDateTime62 = property2.roundHalfEven();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 105144L + "'", long13 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "8" + "'", str32, "8");
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT1439M" + "'", str43, "PT1439M");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 28 + "'", int47 == 28);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-1) + "'", int61 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime62);
    }

    @Test
    public void test05062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05062");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = mutablePeriod3.getFieldTypes();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours12 = duration11.toStandardHours();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration8.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration18 = duration8.toDuration();
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInterval readableInterval20 = null;
        mutablePeriod3.setPeriod(readableInterval20);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.add(51);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.LocalDate localDate31 = property29.roundCeilingCopy();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime36 = localDate31.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.monthOfYear();
        org.joda.time.DateTime dateTime39 = dateTime36.minusMonths(53);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) mutableDateTime27, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.LocalDate localDate41 = dateTime36.toLocalDate();
        int int42 = localDate41.getDayOfWeek();
        org.joda.time.Interval interval43 = localDate41.toInterval();
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(hours12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertNotNull(interval43);
    }

    @Test
    public void test05063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05063");
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes(15);
        org.joda.time.DateTime dateTime12 = localDateTime5.toDateTime((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime15 = dateTime12.withZone(dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 37, dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime16.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime17.setDayOfMonth(9000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 9000 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
    }

    @Test
    public void test05064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05064");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        java.lang.String str7 = localDateTime4.toString();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = property8.addWrapFieldToCopy(100);
        int int12 = property8.getMaximumValue();
        boolean boolean13 = property8.isLeap();
        int int14 = property8.getMinimumValue();
        java.lang.Object obj15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(obj15);
        int int17 = dateTime16.getHourOfDay();
        boolean boolean18 = property8.equals((java.lang.Object) int17);
        org.joda.time.LocalDateTime localDateTime19 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime20 = property8.withMinimumValue();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes(15);
        org.joda.time.DateTime dateTime34 = localDateTime27.toDateTime((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = localDateTime27.toDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime22.withZoneRetainFields(dateTimeZone35);
        java.lang.String str38 = dateTimeZone35.toString();
        java.lang.String str39 = dateTimeZone35.getID();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(dateTimeZone35);
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField48 = localDateTime46.getField((int) (byte) 0);
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = dateTimeField48.getAsShortText((long) '4', locale50);
        java.lang.String str52 = locale50.getVariant();
        java.lang.String str53 = dateTimeZone35.getName((long) 44, locale50);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.DateTime dateTime55 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) mutableDateTime54);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T10:22:09.119" + "'", str7, "2022-02-22T10:22:09.119");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 52 + "'", int12 == 52);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 7 + "'", int17 == 7);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "UTC" + "'", str39, "UTC");
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970" + "'", str51, "1970");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00" + "'", str53, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime55);
    }

    @Test
    public void test05065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05065");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone11);
        java.util.TimeZone timeZone16 = dateTimeZone11.toTimeZone();
        java.util.Date date17 = null;
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean18 = timeZone16.inDaylightTime(date17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
    }

    @Test
    public void test05066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05066");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 44);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        mutableDateTime14.addWeeks(62181);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime14.setMinuteOfDay(26475244);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26475244 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:09.233Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:09.233Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:09.233Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 44L + "'", long11 == 44L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test05067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05067");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod14.addSeconds(292278993);
        mutablePeriod14.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime20 = dateTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime22.copy();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = property26.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime29.toMutableDateTime(dateTimeZone30);
        int int34 = dateTimeZone30.getStandardOffset(60000L);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder36.clear();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getDisplayName();
        java.lang.String str40 = locale38.getISO3Language();
        java.util.Locale.Builder builder41 = builder37.setLocale(locale38);
        java.lang.String str42 = dateTimeZone30.getName(950707L, locale38);
        org.joda.time.DateTime dateTime43 = dateTime20.toDateTime(dateTimeZone30);
        org.joda.time.DateTime.Property property44 = dateTime43.dayOfYear();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.monthOfYear();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        org.joda.time.LocalDate localDate50 = property48.roundCeilingCopy();
        org.joda.time.LocalDate localDate52 = localDate50.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate54 = localDate50.withWeekOfWeekyear(46);
        org.joda.time.Chronology chronology55 = localDate54.getChronology();
        java.util.Locale locale56 = java.util.Locale.PRC;
        java.lang.String str57 = locale56.getScript();
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.lang.String str59 = locale56.getDisplayScript(locale58);
        java.util.Set<java.lang.String> strSet60 = locale58.getUnicodeLocaleAttributes();
        java.lang.String str61 = locale58.getDisplayLanguage();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 641, chronology55, locale58, (java.lang.Integer) 62222, 62166);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime65 = property44.setCopy("2022-02-22T07:19:27.332Z", locale58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:19:27.332Z\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str39, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "deu" + "'", str40, "deu");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(localDate52);
        org.junit.Assert.assertNotNull(localDate54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(strSet60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str61, "\u30c9\u30a4\u30c4\u8a9e");
    }

    @Test
    public void test05068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05068");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant4, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.yearOfCentury();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration24 = duration21.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration25 = duration18.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime13.centuryOfEra();
        mutableDateTime13.addHours((int) (byte) 10);
        mutableDateTime13.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField32 = mutableDateTime13.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj34 = mutableDateTime33.clone();
        mutableDateTime33.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.add(1L);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long44 = dateTimeZone40.getMillisKeepLocal(dateTimeZone42, (long) 44);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone40);
        mutableDateTime39.setZoneRetainFields(dateTimeZone40);
        mutableDateTime39.addSeconds((int) (short) 10);
        java.lang.Object obj49 = mutableDateTime39.clone();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime39.era();
        boolean boolean51 = mutableDateTime13.isAfter((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime39);
        int int53 = instant4.compareTo((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((java.lang.Object) instant4);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTime dateTime65 = dateTime63.plusMinutes(15);
        org.joda.time.DateTime dateTime66 = localDateTime59.toDateTime((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime68 = localDateTime59.toDateTime(dateTimeZone67);
        org.joda.time.DateTime.Property property69 = dateTime68.minuteOfHour();
        org.joda.time.DateTime dateTime70 = property69.roundFloorCopy();
        org.joda.time.DateTime dateTime71 = property69.roundHalfEvenCopy();
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(readableInstant75, readableInstant76, periodType77);
        org.joda.time.DurationFieldType durationFieldType80 = periodType77.getFieldType((int) (short) 0);
        java.lang.String str81 = periodType77.toString();
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.Instant instant84 = instant82.withMillis(0L);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.joda.time.Period period86 = new org.joda.time.Period((long) 53, (long) (-1), periodType77, chronology85);
        org.joda.time.PeriodType periodType87 = periodType77.withHoursRemoved();
        org.joda.time.Chronology chronology88 = null;
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((long) 62213, periodType87, chronology88);
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant4, (org.joda.time.ReadableInstant) dateTime71, periodType87);
        long long91 = instant4.getMillis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:22:09.286Z" + "'", str10, "2022-02-22T07:22:09.286Z");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "2022-02-22T07:22:09.286Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "2022-02-22T07:22:09.286Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "2022-02-22T07:22:09.286Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 44L + "'", long44 == 44L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(durationFieldType80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PeriodType[YearDayTime]" + "'", str81, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertNotNull(periodType87);
        org.junit.Assert.assertTrue("'" + long91 + "' != '" + 1L + "'", long91 == 1L);
    }

    @Test
    public void test05069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05069");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime(342, 0, 26247993, 62261, 26496, 26496, 25);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62261 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05070");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        boolean boolean5 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Hours hours6 = duration1.toStandardHours();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        int int9 = duration1.compareTo((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        int int12 = duration1.compareTo((org.joda.time.ReadableDuration) duration11);
        java.lang.String str13 = duration1.toString();
        org.joda.time.Duration duration15 = duration1.minus((-826934400000L));
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plusMonths(46);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.minusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withDayOfYear((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property28 = localDateTime25.hourOfDay();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str32 = dateTimeFieldType31.getName();
        int int33 = localDateTime25.indexOf(dateTimeFieldType31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime25.minusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime25.minusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int39 = localDateTime25.indexOf(dateTimeFieldType38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime24.property(dateTimeFieldType38);
        boolean boolean41 = duration1.equals((java.lang.Object) dateTimeFieldType38);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays(1024502L);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.DateTime dateTime51 = instant50.toDateTime();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.months();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) dateTime53, periodType54);
        boolean boolean56 = dateTime47.isBefore((org.joda.time.ReadableInstant) dateTime51);
        int int57 = dateTime51.getDayOfMonth();
        org.joda.time.DateTime.Property property58 = dateTime51.dayOfYear();
        int int59 = dateTime51.getDayOfYear();
        org.joda.time.DateTime dateTime60 = dateTime51.toDateTimeISO();
        org.joda.time.DateTime dateTime62 = dateTime51.withWeekyear(9722);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusMinutes(15);
        org.joda.time.Chronology chronology67 = dateTime64.getChronology();
        org.joda.time.DateTime dateTime69 = dateTime64.plusHours(19045);
        org.joda.time.DateTime dateTime70 = dateTime64.toDateTimeISO();
        org.joda.time.Duration duration72 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period73 = duration72.toPeriod();
        org.joda.time.Duration duration75 = duration72.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime76 = org.joda.time.MutableDateTime.now();
        mutableDateTime76.add((long) 'a');
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime76.yearOfCentury();
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period82 = duration81.toPeriod();
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration87 = duration84.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration88 = duration81.minus((org.joda.time.ReadableDuration) duration87);
        mutableDateTime76.add((org.joda.time.ReadableDuration) duration81);
        boolean boolean90 = duration75.isShorterThan((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Duration duration92 = duration81.minus((long) (byte) 0);
        org.joda.time.DateTime dateTime93 = dateTime64.minus((org.joda.time.ReadableDuration) duration81);
        org.joda.time.DateTime dateTime94 = dateTime51.minus((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Duration duration96 = duration43.withDurationAdded((org.joda.time.ReadableDuration) duration81, 738);
        boolean boolean97 = duration1.isEqual((org.joda.time.ReadableDuration) duration96);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(hours6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PT86400S" + "'", str13, "PT86400S");
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "clockhourOfDay" + "'", str32, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(dateTimeFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + (-1) + "'", int39 == (-1));
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(mutableDateTime76);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(duration92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertNotNull(dateTime94);
        org.junit.Assert.assertNotNull(duration96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + false + "'", boolean97 == false);
    }

    @Test
    public void test05071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05071");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant24 = instant17.plus((org.joda.time.ReadableDuration) duration23);
        long long25 = instant24.getMillis();
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.months();
        org.joda.time.Period period28 = new org.joda.time.Period((-205878993L), chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology26.getZone();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime0, chronology26);
        org.joda.time.LocalTime localTime33 = localTime31.withMillisOfDay((int) (short) 100);
        int int34 = localTime33.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int36 = localTime33.getValue(26397298);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 26397298");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 100 + "'", int34 == 100);
    }

    @Test
    public void test05072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05072");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundFloor();
        mutableDateTime16.addHours(0);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime16);
        mutableDateTime16.setMillisOfDay(50);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str26 = duration25.toString();
        boolean boolean27 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration37 = duration34.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean38 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration39 = duration29.minus((org.joda.time.ReadableDuration) duration32);
        boolean boolean40 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration41, readableInstant42);
        org.joda.time.Period period45 = period43.withDays((int) (byte) 1);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours48 = duration47.toStandardHours();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = period43.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration55 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) ' ');
        org.joda.time.Duration duration57 = duration55.withMillis((long) 70);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(readableInstant60, readableInstant61, periodType62);
        org.joda.time.DurationFieldType durationFieldType65 = periodType62.getFieldType((int) (short) 0);
        java.lang.String str66 = periodType62.toString();
        org.joda.time.Instant instant67 = new org.joda.time.Instant();
        org.joda.time.Instant instant69 = instant67.withMillis(0L);
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 53, (long) (-1), periodType62, chronology70);
        org.joda.time.PeriodType periodType72 = periodType62.withHoursRemoved();
        org.joda.time.PeriodType periodType73 = periodType72.withMinutesRemoved();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableDuration) duration55, periodType72);
        int int75 = mutableDateTime16.getRoundingMode();
        int int76 = mutableDateTime16.getYearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT86400S" + "'", str26, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(hours48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 9 + "'", int51 == 9);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PeriodType[YearDayTime]" + "'", str66, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
    }

    @Test
    public void test05073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05073");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = localDateTime9.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        mutableDateTime4.setRounding(dateTimeField20);
        java.lang.Object obj22 = mutableDateTime4.clone();
        java.lang.String str23 = mutableDateTime4.toString();
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime4.toMutableDateTime();
        int int25 = mutableDateTime24.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "4500-01-01T00:00:00.000Z" + "'", str23, "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 53 + "'", int25 == 53);
    }

    @Test
    public void test05074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05074");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks(44);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime8.withChronology(chronology16);
        org.joda.time.DateTime.Property property20 = dateTime8.secondOfMinute();
        org.joda.time.DateTime dateTime22 = dateTime8.withWeekyear(1200);
        org.joda.time.DateMidnight dateMidnight23 = dateTime8.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ISOChronology[UTC]" + "'", str17, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateMidnight23);
    }

    @Test
    public void test05075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05075");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate2 = property1.roundFloorCopy();
        org.joda.time.DateTime dateTime3 = localDate2.toDateTimeAtMidnight();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration14 = duration10.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.Instant instant16 = dateTime8.toInstant();
        org.joda.time.DateTime dateTime19 = dateTime8.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant20 = dateTime19.toInstant();
        boolean boolean21 = instant4.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj23 = mutableDateTime22.clone();
        mutableDateTime22.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.dayOfWeek();
        mutableDateTime22.setMillisOfDay(2);
        int int29 = instant4.compareTo((org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        mutableDateTime30.add((long) 'a');
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.DateTime dateTime36 = instant35.toDateTime();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.months();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableInstant) dateTime38, periodType39);
        org.joda.time.DateTime.Property property41 = dateTime38.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = property41.getFieldType();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime30.property(dateTimeFieldType42);
        mutableDateTime22.set(dateTimeFieldType42, 21);
        boolean boolean46 = localDate2.isSupported(dateTimeFieldType42);
        org.joda.time.LocalDate.Property property47 = localDate2.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate49 = property47.setCopy("2022-02-22T07:20:58.674Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:20:58.674Z\" for weekOfWeekyear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "2022-02-22T07:22:09.523Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "2022-02-22T07:22:09.523Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "2022-02-22T07:22:09.523Z");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test05076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05076");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime dateTime7 = dateTime1.plusDays(0);
        org.joda.time.DateTime dateTime9 = dateTime7.withWeekOfWeekyear((int) (byte) 10);
        org.joda.time.DurationFieldType durationFieldType10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime12 = dateTime7.withFieldAdded(durationFieldType10, 26306);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test05077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05077");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        int int16 = mutableDateTime15.getDayOfYear();
        java.lang.String str17 = mutableDateTime15.toString();
        mutableDateTime15.addHours(26281);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException24 = new java.io.IOException("");
        java.io.IOException iOException25 = new java.io.IOException((java.lang.Throwable) iOException24);
        boolean boolean26 = mutableDateTime22.equals((java.lang.Object) iOException24);
        org.joda.time.Duration duration29 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration29, 1424);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime22.era();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration39 = duration36.withDurationAdded((long) (short) 100, (int) ' ');
        long long40 = duration39.getMillis();
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.DateTime dateTime48 = instant47.toDateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.months();
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableInstant) dateTime50, periodType51);
        boolean boolean53 = dateTime44.isBefore((org.joda.time.ReadableInstant) dateTime48);
        int int54 = dateTime48.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(readableInstant55, readableInstant56, periodType57);
        org.joda.time.PeriodType periodType59 = periodType57.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime48, periodType57);
        org.joda.time.Period period61 = new org.joda.time.Period(0L, 24L, periodType57);
        org.joda.time.Period period62 = new org.joda.time.Period(readableInstant20, (org.joda.time.ReadableInstant) mutableDateTime22, periodType57);
        org.joda.time.PeriodType periodType63 = periodType57.withHoursRemoved();
        org.joda.time.PeriodType periodType64 = periodType63.withSecondsRemoved();
        org.joda.time.PeriodType periodType65 = periodType63.withYearsRemoved();
        org.joda.time.Instant instant66 = new org.joda.time.Instant();
        org.joda.time.Instant instant68 = instant66.withMillis(0L);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str71 = duration70.toString();
        org.joda.time.Instant instant72 = instant66.minus((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period75 = duration74.toPeriod();
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration79 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration82 = duration79.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean83 = duration77.isLongerThan((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Duration duration84 = duration74.minus((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration89 = duration86.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean90 = duration77.equals((java.lang.Object) duration86);
        org.joda.time.Instant instant92 = instant72.withDurationAdded((org.joda.time.ReadableDuration) duration77, 26150565);
        org.joda.time.Chronology chronology93 = instant72.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField95 = chronology93.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField96 = chronology93.weekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period97 = new org.joda.time.Period((java.lang.Object) 26281, periodType65, chronology93);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2000-01-01T00:00:00.000Z" + "'", str17, "2000-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 86403200L + "'", long40 == 86403200L);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(periodType63);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "PT86400S" + "'", str71, "PT86400S");
        org.junit.Assert.assertNotNull(instant72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration89);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertNotNull(dateTimeField96);
    }

    @Test
    public void test05078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05078");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.months();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21, periodType22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(15);
        org.joda.time.Interval interval36 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Instant instant37 = instant9.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTime dateTime38 = instant9.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj40 = mutableDateTime39.clone();
        mutableDateTime39.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime39.dayOfWeek();
        mutableDateTime39.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime39.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime47 = property46.roundCeiling();
        mutableDateTime47.setMillisOfDay(49);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) mutableDateTime47);
        mutableDateTime47.addDays(62254);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime47.property(dateTimeFieldType53);
        org.joda.time.DateTimeField dateTimeField55 = mutableDateTime47.getRoundingField();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "2022-02-22T07:22:09.562Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "2022-02-22T07:22:09.562Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "2022-02-22T07:22:09.562Z");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNull(dateTimeField55);
    }

    @Test
    public void test05079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05079");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.DateTimeField dateTimeField18 = mutableDateTime17.getRoundingField();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime17.centuryOfEra();
        org.joda.time.DurationField durationField20 = property19.getRangeDurationField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime22 = property19.add(26380413);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1656923974 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNull(durationField20);
    }

    @Test
    public void test05080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05080");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addYears(0);
        mutableDateTime0.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant28 = instant21.plus((org.joda.time.ReadableDuration) duration27);
        long long29 = instant28.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) instant28);
        org.joda.time.MutableDateTime mutableDateTime31 = instant28.toMutableDateTime();
        int int32 = mutableDateTime31.getMillisOfDay();
        org.joda.time.Instant instant33 = mutableDateTime31.toInstant();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86400000L + "'", long29 == 86400000L);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(instant33);
    }

    @Test
    public void test05081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05081");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod14.addSeconds(292278993);
        mutablePeriod14.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime20 = dateTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime22.copy();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = property26.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime29.toMutableDateTime(dateTimeZone30);
        int int34 = dateTimeZone30.getStandardOffset(60000L);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder36.clear();
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getDisplayName();
        java.lang.String str40 = locale38.getISO3Language();
        java.util.Locale.Builder builder41 = builder37.setLocale(locale38);
        java.lang.String str42 = dateTimeZone30.getName(950707L, locale38);
        org.joda.time.DateTime dateTime43 = dateTime20.toDateTime(dateTimeZone30);
        int int44 = dateTime43.getYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime46 = dateTime43.withCenturyOfEra((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(hours10);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 9 + "'", int13 == 9);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str39, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "deu" + "'", str40, "deu");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "+00:00" + "'", str42, "+00:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 2021 + "'", int44 == 2021);
    }

    @Test
    public void test05082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05082");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime9 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        mutableDateTime10.addWeekyears((int) (byte) 1);
        int int16 = dateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime10.centuryOfEra();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str22 = duration21.toString();
        boolean boolean23 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration21);
        long long24 = duration19.getStandardMinutes();
        long long25 = duration19.getStandardMinutes();
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration19, 26150565);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj29 = mutableDateTime28.clone();
        mutableDateTime28.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime28.dayOfWeek();
        mutableDateTime28.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime28.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundCeiling();
        mutableDateTime36.setMillisOfDay(49);
        boolean boolean39 = mutableDateTime10.isEqual((org.joda.time.ReadableInstant) mutableDateTime36);
        mutableDateTime36.addDays(17);
        mutableDateTime36.addWeekyears(437);
        mutableDateTime36.addWeeks(26448);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u5354\u5b9a\u4e16\u754c\u6642");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT86400S" + "'", str22, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1440L + "'", long24 == 1440L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1440L + "'", long25 == 1440L);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(obj29);
// flaky:         org.junit.Assert.assertEquals(obj29.toString(), "2022-02-22T07:22:09.726Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "2022-02-22T07:22:09.726Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "2022-02-22T07:22:09.726Z");
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test05083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05083");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime6.setMillis(readableInstant8);
        mutableDateTime6.addYears(36985848);
        mutableDateTime6.setSecondOfDay(96);
        mutableDateTime6.addHours(62176);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u30c9\u30a4\u30c4\u8a9e" + "'", str4, "\u30c9\u30a4\u30c4\u8a9e");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test05084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05084");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (short) 0);
        org.joda.time.DurationFieldType durationFieldType9 = org.joda.time.DurationFieldType.millis();
        java.lang.String str10 = durationFieldType9.getName();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.hours();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(1440L, chronology16);
        boolean boolean19 = durationFieldType9.isSupported(chronology16);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(15);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        java.lang.String str26 = chronology25.toString();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology25);
        org.joda.time.DateTimeField dateTimeField28 = chronology25.millisOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.millisOfSecond();
        boolean boolean30 = durationFieldType9.isSupported(chronology25);
        mutableDateTime8.add(durationFieldType9, (-3024000));
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setMinuteOfHour(215);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 215 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "53" + "'", str6, "53");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "millis" + "'", str10, "millis");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ISOChronology[UTC]" + "'", str26, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
    }

    @Test
    public void test05085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05085");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        int int5 = dateTime1.getHourOfDay();
        org.joda.time.DateTime dateTime7 = dateTime1.plus(960800L);
        org.joda.time.Chronology chronology10 = null;
        java.util.Locale locale11 = java.util.Locale.GERMAN;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.lang.String str13 = locale11.getDisplayVariant(locale12);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology10, locale12);
        java.lang.Object obj15 = dateTimeParserBucket14.saveState();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime((long) (short) 100, chronology17);
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str20 = durationFieldType19.getName();
        boolean boolean21 = localTime18.isSupported(durationFieldType19);
        boolean boolean22 = dateTimeParserBucket14.restoreState((java.lang.Object) boolean21);
        org.joda.time.Chronology chronology23 = dateTimeParserBucket14.getChronology();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime27 = dateTime25.withZoneRetainFields(dateTimeZone26);
        dateTimeParserBucket14.setZone(dateTimeZone26);
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime((long) 435, dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime7.toMutableDateTime(dateTimeZone26);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime30.setDate(62243, (-268), 258);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -268 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 9 + "'", int2 == 9);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 7 + "'", int5 == 7);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(obj15);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "weeks" + "'", str20, "weeks");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test05086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05086");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        int int3 = mutableDateTime2.getRoundingMode();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime2.millisOfSecond();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test05087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05087");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.Duration duration4 = duration1.withDurationAdded((long) 26209, (-16));
        org.joda.time.Duration duration5 = duration4.toDuration();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getYearOfCentury();
        int int9 = dateTime7.getWeekyear();
        org.joda.time.DateTime dateTime11 = dateTime7.plus((long) 15);
        org.joda.time.DateTime.Property property12 = dateTime7.year();
        org.joda.time.DateTime dateTime13 = property12.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        int int25 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime24.getCenturyOfEra();
        org.joda.time.DateTime dateTime28 = dateTime24.withWeekyear(44);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        java.lang.String str37 = periodType33.toString();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 53, (long) (-1), periodType33, chronology41);
        org.joda.time.PeriodType periodType43 = periodType33.withMonthsRemoved();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime24, periodType33);
        org.joda.time.Period period45 = period44.toPeriod();
        org.joda.time.Period period47 = period44.minusHours(26184);
        boolean boolean48 = duration5.equals((java.lang.Object) period44);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 20 + "'", int26 == 20);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PeriodType[YearDayTime]" + "'", str37, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
    }

    @Test
    public void test05088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05088");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.DateTimeField dateTimeField7 = mutableDateTime6.getRoundingField();
        mutableDateTime6.setSecondOfMinute(0);
        org.joda.time.DateTime dateTime10 = mutableDateTime6.toDateTime();
        mutableDateTime6.setMinuteOfDay(335);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTime10);
    }

    @Test
    public void test05089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05089");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra((int) '#');
        org.joda.time.DateTime.Property property9 = dateTime8.dayOfWeek();
        org.joda.time.DateTime dateTime11 = dateTime8.minusSeconds(59);
        org.joda.time.DateTime dateTime13 = dateTime11.plusSeconds((int) (byte) 100);
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = dateTime19.withZoneRetainFields(dateTimeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtCurrentTime(dateTimeZone24);
        int int27 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime26.minusWeeks(44);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes(15);
        org.joda.time.Chronology chronology34 = dateTime31.getChronology();
        java.lang.String str35 = chronology34.toString();
        org.joda.time.DateTimeField dateTimeField36 = chronology34.dayOfYear();
        org.joda.time.DateTime dateTime37 = dateTime26.withChronology(chronology34);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant39, readableInstant40, periodType41);
        org.joda.time.DurationFieldType durationFieldType44 = periodType41.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType45 = periodType41.withMillisRemoved();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, readableDuration38, periodType45);
        org.joda.time.Period period47 = new org.joda.time.Period(0L, periodType45);
        org.joda.time.format.DateTimePrinter dateTimePrinter48 = null;
        org.joda.time.format.DateTimeParser dateTimeParser49 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter48, dateTimeParser49);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Chronology chronology54 = instant53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.eras();
        long long59 = chronology54.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter50.withChronology(chronology54);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(3600000L, periodType45, chronology54);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusMinutes(15);
        org.joda.time.Chronology chronology67 = dateTime64.getChronology();
        java.lang.String str68 = chronology67.toString();
        org.joda.time.LocalDate localDate69 = new org.joda.time.LocalDate((long) 0, chronology67);
        org.joda.time.Period period70 = new org.joda.time.Period((long) 4, (long) 62187, periodType45, chronology67);
        boolean boolean71 = dateTime11.equals((java.lang.Object) 62187);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property73 = localDate72.monthOfYear();
        org.joda.time.DateTimeField dateTimeField74 = property73.getField();
        org.joda.time.LocalDate localDate75 = property73.roundCeilingCopy();
        org.joda.time.Chronology chronology76 = localDate75.getChronology();
        org.joda.time.DateTimeZone dateTimeZone79 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime80 = localDate75.toDateTimeAtMidnight(dateTimeZone79);
        org.joda.time.DateTime.Property property81 = dateTime80.monthOfYear();
        org.joda.time.DateTime dateTime83 = dateTime80.minusMonths(53);
        org.joda.time.DateTime dateTime85 = dateTime80.minusMonths(60);
        org.joda.time.Duration duration87 = new org.joda.time.Duration((long) 59);
        org.joda.time.DateTime dateTime88 = dateTime85.minus((org.joda.time.ReadableDuration) duration87);
        org.joda.time.ReadableInstant readableInstant89 = null;
        org.joda.time.Period period90 = duration87.toPeriodTo(readableInstant89);
        org.joda.time.DateTime dateTime91 = dateTime11.minus((org.joda.time.ReadableDuration) duration87);
        int int92 = dateTime11.getEra();
        org.joda.time.MutableDateTime mutableDateTime93 = new org.joda.time.MutableDateTime();
        mutableDateTime93.add((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime96 = mutableDateTime93.copy();
        boolean boolean97 = dateTime11.isAfter((org.joda.time.ReadableInstant) mutableDateTime93);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "Koordinierte Universalzeit");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ISOChronology[UTC]" + "'", str35, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(durationFieldType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 105144L + "'", long59 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "ISOChronology[UTC]" + "'", str68, "ISOChronology[UTC]");
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(localDate75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(dateTimeZone79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(dateTime91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime96);
        org.junit.Assert.assertTrue("'" + boolean97 + "' != '" + true + "'", boolean97 == true);
    }

    @Test
    public void test05090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05090");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant7 = instant2.withDurationAdded((org.joda.time.ReadableDuration) duration5, 0);
        org.joda.time.Instant instant10 = instant7.withDurationAdded(25L, 26158);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime11.setMinuteOfDay(83100000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 83100000 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test05091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05091");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj2 = mutableDateTime1.clone();
        mutableDateTime1.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone8.getMillisKeepLocal(dateTimeZone10, (long) 44);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone8);
        mutableDateTime7.setZoneRetainFields(dateTimeZone8);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale locale18 = builder17.build();
        java.lang.String str19 = dateTimeZone8.getName(555370422L, locale18);
        java.lang.String str21 = dateTimeZone8.getShortName(962578L);
        long long24 = dateTimeZone8.convertLocalToUTC((long) 62151, false);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 26150565, dateTimeZone8);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 44);
        boolean boolean32 = dateTimeZone28.isStandardOffset((long) (-1));
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.hourOfDay();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime33.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str40 = dateTimeFieldType39.getName();
        int int41 = localDateTime33.indexOf(dateTimeFieldType39);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime33.minusSeconds((int) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        int int46 = dateTime45.getYearOfCentury();
        int int47 = dateTime45.getWeekyear();
        org.joda.time.DateTime dateTime49 = dateTime45.plus((long) 15);
        org.joda.time.DateTime.Property property50 = dateTime45.year();
        org.joda.time.DateTime dateTime51 = property50.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property52 = dateTime51.millisOfSecond();
        org.joda.time.DateTime dateTime53 = localDateTime43.toDateTime((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime55 = dateTime51.minusMinutes(55);
        int int56 = dateTimeZone28.getOffset((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.LocalDateTime localDateTime57 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.plusYears((int) (short) 100);
        int int64 = localDateTime63.getEra();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime63.minusHours(45);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime66.plusHours(435);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime66.plusHours(51);
        boolean boolean73 = dateTimeZone28.isLocalDateTimeGap(localDateTime66);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime66.minusSeconds(24);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime66.plusDays(295);
        org.joda.time.Period period78 = org.joda.time.Period.fieldDifference((org.joda.time.ReadablePartial) localDateTime25, (org.joda.time.ReadablePartial) localDateTime77);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj2);
// flaky:         org.junit.Assert.assertEquals(obj2.toString(), "2022-02-22T07:22:10.189Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "2022-02-22T07:22:10.189Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "2022-02-22T07:22:10.189Z");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 44L + "'", long12 == 44L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 62151L + "'", long24 == 62151L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 44L + "'", long30 == 44L);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "clockhourOfDay" + "'", str40, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(period78);
    }

    @Test
    public void test05092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05092");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        mutableDateTime6.setDate((long) '#');
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime6.toDateTime(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) periodType25);
        mutableDateTime0.setZoneRetainFields(dateTimeZone17);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate.Property property30 = localDate28.weekOfWeekyear();
        org.joda.time.LocalDate localDate31 = property30.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate33 = localDate31.plusMonths((-292275054));
        java.lang.String str34 = localDate33.toString();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        org.joda.time.LocalDate localDate38 = property36.roundCeilingCopy();
        org.joda.time.LocalDate localDate40 = localDate38.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate42 = localDate38.withWeekOfWeekyear(46);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period(readableDuration44, readableInstant45);
        org.joda.time.PeriodType periodType49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period((long) 100, 1L, periodType49);
        org.joda.time.Period period52 = period50.minusSeconds((-1));
        java.lang.String str53 = period50.toString();
        org.joda.time.Period period54 = period50.toPeriod();
        org.joda.time.PeriodType periodType55 = period50.getPeriodType();
        org.joda.time.Period period56 = period46.normalizedStandard(periodType55);
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.Chronology chronology60 = instant59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.eras();
        long long65 = chronology60.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField66 = chronology60.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(44L, periodType55, chronology60);
        org.joda.time.LocalDate localDate69 = localDate42.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod67, (int) (byte) 1);
        org.joda.time.Chronology chronology70 = localDate69.getChronology();
        org.joda.time.LocalDate.Property property71 = localDate69.weekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property71.getFieldType();
        org.joda.time.LocalDate.Property property73 = localDate33.property(dateTimeFieldType72);
        org.joda.time.LocalDate.Property property74 = localDate33.era();
        org.joda.time.LocalDate localDate75 = property74.getLocalDate();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "-24354233-08-21" + "'", str34, "-24354233-08-21");
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(localDate42);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT0.099S" + "'", str53, "PT0.099S");
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 105144L + "'", long65 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDate69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(property71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(localDate75);
    }

    @Test
    public void test05093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05093");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str8 = duration7.toString();
        boolean boolean9 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Hours hours10 = duration5.toStandardHours();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration5, 20);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime14.toString(dateTimeFormatter16);
        org.joda.time.DateTime dateTime19 = dateTime14.minusMonths(22);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.DateTime dateTime25 = dateTime14.withChronology(chronology23);
        org.joda.time.Period period26 = duration5.toPeriod(chronology23);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableDuration29, readableInstant30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) 100, 1L, periodType34);
        org.joda.time.Period period37 = period35.minusSeconds((-1));
        java.lang.String str38 = period35.toString();
        org.joda.time.Period period39 = period35.toPeriod();
        org.joda.time.PeriodType periodType40 = period35.getPeriodType();
        org.joda.time.Period period41 = period31.normalizedStandard(periodType40);
        java.lang.String str42 = periodType40.getName();
        java.lang.String str43 = periodType40.toString();
        org.joda.time.PeriodType periodType44 = periodType40.withDaysRemoved();
        org.joda.time.PeriodType periodType45 = periodType44.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType45);
        int[] intArray48 = chronology23.get((org.joda.time.ReadablePeriod) mutablePeriod46, 1L);
        java.util.Locale locale49 = java.util.Locale.getDefault();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField56 = localDateTime54.getField((int) (byte) 0);
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.lang.String str59 = dateTimeField56.getAsShortText((long) '4', locale58);
        java.lang.String str60 = locale58.getVariant();
        java.lang.String str61 = locale49.getDisplayScript(locale58);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 1191, chronology23, locale49, (java.lang.Integer) 36992192, 26209);
        java.lang.Object obj65 = dateTimeParserBucket64.saveState();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT86400S" + "'", str8, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(hours10);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "2022-02-22T07:22:10.271Z" + "'", str17, "2022-02-22T07:22:10.271Z");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "PT0.099S" + "'", str38, "PT0.099S");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Standard" + "'", str42, "Standard");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PeriodType[Standard]" + "'", str43, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertNotNull(intArray48);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(locale49);
// flaky:         org.junit.Assert.assertEquals(locale49.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970" + "'", str59, "1970");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test05094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05094");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale2.getISO3Language();
        java.util.Locale.Builder builder5 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType15 = periodType12.getFieldType((int) (short) 0);
        java.lang.String str16 = periodType12.toString();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 53, (long) (-1), periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType7.getField(chronology20);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = locale23.getDisplayLanguage();
        int int25 = dateTimeField22.getMaximumTextLength(locale23);
        java.lang.String str26 = locale23.getScript();
        java.util.Locale.Builder builder27 = builder1.setLocale(locale23);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property32 = localDate28.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime33.copy();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime38 = property37.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime41 = property37.set(1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getYearOfCentury();
        int int45 = dateTime43.getWeekyear();
        org.joda.time.DateTime dateTime46 = dateTime43.withEarlierOffsetAtOverlap();
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime46.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        boolean boolean50 = dateTimeZone49.isFixed();
        mutableDateTime48.setZoneRetainFields(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime41.toMutableDateTime(dateTimeZone49);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(dateTimeZone49);
        java.lang.Object obj55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(obj55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.LocalDate localDate60 = dateTime56.toLocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfMonth();
        java.util.Date date62 = localDate60.toDate();
        org.joda.time.LocalDate.Property property63 = localDate60.dayOfYear();
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.lang.String str65 = property63.getAsText(locale64);
        java.lang.String str66 = dateTimeZone49.getShortName(360000000L, locale64);
        java.lang.String str67 = property32.getAsText(locale64);
        java.util.Set<java.lang.String> strSet68 = locale64.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder69 = builder1.setLocale(locale64);
        java.util.Locale.Builder builder72 = builder1.setExtension('a', "6216720-04-22");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder74 = builder72.addUnicodeLocaleAttribute("java.io.IOException: deu");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: java.io.IOException: deu [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u5fb7\u6587" + "'", str3, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PeriodType[YearDayTime]" + "'", str16, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u82f1\u6587" + "'", str24, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T07:22:10.357Z" + "'", str47, "2022-02-22T07:22:10.357Z");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(date62);
// flaky:         org.junit.Assert.assertEquals(date62.toString(), "Tue Feb 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "53" + "'", str65, "53");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Dienstag" + "'", str67, "Dienstag");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test05095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05095");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.Interval interval12 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.LocalDate.Property property16 = localDate13.yearOfEra();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str22 = duration21.toString();
        org.joda.time.Instant instant23 = instant17.minus((org.joda.time.ReadableDuration) duration21);
        int int24 = property16.getDifference((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant28 = instant17.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str31 = duration30.toString();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours34 = duration33.toStandardHours();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = duration30.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period42 = duration41.toPeriod();
        org.joda.time.Duration duration44 = duration41.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        mutableDateTime45.add((long) 'a');
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime45.yearOfCentury();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration56 = duration53.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration57 = duration50.minus((org.joda.time.ReadableDuration) duration56);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration50);
        boolean boolean59 = duration44.isShorterThan((org.joda.time.ReadableDuration) duration50);
        boolean boolean60 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Instant instant61 = instant28.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Interval interval62 = duration7.toIntervalTo((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        int int65 = dateTime64.getYearOfCentury();
        int int66 = dateTime64.getWeekyear();
        org.joda.time.DateTime dateTime68 = dateTime64.plus((long) 15);
        org.joda.time.DateTime.Property property69 = dateTime64.year();
        org.joda.time.DateTime dateTime70 = property69.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime72 = property69.addToCopy((long) 61);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardHours((-229564796800L));
        org.joda.time.Period period75 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableDuration) duration74);
        org.joda.time.DateTime dateTime77 = dateTime72.withWeekyear(0);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.standard();
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant61, (org.joda.time.ReadableInstant) dateTime77, periodType78);
        org.joda.time.PeriodType periodType80 = periodType78.withYearsRemoved();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 10 + "'", int11 == 10);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT86400S" + "'", str22, "PT86400S");
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT86400S" + "'", str31, "PT86400S");
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(hours34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 10 + "'", int37 == 10);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(interval62);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 22 + "'", int65 == 22);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType80);
    }

    @Test
    public void test05096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05096");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.DurationField durationField6 = chronology4.weeks();
        long long9 = durationField6.getMillis(1004990L, 1109905L);
        long long12 = durationField6.add(8646566400000L, (long) 26517999);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 607817952000000L + "'", long9 == 607817952000000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 16046732361600000L + "'", long12 == 16046732361600000L);
    }

    @Test
    public void test05097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05097");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZoneUTC();
        boolean boolean14 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology15 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withOffsetParsed();
        java.util.Locale locale17 = dateTimeFormatter2.getLocale();
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = dateTimeFormatter2.getPrinter();
        org.joda.time.Chronology chronology19 = dateTimeFormatter2.getChronology();
        java.util.Locale locale23 = new java.util.Locale("2022-02-23T07:17:16.820Z", "2022-02-22T07:19:11.625Z", "2022-02-22T07:18:20.665Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter2.withLocale(locale23);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str29 = duration28.toString();
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration28, 8);
        mutableDateTime26.setSecondOfMinute((int) (short) 0);
        mutableDateTime26.addMonths(36956320);
        mutableDateTime26.setDayOfYear(49);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime41 = dateTime39.withZoneRetainFields(dateTimeZone40);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.DateTime dateTime46 = localDate42.toDateTimeAtCurrentTime(dateTimeZone44);
        int int47 = dateTime41.compareTo((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime49 = dateTime46.minusWeeks(44);
        org.joda.time.DateTime dateTime52 = dateTime49.withDurationAdded((-1L), 36946953);
        org.joda.time.YearMonthDay yearMonthDay53 = dateTime52.toYearMonthDay();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Duration duration61 = duration57.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration69 = duration66.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean70 = duration64.isLongerThan((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Minutes minutes71 = duration64.toStandardMinutes();
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime55, (org.joda.time.ReadableDuration) duration64);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period75 = duration74.toPeriod();
        org.joda.time.PeriodType periodType76 = period75.getPeriodType();
        org.joda.time.Period period77 = period72.withPeriodType(periodType76);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime26, (org.joda.time.ReadableInstant) dateTime52, periodType76);
        mutableDateTime26.addWeeks(69);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime26.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str82 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) mutableDateTime26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(locale17);
        org.junit.Assert.assertNull(dateTimePrinter18);
        org.junit.Assert.assertNull(chronology19);
        org.junit.Assert.assertEquals(locale23.toString(), "2022-02-23t07:17:16.820z_2022-02-22T07:19:11.625Z_2022-02-22T07:18:20.665Z");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT86400S" + "'", str29, "PT86400S");
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(yearMonthDay53);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(minutes71);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(property81);
    }

    @Test
    public void test05098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05098");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        boolean boolean37 = dateTimeFormatter2.isPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter38 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField45 = localDateTime43.getField((int) (byte) 0);
        long long47 = dateTimeField45.roundHalfEven((long) 1);
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.lang.String str50 = locale48.getDisplayVariant(locale49);
        java.lang.String str51 = locale48.getISO3Language();
        java.lang.String str52 = locale48.getISO3Country();
        java.util.Locale locale53 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale53);
        java.lang.String str55 = locale48.getDisplayLanguage(locale53);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.DateTimeField dateTimeField60 = property59.getField();
        int int61 = property59.get();
        java.util.Locale locale62 = java.util.Locale.getDefault();
        java.lang.String str63 = property59.getAsShortText(locale62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int70 = localDateTime68.get(dateTimeFieldType69);
        java.util.Locale locale71 = java.util.Locale.TRADITIONAL_CHINESE;
        boolean boolean72 = localDateTime68.equals((java.lang.Object) locale71);
        java.lang.String str73 = locale62.getDisplayVariant(locale71);
        java.lang.String str74 = locale53.getDisplayScript(locale71);
        int int75 = dateTimeField45.getMaximumTextLength(locale71);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter38.withLocale(locale71);
        org.joda.time.Chronology chronology77 = dateTimeFormatter76.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter76.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter76.withPivotYear(26158);
        int int81 = dateTimeFormatter80.getDefaultYear();
        org.joda.time.MutableDateTime mutableDateTime83 = new org.joda.time.MutableDateTime(0L);
        org.joda.time.ReadableDuration readableDuration84 = null;
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime83, readableDuration84);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str86 = dateTimeFormatter80.print((org.joda.time.ReadableInstant) mutableDateTime83);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u5fb7\u6587" + "'", str34, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "deu" + "'", str51, "deu");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u5fb7\u6587" + "'", str55, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 7 + "'", int61 == 7);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "7" + "'", str63, "7");
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1439 + "'", int70 == 1439);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 9 + "'", int75 == 9);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNull(chronology77);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertTrue("'" + int81 + "' != '" + 2000 + "'", int81 == 2000);
    }

    @Test
    public void test05099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05099");
        org.joda.time.Duration duration2 = new org.joda.time.Duration((long) 61, (long) 13);
        long long3 = duration2.getStandardMinutes();
        org.joda.time.Duration duration5 = duration2.minus((long) 579);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getYearOfCentury();
        int int9 = dateTime7.getWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime7.withEarlierOffsetAtOverlap();
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime10.toMutableDateTime();
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime10.plusMonths(37068754);
        org.joda.time.DateTime dateTime17 = dateTime10.minusYears(26458559);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Interval interval18 = duration5.toIntervalTo((org.joda.time.ReadableInstant) dateTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: The end instant must be greater or equal to the start");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T07:22:10.576Z" + "'", str11, "2022-02-22T07:22:10.576Z");
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test05100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05100");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfCentury();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.weekOfWeekyear();
        int int22 = mutableDateTime19.getYearOfEra();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.era();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime19.setDayOfWeek(26263);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26263 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:22:10.597Z" + "'", str14, "2022-02-22T07:22:10.597Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test05101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05101");
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.add((long) 'a');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str11 = duration10.toString();
        boolean boolean12 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Hours hours13 = duration8.toStandardHours();
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration8, 20);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime17.toString(dateTimeFormatter19);
        org.joda.time.DateTime dateTime22 = dateTime17.minusMonths(22);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.DateTime dateTime28 = dateTime17.withChronology(chronology26);
        org.joda.time.Period period29 = duration8.toPeriod(chronology26);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration32, readableInstant33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 1L, periodType37);
        org.joda.time.Period period40 = period38.minusSeconds((-1));
        java.lang.String str41 = period38.toString();
        org.joda.time.Period period42 = period38.toPeriod();
        org.joda.time.PeriodType periodType43 = period38.getPeriodType();
        org.joda.time.Period period44 = period34.normalizedStandard(periodType43);
        java.lang.String str45 = periodType43.getName();
        java.lang.String str46 = periodType43.toString();
        org.joda.time.PeriodType periodType47 = periodType43.withDaysRemoved();
        org.joda.time.PeriodType periodType48 = periodType47.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType48);
        int[] intArray51 = chronology26.get((org.joda.time.ReadablePeriod) mutablePeriod49, 1L);
        org.joda.time.DateTimeField dateTimeField52 = chronology26.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField53 = chronology26.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(1197443, 62167, 26309196, 134, chronology26);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1197443 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT86400S" + "'", str11, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:22:10.613Z" + "'", str20, "2022-02-22T07:22:10.613Z");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT0.099S" + "'", str41, "PT0.099S");
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(periodType43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Standard" + "'", str45, "Standard");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PeriodType[Standard]" + "'", str46, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(intArray51);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray51), "[0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(dateTimeField53);
    }

    @Test
    public void test05102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05102");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime4.copy();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property8.set(1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfCentury();
        int int16 = dateTime14.getWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime14.withEarlierOffsetAtOverlap();
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        mutableDateTime19.setZoneRetainFields(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime12.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone20);
        long long27 = dateTimeZone20.convertLocalToUTC(2100L, true);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) instant2, dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now(dateTimeZone20);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime(dateTimeZone20);
        boolean boolean31 = dateTimeZone20.isFixed();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T07:22:10.649Z" + "'", str18, "2022-02-22T07:22:10.649Z");
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2100L + "'", long27 == 2100L);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test05103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05103");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfCentury();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str26 = duration25.toString();
        org.joda.time.Instant instant27 = instant21.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Days days28 = duration25.toStandardDays();
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration25, 1439);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime32.setSecondOfMinute(53);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime32.copy();
        int int36 = mutableDateTime32.getWeekyear();
        boolean boolean37 = mutableDateTime32.isBeforeNow();
        int int38 = mutableDateTime32.getYearOfCentury();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean42 = localDate39.isSupported(dateTimeFieldType41);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration52 = duration48.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant53 = instant46.plus((org.joda.time.ReadableDuration) duration52);
        long long54 = instant53.getMillis();
        org.joda.time.Chronology chronology55 = instant53.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.months();
        org.joda.time.Period period57 = new org.joda.time.Period((-205878993L), chronology55);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType41.getField(chronology55);
        boolean boolean60 = mutableDateTime32.isSupported(dateTimeFieldType41);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime19.property(dateTimeFieldType41);
        int int62 = mutableDateTime19.getSecondOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:22:10.676Z" + "'", str14, "2022-02-22T07:22:10.676Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT86400S" + "'", str26, "PT86400S");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(days28);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1970 + "'", int36 == 1970);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 69 + "'", int38 == 69);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 86400000L + "'", long54 == 86400000L);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test05104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05104");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale4 = java.util.Locale.GERMAN;
        java.lang.String str5 = locale4.getDisplayName();
        java.lang.String str6 = dateTimeZone2.getName(100L, locale4);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(948227L, dateTimeZone2);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.year();
        mutableDateTime7.addHours(16);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        long long15 = dateTimeZone11.getMillisKeepLocal(dateTimeZone13, (long) 44);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(dateTimeZone11);
        mutableDateTime7.setZoneRetainFields(dateTimeZone11);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration22, readableInstant23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.Period period30 = period28.minusSeconds((-1));
        java.lang.String str31 = period28.toString();
        org.joda.time.Period period32 = period28.toPeriod();
        org.joda.time.PeriodType periodType33 = period28.getPeriodType();
        org.joda.time.Period period34 = period24.normalizedStandard(periodType33);
        org.joda.time.DurationFieldType durationFieldType35 = null;
        int int36 = periodType33.indexOf(durationFieldType35);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Chronology chronology40 = instant39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.eras();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.DurationField durationField43 = chronology40.eras();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType33, chronology40);
        org.joda.time.DurationFieldType durationFieldType46 = null;
        boolean boolean47 = periodType33.isSupported(durationFieldType46);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 59, 0L, periodType33);
        org.joda.time.PeriodType periodType49 = periodType33.withHoursRemoved();
        boolean boolean50 = dateTimeZone11.equals((java.lang.Object) periodType33);
        long long52 = dateTimeZone11.convertUTCToLocal((long) 119);
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime((long) 26222789, dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "German" + "'", str5, "German");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00" + "'", str6, "+00:00");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 44L + "'", long15 == 44L);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0.099S" + "'", str31, "PT0.099S");
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 119L + "'", long52 == 119L);
    }

    @Test
    public void test05105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05105");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = duration1.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        boolean boolean19 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        long long20 = duration4.getMillis();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.months();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime30, periodType31);
        boolean boolean33 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        int int34 = dateTime28.getDayOfMonth();
        org.joda.time.DateTime.Property property35 = dateTime28.dayOfYear();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Chronology chronology40 = instant39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.eras();
        org.joda.time.DateTimeField dateTimeField42 = chronology40.hourOfDay();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(readableInstant43, readableInstant44, periodType45);
        mutablePeriod46.setYears((int) '#');
        mutablePeriod46.setSeconds((int) 'a');
        mutablePeriod46.setPeriod((long) 0, (-1L));
        mutablePeriod46.addHours((-1));
        long long58 = chronology40.add((org.joda.time.ReadablePeriod) mutablePeriod46, (long) 999, 7);
        org.joda.time.LocalDateTime localDateTime59 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime59.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusMinutes(15);
        org.joda.time.DateTime dateTime70 = localDateTime63.toDateTime((org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone72 = dateTimeZone71.toTimeZone();
        org.joda.time.DateTime dateTime73 = dateTime70.withZone(dateTimeZone71);
        org.joda.time.Instant instant74 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime75 = instant74.toDateTime();
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(chronology83);
        org.joda.time.DateTime dateTime86 = dateTime84.plusMinutes(15);
        org.joda.time.DateTime dateTime87 = localDateTime80.toDateTime((org.joda.time.ReadableInstant) dateTime84);
        org.joda.time.DateTimeZone dateTimeZone88 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime89 = localDateTime80.toDateTime(dateTimeZone88);
        org.joda.time.DateTime dateTime90 = dateTime75.withZoneRetainFields(dateTimeZone88);
        mutablePeriod46.setPeriod((org.joda.time.ReadableInstant) dateTime70, (org.joda.time.ReadableInstant) dateTime90);
        org.joda.time.ReadableInstant readableInstant92 = null;
        org.joda.time.ReadableInstant readableInstant93 = null;
        org.joda.time.PeriodType periodType94 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod(readableInstant92, readableInstant93, periodType94);
        org.joda.time.DurationFieldType durationFieldType97 = periodType94.getFieldType((int) (short) 0);
        org.joda.time.Period period98 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime70, periodType94);
        long long99 = duration4.getStandardHours();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-205878993L) + "'", long20 == (-205878993L));
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + (-25199008L) + "'", long58 == (-25199008L));
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(dateTimeZone71);
        org.junit.Assert.assertNotNull(timeZone72);
        org.junit.Assert.assertEquals(timeZone72.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTimeZone88);
        org.junit.Assert.assertNotNull(dateTime89);
        org.junit.Assert.assertNotNull(dateTime90);
        org.junit.Assert.assertNotNull(periodType94);
        org.junit.Assert.assertNotNull(durationFieldType97);
        org.junit.Assert.assertTrue("'" + long99 + "' != '" + (-57L) + "'", long99 == (-57L));
    }

    @Test
    public void test05106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05106");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = mutablePeriod3.getFieldTypes();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours12 = duration11.toStandardHours();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration8.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration18 = duration8.toDuration();
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInterval readableInterval20 = null;
        mutablePeriod3.setPeriod(readableInterval20);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.add(51);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.LocalDate localDate31 = property29.roundCeilingCopy();
        org.joda.time.Chronology chronology32 = localDate31.getChronology();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime36 = localDate31.toDateTimeAtMidnight(dateTimeZone35);
        org.joda.time.DateTime.Property property37 = dateTime36.monthOfYear();
        org.joda.time.DateTime dateTime39 = dateTime36.minusMonths(53);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInstant) mutableDateTime27, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime27.yearOfCentury();
        java.lang.String str42 = property41.getAsString();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        mutableDateTime43.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime43.copy();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime43.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime50 = property47.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime50.toMutableDateTime(dateTimeZone51);
        int int55 = dateTimeZone51.getStandardOffset(60000L);
        java.util.Locale.Builder builder57 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder58 = builder57.clear();
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale59.getDisplayName();
        java.lang.String str61 = locale59.getISO3Language();
        java.util.Locale.Builder builder62 = builder58.setLocale(locale59);
        java.lang.String str63 = dateTimeZone51.getName(950707L, locale59);
        java.util.Set<java.lang.String> strSet64 = locale59.getUnicodeLocaleKeys();
        java.lang.String str65 = locale59.getDisplayVariant();
        java.lang.String str66 = locale59.toLanguageTag();
        java.lang.String str67 = property41.getAsText(locale59);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(hours12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(localDate31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "22" + "'", str42, "22");
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u5fb7\u6587" + "'", str60, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "deu" + "'", str61, "deu");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "+00:00" + "'", str63, "+00:00");
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "de" + "'", str66, "de");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "22" + "'", str67, "22");
    }

    @Test
    public void test05107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05107");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period11 = period9.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime12 = localDateTime5.minus((org.joda.time.ReadablePeriod) period9);
        org.joda.time.LocalDateTime.Property property13 = localDateTime5.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime14 = property13.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.plusHours(292278993);
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod19.clear();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.Period period29 = period24.plus((org.joda.time.ReadablePeriod) period28);
        org.joda.time.MutablePeriod mutablePeriod30 = period29.toMutablePeriod();
        mutablePeriod30.setMillis(62167);
        mutablePeriod19.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod30);
        mutablePeriod30.addMinutes((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime14.plus((org.joda.time.ReadablePeriod) mutablePeriod30);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj38 = mutableDateTime37.clone();
        mutableDateTime37.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime37.dayOfWeek();
        mutableDateTime37.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime37.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime45 = property44.roundCeiling();
        mutableDateTime45.addMonths(37112100);
        org.joda.time.Duration duration48 = mutablePeriod30.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime45);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime45.setDateTime(369502, 26476, 0, 62461, 1347, 274, 3021);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62461 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(mutablePeriod30);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(obj38);
// flaky:         org.junit.Assert.assertEquals(obj38.toString(), "2022-02-22T07:22:10.886Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "2022-02-22T07:22:10.886Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "2022-02-22T07:22:10.886Z");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(duration48);
    }

    @Test
    public void test05108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05108");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str6 = duration5.toString();
        boolean boolean7 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration17 = duration14.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean18 = duration12.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration19 = duration9.minus((org.joda.time.ReadableDuration) duration12);
        boolean boolean20 = duration3.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.Period period25 = period23.withDays((int) (byte) 1);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours28 = duration27.toStandardHours();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = period23.toDurationFrom((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration35 = duration19.withDurationAdded((org.joda.time.ReadableDuration) duration33, (int) ' ');
        int int36 = duration1.compareTo((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration38 = duration19.plus(232051062L);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(5L);
        org.joda.time.Period period41 = duration19.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime40);
        mutableDateTime40.add((long) 314);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT86400S" + "'", str6, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(hours28);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period41);
    }

    @Test
    public void test05109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05109");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray6 = mutablePeriod3.getFieldTypes();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours12 = duration11.toStandardHours();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration8.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Duration duration18 = duration8.toDuration();
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration8);
        int int20 = mutablePeriod3.getHours();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration28 = duration24.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        int int32 = dateTime31.getSecondOfMinute();
        org.joda.time.Interval interval33 = duration28.toIntervalTo((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean36 = localDate34.isSupported(dateTimeFieldType35);
        org.joda.time.LocalDate.Property property37 = localDate34.yearOfEra();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str43 = duration42.toString();
        org.joda.time.Instant instant44 = instant38.minus((org.joda.time.ReadableDuration) duration42);
        int int45 = property37.getDifference((org.joda.time.ReadableInstant) instant38);
        org.joda.time.Duration duration48 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant49 = instant38.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str52 = duration51.toString();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours55 = duration54.toStandardHours();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        int int58 = dateTime57.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration54, (org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Duration duration60 = duration51.plus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period63 = duration62.toPeriod();
        org.joda.time.Duration duration65 = duration62.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now();
        mutableDateTime66.add((long) 'a');
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime66.yearOfCentury();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period72 = duration71.toPeriod();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration77 = duration74.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration78 = duration71.minus((org.joda.time.ReadableDuration) duration77);
        mutableDateTime66.add((org.joda.time.ReadableDuration) duration71);
        boolean boolean80 = duration65.isShorterThan((org.joda.time.ReadableDuration) duration71);
        boolean boolean81 = duration54.isLongerThan((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Instant instant82 = instant49.minus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Interval interval83 = duration28.toIntervalTo((org.joda.time.ReadableInstant) instant82);
        mutablePeriod3.setPeriod((org.joda.time.ReadableInterval) interval83);
        int int85 = mutablePeriod3.getWeeks();
        int int86 = mutablePeriod3.size();
        mutablePeriod3.setMillis(26450485);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(durationFieldTypeArray6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(hours12);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration28);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 10 + "'", int32 == 10);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT86400S" + "'", str43, "PT86400S");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT86400S" + "'", str52, "PT86400S");
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(hours55);
// flaky:         org.junit.Assert.assertTrue("'" + int58 + "' != '" + 10 + "'", int58 == 10);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration77);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(interval83);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 0 + "'", int85 == 0);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 6 + "'", int86 == 6);
    }

    @Test
    public void test05110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05110");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.toMutableDateTime();
        int int8 = mutableDateTime7.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.millisOfSecond();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant13 = mutableDateTime7.toInstant();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime14.copy();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime14.yearOfCentury();
        mutableDateTime14.setHourOfDay(9);
        mutableDateTime14.setWeekyear(4);
        mutableDateTime14.setTime((long) (byte) -1);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant13, (org.joda.time.ReadableInstant) mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26531 + "'", int8 == 26531);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property18);
    }

    @Test
    public void test05111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05111");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property2.addWrapField(52);
        org.joda.time.DateTimeField dateTimeField7 = property2.getField();
        int int8 = property2.getMaximumValueOverall();
        org.joda.time.Interval interval9 = property2.toInterval();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 7 + "'", int8 == 7);
        org.junit.Assert.assertNotNull(interval9);
    }

    @Test
    public void test05112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05112");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = localDateTime9.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        mutableDateTime4.setRounding(dateTimeField20);
        java.lang.Object obj22 = mutableDateTime4.clone();
        java.lang.String str23 = mutableDateTime4.toString();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime4.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime26 = property24.set("2022-02-22T07:17:12.183Z");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:17:12.183Z\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertEquals(obj22.toString(), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "4500-01-01T00:00:00.000Z" + "'", str23, "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test05113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05113");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str8 = duration7.toString();
        boolean boolean9 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration7);
        java.lang.String str10 = duration5.toString();
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType12 = periodType11.withMonthsRemoved();
        org.joda.time.PeriodType periodType13 = periodType12.withDaysRemoved();
        org.joda.time.Period period14 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime2, (org.joda.time.ReadableDuration) duration5, periodType13);
        org.joda.time.DateTime dateTime16 = dateTime2.withMinuteOfHour((int) (short) 0);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField19 = property18.getField();
        org.joda.time.LocalDate localDate20 = property18.roundCeilingCopy();
        org.joda.time.Chronology chronology21 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime25 = localDate20.toDateTimeAtMidnight(dateTimeZone24);
        java.lang.String str26 = dateTimeZone24.getID();
        org.joda.time.DateTime dateTime27 = dateTime16.withZone(dateTimeZone24);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PT86400S" + "'", str8, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT86400S" + "'", str10, "PT86400S");
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(periodType13);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+53:00" + "'", str26, "+53:00");
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test05114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05114");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1645514161062L);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration10, readableInstant11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period18 = period16.minusSeconds((-1));
        java.lang.String str19 = period16.toString();
        org.joda.time.Period period20 = period16.toPeriod();
        org.joda.time.PeriodType periodType21 = period16.getPeriodType();
        org.joda.time.Period period22 = period12.normalizedStandard(periodType21);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        int int24 = periodType21.indexOf(durationFieldType23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.eras();
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(chronology28);
        org.joda.time.DurationField durationField31 = chronology28.eras();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType21, chronology28);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime2.toMutableDateTime(chronology28);
        mutableDateTime34.setDate((long) (-292275054));
        mutableDateTime34.addWeekyears(616);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.months();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) mutableDateTime34, periodType39);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj42 = mutableDateTime41.clone();
        mutableDateTime41.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime41.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.add(1L);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        long long52 = dateTimeZone48.getMillisKeepLocal(dateTimeZone50, (long) 44);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone48);
        mutableDateTime47.setZoneRetainFields(dateTimeZone48);
        java.lang.String str56 = dateTimeZone48.getNameKey((long) 26183562);
        mutableDateTime34.setZoneRetainFields(dateTimeZone48);
        mutableDateTime34.setWeekyear(0);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.099S" + "'", str19, "PT0.099S");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(obj42);
// flaky:         org.junit.Assert.assertEquals(obj42.toString(), "2022-02-22T07:22:11.034Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj42), "2022-02-22T07:22:11.034Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj42), "2022-02-22T07:22:11.034Z");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 44L + "'", long52 == 44L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "UTC" + "'", str56, "UTC");
    }

    @Test
    public void test05115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05115");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        mutableDateTime6.addWeeks(5);
        mutableDateTime6.setMonthOfYear((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setMinuteOfDay(26397298);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26397298 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:11.081Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:11.081Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:11.081Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
    }

    @Test
    public void test05116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05116");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(999, 12, 8, (int) (byte) 10, 5, (-292275054), 15, 50);
        int int9 = mutablePeriod8.getMillis();
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 1L, periodType12);
        org.joda.time.Period period15 = period13.minusSeconds((-1));
        java.lang.String str16 = period13.toString();
        mutablePeriod8.setPeriod((org.joda.time.ReadablePeriod) period13);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration26 = duration22.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant27 = instant20.plus((org.joda.time.ReadableDuration) duration26);
        long long28 = instant27.getMillis();
        org.joda.time.Chronology chronology29 = instant27.getChronology();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        mutableDateTime30.add((long) 'a');
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str37 = duration36.toString();
        boolean boolean38 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Hours hours39 = duration34.toStandardHours();
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration34, 20);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = dateTime43.toString(dateTimeFormatter45);
        org.joda.time.DateTime dateTime48 = dateTime43.minusMonths(22);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.eras();
        org.joda.time.DateTime dateTime54 = dateTime43.withChronology(chronology52);
        org.joda.time.Period period55 = duration34.toPeriod(chronology52);
        org.joda.time.Instant instant57 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration34, 16);
        org.joda.time.Duration duration58 = duration34.toDuration();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        int int61 = dateTime60.getYearOfCentury();
        int int62 = dateTime60.getYearOfEra();
        org.joda.time.DateTime dateTime63 = dateTime60.withLaterOffsetAtOverlap();
        org.joda.time.Interval interval64 = duration34.toIntervalFrom((org.joda.time.ReadableInstant) dateTime60);
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval64);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 50 + "'", int9 == 50);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT0.099S" + "'", str16, "PT0.099S");
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 86400000L + "'", long28 == 86400000L);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT86400S" + "'", str37, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T07:22:11.090Z" + "'", str46, "2022-02-22T07:22:11.090Z");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 22 + "'", int61 == 22);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(interval64);
    }

    @Test
    public void test05117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05117");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        int int6 = localTime5.getMillisOfDay();
        org.joda.time.LocalTime localTime8 = localTime5.plusHours(40);
        org.joda.time.LocalTime.Property property9 = localTime8.millisOfDay();
        java.lang.String str10 = property9.getName();
        org.joda.time.LocalTime localTime11 = property9.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime12 = property9.roundHalfEvenCopy();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime13.copy();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime13.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.addWrapField(62151);
        int int20 = mutableDateTime19.getMillisOfDay();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int27 = localDateTime25.get(dateTimeFieldType26);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime19.property(dateTimeFieldType26);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime30 = localTime12.withField(dateTimeFieldType26, 26245168);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26245168 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 26531114 + "'", int6 == 26531114);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "millisOfDay" + "'", str10, "millisOfDay");
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 26531211 + "'", int20 == 26531211);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1439 + "'", int27 == 1439);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test05118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05118");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField22 = localDateTime20.getField((int) (byte) 0);
        long long24 = dateTimeField22.roundHalfEven((long) 1);
        int int25 = dateTime15.get(dateTimeField22);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) 'a');
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime30, 53, locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter3.withLocale(locale34);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter3.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone39);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter3.withZone(dateTimeZone39);
        boolean boolean43 = dateTimeFormatter42.isPrinter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.parse("2022-02-22T07:18:40.923Z", dateTimeFormatter42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 105144L + "'", long12 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "German" + "'", str35, "German");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "53" + "'", str36, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(dateTimePrinter38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
    }

    @Test
    public void test05119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05119");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period10 = period8.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        mutableDateTime17.setRounding(dateTimeField33);
        org.joda.time.Duration duration38 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime17.centuryOfEra();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        mutablePeriod44.setPeriod((long) 999, chronology49);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod58.addDays((int) (byte) 10);
        mutablePeriod58.addMillis((int) '4');
        mutablePeriod58.setSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone65 = null;
        org.joda.time.LocalTime localTime66 = new org.joda.time.LocalTime(dateTimeZone65);
        org.joda.time.ReadablePeriod readablePeriod67 = null;
        org.joda.time.LocalTime localTime68 = localTime66.plus(readablePeriod67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(readableInstant69, readableInstant70, periodType71);
        org.joda.time.DurationFieldType durationFieldType74 = periodType71.getFieldType((int) (short) 0);
        boolean boolean75 = localTime66.isSupported(durationFieldType74);
        mutablePeriod58.add(durationFieldType74, 8);
        boolean boolean78 = mutablePeriod44.isSupported(durationFieldType74);
        mutablePeriod44.addWeeks(443);
        mutableDateTime17.add((org.joda.time.ReadablePeriod) mutablePeriod44, 26176);
        int int83 = mutableDateTime17.getDayOfYear();
        mutableDateTime17.addWeekyears(26);
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime17.millisOfDay();
        int int87 = mutableDateTime17.getYearOfCentury();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "English" + "'", str35, "English");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localTime68);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 335 + "'", int83 == 335);
        org.junit.Assert.assertNotNull(property86);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 88 + "'", int87 == 88);
    }

    @Test
    public void test05120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05120");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.weekyear();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusYears((-100));
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.millisOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test05121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05121");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter13.withZoneUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatter14.getPrinter();
        java.lang.Appendable appendable16 = null;
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration28 = duration25.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration29 = duration22.minus((org.joda.time.ReadableDuration) duration28);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime17.centuryOfEra();
        mutableDateTime17.addHours((int) (byte) 10);
        mutableDateTime17.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField36 = mutableDateTime17.getRoundingField();
        int int37 = mutableDateTime17.getWeekyear();
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime17.add(readableDuration38);
        mutableDateTime17.addDays(2121);
        int int42 = mutableDateTime17.getDayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter14.printTo(appendable16, (org.joda.time.ReadableInstant) mutableDateTime17);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNull(dateTimePrinter15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2022 + "'", int37 == 2022);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 3 + "'", int42 == 3);
    }

    @Test
    public void test05122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05122");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime7 = property5.addWrapFieldToCopy(8);
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        boolean boolean11 = dateTime9.isBefore((long) 7);
        java.lang.String str12 = dateTime9.toString();
        org.joda.time.DateTime dateTime14 = dateTime9.minus((long) 7);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Chronology chronology18 = instant17.getChronology();
        org.joda.time.DateTime dateTime19 = dateTime9.toDateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime9.plusSeconds(26150803);
        org.joda.time.DateTime dateTime23 = dateTime9.minusSeconds((int) ' ');
        org.joda.time.LocalDate localDate24 = dateTime9.toLocalDate();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        org.joda.time.LocalDate localDate28 = property26.roundCeilingCopy();
        org.joda.time.LocalDate localDate30 = localDate28.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTime dateTime31 = localDate28.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property32 = localDate28.yearOfEra();
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((long) (byte) -1);
        int int35 = localDate34.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        long long40 = dateTimeZone36.getMillisKeepLocal(dateTimeZone38, (long) 44);
        org.joda.time.DateTime dateTime41 = localDate34.toDateTimeAtMidnight(dateTimeZone36);
        java.util.Locale locale43 = null;
        java.lang.String str44 = dateTimeZone36.getName(946000L, locale43);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(dateTimeZone36);
        long long48 = dateTimeZone36.nextTransition((long) 25);
        org.joda.time.Interval interval49 = localDate28.toInterval(dateTimeZone36);
        org.joda.time.DateTime dateTime50 = localDate24.toDateTimeAtCurrentTime(dateTimeZone36);
        // The following exception was thrown during execution in test generation
        try {
            int int51 = localDateTime7.compareTo((org.joda.time.ReadablePartial) localDate24);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22T07:22:11.303Z" + "'", str12, "2022-02-22T07:22:11.303Z");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1969 + "'", int35 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 44L + "'", long40 == 44L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "+00:00" + "'", str44, "+00:00");
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 25L + "'", long48 == 25L);
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test05123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05123");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.setMillisOfSecond(32);
        int int19 = mutableDateTime0.getMillisOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setMinuteOfHour(385);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 385 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 62531032 + "'", int19 == 62531032);
    }

    @Test
    public void test05124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05124");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.LocalDate localDate4 = property2.roundCeilingCopy();
        org.joda.time.LocalDate localDate6 = localDate4.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate8 = localDate4.withWeekOfWeekyear(46);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 26198, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime12.toString(dateTimeFormatter14);
        org.joda.time.DateTime dateTime17 = dateTime12.minusMonths(22);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        org.joda.time.DateTime dateTime23 = dateTime12.withChronology(chronology21);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.centuryOfEra();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime24.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        boolean boolean28 = dateTime12.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        int int30 = localDate29.getDayOfMonth();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        boolean boolean32 = dateTimeFieldType27.isSupported(chronology31);
        mutableDateTime10.setChronology(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.secondOfDay();
        long long37 = dateTimeField34.addWrapField((long) 37174539, 33489);
        org.joda.time.DurationField durationField38 = dateTimeField34.getLeapDurationField();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:22:11.354Z" + "'", str15, "2022-02-22T07:22:11.354Z");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 70663539L + "'", long37 == 70663539L);
        org.junit.Assert.assertNull(durationField38);
    }

    @Test
    public void test05125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05125");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = duration15.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration19 = duration12.minus((org.joda.time.ReadableDuration) duration18);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime7.centuryOfEra();
        mutableDateTime7.addHours((int) (byte) 10);
        mutableDateTime7.addWeeks(100);
        boolean boolean26 = instant0.isAfter((org.joda.time.ReadableInstant) mutableDateTime7);
        mutableDateTime7.setTime(959393L);
        mutableDateTime7.setTime((long) 37205812);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test05126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05126");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalDate.Property property2 = localDate1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime4.copy();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property8.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.toMutableDateTime(dateTimeZone12);
        mutableDateTime14.add(51L);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        mutableDateTime18.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime18.copy();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime26 = property22.set(1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getYearOfCentury();
        int int30 = dateTime28.getWeekyear();
        org.joda.time.DateTime dateTime31 = dateTime28.withEarlierOffsetAtOverlap();
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime31.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone34.isFixed();
        mutableDateTime33.setZoneRetainFields(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime26.toMutableDateTime(dateTimeZone34);
        mutableDateTime14.setZone(dateTimeZone34);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = dateTime42.withZoneRetainFields(dateTimeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtCurrentTime(dateTimeZone47);
        int int50 = dateTime44.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime49.minusWeeks(44);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMinutes(15);
        org.joda.time.Chronology chronology57 = dateTime54.getChronology();
        java.lang.String str58 = chronology57.toString();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.dayOfYear();
        org.joda.time.DateTime dateTime60 = dateTime49.withChronology(chronology57);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(readableInstant62, readableInstant63, periodType64);
        org.joda.time.DurationFieldType durationFieldType67 = periodType64.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType68 = periodType64.withMillisRemoved();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime60, readableDuration61, periodType68);
        org.joda.time.Period period70 = new org.joda.time.Period(0L, periodType68);
        org.joda.time.format.DateTimePrinter dateTimePrinter71 = null;
        org.joda.time.format.DateTimeParser dateTimeParser72 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter71, dateTimeParser72);
        org.joda.time.Instant instant74 = new org.joda.time.Instant();
        org.joda.time.Instant instant76 = instant74.withMillis(0L);
        org.joda.time.Chronology chronology77 = instant76.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.eras();
        long long82 = chronology77.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter73.withChronology(chronology77);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(3600000L, periodType68, chronology77);
        org.joda.time.DateTimeZone dateTimeZone85 = chronology77.getZone();
        boolean boolean86 = dateTimeZone34.equals((java.lang.Object) chronology77);
        org.joda.time.MutableDateTime mutableDateTime87 = new org.joda.time.MutableDateTime((long) 26252, dateTimeZone34);
        org.joda.time.DateTime dateTime88 = localDate1.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.LocalDateTime localDateTime89 = null;
        boolean boolean90 = dateTimeZone34.isLocalDateTimeGap(localDateTime89);
        long long94 = dateTimeZone34.convertLocalToUTC((long) 26281, true, 1045242L);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "2022-02-22T07:22:11.387Z" + "'", str32, "2022-02-22T07:22:11.387Z");
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ISOChronology[UTC]" + "'", str58, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(periodType64);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(periodType68);
        org.junit.Assert.assertNotNull(instant76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(durationField78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 105144L + "'", long82 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter83);
        org.junit.Assert.assertNotNull(dateTimeZone85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + 26281L + "'", long94 == 26281L);
    }

    @Test
    public void test05127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05127");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime8 = property4.addWrapField(26150);
        org.joda.time.DateTimeField dateTimeField9 = property4.getField();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration17 = duration13.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Instant instant19 = dateTime11.toInstant();
        org.joda.time.DateTime dateTime22 = dateTime11.withDurationAdded((long) 3, 4);
        org.joda.time.DateTime dateTime24 = dateTime11.plusMinutes(1969);
        org.joda.time.DateTime dateTime26 = dateTime11.plusMonths(9722);
        org.joda.time.DateTime.Property property27 = dateTime11.minuteOfDay();
        org.joda.time.DateTime dateTime28 = property27.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((java.lang.Object) dateTime28);
        int int30 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDate29);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 292278993 + "'", int30 == 292278993);
    }

    @Test
    public void test05128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05128");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime1.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime1.minusMonths(22);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DateTime dateTime12 = dateTime1.withChronology(chronology10);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.centuryOfEra();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime13.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        boolean boolean17 = dateTime1.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate localDate18 = dateTime1.toLocalDate();
        org.joda.time.DateTime.Property property19 = dateTime1.secondOfMinute();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:22:11.441Z" + "'", str4, "2022-02-22T07:22:11.441Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test05129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05129");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone3.getName(946000L, locale10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone3);
        mutableDateTime12.addMillis((-356));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getSecondOfMinute();
        boolean boolean18 = dateTime16.isEqualNow();
        int int19 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime16.plusDays((int) '#');
        org.joda.time.DateTime.Property property22 = dateTime16.centuryOfEra();
        org.joda.time.DateTime.Property property23 = dateTime16.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateTime16);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime12.setMonthOfYear(1191);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1191 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 11 + "'", int17 == 11);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test05130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05130");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        mutablePeriod35.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod35.toMutablePeriod();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod38, 1439);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration41, readableInstant42);
        org.joda.time.Period period45 = period43.withDays((int) (byte) 1);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours48 = duration47.toStandardHours();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = period43.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        int int54 = period43.getDays();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period43);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime16.dayOfMonth();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime16.monthOfYear();
        java.lang.String str58 = property57.getName();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(hours48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 11 + "'", int51 == 11);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "monthOfYear" + "'", str58, "monthOfYear");
    }

    @Test
    public void test05131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05131");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        mutableDateTime0.setDayOfYear(44);
        mutableDateTime0.setTime((long) (short) -1);
        mutableDateTime0.addSeconds(359);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDateTime(62181, 262, 26219, 26337, 62266, 37079542, 350);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26337 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.099S" + "'", str17, "PT0.099S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
    }

    @Test
    public void test05132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05132");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        int int4 = localTime3.getMinuteOfHour();
        java.lang.String str6 = localTime3.toString("1");
        org.joda.time.LocalTime localTime8 = localTime3.minusMinutes(15);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 15);
        org.joda.time.DateTime.Property property15 = dateTime10.year();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime();
        org.joda.time.LocalTime localTime19 = dateTime16.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime3.withFields((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime localTime22 = localTime20.minusMinutes(26197957);
        org.joda.time.LocalTime localTime24 = localTime20.plusHours(99);
        org.joda.time.Chronology chronology25 = localTime20.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField27 = localTime20.getField(62187);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 62187");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(chronology25);
    }

    @Test
    public void test05133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05133");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 44);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder15.clear();
        java.util.Locale locale17 = builder16.build();
        java.lang.String str18 = dateTimeZone7.getName(555370422L, locale17);
        java.lang.String str20 = dateTimeZone7.getShortName(962578L);
        org.joda.time.LocalTime localTime21 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.LocalTime localTime23 = localTime21.withMillisOfDay(0);
        org.joda.time.LocalTime localTime25 = localTime21.plusMinutes(72036057);
        java.lang.String str26 = localTime21.toString();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:11.522Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:11.522Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:11.522Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 44L + "'", long11 == 44L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00" + "'", str18, "+00:00");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "+00:00" + "'", str20, "+00:00");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "07:22:11.522" + "'", str26, "07:22:11.522");
    }

    @Test
    public void test05134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05134");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.LocalDate localDate5 = dateTime1.toLocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        java.util.Date date7 = localDate5.toDate();
        org.joda.time.LocalDate.Property property8 = localDate5.dayOfYear();
        org.joda.time.LocalDate localDate10 = property8.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate11 = property8.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate12 = property8.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate13 = property8.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(date7);
// flaky:         org.junit.Assert.assertEquals(date7.toString(), "Tue Feb 22 00:00:00 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test05135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05135");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime16 = property14.roundFloor();
        mutableDateTime16.addHours(0);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime16);
        mutableDateTime16.setMillisOfDay(50);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str26 = duration25.toString();
        boolean boolean27 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration37 = duration34.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean38 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration39 = duration29.minus((org.joda.time.ReadableDuration) duration32);
        boolean boolean40 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration41, readableInstant42);
        org.joda.time.Period period45 = period43.withDays((int) (byte) 1);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours48 = duration47.toStandardHours();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = period43.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration55 = duration39.withDurationAdded((org.joda.time.ReadableDuration) duration53, (int) ' ');
        org.joda.time.Duration duration57 = duration55.withMillis((long) 70);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(readableInstant60, readableInstant61, periodType62);
        org.joda.time.DurationFieldType durationFieldType65 = periodType62.getFieldType((int) (short) 0);
        java.lang.String str66 = periodType62.toString();
        org.joda.time.Instant instant67 = new org.joda.time.Instant();
        org.joda.time.Instant instant69 = instant67.withMillis(0L);
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 53, (long) (-1), periodType62, chronology70);
        org.joda.time.PeriodType periodType72 = periodType62.withHoursRemoved();
        org.joda.time.PeriodType periodType73 = periodType72.withMinutesRemoved();
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableDuration) duration55, periodType72);
        int int75 = mutableDateTime16.getRoundingMode();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime16.setTime(2043, (-57), 37172074, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2043 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT86400S" + "'", str26, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(hours48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 11 + "'", int51 == 11);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "PeriodType[YearDayTime]" + "'", str66, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
    }

    @Test
    public void test05136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05136");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addYears(12);
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime0.getZone();
        int int20 = mutableDateTime0.getRoundingMode();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime0.secondOfDay();
        mutableDateTime0.addHours(37079542);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test05137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05137");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime8 = property4.addWrapField(26150);
        org.joda.time.DateTimeZone dateTimeZone9 = mutableDateTime8.getZone();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime8.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundFloor();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
    }

    @Test
    public void test05138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05138");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone11);
        int int16 = dateTimeZone11.getOffset(55570L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test05139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05139");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfCentury();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.add((long) 62176);
        org.joda.time.MutableDateTime mutableDateTime25 = property21.add((long) 47927060);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime27 = property21.set((-292275054));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -292275054 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:22:11.908Z" + "'", str14, "2022-02-22T07:22:11.908Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test05140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05140");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.minuteOfHour();
        int int6 = mutableDateTime1.getDayOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 365 + "'", int6 == 365);
    }

    @Test
    public void test05141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05141");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        int int20 = mutableDateTime16.getYearOfEra();
        mutableDateTime16.setSecondOfDay(26272);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime16.millisOfSecond();
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2021 + "'", int20 == 2021);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test05142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05142");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) 'a');
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.String str22 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime16, 53, locale20);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration28 = duration24.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusMillis((int) (byte) 0);
        int int36 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime38.setSecondOfMinute(53);
        int int41 = mutableDateTime38.getEra();
        org.joda.time.DateTimeField dateTimeField42 = mutableDateTime38.getRoundingField();
        org.joda.time.DateTime dateTime43 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.DateTime dateTime47 = instant46.toDateTime();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant51 = instant46.withDurationAdded((org.joda.time.ReadableDuration) duration49, 0);
        org.joda.time.MutableDateTime mutableDateTime52 = instant46.toMutableDateTime();
        mutableDateTime52.setTime(31556952000L);
        int int55 = dateTime43.compareTo((org.joda.time.ReadableInstant) mutableDateTime52);
        org.joda.time.DateTime dateTime56 = dateTime43.withLaterOffsetAtOverlap();
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "German" + "'", str21, "German");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "53" + "'", str22, "53");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test05143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05143");
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        long long15 = chronology10.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField16 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField18 = chronology10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now(chronology10);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(2241, 0, (-268), 170, 62479, 37199357, 26408, chronology10);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 170 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 105144L + "'", long15 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test05144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05144");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(15);
        org.joda.time.Chronology chronology6 = dateTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(1440L, chronology6);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(chronology6);
        org.joda.time.Chronology chronology10 = chronology6.withUTC();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(11854767L, chronology6);
        org.joda.time.DateMidnight dateMidnight12 = dateTime11.toDateMidnight();
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateMidnight12);
    }

    @Test
    public void test05145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05145");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 82800000);
        mutableDateTime1.add((long) 26183562);
    }

    @Test
    public void test05146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05146");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra((int) '#');
        org.joda.time.YearMonthDay yearMonthDay9 = dateTime5.toYearMonthDay();
        org.joda.time.Chronology chronology10 = dateTime5.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.days();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField13 = chronology10.dayOfMonth();
        long long15 = dateTimeField13.roundFloor(0L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(yearMonthDay9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
    }

    @Test
    public void test05147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05147");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant7 = instant2.withDurationAdded((org.joda.time.ReadableDuration) duration5, 0);
        org.joda.time.Instant instant10 = instant7.withDurationAdded(25L, 26158);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(15);
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        java.lang.String str18 = chronology17.toString();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate((long) 0, chronology17);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property21 = dateTime20.hourOfDay();
        org.joda.time.LocalDate localDate22 = dateTime20.toLocalDate();
        org.joda.time.DateTime dateTime24 = dateTime20.plusDays(2021);
        mutableDateTime11.setMillis((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime dateTime26 = dateTime24.toDateTimeISO();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime28 = dateTime24.withHourOfDay(62449);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62449 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[UTC]" + "'", str18, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
    }

    @Test
    public void test05148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05148");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.set(45);
        org.joda.time.MutableDateTime mutableDateTime8 = property5.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime10 = property5.add(45);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long14 = dateTimeZone11.previousTransition(100L);
        int int16 = dateTimeZone11.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime17 = mutableDateTime10.toDateTime(dateTimeZone11);
        mutableDateTime10.setHourOfDay(8);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime10.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundCeiling();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime1.dayOfWeek();
        boolean boolean24 = property23.isLeap();
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
        org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test05149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05149");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period11 = period9.minusSeconds((-1));
        java.lang.String str12 = period9.toString();
        org.joda.time.Period period13 = period9.toPeriod();
        org.joda.time.PeriodType periodType14 = period9.getPeriodType();
        org.joda.time.Period period15 = period5.normalizedStandard(periodType14);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        long long24 = chronology19.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField25 = chronology19.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(44L, periodType14, chronology19);
        org.joda.time.DateTimeField dateTimeField27 = chronology19.clockhourOfHalfday();
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime(chronology19);
        mutableDateTime0.setChronology(chronology19);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDate(62188, 62363, 37199357);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62363 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:12.151Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:12.151Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:12.151Z");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT0.099S" + "'", str12, "PT0.099S");
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 105144L + "'", long24 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test05150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05150");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(50);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfEra();
        org.joda.time.DateTime dateTime12 = dateTime9.plusMinutes(54);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration22 = duration19.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean23 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration24 = duration14.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean30 = duration17.equals((java.lang.Object) duration26);
        org.joda.time.DateTime dateTime31 = dateTime12.plus((org.joda.time.ReadableDuration) duration26);
        java.util.GregorianCalendar gregorianCalendar32 = dateTime31.toGregorianCalendar();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(gregorianCalendar32);
    }

    @Test
    public void test05151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05151");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.LocalDate localDate4 = property2.roundCeilingCopy();
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime9 = localDate4.toDateTimeAtMidnight(dateTimeZone8);
        java.lang.String str10 = dateTimeZone8.getID();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = dateTimeZone8.getShortName(0L, locale12);
        long long15 = dateTimeZone8.convertUTCToLocal((long) 26280146);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(10627200000L, dateTimeZone8);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime16.yearOfCentury();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+53:00" + "'", str10, "+53:00");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+53:00" + "'", str13, "+53:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 217080146L + "'", long15 == 217080146L);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test05152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05152");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.add((long) 'a');
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str11 = duration10.toString();
        boolean boolean12 = duration8.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Hours hours13 = duration8.toStandardHours();
        mutableDateTime4.add((org.joda.time.ReadableDuration) duration8, 20);
        mutableDateTime4.setMillisOfDay(36946953);
        org.joda.time.DateTimeField dateTimeField18 = mutableDateTime4.getRoundingField();
        boolean boolean19 = mutableDateTime0.isEqual((org.joda.time.ReadableInstant) mutableDateTime4);
        mutableDateTime0.setMillis(36946168L);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime0.monthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:12.191Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:12.191Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:12.191Z");
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "PT86400S" + "'", str11, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(hours13);
        org.junit.Assert.assertNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test05153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05153");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.DateTime dateTime9 = mutableDateTime8.toDateTime();
        org.joda.time.DateTime.Property property10 = dateTime9.minuteOfHour();
        org.joda.time.DateTime dateTime11 = property10.roundCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime13 = dateTime11.withDayOfMonth(2023);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2023 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test05154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05154");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant9 = dateTime1.toInstant();
        org.joda.time.Instant instant10 = instant9.toInstant();
        long long11 = instant9.getMillis();
        org.joda.time.DateTime dateTime12 = instant9.toDateTimeISO();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration21 = duration14.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        mutablePeriod25.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod28 = mutablePeriod25.toMutablePeriod();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean32 = localDate29.isSupported(dateTimeFieldType31);
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType31.getRangeDurationType();
        int int34 = mutablePeriod25.indexOf(durationFieldType33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration39 = duration36.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        mutableDateTime40.add((long) 'a');
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime40.yearOfCentury();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period46 = duration45.toPeriod();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration51 = duration48.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration52 = duration45.minus((org.joda.time.ReadableDuration) duration51);
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration45);
        boolean boolean54 = duration39.isShorterThan((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration56 = duration45.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now();
        mutableDateTime57.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime57.copy();
        mutableDateTime57.setDate((long) '#');
        org.joda.time.LocalDate localDate63 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property64 = localDate63.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean66 = localDate63.isSupported(dateTimeFieldType65);
        int int67 = localDate63.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight69 = localDate63.toDateMidnight(dateTimeZone68);
        org.joda.time.DateTime dateTime70 = mutableDateTime57.toDateTime(dateTimeZone68);
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration56, (org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.MutablePeriod mutablePeriod72 = mutablePeriod71.copy();
        mutablePeriod72.clear();
        mutablePeriod72.setPeriod(21L, (long) '#');
        mutablePeriod25.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod72);
        org.joda.time.LocalDate localDate78 = new org.joda.time.LocalDate();
        int int79 = localDate78.getDayOfMonth();
        org.joda.time.DateTime dateTime80 = localDate78.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate82 = localDate78.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate84 = localDate82.plusDays(26150565);
        org.joda.time.DateTimeZone dateTimeZone85 = null;
        org.joda.time.DateTime dateTime86 = localDate82.toDateTimeAtStartOfDay(dateTimeZone85);
        org.joda.time.Duration duration87 = mutablePeriod72.toDurationFrom((org.joda.time.ReadableInstant) dateTime86);
        int int88 = duration20.compareTo((org.joda.time.ReadableDuration) duration87);
        org.joda.time.Instant instant89 = instant9.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Period period90 = duration20.toPeriod();
        int[] intArray91 = period90.getValues();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(mutablePeriod28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 53 + "'", int67 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(dateMidnight69);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(mutablePeriod72);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 22 + "'", int79 == 22);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(localDate82);
        org.junit.Assert.assertNotNull(localDate84);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(instant89);
        org.junit.Assert.assertNotNull(period90);
        org.junit.Assert.assertNotNull(intArray91);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray91), "[0, 0, 0, 0, 24, 0, 3, 200]");
    }

    @Test
    public void test05155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05155");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.yearOfCentury();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration13 = duration10.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration14 = duration7.minus((org.joda.time.ReadableDuration) duration13);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration7);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime2.centuryOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getYearOfCentury();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute(53);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration30 = duration23.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        java.lang.String str37 = periodType33.toString();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration23, periodType33);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration23);
        mutableDateTime2.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime2.weekOfWeekyear();
        boolean boolean43 = instant0.isAfter((org.joda.time.ReadableInstant) mutableDateTime2);
        int int44 = mutableDateTime2.getMillisOfSecond();
        mutableDateTime2.addWeekyears(62151);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime2.dayOfMonth();
        mutableDateTime2.add((long) (-52));
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime2.setMonthOfYear(37242433);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37242433 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PeriodType[YearDayTime]" + "'", str37, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 473 + "'", int44 == 473);
        org.junit.Assert.assertNotNull(property47);
    }

    @Test
    public void test05156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05156");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.minusMillis(10);
        int int4 = localDateTime1.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property5 = localDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration15, readableInstant16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period23 = period21.minusSeconds((-1));
        java.lang.String str24 = period21.toString();
        org.joda.time.Period period25 = period21.toPeriod();
        org.joda.time.PeriodType periodType26 = period21.getPeriodType();
        org.joda.time.Period period27 = period17.normalizedStandard(periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = null;
        int int29 = periodType26.indexOf(durationFieldType28);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.eras();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.eras();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType26, chronology33);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime7.toMutableDateTime(chronology33);
        org.joda.time.DateTimeField dateTimeField40 = chronology33.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.eras();
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.DurationField durationField49 = chronology46.eras();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 44, chronology46);
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType41.getField(chronology46);
        org.joda.time.DateTimeField dateTimeField52 = chronology46.weekOfWeekyear();
        long long55 = dateTimeField52.set(950707L, 45);
        java.util.Locale.Category category56 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale57 = java.util.Locale.getDefault(category56);
        java.util.Locale locale58 = java.util.Locale.TAIWAN;
        java.util.Locale.setDefault(category56, locale58);
        int int60 = dateTimeField52.getMaximumTextLength(locale58);
        int int61 = dateTimeField40.getMaximumTextLength(locale58);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime62 = property5.setCopy("1969-12-25T00:00:00.001", locale58);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1969-12-25T00:00:00.001\" for hourOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 20 + "'", int4 == 20);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.099S" + "'", str24, "PT0.099S");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(localTime48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 26612150707L + "'", long55 == 26612150707L);
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category56.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 9 + "'", int61 == 9);
    }

    @Test
    public void test05157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05157");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = property14.roundHalfEvenCopy();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours19 = duration18.toStandardHours();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime21);
        mutablePeriod23.addSeconds(292278993);
        mutablePeriod23.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime29 = dateTime16.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTime dateTime32 = dateTime16.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean43 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration44 = duration34.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration49 = duration46.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean50 = duration37.equals((java.lang.Object) duration46);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.eras();
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.now(chronology56);
        org.joda.time.Period period59 = duration37.toPeriod(periodType52, chronology56);
        org.joda.time.DurationFieldType durationFieldType61 = period59.getFieldType(1);
        mutableDateTime8.add(durationFieldType61, 61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime8.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime65 = property64.getMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime65.setTime(33590, 4448, (-292275054), 18966);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33590 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "53" + "'", str6, "53");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(hours19);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 12 + "'", int22 == 12);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
    }

    @Test
    public void test05158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05158");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime9.withYear(2000);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        boolean boolean18 = dateTime16.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology19 = dateTime16.getChronology();
        java.util.Locale locale20 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology19, locale20, (java.lang.Integer) 50);
        org.joda.time.DurationField durationField23 = chronology19.eras();
        org.joda.time.DateTime dateTime24 = dateTime9.withChronology(chronology19);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getSecondOfMinute();
        boolean boolean28 = dateTime26.isEqualNow();
        int int29 = dateTime26.getDayOfYear();
        int int30 = dateTime26.getHourOfDay();
        org.joda.time.DateTime dateTime32 = dateTime26.plus(960800L);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.Instant instant35 = instant33.toInstant();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField42 = localDateTime40.getField((int) (byte) 0);
        java.lang.String str43 = localDateTime40.toString();
        org.joda.time.LocalDateTime.Property property44 = localDateTime40.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime45 = property44.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray46 = localDateTime45.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        int int50 = localDateTime45.get(dateTimeFieldType47);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime45.withDayOfWeek(3);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime56 = dateTime54.withZoneRetainFields(dateTimeZone55);
        boolean boolean58 = dateTime56.equals((java.lang.Object) (-1L));
        java.util.GregorianCalendar gregorianCalendar59 = dateTime56.toGregorianCalendar();
        org.joda.time.DateTimeFieldType dateTimeFieldType60 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime62 = dateTime56.withField(dateTimeFieldType60, 22);
        int int63 = localDateTime52.indexOf(dateTimeFieldType60);
        boolean boolean64 = instant33.isSupported(dateTimeFieldType60);
        int int65 = dateTime26.get(dateTimeFieldType60);
        org.joda.time.DateTimeZone dateTimeZone66 = dateTime26.getZone();
        org.joda.time.LocalDateTime localDateTime67 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField73 = localDateTime71.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray74 = localDateTime71.getFields();
        org.joda.time.DateTimeField dateTimeField76 = localDateTime71.getField((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime78 = localDateTime71.minusYears(62188);
        boolean boolean79 = dateTimeZone66.isLocalDateTimeGap(localDateTime71);
        int[] intArray81 = chronology19.get((org.joda.time.ReadablePartial) localDateTime71, (long) 26455312);
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime83 = instant82.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime84 = instant82.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime85 = localDateTime71.toDateTime((org.joda.time.ReadableInstant) mutableDateTime84);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 12 + "'", int27 == 12);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 53 + "'", int29 == 53);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 7 + "'", int30 == 7);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T10:22:12.531" + "'", str43, "2022-02-22T10:22:12.531");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 24 + "'", int50 == 24);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar59);
        org.junit.Assert.assertNotNull(dateTimeFieldType60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + (-1) + "'", int63 == (-1));
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 26532 + "'", int65 == 26532);
        org.junit.Assert.assertNotNull(dateTimeZone66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeFieldArray74);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(localDateTime78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(intArray81);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray81), "[1970, 1, 1, 26455312]");
        org.junit.Assert.assertNotNull(mutableDateTime83);
        org.junit.Assert.assertNotNull(mutableDateTime84);
        org.junit.Assert.assertNotNull(dateTime85);
    }

    @Test
    public void test05159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05159");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.LocalDate localDate2 = property1.roundFloorCopy();
        org.joda.time.DateTime dateTime3 = localDate2.toDateTimeAtMidnight();
        java.lang.String str4 = localDate2.toString();
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 1);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = duration15.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration19 = duration12.minus((org.joda.time.ReadableDuration) duration18);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime7.centuryOfEra();
        mutableDateTime7.addYears(0);
        mutableDateTime7.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration34 = duration30.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant35 = instant28.plus((org.joda.time.ReadableDuration) duration34);
        long long36 = instant35.getMillis();
        org.joda.time.Duration duration37 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableInstant) instant35);
        org.joda.time.MutableDateTime mutableDateTime38 = instant35.toMutableDateTime();
        boolean boolean39 = dateTime6.equals((java.lang.Object) mutableDateTime38);
        org.joda.time.DateTime dateTime40 = localDate2.toDateTime((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.dayOfYear();
        mutableDateTime38.set(dateTimeFieldType41, (int) (short) 10);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        int int46 = dateTime45.getSecondOfMinute();
        boolean boolean47 = dateTime45.isEqualNow();
        mutableDateTime38.setDate((org.joda.time.ReadableInstant) dateTime45);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableInstant51, readableInstant52, periodType53);
        org.joda.time.DurationFieldType durationFieldType56 = periodType53.getFieldType((int) (short) 0);
        java.lang.String str57 = periodType53.toString();
        org.joda.time.Instant instant58 = new org.joda.time.Instant();
        org.joda.time.Instant instant60 = instant58.withMillis(0L);
        org.joda.time.Chronology chronology61 = instant60.getChronology();
        org.joda.time.Period period62 = new org.joda.time.Period((long) 53, (long) (-1), periodType53, chronology61);
        org.joda.time.LocalDate localDate63 = org.joda.time.LocalDate.now(chronology61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(chronology64);
        int int66 = dateTime65.getYearOfCentury();
        int int67 = dateTime65.getWeekyear();
        org.joda.time.DateTime dateTime68 = dateTime65.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property69 = dateTime65.yearOfEra();
        org.joda.time.DateTime dateTime71 = property69.addToCopy((long) 999);
        org.joda.time.DateTime dateTime72 = localDate63.toDateTime((org.joda.time.ReadableInstant) dateTime71);
        boolean boolean74 = dateTime71.isBefore((long) 73619);
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime71.toMutableDateTime();
        int int76 = dateTime71.getYearOfEra();
        org.joda.time.Duration duration77 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime38, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime.Property property78 = dateTime71.minuteOfHour();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-01" + "'", str4, "2022-02-01");
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 86400000L + "'", long36 == 86400000L);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 12 + "'", int46 == 12);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PeriodType[YearDayTime]" + "'", str57, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(localDate63);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 22 + "'", int66 == 22);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 2022 + "'", int67 == 2022);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mutableDateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3021 + "'", int76 == 3021);
        org.junit.Assert.assertNotNull(property78);
    }

    @Test
    public void test05160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05160");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        java.lang.String str7 = mutableDateTime6.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        mutableDateTime8.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime8.copy();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.Period period16 = period14.withDays((int) (byte) 1);
        org.joda.time.Period period18 = period14.minusMillis(1424);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) period14);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period14);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime6.year();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundCeiling();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) 100, 1L, periodType25);
        org.joda.time.Period period28 = period26.minusSeconds((-1));
        java.lang.String str29 = period26.toString();
        org.joda.time.Period period30 = period26.toPeriod();
        org.joda.time.Period period32 = period30.withMillis(0);
        org.joda.time.Period period34 = period30.plusSeconds((int) '4');
        mutableDateTime22.add((org.joda.time.ReadablePeriod) period30);
        mutableDateTime22.addYears(26281);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.monthOfYear();
        org.joda.time.DateTimeField dateTimeField40 = property39.getField();
        org.joda.time.LocalDate localDate41 = property39.roundCeilingCopy();
        org.joda.time.Chronology chronology42 = localDate41.getChronology();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime46 = localDate41.toDateTimeAtMidnight(dateTimeZone45);
        org.joda.time.DateTime.Property property47 = dateTime46.monthOfYear();
        org.joda.time.DateTime dateTime49 = property47.addToCopy(0);
        org.joda.time.DateTime dateTime51 = property47.addToCopy(2037);
        org.joda.time.YearMonthDay yearMonthDay52 = dateTime51.toYearMonthDay();
        boolean boolean53 = mutableDateTime22.equals((java.lang.Object) yearMonthDay52);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9000-01-01T00:00:00.000Z" + "'", str7, "9000-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT0.099S" + "'", str29, "PT0.099S");
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(yearMonthDay52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test05161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05161");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.util.Locale locale6 = dateTimeParserBucket5.getLocale();
        long long7 = dateTimeParserBucket5.computeMillis();
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 46);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (short) 100, chronology11);
        int int13 = localTime12.getMillisOfDay();
        org.joda.time.LocalTime.Property property14 = localTime12.millisOfSecond();
        org.joda.time.DurationField durationField15 = property14.getLeapDurationField();
        org.joda.time.DateTimeField dateTimeField16 = property14.getField();
        org.joda.time.DateTimeZone dateTimeZone17 = null;
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(dateTimeZone17);
        org.joda.time.LocalTime localTime20 = localTime18.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime22 = localTime20.withHourOfDay(0);
        org.joda.time.LocalTime localTime24 = localTime22.withMillisOfSecond(44);
        org.joda.time.LocalTime localTime26 = localTime24.plusSeconds(0);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime28 = localTime24.toDateTimeToday(dateTimeZone27);
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(dateTimeZone27);
        int int30 = dateTimeField16.getMaximumValue((org.joda.time.ReadablePartial) localTime29);
        boolean boolean31 = dateTimeParserBucket5.restoreState((java.lang.Object) dateTimeField16);
        dateTimeParserBucket5.setOffset(0);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 26170959);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 97L + "'", long7 == 97L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 100 + "'", int13 == 100);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 999 + "'", int30 == 999);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test05162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05162");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTime();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getYearOfCentury();
        int int6 = dateTime4.getWeekyear();
        org.joda.time.DateTime.Property property7 = dateTime4.dayOfYear();
        org.joda.time.Period period9 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period11 = period9.withDays(2022);
        org.joda.time.DateTime dateTime13 = dateTime4.withPeriodAdded((org.joda.time.ReadablePeriod) period11, (int) (short) 100);
        boolean boolean14 = instant0.isBefore((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(15);
        org.joda.time.Chronology chronology20 = dateTime17.getChronology();
        java.lang.String str21 = chronology20.toString();
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.era();
        java.lang.Object obj24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(obj24);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField32 = localDateTime30.getField((int) (byte) 0);
        long long34 = dateTimeField32.roundHalfEven((long) 1);
        int int35 = dateTime25.get(dateTimeField32);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withCenturyOfEra((int) 'a');
        java.util.Locale locale44 = java.util.Locale.GERMAN;
        java.lang.String str45 = locale44.getDisplayName();
        java.lang.String str46 = dateTimeField32.getAsText((org.joda.time.ReadablePartial) localDateTime40, 53, locale44);
        java.lang.String str48 = dateTimeField32.getAsShortText((long) (byte) 100);
        long long50 = dateTimeField32.roundHalfEven((long) '4');
        java.util.Locale locale52 = java.util.Locale.getDefault();
        org.joda.time.LocalDateTime localDateTime53 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField59 = localDateTime57.getField((int) (byte) 0);
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.lang.String str62 = dateTimeField59.getAsShortText((long) '4', locale61);
        java.lang.String str63 = locale61.getVariant();
        java.lang.String str64 = locale52.getDisplayScript(locale61);
        java.lang.String str65 = dateTimeField32.getAsShortText((int) (short) 1, locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket67 = new org.joda.time.format.DateTimeParserBucket((long) 2100, chronology20, locale52, (java.lang.Integer) 26158);
        org.joda.time.DateTimeField dateTimeField68 = chronology20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime69 = instant0.toMutableDateTime(chronology20);
        boolean boolean70 = instant0.isEqualNow();
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 22 + "'", int5 == 22);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 2022 + "'", int6 == 2022);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[UTC]" + "'", str21, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\u5fb7\u6587" + "'", str45, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "53" + "'", str46, "53");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970" + "'", str48, "1970");
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "1970" + "'", str62, "1970");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "1" + "'", str65, "1");
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(mutableDateTime69);
// flaky:         org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
    }

    @Test
    public void test05163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05163");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getYearOfCentury();
        int int11 = dateTime9.getWeekyear();
        org.joda.time.DateTime.Property property12 = dateTime9.dayOfYear();
        org.joda.time.DateTime dateTime13 = property12.withMinimumValue();
        mutableDateTime7.setTime((org.joda.time.ReadableInstant) dateTime13);
        mutableDateTime7.add((-1L));
        int int17 = mutableDateTime7.getSecondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.LocalTime localTime21 = localTime19.minusHours((int) (byte) 100);
        int int22 = localTime21.getMinuteOfHour();
        java.lang.String str24 = localTime21.toString("1");
        org.joda.time.LocalTime localTime26 = localTime21.minusMinutes(15);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getYearOfCentury();
        int int30 = dateTime28.getWeekyear();
        org.joda.time.DateTime dateTime32 = dateTime28.plus((long) 15);
        org.joda.time.DateTime.Property property33 = dateTime28.year();
        org.joda.time.DateTime dateTime34 = property33.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime34.toMutableDateTime();
        org.joda.time.LocalTime localTime37 = dateTime34.toLocalTime();
        org.joda.time.LocalTime localTime38 = localTime21.withFields((org.joda.time.ReadablePartial) localTime37);
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.LocalTime localTime40 = localTime37.minus(readablePeriod39);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str42 = dateTimeFieldType41.getName();
        int int43 = localTime40.get(dateTimeFieldType41);
        boolean boolean44 = mutableDateTime7.isSupported(dateTimeFieldType41);
        mutableDateTime7.setMillis(0L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardHours((long) 36946953);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.Chronology chronology53 = instant52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.eras();
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.now(chronology53);
        org.joda.time.DurationField durationField56 = chronology53.eras();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 44, chronology53);
        org.joda.time.DateTime.Property property58 = dateTime57.hourOfDay();
        org.joda.time.DateTime.Property property59 = dateTime57.year();
        org.joda.time.Period period60 = duration48.toPeriodFrom((org.joda.time.ReadableInstant) dateTime57);
        int int61 = period60.getSeconds();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.add((org.joda.time.ReadablePeriod) period60, 26270836);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 110705302904");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 12 + "'", int17 == 12);
        org.junit.Assert.assertNotNull(localTime21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1" + "'", str24, "1");
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 22 + "'", int29 == 22);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 2022 + "'", int30 == 2022);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime38);
        org.junit.Assert.assertNotNull(localTime40);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "clockhourOfDay" + "'", str42, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 24 + "'", int43 == 24);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(localTime55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
    }

    @Test
    public void test05164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05164");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime4.getFields();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withDayOfWeek(1);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime9.withDurationAdded((org.joda.time.ReadableDuration) duration11, 53);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMillis((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property20 = localDateTime14.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.withMillisOfSecond((int) (byte) 1);
        boolean boolean23 = localDateTime9.equals((java.lang.Object) localDateTime22);
        int int24 = localDateTime9.getEra();
        org.joda.time.LocalDateTime.Property property25 = localDateTime9.year();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.add((long) 'a');
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str33 = duration32.toString();
        boolean boolean34 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Hours hours35 = duration30.toStandardHours();
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration30, 20);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = null;
        java.lang.String str42 = dateTime39.toString(dateTimeFormatter41);
        org.joda.time.DateTime dateTime44 = dateTime39.minusMonths(22);
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.eras();
        org.joda.time.DateTime dateTime50 = dateTime39.withChronology(chronology48);
        org.joda.time.Period period51 = duration30.toPeriod(chronology48);
        org.joda.time.LocalDateTime localDateTime53 = localDateTime9.withPeriodAdded((org.joda.time.ReadablePeriod) period51, 26319);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.yearOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT86400S" + "'", str33, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(hours35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "2022-02-22T07:22:12.852Z" + "'", str42, "2022-02-22T07:22:12.852Z");
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
    }

    @Test
    public void test05165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05165");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.millisOfDay();
        mutableDateTime1.add(24L);
        int int13 = mutableDateTime1.getRoundingMode();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test05166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05166");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.yearOfCentury();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration13 = duration10.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration14 = duration7.minus((org.joda.time.ReadableDuration) duration13);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration7);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime2.centuryOfEra();
        mutableDateTime2.addHours((int) (byte) 10);
        mutableDateTime2.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField21 = mutableDateTime2.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj23 = mutableDateTime22.clone();
        mutableDateTime22.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.add(1L);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        long long33 = dateTimeZone29.getMillisKeepLocal(dateTimeZone31, (long) 44);
        org.joda.time.DateTime dateTime34 = org.joda.time.DateTime.now(dateTimeZone29);
        mutableDateTime28.setZoneRetainFields(dateTimeZone29);
        mutableDateTime28.addSeconds((int) (short) 10);
        java.lang.Object obj38 = mutableDateTime28.clone();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime28.era();
        boolean boolean40 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime28);
        mutableDateTime28.setYear(2);
        mutableDateTime28.setMillisOfDay(62170);
        int int45 = mutableDateTime28.getCenturyOfEra();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(chronology49);
        java.lang.String str56 = chronology49.toString();
        mutableDateTime28.setChronology(chronology49);
        org.joda.time.Period period58 = new org.joda.time.Period((long) 43, 1041313L, chronology49);
        org.joda.time.Period period59 = period58.toPeriod();
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNull(dateTimeField21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "2022-02-22T07:22:12.899Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "2022-02-22T07:22:12.899Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "2022-02-22T07:22:12.899Z");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
        org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 44L + "'", long33 == 44L);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 105144L + "'", long54 == 105144L);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[UTC]" + "'", str56, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(period59);
    }

    @Test
    public void test05167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05167");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        int int19 = mutableDateTime0.getMillisOfSecond();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime29 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime31 = dateTime29.withYear(2000);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = dateTime34.withZoneRetainFields(dateTimeZone35);
        boolean boolean38 = dateTime36.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology39 = dateTime36.getChronology();
        java.util.Locale locale40 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology39, locale40, (java.lang.Integer) 50);
        org.joda.time.DurationField durationField43 = chronology39.eras();
        org.joda.time.DateTime dateTime44 = dateTime29.withChronology(chronology39);
        int int45 = mutableDateTime0.compareTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        mutableDateTime47.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime47.copy();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime47.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime47.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        mutableDateTime53.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime53.copy();
        mutableDateTime53.setDate((long) '#');
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property60 = localDate59.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean62 = localDate59.isSupported(dateTimeFieldType61);
        int int63 = localDate59.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight65 = localDate59.toDateMidnight(dateTimeZone64);
        org.joda.time.DateTime dateTime66 = mutableDateTime53.toDateTime(dateTimeZone64);
        org.joda.time.LocalDate localDate67 = org.joda.time.LocalDate.now(dateTimeZone64);
        org.joda.time.PeriodType periodType70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period((long) 100, 1L, periodType70);
        org.joda.time.PeriodType periodType72 = period71.getPeriodType();
        boolean boolean73 = dateTimeZone64.equals((java.lang.Object) periodType72);
        mutableDateTime47.setZoneRetainFields(dateTimeZone64);
        org.joda.time.LocalDate localDate75 = new org.joda.time.LocalDate(dateTimeZone64);
        org.joda.time.MutableDateTime mutableDateTime76 = new org.joda.time.MutableDateTime((long) 2, dateTimeZone64);
        mutableDateTime0.setZoneRetainFields(dateTimeZone64);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 14 + "'", int19 == 14);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 53 + "'", int63 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateMidnight65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(localDate67);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test05168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05168");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfCeiling();
        int int6 = mutableDateTime5.getDayOfMonth();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration15 = duration8.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17, periodType18);
        mutablePeriod19.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod19.toMutablePeriod();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean26 = localDate23.isSupported(dateTimeFieldType25);
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType25.getRangeDurationType();
        int int28 = mutablePeriod19.indexOf(durationFieldType27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = duration30.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        mutableDateTime34.add((long) 'a');
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.yearOfCentury();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration45 = duration42.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration46 = duration39.minus((org.joda.time.ReadableDuration) duration45);
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration39);
        boolean boolean48 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration50 = duration39.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now();
        mutableDateTime51.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime51.copy();
        mutableDateTime51.setDate((long) '#');
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property58 = localDate57.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean60 = localDate57.isSupported(dateTimeFieldType59);
        int int61 = localDate57.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight63 = localDate57.toDateMidnight(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = mutableDateTime51.toDateTime(dateTimeZone62);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod65.copy();
        mutablePeriod66.clear();
        mutablePeriod66.setPeriod(21L, (long) '#');
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        int int73 = localDate72.getDayOfMonth();
        org.joda.time.DateTime dateTime74 = localDate72.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate76 = localDate72.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate78 = localDate76.plusDays(26150565);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = localDate76.toDateTimeAtStartOfDay(dateTimeZone79);
        org.joda.time.Duration duration81 = mutablePeriod66.toDurationFrom((org.joda.time.ReadableInstant) dateTime80);
        int int82 = duration14.compareTo((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Duration duration83 = duration81.toDuration();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableDuration) duration83);
        mutablePeriod84.add(26482271, 36988464, 26505, 164, 26312, 62243, 37288597, 68);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 53 + "'", int61 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 22 + "'", int73 == 22);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(duration83);
    }

    @Test
    public void test05169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05169");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        mutableDateTime1.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.DurationFieldType durationFieldType22 = null;
        int int23 = periodType20.indexOf(durationFieldType22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.eras();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.DurationField durationField30 = chronology27.eras();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType20, chronology27);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime1.toMutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) (short) 0, chronology27);
        org.joda.time.DateTime.Property property36 = dateTime35.dayOfMonth();
        org.joda.time.DateTime dateTime38 = property36.addWrapFieldToCopy((int) 'a');
        org.joda.time.Instant instant39 = dateTime38.toInstant();
        org.joda.time.DateTime dateTime40 = dateTime38.toDateTimeISO();
        org.joda.time.DateTime.Property property41 = dateTime40.dayOfMonth();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.099S" + "'", str18, "PT0.099S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test05170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05170");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        boolean boolean12 = dateTime1.isBeforeNow();
        org.joda.time.DateTime dateTime14 = dateTime1.plusDays(32);
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        int int16 = dateTime14.getMinuteOfHour();
        org.joda.time.DateTime dateTime17 = dateTime14.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime14.toMutableDateTime();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setSecondOfDay(26516727);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26516727 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test05171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05171");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = dateTime26.toInstant();
        org.joda.time.DateTime dateTime37 = dateTime26.withDurationAdded((long) 3, 4);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getYearOfCentury();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute(53);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration51 = duration44.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType57 = periodType54.getFieldType((int) (short) 0);
        java.lang.String str58 = periodType54.toString();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration44, periodType54);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime37, periodType54);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime0.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime64 = property62.add(0L);
        org.joda.time.MutableDateTime mutableDateTime65 = property62.getMutableDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 13 + "'", int11 == 13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PeriodType[YearDayTime]" + "'", str58, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
    }

    @Test
    public void test05172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05172");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType4);
        org.joda.time.DurationFieldType durationFieldType7 = periodType4.getFieldType((int) (short) 0);
        java.lang.String str8 = periodType4.toString();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 53, (long) (-1), periodType4, chronology12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.LocalDate.Property property15 = localDate14.centuryOfEra();
        org.joda.time.LocalDate localDate16 = property15.roundCeilingCopy();
        org.joda.time.Chronology chronology17 = localDate16.getChronology();
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration26 = duration22.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant27 = instant20.plus((org.joda.time.ReadableDuration) duration26);
        long long28 = instant27.getMillis();
        org.joda.time.Chronology chronology29 = instant27.getChronology();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        mutableDateTime30.add((long) 'a');
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str37 = duration36.toString();
        boolean boolean38 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Hours hours39 = duration34.toStandardHours();
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration34, 20);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = null;
        java.lang.String str46 = dateTime43.toString(dateTimeFormatter45);
        org.joda.time.DateTime dateTime48 = dateTime43.minusMonths(22);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.eras();
        org.joda.time.DateTime dateTime54 = dateTime43.withChronology(chronology52);
        org.joda.time.Period period55 = duration34.toPeriod(chronology52);
        org.joda.time.Instant instant57 = instant27.withDurationAdded((org.joda.time.ReadableDuration) duration34, 16);
        org.joda.time.DateTimeFieldType dateTimeFieldType58 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean59 = instant57.isSupported(dateTimeFieldType58);
        int int60 = localDate16.get(dateTimeFieldType58);
        int int61 = localDate16.getYearOfEra();
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj63 = mutableDateTime62.clone();
        mutableDateTime62.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime62.dayOfWeek();
        mutableDateTime62.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime62.yearOfCentury();
        mutableDateTime62.addSeconds(86399999);
        int int72 = mutableDateTime62.getMinuteOfDay();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime62.millisOfSecond();
        org.joda.time.DateTime dateTime74 = localDate16.toDateTime((org.joda.time.ReadableInstant) mutableDateTime62);
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[YearDayTime]" + "'", str8, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 86400000L + "'", long28 == 86400000L);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT86400S" + "'", str37, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(hours39);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "2022-02-22T07:22:13.169Z" + "'", str46, "2022-02-22T07:22:13.169Z");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(chronology52);
        org.junit.Assert.assertNotNull(durationField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dateTimeFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1 + "'", int60 == 1);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2100 + "'", int61 == 2100);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(obj63);
// flaky:         org.junit.Assert.assertEquals(obj63.toString(), "2022-02-22T07:22:13.169Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "2022-02-22T07:22:13.169Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "2022-02-22T07:22:13.169Z");
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 1439 + "'", int72 == 1439);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test05173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05173");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.LocalTime localTime6 = property4.addCopy(0);
        org.joda.time.Chronology chronology7 = localTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.halfdayOfDay();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(15);
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType18.getField(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.dayOfYear();
        java.util.Locale locale42 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket44 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology38, locale42, (java.lang.Integer) 5);
        int int45 = property15.getMaximumShortTextLength(locale42);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str46 = dateTimeField9.getAsShortText(26359, locale42);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 26359");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "ISOChronology[UTC]" + "'", str39, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 9 + "'", int45 == 9);
    }

    @Test
    public void test05174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05174");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray7 = localDateTime4.getFields();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withDayOfWeek(1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra(5);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withYear(29);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.add((long) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.yearOfCentury();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = duration22.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration26 = duration19.minus((org.joda.time.ReadableDuration) duration25);
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration19);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.roundFloor();
        mutableDateTime30.addHours(0);
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime30);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.Period period39 = period37.minusSeconds((-1));
        java.lang.String str40 = period37.toString();
        org.joda.time.Period period41 = period37.toPeriod();
        org.joda.time.PeriodType periodType42 = period37.getPeriodType();
        org.joda.time.Period period44 = period37.plusMonths(0);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearMonthDay();
        java.lang.String str46 = periodType45.getName();
        org.joda.time.Period period47 = period44.normalizedStandard(periodType45);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(10, 1, 53, 15);
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(readableInstant53, readableInstant54, periodType55);
        org.joda.time.DurationFieldType durationFieldType58 = periodType55.getFieldType((int) (short) 0);
        int int59 = mutablePeriod52.get(durationFieldType58);
        int int60 = periodType45.indexOf(durationFieldType58);
        mutableDateTime30.add(durationFieldType58, 26222789);
        boolean boolean63 = localDateTime13.isSupported(durationFieldType58);
        org.joda.time.ReadablePartial readablePartial64 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int65 = localDateTime13.compareTo(readablePartial64);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeFieldArray7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PT0.099S" + "'", str40, "PT0.099S");
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(periodType42);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "YearMonthDay" + "'", str46, "YearMonthDay");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
    }

    @Test
    public void test05175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05175");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        int int4 = property1.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime8 = property1.add((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime10 = property1.addWrapField(86399);
        org.joda.time.MutableDateTime mutableDateTime11 = property1.roundCeiling();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.months();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21, periodType22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        int int25 = dateTime19.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        boolean boolean32 = property29.equals((java.lang.Object) 10L);
        long long33 = property29.remainder();
        java.lang.String str34 = property29.getAsText();
        org.joda.time.LocalDateTime localDateTime35 = property29.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property29.getFieldType();
        int int37 = dateTime19.get(dateTimeFieldType36);
        org.joda.time.DateTime dateTime39 = dateTime19.plusHours((-356));
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj41 = mutableDateTime40.clone();
        mutableDateTime40.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime40.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime46 = property44.add(1L);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        long long51 = dateTimeZone47.getMillisKeepLocal(dateTimeZone49, (long) 44);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(dateTimeZone47);
        mutableDateTime46.setZoneRetainFields(dateTimeZone47);
        mutableDateTime46.addSeconds((int) (short) 10);
        java.lang.Object obj56 = mutableDateTime46.clone();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime46.era();
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(chronology65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusMinutes(15);
        org.joda.time.DateTime dateTime69 = localDateTime62.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime71 = localDateTime62.toDateTime(dateTimeZone70);
        org.joda.time.DateTime dateTime73 = dateTime71.withMinuteOfHour(46);
        org.joda.time.DateTimeZone dateTimeZone74 = dateTime73.getZone();
        java.lang.String str76 = dateTimeZone74.getShortName((long) ' ');
        mutableDateTime46.setZoneRetainFields(dateTimeZone74);
        java.lang.Object obj78 = null;
        boolean boolean79 = dateTimeZone74.equals(obj78);
        boolean boolean81 = dateTimeZone74.isStandardOffset((-29912203583046059L));
        org.joda.time.DateTime dateTime82 = dateTime39.withZone(dateTimeZone74);
        mutableDateTime11.setZone(dateTimeZone74);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1333442L + "'", long33 == 1333442L);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "7" + "'", str34, "7");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(obj41);
// flaky:         org.junit.Assert.assertEquals(obj41.toString(), "2022-02-22T07:22:13.442Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj41), "2022-02-22T07:22:13.442Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj41), "2022-02-22T07:22:13.442Z");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 44L + "'", long51 == 44L);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(obj56);
        org.junit.Assert.assertEquals(obj56.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj56), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj56), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTimeZone74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00" + "'", str76, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test05176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05176");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter2.withPivotYear(62254);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter2.withDefaultYear(37068754);
        java.lang.Appendable appendable42 = null;
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean45 = localDate43.isSupported(dateTimeFieldType44);
        org.joda.time.LocalDate.Property property46 = localDate43.yearOfEra();
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str52 = duration51.toString();
        org.joda.time.Instant instant53 = instant47.minus((org.joda.time.ReadableDuration) duration51);
        int int54 = property46.getDifference((org.joda.time.ReadableInstant) instant47);
        org.joda.time.MutableDateTime mutableDateTime55 = instant47.toMutableDateTime();
        int int56 = mutableDateTime55.getHourOfDay();
        int int57 = mutableDateTime55.getMonthOfYear();
        int int58 = mutableDateTime55.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(appendable42, (org.joda.time.ReadableInstant) mutableDateTime55);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u5fb7\u6587" + "'", str34, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(dateTimePrinter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PT86400S" + "'", str52, "PT86400S");
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2 + "'", int57 == 2);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 2022 + "'", int58 == 2022);
    }

    @Test
    public void test05177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05177");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj6 = mutableDateTime5.clone();
        mutableDateTime5.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add(1L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long16 = dateTimeZone12.getMillisKeepLocal(dateTimeZone14, (long) 44);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone12);
        mutableDateTime11.setZoneRetainFields(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.weekyear();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) mutableDateTime19);
        java.util.Date date22 = mutableDateTime3.toDate();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "2022-02-22T07:22:13.580Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "2022-02-22T07:22:13.580Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "2022-02-22T07:22:13.580Z");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 44L + "'", long16 == 44L);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(date22);
// flaky:         org.junit.Assert.assertEquals(date22.toString(), "Tue Feb 22 07:22:13 GMT 2022");
    }

    @Test
    public void test05178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05178");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(20);
        org.joda.time.Period period3 = period1.minusMillis(3);
        org.joda.time.Period period5 = period1.plusSeconds(47831274);
        org.joda.time.Period period7 = period1.minusYears(13);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.Period period12 = period10.withDays((int) (byte) 1);
        org.joda.time.Period period14 = period10.minusMillis(1424);
        org.joda.time.Period period16 = period10.withDays(12);
        int int17 = period10.size();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = dateTime19.withZoneRetainFields(dateTimeZone20);
        org.joda.time.LocalDate localDate22 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property23 = localDate22.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDate22.toDateTimeAtCurrentTime(dateTimeZone24);
        int int27 = dateTime21.compareTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime29 = dateTime26.withDayOfMonth(20);
        org.joda.time.DateTime.Property property30 = dateTime29.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = dateTimeZone32.getName(100L, locale34);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(948227L, dateTimeZone32);
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime37.year();
        mutableDateTime37.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.PeriodType periodType46 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod(readableInstant44, readableInstant45, periodType46);
        org.joda.time.DurationFieldType durationFieldType49 = periodType46.getFieldType((int) (short) 0);
        java.lang.String str50 = periodType46.toString();
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Chronology chronology54 = instant53.getChronology();
        org.joda.time.Period period55 = new org.joda.time.Period((long) 53, (long) (-1), periodType46, chronology54);
        org.joda.time.DateTimeField dateTimeField56 = dateTimeFieldType41.getField(chronology54);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusMinutes(15);
        org.joda.time.Chronology chronology61 = dateTime58.getChronology();
        java.lang.String str62 = chronology61.toString();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType41.getField(chronology61);
        org.joda.time.DurationField durationField64 = chronology61.centuries();
        org.joda.time.DateTimeField dateTimeField65 = chronology61.millisOfDay();
        mutableDateTime37.setChronology(chronology61);
        org.joda.time.MutableDateTime mutableDateTime67 = dateTime29.toMutableDateTime(chronology61);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period70 = duration69.toPeriod();
        org.joda.time.Duration duration72 = duration69.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime73 = org.joda.time.MutableDateTime.now();
        mutableDateTime73.add((long) 'a');
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime73.yearOfCentury();
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period79 = duration78.toPeriod();
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration84 = duration81.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration85 = duration78.minus((org.joda.time.ReadableDuration) duration84);
        mutableDateTime73.add((org.joda.time.ReadableDuration) duration78);
        boolean boolean87 = duration72.isShorterThan((org.joda.time.ReadableDuration) duration78);
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.years();
        org.joda.time.Period period90 = new org.joda.time.Period(60000L, periodType89);
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration78, periodType89);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((java.lang.Object) period10, periodType89);
        org.joda.time.Period period93 = period7.withFields((org.joda.time.ReadablePeriod) mutablePeriod92);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DurationFieldType durationFieldType95 = period93.getFieldType(49);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: null");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u5fb7\u6587" + "'", str35, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(periodType46);
        org.junit.Assert.assertNotNull(durationFieldType49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PeriodType[YearDayTime]" + "'", str50, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "ISOChronology[UTC]" + "'", str62, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(durationField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(mutableDateTime73);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(duration78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(period93);
    }

    @Test
    public void test05179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05179");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(441, 88, 32431, 26495653, 26254, 0, 52);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26495653 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05180");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        mutableDateTime11.setZoneRetainFields(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localTime3.toDateTimeToday(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime15.withYearOfEra(26333);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMonths(117);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:22:13.628Z" + "'", str10, "2022-02-22T07:22:13.628Z");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test05181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05181");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfYear();
        org.joda.time.Period period6 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period8 = period6.withDays(2022);
        org.joda.time.DateTime dateTime10 = dateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period8, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusYears((int) (short) 100);
        int int18 = localDateTime17.getEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusHours(45);
        org.joda.time.DateTime dateTime21 = dateTime10.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime24 = property23.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField25 = property23.getField();
        int int26 = dateTime10.get(dateTimeField25);
        int int27 = dateTime10.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime10.minusWeeks((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj31 = mutableDateTime30.clone();
        mutableDateTime30.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.add(1L);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        long long41 = dateTimeZone37.getMillisKeepLocal(dateTimeZone39, (long) 44);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone37);
        mutableDateTime36.setZoneRetainFields(dateTimeZone37);
        mutableDateTime36.addSeconds((int) (short) 10);
        java.lang.Object obj46 = mutableDateTime36.clone();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime36.era();
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMinutes(15);
        org.joda.time.DateTime dateTime59 = localDateTime52.toDateTime((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime61 = localDateTime52.toDateTime(dateTimeZone60);
        org.joda.time.DateTime dateTime63 = dateTime61.withMinuteOfHour(46);
        org.joda.time.DateTimeZone dateTimeZone64 = dateTime63.getZone();
        java.lang.String str66 = dateTimeZone64.getShortName((long) ' ');
        mutableDateTime36.setZoneRetainFields(dateTimeZone64);
        java.lang.Object obj68 = null;
        boolean boolean69 = dateTimeZone64.equals(obj68);
        boolean boolean71 = dateTimeZone64.isStandardOffset((-29912203583046059L));
        long long73 = dateTimeZone64.previousTransition((long) 340);
        org.joda.time.DateTime dateTime74 = dateTime29.withZone(dateTimeZone64);
        int int75 = dateTime74.getHourOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 25 + "'", int26 == 25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 39 + "'", int27 == 39);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "2022-02-22T07:22:13.653Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "2022-02-22T07:22:13.653Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "2022-02-22T07:22:13.653Z");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 44L + "'", long41 == 44L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(obj46);
        org.junit.Assert.assertEquals(obj46.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj46), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj46), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 340L + "'", long73 == 340L);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 7 + "'", int75 == 7);
    }

    @Test
    public void test05182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05182");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.DateTime dateTime3 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtStartOfDay();
        boolean boolean6 = dateTime4.isEqual(1213511L);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test05183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05183");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        mutableDateTime1.setWeekOfWeekyear(13);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.eras();
        mutablePeriod18.setPeriod((long) 999, chronology23);
        org.joda.time.Chronology chronology28 = chronology23.withUTC();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.plus(44L);
        boolean boolean34 = mutableDateTime1.isEqual((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Chronology chronology36 = null;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.lang.String str39 = locale37.getDisplayVariant(locale38);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket40 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology36, locale38);
        java.util.Locale locale41 = dateTimeParserBucket40.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.secondOfDay();
        dateTimeParserBucket40.saveField(dateTimeFieldType42, 22);
        org.joda.time.DateTime dateTime46 = dateTime31.withField(dateTimeFieldType42, 33);
        java.lang.String str47 = dateTimeFieldType42.toString();
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "secondOfDay" + "'", str47, "secondOfDay");
    }

    @Test
    public void test05184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05184");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        int int20 = mutableDateTime19.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.minuteOfDay();
        int int22 = mutableDateTime19.getYearOfCentury();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:22:13.797Z" + "'", str14, "2022-02-22T07:22:13.797Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
    }

    @Test
    public void test05185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05185");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone16);
        long long23 = dateTimeZone16.convertLocalToUTC(2100L, true);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone16);
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(2000, 26150565, 51, 10);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration37 = duration33.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.Period period40 = period38.plusSeconds((int) (byte) 0);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.eras();
        boolean boolean42 = period38.equals((java.lang.Object) durationFieldType41);
        int int43 = mutablePeriod29.indexOf(durationFieldType41);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate45 = localDate24.withFieldAdded(durationFieldType41, 26302057);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'eras' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:22:13.814Z" + "'", str14, "2022-02-22T07:22:13.814Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2100L + "'", long23 == 2100L);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
    }

    @Test
    public void test05186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05186");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.Instant instant6 = instant4.minus((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardHours((-229564796800L));
        org.joda.time.Instant instant10 = instant6.minus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Instant instant12 = instant10.plus(98730856001880000L);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(instant12);
    }

    @Test
    public void test05187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05187");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(100);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfWeek();
        mutableDateTime0.setChronology(chronology31);
        org.joda.time.Period period37 = org.joda.time.Period.hours((int) (short) 10);
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.monthOfYear();
        org.joda.time.LocalDate localDate40 = property39.roundFloorCopy();
        org.joda.time.DateTime dateTime41 = localDate40.toDateTimeAtMidnight();
        boolean boolean42 = period37.equals((java.lang.Object) localDate40);
        org.joda.time.DateTime dateTime43 = localDate40.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        org.joda.time.LocalDate.Property property46 = localDate44.dayOfMonth();
        org.joda.time.LocalDate localDate48 = localDate44.withEra((int) (short) 0);
        int[] intArray49 = localDate48.getValues();
        chronology31.validate((org.joda.time.ReadablePartial) localDate40, intArray49);
        int int51 = localDate40.getCenturyOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDate40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(localDate48);
        org.junit.Assert.assertNotNull(intArray49);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray49), "[-2022, 2, 22]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 20 + "'", int51 == 20);
    }

    @Test
    public void test05188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05188");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(963012L);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean6 = localDate3.isSupported(dateTimeFieldType5);
        int int7 = localDate3.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight9 = localDate3.toDateMidnight(dateTimeZone8);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime10.copy();
        mutableDateTime10.setDate((long) '#');
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean19 = localDate16.isSupported(dateTimeFieldType18);
        int int20 = localDate16.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight22 = localDate16.toDateMidnight(dateTimeZone21);
        org.joda.time.DateTime dateTime23 = mutableDateTime10.toDateTime(dateTimeZone21);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(dateTimeZone21);
        org.joda.time.Interval interval25 = localDate3.toInterval(dateTimeZone21);
        java.util.TimeZone timeZone26 = dateTimeZone21.toTimeZone();
        java.lang.String str28 = dateTimeZone21.getName(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((java.lang.Object) period2, dateTimeZone21);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.Period");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 53 + "'", int7 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateMidnight9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 53 + "'", int20 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateMidnight22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(interval25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
    }

    @Test
    public void test05189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05189");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours21 = duration20.toStandardHours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration17.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean47 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant48 = instant15.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours51 = duration50.toStandardHours();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        int int54 = dateTime53.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime57 = dateTime53.plus(0L);
        org.joda.time.Instant instant58 = dateTime57.toInstant();
        boolean boolean59 = instant15.isAfter((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Instant instant60 = instant58.toInstant();
        org.joda.time.Instant instant61 = instant58.toInstant();
        org.joda.time.DateTime dateTime62 = instant61.toDateTimeISO();
        org.joda.time.DateTime dateTime63 = instant61.toDateTime();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT86400S" + "'", str18, "PT86400S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(hours21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 13 + "'", int24 == 13);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(hours51);
// flaky:         org.junit.Assert.assertTrue("'" + int54 + "' != '" + 13 + "'", int54 == 13);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTime63);
    }

    @Test
    public void test05190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05190");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = duration12.minus((long) 292278993);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        org.joda.time.DurationFieldType durationFieldType28 = periodType25.getFieldType((int) (short) 0);
        java.lang.String str29 = periodType25.toString();
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 53, (long) (-1), periodType25, chronology33);
        org.joda.time.Period period35 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType25);
        org.joda.time.DateTimeZone dateTimeZone38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(dateTimeZone38);
        org.joda.time.LocalTime localTime41 = localTime39.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology42 = localTime41.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology42);
        org.joda.time.DateTimeField dateTimeField44 = chronology42.millisOfDay();
        org.joda.time.Period period45 = new org.joda.time.Period(3155760000000L, periodType25, chronology42);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) (byte) 0, (long) (short) 100, periodType25);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableDuration) duration15, periodType25);
        org.joda.time.Duration duration49 = duration15.minus((long) 48);
        org.joda.time.MutableDateTime mutableDateTime50 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) mutableDateTime50);
        java.lang.String str53 = mutablePeriod52.toString();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(durationFieldType28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PeriodType[YearDayTime]" + "'", str29, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(localTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "P-2DT-9H-11M-19.041S" + "'", str53, "P-2DT-9H-11M-19.041S");
    }

    @Test
    public void test05191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05191");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.LocalTime localTime10 = localTime8.minusHours((int) (byte) 100);
        int int11 = localTime10.getMinuteOfHour();
        java.lang.String str13 = localTime10.toString("1");
        org.joda.time.LocalTime localTime15 = localTime10.minusMinutes(15);
        org.joda.time.LocalTime localTime17 = localTime10.plusMillis(26164766);
        org.joda.time.LocalTime localTime19 = localTime10.minusHours(26172069);
        org.joda.time.LocalTime localTime21 = localTime19.minusSeconds(62166);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration30 = duration26.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant31 = instant24.plus((org.joda.time.ReadableDuration) duration30);
        long long32 = instant31.getMillis();
        org.joda.time.Chronology chronology33 = instant31.getChronology();
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.months();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime43, periodType44);
        boolean boolean46 = dateTime37.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant31, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration53 = duration49.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTime dateTime57 = dateTime55.plusMinutes(15);
        org.joda.time.Interval interval58 = duration53.toIntervalTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Instant instant59 = instant31.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTimeZone dateTimeZone60 = instant31.getZone();
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("2020-05-01");
        java.lang.String str64 = dateTimeZone60.getShortName(1645514234816L, locale63);
        org.joda.time.DateTime dateTime65 = localTime19.toDateTimeToday(dateTimeZone60);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateTime65);
        int int67 = dateTime65.getMillisOfSecond();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86400000L + "'", long32 == 86400000L);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 936 + "'", int67 == 936);
    }

    @Test
    public void test05192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05192");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.months();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21, periodType22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(15);
        org.joda.time.Interval interval36 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Instant instant37 = instant9.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTime dateTime38 = instant9.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj40 = mutableDateTime39.clone();
        mutableDateTime39.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime39.dayOfWeek();
        mutableDateTime39.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime39.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime47 = property46.roundCeiling();
        mutableDateTime47.setMillisOfDay(49);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.Instant instant53 = instant9.withDurationAdded((-229564796800L), 2);
        org.joda.time.Chronology chronology54 = instant53.getChronology();
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology54);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "2022-02-22T07:22:13.998Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "2022-02-22T07:22:13.998Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "2022-02-22T07:22:13.998Z");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertNotNull(chronology54);
    }

    @Test
    public void test05193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05193");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(100);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.LocalDate localDate33 = org.joda.time.LocalDate.now(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.dayOfWeek();
        mutableDateTime0.setChronology(chronology31);
        org.joda.time.DateTimeField dateTimeField36 = chronology31.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology31.era();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
    }

    @Test
    public void test05194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05194");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours5 = duration4.toStandardHours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant15, readableInstant16, periodType17);
        org.joda.time.DurationFieldType durationFieldType20 = periodType17.getFieldType((int) (short) 0);
        java.lang.String str21 = periodType17.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 53, (long) (-1), periodType17, chronology25);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType17);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.Period period36 = duration1.toPeriod(periodType17, chronology31);
        org.joda.time.DateTimeField dateTimeField37 = chronology31.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField38 = chronology31.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(chronology31);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT86400S" + "'", str2, "PT86400S");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(hours5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 14 + "'", int8 == 14);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PeriodType[YearDayTime]" + "'", str21, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeField38);
    }

    @Test
    public void test05195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05195");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant24 = instant17.plus((org.joda.time.ReadableDuration) duration23);
        long long25 = instant24.getMillis();
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.months();
        org.joda.time.Period period28 = new org.joda.time.Period((-205878993L), chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology26.getZone();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime0, chronology26);
        int int32 = localTime31.size();
        org.joda.time.LocalTime.Property property33 = localTime31.hourOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test05196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05196");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTime();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) 36946953);
        org.joda.time.Instant instant5 = instant0.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration8 = duration7.toDuration();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.Instant instant11 = instant9.toInstant();
        long long12 = instant11.getMillis();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusYears((int) (short) 100);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime19.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Instant instant31 = instant11.withDurationAdded((org.joda.time.ReadableDuration) duration21, (int) (byte) -1);
        org.joda.time.Duration duration32 = duration7.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration35 = duration7.withDurationAdded((-9571L), 152);
        org.joda.time.Instant instant37 = instant0.withDurationAdded((org.joda.time.ReadableDuration) duration35, 26148);
        org.joda.time.Instant instant40 = instant0.withDurationAdded((long) 62431, 1969);
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1645514534155L + "'", long12 == 1645514534155L);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(instant40);
    }

    @Test
    public void test05197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05197");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra((int) '#');
        org.joda.time.DateTime dateTime10 = dateTime5.withYear((int) 'u');
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.hours();
        org.joda.time.DurationField durationField17 = chronology15.years();
        org.joda.time.DateTime dateTime18 = dateTime10.toDateTime(chronology15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMinutes(15);
        org.joda.time.Chronology chronology24 = dateTime21.getChronology();
        java.lang.String str25 = chronology24.toString();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology24);
        org.joda.time.DurationField durationField27 = chronology24.minutes();
        org.joda.time.DateTime dateTime28 = dateTime18.withChronology(chronology24);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        mutableDateTime29.add((long) 'a');
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str36 = duration35.toString();
        boolean boolean37 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Hours hours38 = duration33.toStandardHours();
        mutableDateTime29.add((org.joda.time.ReadableDuration) duration33, 20);
        mutableDateTime29.setMillisOfDay(36946953);
        boolean boolean43 = dateTime28.isBefore((org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.DateTime dateTime45 = dateTime28.plus(0L);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMillis(10);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ISOChronology[UTC]" + "'", str25, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT86400S" + "'", str36, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(hours38);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
    }

    @Test
    public void test05198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05198");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.millisOfDay();
        org.joda.time.DateTime dateTime3 = mutableDateTime0.toDateTime();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime5 = dateTime3.withDayOfMonth(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:14.223Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:14.223Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:14.223Z");
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
    }

    @Test
    public void test05199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05199");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime4.plus(0L);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.DateTime.Property property10 = dateTime8.weekOfWeekyear();
        org.joda.time.DateTime dateTime11 = property10.getDateTime();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(hours2);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 14 + "'", int5 == 14);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test05200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05200");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, (int) (short) -1);
        int int5 = localDateTime4.getEra();
        java.io.IOException iOException8 = new java.io.IOException("");
        java.io.IOException iOException9 = new java.io.IOException("2022-02-22T10:15:44.882", (java.lang.Throwable) iOException8);
        boolean boolean10 = localDateTime4.equals((java.lang.Object) iOException9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withMillisOfDay(26150);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime4.withField(dateTimeFieldType13, (int) (byte) 1);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.era();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21, periodType22);
        org.joda.time.DurationFieldType durationFieldType25 = periodType22.getFieldType((int) (short) 0);
        java.lang.String str26 = periodType22.toString();
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Chronology chronology30 = instant29.getChronology();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 53, (long) (-1), periodType22, chronology30);
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType17.getField(chronology30);
        int int33 = localDateTime15.get(dateTimeFieldType17);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime15.minusDays(161);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField42 = localDateTime40.getField((int) (byte) 0);
        java.lang.String str43 = localDateTime40.toString();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime40.withDayOfMonth(15);
        org.joda.time.LocalDateTime.Property property46 = localDateTime40.weekyear();
        boolean boolean47 = localDateTime15.isBefore((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int54 = localDateTime52.get(dateTimeFieldType53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime56 = property55.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusMonths(304);
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.now();
        mutableDateTime59.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime62 = mutableDateTime59.copy();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime59.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime59.dayOfYear();
        java.util.Locale locale65 = java.util.Locale.KOREA;
        int int66 = property64.getMaximumTextLength(locale65);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = property64.getFieldType();
        int int68 = localDateTime58.get(dateTimeFieldType67);
        int int69 = localDateTime15.get(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PeriodType[YearDayTime]" + "'", str26, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 119 + "'", int33 == 119);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "2022-02-22T10:22:14.292" + "'", str43, "2022-02-22T10:22:14.292");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1439 + "'", int54 == 1439);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 239 + "'", int68 == 239);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 365 + "'", int69 == 365);
    }

    @Test
    public void test05201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05201");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime8 = localDate3.toDateTimeAtCurrentTime(dateTimeZone7);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTime dateTime11 = dateTime8.withMillis((long) 999);
        org.joda.time.DateTime dateTime13 = dateTime11.minusWeeks(113);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str16 = duration15.toString();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours19 = duration18.toStandardHours();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Duration duration24 = duration15.plus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration29 = duration26.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        mutableDateTime30.add((long) 'a');
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.yearOfCentury();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration41 = duration38.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration42 = duration35.minus((org.joda.time.ReadableDuration) duration41);
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration35);
        boolean boolean44 = duration29.isShorterThan((org.joda.time.ReadableDuration) duration35);
        boolean boolean45 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration53 = duration49.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration55 = duration29.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        int int58 = dateTime57.getYearOfCentury();
        int int59 = dateTime57.getWeekyear();
        org.joda.time.DateTime dateTime61 = dateTime57.plus((long) 15);
        org.joda.time.DateTime.Property property62 = dateTime57.year();
        org.joda.time.DateTime dateTime63 = property62.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period(readableDuration64, readableInstant65);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Period period70 = new org.joda.time.Period((long) 100, 1L, periodType69);
        org.joda.time.Period period72 = period70.minusSeconds((-1));
        java.lang.String str73 = period70.toString();
        org.joda.time.Period period74 = period70.toPeriod();
        org.joda.time.PeriodType periodType75 = period70.getPeriodType();
        org.joda.time.Period period76 = period66.normalizedStandard(periodType75);
        java.lang.String str77 = periodType75.getName();
        org.joda.time.PeriodType periodType78 = periodType75.withYearsRemoved();
        org.joda.time.Period period79 = duration53.toPeriodTo((org.joda.time.ReadableInstant) dateTime63, periodType78);
        org.joda.time.Duration duration82 = duration53.withDurationAdded((long) 29, 2022);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardHours((long) (-292275054));
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardMinutes(0L);
        org.joda.time.Duration duration87 = duration84.plus((org.joda.time.ReadableDuration) duration86);
        int int88 = duration82.compareTo((org.joda.time.ReadableDuration) duration87);
        org.joda.time.DateTime dateTime89 = dateTime13.minus((org.joda.time.ReadableDuration) duration87);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT86400S" + "'", str16, "PT86400S");
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(hours19);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 14 + "'", int22 == 14);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 22 + "'", int58 == 22);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 2022 + "'", int59 == 2022);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(period72);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "PT0.099S" + "'", str73, "PT0.099S");
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Standard" + "'", str77, "Standard");
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(duration86);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 1 + "'", int88 == 1);
        org.junit.Assert.assertNotNull(dateTime89);
    }

    @Test
    public void test05202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05202");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = property14.roundHalfEvenCopy();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours19 = duration18.toStandardHours();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime21);
        mutablePeriod23.addSeconds(292278993);
        mutablePeriod23.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime29 = dateTime16.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTime dateTime32 = dateTime16.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean43 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration44 = duration34.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration49 = duration46.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean50 = duration37.equals((java.lang.Object) duration46);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.eras();
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.now(chronology56);
        org.joda.time.Period period59 = duration37.toPeriod(periodType52, chronology56);
        org.joda.time.DurationFieldType durationFieldType61 = period59.getFieldType(1);
        mutableDateTime8.add(durationFieldType61, 61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime8.millisOfDay();
        mutableDateTime8.addSeconds(37118622);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "53" + "'", str6, "53");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(hours19);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 14 + "'", int22 == 14);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(localTime58);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(durationFieldType61);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test05203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05203");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        boolean boolean5 = dateTime3.equals((java.lang.Object) (-1L));
        java.util.GregorianCalendar gregorianCalendar6 = dateTime3.toGregorianCalendar();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime9 = dateTime3.withField(dateTimeFieldType7, 22);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str12 = duration11.toString();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours15 = duration14.toStandardHours();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Duration duration20 = duration11.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime22.copy();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = property26.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime29.toMutableDateTime(dateTimeZone30);
        mutableDateTime32.add(51L);
        int int35 = mutableDateTime32.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.minusSeconds((int) (byte) 10);
        java.lang.Object obj45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(obj45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration48);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime42.minus((org.joda.time.ReadableDuration) duration48);
        java.util.TimeZone timeZone52 = java.util.TimeZone.getTimeZone("2022-02-22T10:15:47.721");
        boolean boolean53 = duration48.equals((java.lang.Object) "2022-02-22T10:15:47.721");
        org.joda.time.Duration duration55 = duration48.withMillis(27418772L);
        org.joda.time.Duration duration57 = duration48.plus(963012L);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Period period60 = org.joda.time.Period.days(62176);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusMinutes(15);
        org.joda.time.DateTime dateTime72 = localDateTime65.toDateTime((org.joda.time.ReadableInstant) dateTime69);
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone74 = dateTimeZone73.toTimeZone();
        org.joda.time.DateTime dateTime75 = dateTime72.withZone(dateTimeZone73);
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearDay();
        java.lang.String str78 = periodType77.getName();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(100L, periodType77);
        org.joda.time.DateTime dateTime80 = dateTime75.plus((org.joda.time.ReadablePeriod) mutablePeriod79);
        org.joda.time.Duration duration81 = period60.toDurationTo((org.joda.time.ReadableInstant) dateTime80);
        int int82 = duration48.compareTo((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period85 = duration84.toPeriod();
        org.joda.time.Duration duration87 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration90 = duration87.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration91 = duration84.minus((org.joda.time.ReadableDuration) duration90);
        long long92 = duration91.getStandardSeconds();
        org.joda.time.Duration duration93 = duration48.minus((org.joda.time.ReadableDuration) duration91);
        boolean boolean94 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration91);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "PT86400S" + "'", str12, "PT86400S");
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(hours15);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 14 + "'", int18 == 14);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "\u683c\u6797\u5a01\u6cbb\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "YearDay" + "'", str78, "YearDay");
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
        org.junit.Assert.assertNotNull(duration84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertTrue("'" + long92 + "' != '" + (-3L) + "'", long92 == (-3L));
        org.junit.Assert.assertNotNull(duration93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test05204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05204");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime5.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        mutableDateTime11.setDate((long) '#');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        int int21 = localDate17.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone22);
        org.joda.time.PeriodType periodType28 = null;
        org.joda.time.Period period29 = new org.joda.time.Period((long) 100, 1L, periodType28);
        org.joda.time.PeriodType periodType30 = period29.getPeriodType();
        boolean boolean31 = dateTimeZone22.equals((java.lang.Object) periodType30);
        mutableDateTime5.setZoneRetainFields(dateTimeZone22);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate(dateTimeZone22);
        org.joda.time.DateTime dateTime34 = localDate0.toDateTimeAtStartOfDay(dateTimeZone22);
        org.joda.time.Chronology chronology35 = localDate0.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.millis();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
    }

    @Test
    public void test05205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05205");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        boolean boolean37 = dateTimeFormatter36.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser38 = dateTimeFormatter36.getParser();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder39.clear();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = locale41.getISO3Language();
        java.util.Locale.Builder builder44 = builder40.setLocale(locale41);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale48);
        java.util.Locale locale51 = dateTimeParserBucket50.getLocale();
        java.util.Locale.Builder builder52 = builder44.setLocale(locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter36.withLocale(locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter36.withPivotYear(22);
        org.joda.time.Chronology chronology56 = dateTimeFormatter36.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            long long58 = dateTimeFormatter36.parseMillis("2022-02-22T10:19:48.209");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u5fb7\u6587" + "'", str34, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNull(dateTimeParser38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u5fb7\u6587" + "'", str42, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "deu" + "'", str43, "deu");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNull(chronology56);
    }

    @Test
    public void test05206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05206");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.Chronology chronology13 = dateTimeFormatter2.getChronolgy();
        java.util.Locale locale14 = java.util.Locale.PRC;
        boolean boolean15 = locale14.hasExtensions();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withLocale(locale14);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        long long21 = dateTimeZone17.getMillisKeepLocal(dateTimeZone19, (long) 44);
        boolean boolean23 = dateTimeZone19.isStandardOffset((long) (-1));
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property27 = localDateTime24.hourOfDay();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str31 = dateTimeFieldType30.getName();
        int int32 = localDateTime24.indexOf(dateTimeFieldType30);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime24.minusSeconds((int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getYearOfCentury();
        int int38 = dateTime36.getWeekyear();
        org.joda.time.DateTime dateTime40 = dateTime36.plus((long) 15);
        org.joda.time.DateTime.Property property41 = dateTime36.year();
        org.joda.time.DateTime dateTime42 = property41.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfSecond();
        org.joda.time.DateTime dateTime44 = localDateTime34.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = dateTime42.minusMinutes(55);
        int int47 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusYears((int) (short) 100);
        int int55 = localDateTime54.getEra();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime54.minusHours(45);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime57.plusHours(435);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime57.plusHours(51);
        boolean boolean64 = dateTimeZone19.isLocalDateTimeGap(localDateTime57);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = dateTimeFormatter2.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter67 = dateTimeFormatter2.withDefaultYear((-16));
        java.lang.StringBuffer stringBuffer68 = null;
        org.joda.time.MutableDateTime mutableDateTime70 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException72 = new java.io.IOException("");
        java.io.IOException iOException73 = new java.io.IOException((java.lang.Throwable) iOException72);
        boolean boolean74 = mutableDateTime70.equals((java.lang.Object) iOException72);
        org.joda.time.Duration duration77 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime70.add((org.joda.time.ReadableDuration) duration77, 1424);
        org.joda.time.MutableDateTime mutableDateTime80 = mutableDateTime70.toMutableDateTime();
        mutableDateTime80.setWeekyear(47831274);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter67.printTo(stringBuffer68, (org.joda.time.ReadableInstant) mutableDateTime80);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 44L + "'", long21 == 44L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "clockhourOfDay" + "'", str31, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-1) + "'", int32 == (-1));
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 2022 + "'", int38 == 2022);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 1 + "'", int55 == 1);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter65);
        org.junit.Assert.assertNotNull(dateTimeFormatter67);
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNotNull(mutableDateTime80);
    }

    @Test
    public void test05207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05207");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add((long) (-1));
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean14 = localDate12.isSupported(dateTimeFieldType13);
        org.joda.time.LocalDate.Property property15 = localDate12.yearOfEra();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str21 = duration20.toString();
        org.joda.time.Instant instant22 = instant16.minus((org.joda.time.ReadableDuration) duration20);
        int int23 = property15.getDifference((org.joda.time.ReadableInstant) instant16);
        org.joda.time.Duration duration26 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant27 = instant16.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str30 = duration29.toString();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours33 = duration32.toStandardHours();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration32, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = duration29.plus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration43 = duration40.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        mutableDateTime44.add((long) 'a');
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.yearOfCentury();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration55 = duration52.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration56 = duration49.minus((org.joda.time.ReadableDuration) duration55);
        mutableDateTime44.add((org.joda.time.ReadableDuration) duration49);
        boolean boolean58 = duration43.isShorterThan((org.joda.time.ReadableDuration) duration49);
        boolean boolean59 = duration32.isLongerThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Instant instant60 = instant27.minus((org.joda.time.ReadableDuration) duration43);
        boolean boolean61 = property9.equals((java.lang.Object) instant27);
        org.joda.time.Instant instant63 = instant27.minus((long) 26238);
        org.joda.time.DateTime dateTime64 = instant63.toDateTimeISO();
        org.joda.time.Duration duration66 = new org.joda.time.Duration(1645488050376L);
        org.joda.time.Instant instant67 = instant63.minus((org.joda.time.ReadableDuration) duration66);
        org.joda.time.Instant instant69 = instant67.minus(1220893L);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT86400S" + "'", str21, "PT86400S");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "PT86400S" + "'", str30, "PT86400S");
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(hours33);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 14 + "'", int36 == 14);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(instant60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(instant69);
    }

    @Test
    public void test05208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05208");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        mutableDateTime6.setYear(3);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.eras();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 44, chronology13);
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        java.lang.String[] strArray20 = java.util.TimeZone.getAvailableIDs((int) '#');
        boolean boolean21 = dateTime17.equals((java.lang.Object) strArray20);
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) dateTime17);
        java.lang.String str23 = mutableDateTime6.toString();
        mutableDateTime6.addMinutes(26475244);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:14.826Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:14.826Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:14.826Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(strArray20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "0003-02-23T00:00:00.044Z" + "'", str23, "0003-02-23T00:00:00.044Z");
    }

    @Test
    public void test05209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05209");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        long long30 = chronology25.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField31 = chronology25.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(44L, periodType20, chronology25);
        org.joda.time.LocalDate localDate34 = localDate7.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod32, (int) (byte) 1);
        int int35 = localDate7.getYearOfEra();
        org.joda.time.DateTime dateTime36 = localDate7.toDateTimeAtMidnight();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime36.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime39 = dateTime36.withYearOfEra(62317);
        org.joda.time.DateTime dateTime41 = dateTime36.plusHours(26256523);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT0.099S" + "'", str18, "PT0.099S");
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 105144L + "'", long30 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test05210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05210");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime.Property property14 = dateTime13.weekOfWeekyear();
        org.joda.time.DateTime dateTime16 = dateTime13.minusHours(26495254);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test05211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05211");
        java.lang.Object obj0 = null;
        org.joda.time.Duration duration1 = new org.joda.time.Duration(obj0);
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant4, readableInstant5, periodType6);
        org.joda.time.DurationFieldType durationFieldType9 = periodType6.getFieldType((int) (short) 0);
        java.lang.String str10 = periodType6.toString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 53, (long) (-1), periodType6, chronology14);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology14);
        org.joda.time.Period period19 = duration1.toPeriod(chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.secondOfMinute();
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PeriodType[YearDayTime]" + "'", str10, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test05212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05212");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology3);
        mutableDateTime8.addMillis(765);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
    }

    @Test
    public void test05213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05213");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(0L);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.LocalTime localTime10 = localTime8.minusHours((int) (byte) 100);
        int int11 = localTime10.getMinuteOfHour();
        java.lang.String str13 = localTime10.toString("1");
        org.joda.time.LocalTime localTime15 = localTime10.minusMinutes(15);
        org.joda.time.LocalTime localTime17 = localTime10.plusMillis(26164766);
        org.joda.time.LocalTime localTime19 = localTime10.minusHours(26172069);
        org.joda.time.LocalTime localTime21 = localTime19.minusSeconds(62166);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration30 = duration26.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant31 = instant24.plus((org.joda.time.ReadableDuration) duration30);
        long long32 = instant31.getMillis();
        org.joda.time.Chronology chronology33 = instant31.getChronology();
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.DateTime dateTime37 = instant36.toDateTime();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.months();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime43, periodType44);
        boolean boolean46 = dateTime37.isBefore((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant31, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration53 = duration49.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTime dateTime57 = dateTime55.plusMinutes(15);
        org.joda.time.Interval interval58 = duration53.toIntervalTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Instant instant59 = instant31.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTimeZone dateTimeZone60 = instant31.getZone();
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("2020-05-01");
        java.lang.String str64 = dateTimeZone60.getShortName(1645514234816L, locale63);
        org.joda.time.DateTime dateTime65 = localTime19.toDateTimeToday(dateTimeZone60);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateTime65);
        boolean boolean68 = dateTime65.isAfter((long) 26449);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(localTime10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1" + "'", str13, "1");
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 86400000L + "'", long32 == 86400000L);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(interval58);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "+00:00" + "'", str64, "+00:00");
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test05214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05214");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime9 = property5.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime10 = dateTime9.withTimeAtStartOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = dateTime9.getZone();
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration19 = duration15.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime21 = dateTime13.toDateTimeISO();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate((long) (byte) -1);
        int int24 = localDate23.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        long long29 = dateTimeZone25.getMillisKeepLocal(dateTimeZone27, (long) 44);
        org.joda.time.DateTime dateTime30 = localDate23.toDateTimeAtMidnight(dateTimeZone25);
        java.util.Locale locale32 = null;
        java.lang.String str33 = dateTimeZone25.getName(946000L, locale32);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(dateTimeZone25);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableDuration36, readableInstant37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) 100, 1L, periodType41);
        org.joda.time.Period period44 = period42.minusSeconds((-1));
        java.lang.String str45 = period42.toString();
        org.joda.time.Period period46 = period42.toPeriod();
        org.joda.time.PeriodType periodType47 = period42.getPeriodType();
        org.joda.time.Period period48 = period38.normalizedStandard(periodType47);
        org.joda.time.Period period50 = period48.withSeconds(10);
        org.joda.time.Minutes minutes51 = period48.toStandardMinutes();
        org.joda.time.DurationFieldType[] durationFieldTypeArray52 = period48.getFieldTypes();
        org.joda.time.Period period54 = period48.withYears(999);
        org.joda.time.Period period56 = period54.multipliedBy(443);
        org.joda.time.Period period58 = period54.minusMonths(1439);
        org.joda.time.DateTime dateTime59 = dateTime35.plus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateTime dateTime60 = dateTime21.minus((org.joda.time.ReadablePeriod) period54);
        org.joda.time.DateTime.Property property61 = dateTime60.yearOfEra();
        boolean boolean62 = dateTimeZone11.equals((java.lang.Object) property61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        int int65 = dateTime64.getSecondOfMinute();
        org.joda.time.DateTime dateTime68 = dateTime64.withDurationAdded(0L, (int) '4');
        org.joda.time.LocalDate localDate69 = dateTime68.toLocalDate();
        int int70 = dateTime68.getSecondOfDay();
        long long71 = property61.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime68);
        org.joda.time.DateTime dateTime72 = property61.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime74 = dateTime72.minus(3600000L);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1969 + "'", int24 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 44L + "'", long29 == 44L);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+00:00" + "'", str33, "+00:00");
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0.099S" + "'", str45, "PT0.099S");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(minutes51);
        org.junit.Assert.assertNotNull(durationFieldTypeArray52);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 14 + "'", int65 == 14);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(localDate69);
// flaky:         org.junit.Assert.assertTrue("'" + int70 + "' != '" + 26534 + "'", int70 == 26534);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1051L) + "'", long71 == (-1051L));
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test05215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05215");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours21 = duration20.toStandardHours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration17.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean47 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant48 = instant15.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period53 = duration52.toPeriod();
        org.joda.time.Duration duration56 = duration52.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period59 = period57.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime60 = org.joda.time.MutableDateTime.now();
        mutableDateTime60.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime63 = mutableDateTime60.copy();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime60.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime65 = property64.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime66 = property64.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(readableInstant70, readableInstant71, periodType72);
        org.joda.time.DurationFieldType durationFieldType75 = periodType72.getFieldType((int) (short) 0);
        java.lang.String str76 = periodType72.toString();
        org.joda.time.Instant instant77 = new org.joda.time.Instant();
        org.joda.time.Instant instant79 = instant77.withMillis(0L);
        org.joda.time.Chronology chronology80 = instant79.getChronology();
        org.joda.time.Period period81 = new org.joda.time.Period((long) 53, (long) (-1), periodType72, chronology80);
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType67.getField(chronology80);
        java.util.Locale locale83 = java.util.Locale.UK;
        java.lang.String str84 = locale83.getDisplayLanguage();
        int int85 = dateTimeField82.getMaximumTextLength(locale83);
        mutableDateTime66.setRounding(dateTimeField82);
        org.joda.time.Duration duration87 = period57.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime66);
        boolean boolean88 = instant48.isBefore((org.joda.time.ReadableInstant) mutableDateTime66);
        java.lang.String str89 = mutableDateTime66.toString();
        org.joda.time.Chronology chronology90 = mutableDateTime66.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime66.setDayOfWeek(99);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 99 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT86400S" + "'", str18, "PT86400S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(hours21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 15 + "'", int24 == 15);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertNotNull(mutableDateTime60);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(mutableDateTime65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PeriodType[YearDayTime]" + "'", str76, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\u82f1\u6587" + "'", str84, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 4 + "'", int85 == 4);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "2022-02-21T00:00:00.000Z" + "'", str89, "2022-02-21T00:00:00.000Z");
        org.junit.Assert.assertNotNull(chronology90);
    }

    @Test
    public void test05216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05216");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addWeekyears(21);
        int int40 = mutableDateTime0.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime0.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((java.lang.Object) property41);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.MutableDateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[YearDayTime]" + "'", str35, "PeriodType[YearDayTime]");
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(property41);
    }

    @Test
    public void test05217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05217");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str14 = duration13.toString();
        org.joda.time.Instant instant15 = instant9.minus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = duration22.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean26 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Duration duration27 = duration17.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration32 = duration29.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean33 = duration20.equals((java.lang.Object) duration29);
        org.joda.time.Instant instant35 = instant15.withDurationAdded((org.joda.time.ReadableDuration) duration20, 26150565);
        int int36 = dateTime8.compareTo((org.joda.time.ReadableInstant) instant15);
        org.joda.time.DateTime.Property property37 = dateTime8.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = dateTimeZone39.getName(100L, locale41);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(948227L, dateTimeZone39);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.year();
        mutableDateTime44.addHours(16);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        long long52 = dateTimeZone48.getMillisKeepLocal(dateTimeZone50, (long) 44);
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(dateTimeZone48);
        mutableDateTime44.setZoneRetainFields(dateTimeZone48);
        java.lang.String str56 = dateTimeZone48.getName((long) 12);
        org.joda.time.DateTime dateTime57 = dateTime8.withZone(dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight58 = dateTime57.toDateMidnight();
        java.util.GregorianCalendar gregorianCalendar59 = dateTime57.toGregorianCalendar();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT86400S" + "'", str14, "PT86400S");
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + (-1) + "'", int36 == (-1));
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u5fb7\u6587" + "'", str42, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00" + "'", str43, "+00:00");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 44L + "'", long52 == 44L);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "+00:00" + "'", str56, "+00:00");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateMidnight58);
        org.junit.Assert.assertNotNull(gregorianCalendar59);
    }

    @Test
    public void test05218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05218");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        mutablePeriod35.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod35.toMutablePeriod();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod38, 1439);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration41, readableInstant42);
        org.joda.time.Period period45 = period43.withDays((int) (byte) 1);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours48 = duration47.toStandardHours();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = period43.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        int int54 = period43.getDays();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period43);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime16.dayOfMonth();
        int int57 = mutableDateTime16.getYear();
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardSeconds((long) 22);
        long long60 = duration59.getStandardMinutes();
        org.joda.time.Duration duration62 = duration59.minus((long) 36956320);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period(readableDuration63, readableInstant64);
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) 100, 1L, periodType68);
        org.joda.time.Period period71 = period69.minusSeconds((-1));
        java.lang.String str72 = period69.toString();
        org.joda.time.Period period73 = period69.toPeriod();
        org.joda.time.PeriodType periodType74 = period69.getPeriodType();
        org.joda.time.Period period75 = period65.normalizedStandard(periodType74);
        java.lang.String str76 = periodType74.getName();
        org.joda.time.PeriodType periodType77 = periodType74.withYearsRemoved();
        org.joda.time.PeriodType periodType78 = periodType77.withSecondsRemoved();
        org.joda.time.PeriodType periodType79 = periodType78.withWeeksRemoved();
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime16, (org.joda.time.ReadableDuration) duration59, periodType79);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(mutablePeriod38);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(hours48);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 15 + "'", int51 == 15);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2227 + "'", int57 == 2227);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "PT0.099S" + "'", str72, "PT0.099S");
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(periodType74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Standard" + "'", str76, "Standard");
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(periodType79);
    }

    @Test
    public void test05219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05219");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.addMinutes(1424);
        mutableDateTime1.setSecondOfDay(24);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean13 = localDate11.isSupported(dateTimeFieldType12);
        org.joda.time.LocalDate.Property property14 = localDate11.yearOfEra();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str20 = duration19.toString();
        org.joda.time.Instant instant21 = instant15.minus((org.joda.time.ReadableDuration) duration19);
        int int22 = property14.getDifference((org.joda.time.ReadableInstant) instant15);
        org.joda.time.Duration duration25 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant26 = instant15.plus((org.joda.time.ReadableDuration) duration25);
        java.lang.String str27 = duration25.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration25, 62170);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj31 = mutableDateTime30.clone();
        mutableDateTime30.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.dayOfWeek();
        int int35 = mutableDateTime30.getHourOfDay();
        mutableDateTime30.addWeeks(99);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) mutableDateTime30);
        mutableDateTime30.setSecondOfDay(62508);
        int int41 = mutableDateTime30.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "PT86400S" + "'", str20, "PT86400S");
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PT-292275.053S" + "'", str27, "PT-292275.053S");
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "2022-02-22T07:22:15.220Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "2022-02-22T07:22:15.220Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "2022-02-22T07:22:15.220Z");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 3 + "'", int41 == 3);
    }

    @Test
    public void test05220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05220");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        int int20 = mutableDateTime0.getWeekyear();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.LocalDate localDate24 = property22.roundCeilingCopy();
        org.joda.time.LocalDate localDate26 = localDate24.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight29 = localDate26.toDateMidnight(dateTimeZone27);
        mutableDateTime0.setZoneRetainFields(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.set(45);
        org.joda.time.MutableDateTime mutableDateTime35 = property32.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime37 = property32.add(45);
        java.lang.String str38 = mutableDateTime37.toString();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        int int41 = dateTime40.getYearOfCentury();
        int int42 = dateTime40.getWeekyear();
        org.joda.time.DateTime dateTime44 = dateTime40.plus((long) 15);
        org.joda.time.DateTime.Property property45 = dateTime40.year();
        org.joda.time.DateTime dateTime46 = property45.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property47 = dateTime46.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime46.toMutableDateTime();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime52 = dateTime50.withZoneRetainFields(dateTimeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone56 = dateTimeZone55.toTimeZone();
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtCurrentTime(dateTimeZone55);
        int int58 = dateTime52.compareTo((org.joda.time.ReadableInstant) dateTime57);
        int int59 = dateTime57.getCenturyOfEra();
        org.joda.time.DateTime dateTime61 = dateTime57.withWeekyear(44);
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.PeriodType periodType66 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(readableInstant64, readableInstant65, periodType66);
        org.joda.time.DurationFieldType durationFieldType69 = periodType66.getFieldType((int) (short) 0);
        java.lang.String str70 = periodType66.toString();
        org.joda.time.Instant instant71 = new org.joda.time.Instant();
        org.joda.time.Instant instant73 = instant71.withMillis(0L);
        org.joda.time.Chronology chronology74 = instant73.getChronology();
        org.joda.time.Period period75 = new org.joda.time.Period((long) 53, (long) (-1), periodType66, chronology74);
        org.joda.time.PeriodType periodType76 = periodType66.withMonthsRemoved();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableInstant) dateTime57, periodType66);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime37, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTimeFieldType dateTimeFieldType79 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str80 = dateTimeFieldType79.getName();
        org.joda.time.DurationFieldType durationFieldType81 = dateTimeFieldType79.getRangeDurationType();
        mutableDateTime37.add(durationFieldType81, 26175904);
        mutableDateTime0.add(durationFieldType81, (-1));
        int int86 = mutableDateTime0.getWeekOfWeekyear();
        mutableDateTime0.addYears(15556102);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "9000-01-01T00:00:00.000Z" + "'", str38, "9000-01-01T00:00:00.000Z");
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 22 + "'", int41 == 22);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2022 + "'", int42 == 2022);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + (-1) + "'", int58 == (-1));
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20 + "'", int59 == 20);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(durationFieldType69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "PeriodType[YearDayTime]" + "'", str70, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(chronology74);
        org.junit.Assert.assertNotNull(periodType76);
        org.junit.Assert.assertNotNull(dateTimeFieldType79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "millisOfSecond" + "'", str80, "millisOfSecond");
        org.junit.Assert.assertNotNull(durationFieldType81);
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 28 + "'", int86 == 28);
    }

    @Test
    public void test05221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05221");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addYears(12);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = localDateTime25.toDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime20.withZoneRetainFields(dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.toString();
        java.lang.String str37 = dateTimeZone33.getID();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone33);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime38);
        mutableDateTime38.setWeekOfWeekyear(31);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int48 = localDateTime46.get(dateTimeFieldType47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime46.plusMinutes(7);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) 100, 1L, periodType53);
        org.joda.time.Period period56 = period54.minusSeconds((-1));
        org.joda.time.Period period58 = period56.multipliedBy((int) '#');
        org.joda.time.LocalDateTime localDateTime59 = localDateTime46.minus((org.joda.time.ReadablePeriod) period58);
        int int60 = period58.getYears();
        org.joda.time.Period period62 = period58.withHours(47831274);
        org.joda.time.DurationFieldType durationFieldType63 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str64 = durationFieldType63.getName();
        boolean boolean65 = period62.isSupported(durationFieldType63);
        mutableDateTime38.add(durationFieldType63, 26346587);
        long long68 = mutableDateTime38.getMillis();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "UTC" + "'", str36, "UTC");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1439 + "'", int48 == 1439);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "weeks" + "'", str64, "weeks");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 15936075242535348L + "'", long68 == 15936075242535348L);
    }

    @Test
    public void test05222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05222");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField8 = localDateTime6.getField((int) (byte) 0);
        long long10 = dateTimeField8.roundHalfEven((long) 1);
        int int11 = dateTime1.get(dateTimeField8);
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) 'a');
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.lang.String str21 = locale20.getDisplayName();
        java.lang.String str22 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime16, 53, locale20);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration28 = duration24.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime16.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusMillis((int) (byte) 0);
        int int36 = localDateTime16.compareTo((org.joda.time.ReadablePartial) localDateTime30);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime38.setSecondOfMinute(53);
        int int41 = mutableDateTime38.getEra();
        org.joda.time.DateTimeField dateTimeField42 = mutableDateTime38.getRoundingField();
        org.joda.time.DateTime dateTime43 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateTime dateTime45 = dateTime43.minusMonths(37203052);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u5fb7\u6587" + "'", str21, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "53" + "'", str22, "53");
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
    }

    @Test
    public void test05223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05223");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra((int) '#');
        org.joda.time.DateTime dateTime10 = dateTime5.withYear((int) 'u');
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        mutableDateTime11.setDate((long) '#');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        int int21 = localDate17.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime5.toDateTime(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone22);
        mutableDateTime28.setMillisOfDay(37040809);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 53 + "'", int21 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateMidnight23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
    }

    @Test
    public void test05224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05224");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        long long10 = dateTimeZone7.previousTransition(100L);
        int int12 = dateTimeZone7.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime13 = mutableDateTime6.toDateTime(dateTimeZone7);
        int int14 = mutableDateTime6.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime15.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str22 = dateTimeFieldType21.getName();
        int int23 = localDateTime15.indexOf(dateTimeFieldType21);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime15.minusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime15.minusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int29 = localDateTime15.indexOf(dateTimeFieldType28);
        org.joda.time.DurationFieldType durationFieldType30 = dateTimeFieldType28.getDurationType();
        mutableDateTime6.add(durationFieldType30, 37174539);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "clockhourOfDay" + "'", str22, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + (-1) + "'", int23 == (-1));
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType30);
    }

    @Test
    public void test05225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05225");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfCentury();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.weekOfWeekyear();
        int int22 = mutableDateTime19.getYearOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withChronology(chronology26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter27.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter28.withDefaultYear(73619);
        java.util.Locale locale31 = dateTimeFormatter28.getLocale();
        org.joda.time.DateTimeZone dateTimeZone32 = dateTimeFormatter28.getZone();
        mutableDateTime19.setZoneRetainFields(dateTimeZone32);
        mutableDateTime19.setWeekyear(62194);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:22:15.511Z" + "'", str14, "2022-02-22T07:22:15.511Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 2022 + "'", int22 == 2022);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNull(locale31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
    }

    @Test
    public void test05226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05226");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        mutableDateTime1.setMillis(966164L);
        mutableDateTime1.addHours(26221);
        org.joda.time.Period period9 = org.joda.time.Period.weeks(20);
        org.joda.time.Period period11 = period9.minusMillis(3);
        org.joda.time.Period period13 = period9.minusWeeks(766);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundFloor();
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test05227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05227");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.weekyear();
        mutableDateTime1.addDays(0);
        org.joda.time.DateTimeZone dateTimeZone12 = mutableDateTime1.getZone();
        mutableDateTime1.setYear(99);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (short) 100, chronology16);
        int int18 = localTime17.getMillisOfDay();
        org.joda.time.LocalTime.Property property19 = localTime17.millisOfSecond();
        org.joda.time.DurationField durationField20 = property19.getLeapDurationField();
        java.lang.String str21 = property19.getName();
        org.joda.time.LocalTime localTime23 = property19.addWrapFieldToCopy(0);
        org.joda.time.LocalTime localTime24 = property19.roundFloorCopy();
        org.joda.time.LocalTime localTime25 = property19.withMinimumValue();
        org.joda.time.LocalTime localTime26 = property19.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime27 = property19.roundHalfEvenCopy();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.LocalTime localTime30 = localTime28.withMillisOfDay((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = null;
        org.joda.time.LocalTime localTime32 = new org.joda.time.LocalTime(dateTimeZone31);
        org.joda.time.LocalTime localTime34 = localTime32.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime36 = localTime34.withHourOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int38 = localTime34.get(dateTimeFieldType37);
        boolean boolean39 = localTime30.isSupported(dateTimeFieldType37);
        java.lang.String str40 = dateTimeFieldType37.getName();
        org.joda.time.DateTimeZone dateTimeZone43 = null;
        org.joda.time.LocalTime localTime44 = new org.joda.time.LocalTime(dateTimeZone43);
        org.joda.time.LocalTime localTime46 = localTime44.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology47 = localTime46.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology47);
        org.joda.time.DateTimeField dateTimeField49 = chronology47.millisOfDay();
        org.joda.time.DurationField durationField50 = chronology47.weeks();
        org.joda.time.DateTimeField dateTimeField51 = dateTimeFieldType37.getField(chronology47);
        java.lang.String str52 = dateTimeFieldType37.getName();
        boolean boolean53 = localTime27.isSupported(dateTimeFieldType37);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime1.property(dateTimeFieldType37);
        org.joda.time.MutableDateTime mutableDateTime55 = property54.roundHalfCeiling();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 100 + "'", int18 == 100);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNull(durationField20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "millisOfSecond" + "'", str21, "millisOfSecond");
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(localTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 15 + "'", int38 == 15);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "secondOfMinute" + "'", str40, "secondOfMinute");
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "secondOfMinute" + "'", str52, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(mutableDateTime55);
    }

    @Test
    public void test05228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05228");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        int int5 = mutableDateTime4.getSecondOfDay();
        int int6 = mutableDateTime4.getSecondOfMinute();
        int int7 = mutableDateTime4.getYearOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 4500 + "'", int7 == 4500);
    }

    @Test
    public void test05229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05229");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.secondOfDay();
        int int4 = mutableDateTime0.getDayOfWeek();
        mutableDateTime0.addMonths(152);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.weekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.add(52);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str15 = duration14.toString();
        boolean boolean16 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardMinutes(1L);
        long long19 = duration18.getStandardMinutes();
        int int20 = duration12.compareTo((org.joda.time.ReadableDuration) duration18);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.Duration duration23 = duration18.withDurationAdded(readableDuration21, (-1));
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str28 = duration27.toString();
        boolean boolean29 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Hours hours30 = duration25.toStandardHours();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        int int33 = duration25.compareTo((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration35 = duration18.withDurationAdded((org.joda.time.ReadableDuration) duration32, 26265573);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration18, 26207584);
        long long38 = duration18.getMillis();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT86400S" + "'", str15, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "PT86400S" + "'", str28, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(hours30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 60000L + "'", long38 == 60000L);
    }

    @Test
    public void test05230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05230");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1645514161062L);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.yearOfCentury();
        mutableDateTime2.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration10, readableInstant11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period18 = period16.minusSeconds((-1));
        java.lang.String str19 = period16.toString();
        org.joda.time.Period period20 = period16.toPeriod();
        org.joda.time.PeriodType periodType21 = period16.getPeriodType();
        org.joda.time.Period period22 = period12.normalizedStandard(periodType21);
        org.joda.time.DurationFieldType durationFieldType23 = null;
        int int24 = periodType21.indexOf(durationFieldType23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.eras();
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(chronology28);
        org.joda.time.DurationField durationField31 = chronology28.eras();
        org.joda.time.DateTimeField dateTimeField32 = chronology28.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType21, chronology28);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime2.toMutableDateTime(chronology28);
        mutableDateTime34.setDate((long) (-292275054));
        mutableDateTime34.addWeekyears(616);
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.months();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) mutableDateTime34, periodType39);
        int int41 = period40.getWeeks();
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime45 = property43.roundHalfEven();
        mutableDateTime45.setMillis(1645514377327L);
        org.joda.time.Duration duration48 = period40.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime45.hourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime45.setMonthOfYear(31740);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 31740 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.099S" + "'", str19, "PT0.099S");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-1) + "'", int24 == (-1));
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(property49);
    }

    @Test
    public void test05231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05231");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.add(51);
        long long6 = property3.remainder();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime8 = property3.set((-531));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -531 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 853L + "'", long6 == 853L);
    }

    @Test
    public void test05232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05232");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime10.copy();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime10.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property14.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.toMutableDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(15);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.eras();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(chronology29);
        org.joda.time.DurationField durationField32 = chronology29.eras();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.hourOfDay();
        org.joda.time.DateTime dateTime34 = dateTime22.withChronology(chronology29);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.getMutableDateTime();
        boolean boolean38 = dateTime34.isBefore((org.joda.time.ReadableInstant) mutableDateTime37);
        mutableDateTime37.setHourOfDay(0);
        mutableDateTime20.setMillis((org.joda.time.ReadableInstant) mutableDateTime37);
        mutableDateTime37.setMillisOfDay(50);
        int int44 = dateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.DateTime dateTime45 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime dateTime46 = dateTime45.toDateTime();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(localTime31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
// flaky:         org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime46);
    }

    @Test
    public void test05233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05233");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.setHourOfDay(9);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime0.year();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setMinuteOfDay(29022);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 29022 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test05234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05234");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (byte) 10);
        int int9 = mutableDateTime8.getCenturyOfEra();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology11);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int16 = localDateTime14.get(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime14.plusMinutes(7);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.Period period24 = period22.minusSeconds((-1));
        org.joda.time.Period period26 = period24.multipliedBy((int) '#');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime14.minus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.Period period29 = period26.withWeeks(7);
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(999, 12, 8, (int) (byte) 10, 5, (-292275054), 15, 50);
        org.joda.time.Period period39 = period29.withFields((org.joda.time.ReadablePeriod) mutablePeriod38);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.PeriodType periodType41 = mutablePeriod38.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 436, periodType41);
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(readableInstant43, readableInstant44, periodType45);
        mutablePeriod46.setYears((int) '#');
        org.joda.time.Chronology chronology50 = null;
        mutablePeriod46.add((long) 1, chronology50);
        org.joda.time.ReadableInterval readableInterval52 = null;
        mutablePeriod46.setPeriod(readableInterval52);
        int int54 = mutablePeriod46.getDays();
        mutablePeriod46.add(315532800000L);
        mutablePeriod46.setDays(58);
        mutablePeriod42.add((org.joda.time.ReadablePeriod) mutablePeriod46);
        org.joda.time.MutablePeriod mutablePeriod60 = mutablePeriod42.copy();
        int int62 = mutablePeriod42.getValue(0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 20 + "'", int9 == 20);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1439 + "'", int16 == 1439);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(periodType41);
        org.junit.Assert.assertNotNull(periodType45);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(mutablePeriod60);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 0 + "'", int62 == 0);
    }

    @Test
    public void test05235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05235");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury(54);
        org.joda.time.DateTime dateTime21 = dateTime16.withDurationAdded((long) 26150803, 7);
        org.joda.time.Instant instant22 = dateTime16.toInstant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTimeISO();
        boolean boolean25 = mutableDateTime23.isAfter(15843340800000L);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test05236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05236");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = duration1.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        boolean boolean19 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration21 = duration10.minus((long) (byte) 0);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration22, readableInstant23);
        org.joda.time.Period period26 = period24.withDays((int) (byte) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours29 = duration28.toStandardHours();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        int int32 = dateTime31.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.Duration duration34 = period24.toDurationFrom((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime36 = dateTime31.minusHours(16);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = dateTime40.withZoneRetainFields(dateTimeZone41);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime47 = localDate43.toDateTimeAtCurrentTime(dateTimeZone45);
        int int48 = dateTime42.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime50 = dateTime47.minusWeeks(44);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMinutes(15);
        org.joda.time.Chronology chronology55 = dateTime52.getChronology();
        java.lang.String str56 = chronology55.toString();
        org.joda.time.DateTimeField dateTimeField57 = chronology55.dayOfYear();
        org.joda.time.DateTime dateTime58 = dateTime47.withChronology(chronology55);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(readableInstant60, readableInstant61, periodType62);
        org.joda.time.DurationFieldType durationFieldType65 = periodType62.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType66 = periodType62.withMillisRemoved();
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime58, readableDuration59, periodType66);
        org.joda.time.Period period68 = new org.joda.time.Period(0L, periodType66);
        org.joda.time.format.DateTimePrinter dateTimePrinter69 = null;
        org.joda.time.format.DateTimeParser dateTimeParser70 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter69, dateTimeParser70);
        org.joda.time.Instant instant72 = new org.joda.time.Instant();
        org.joda.time.Instant instant74 = instant72.withMillis(0L);
        org.joda.time.Chronology chronology75 = instant74.getChronology();
        org.joda.time.DurationField durationField76 = chronology75.eras();
        long long80 = chronology75.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = dateTimeFormatter71.withChronology(chronology75);
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod(3600000L, periodType66, chronology75);
        org.joda.time.Period period83 = duration21.toPeriodFrom((org.joda.time.ReadableInstant) dateTime36, periodType66);
        org.joda.time.PeriodType periodType84 = periodType66.withHoursRemoved();
        org.joda.time.PeriodType periodType85 = periodType66.withYearsRemoved();
        org.joda.time.PeriodType periodType86 = periodType66.withMonthsRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(hours29);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 15 + "'", int32 == 15);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "ISOChronology[UTC]" + "'", str56, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(durationField76);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 105144L + "'", long80 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter81);
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(periodType84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(periodType86);
    }

    @Test
    public void test05237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05237");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology17, locale19);
        java.lang.Object obj22 = dateTimeParserBucket21.saveState();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (short) 100, chronology24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str27 = durationFieldType26.getName();
        boolean boolean28 = localTime25.isSupported(durationFieldType26);
        boolean boolean29 = dateTimeParserBucket21.restoreState((java.lang.Object) boolean28);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket21.getChronology();
        long long33 = dateTimeParserBucket21.computeMillis(true, "");
        int int34 = dateTimeParserBucket21.getOffset();
        java.lang.Object obj35 = dateTimeParserBucket21.saveState();
        java.lang.Integer int36 = dateTimeParserBucket21.getPivotYear();
        long long38 = dateTimeParserBucket21.computeMillis(false);
        java.lang.Integer int39 = dateTimeParserBucket21.getPivotYear();
        org.joda.time.Chronology chronology40 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.centuries();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 37057844, (long) 26343, periodType15, chronology40);
        boolean boolean43 = duration4.equals((java.lang.Object) period42);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj45 = mutableDateTime44.clone();
        mutableDateTime44.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime44.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime50 = property48.add(1L);
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.lang.String str53 = locale51.getDisplayVariant(locale52);
        java.lang.String str54 = locale51.getISO3Language();
        java.lang.String str55 = property48.getAsText(locale51);
        org.joda.time.MutableDateTime mutableDateTime56 = property48.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime58 = property48.add(62273);
        mutableDateTime58.setDate(299, 4, (int) (byte) 1);
        mutableDateTime58.addDays(26417);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(readableInstant65, readableInstant66, periodType67);
        org.joda.time.PeriodType periodType69 = periodType67.withMonthsRemoved();
        org.joda.time.Period period70 = duration4.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime58, periodType69);
        org.joda.time.Hours hours71 = period70.toStandardHours();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT86400S" + "'", str7, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(periodType14);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "de");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "weeks" + "'", str27, "weeks");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 97L + "'", long33 == 97L);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(obj35);
        org.junit.Assert.assertNull(int36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 97L + "'", long38 == 97L);
        org.junit.Assert.assertNull(int39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(obj45);
// flaky:         org.junit.Assert.assertEquals(obj45.toString(), "2022-02-22T07:22:16.000Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj45), "2022-02-22T07:22:16.000Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj45), "2022-02-22T07:22:16.000Z");
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "deu" + "'", str54, "deu");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Mittwoch" + "'", str55, "Mittwoch");
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(hours71);
    }

    @Test
    public void test05238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05238");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        int int4 = localDate0.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight6 = localDate0.toDateMidnight(dateTimeZone5);
        org.joda.time.LocalDate.Property property7 = localDate0.year();
        org.joda.time.LocalDate localDate8 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate9 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate11 = property7.addToCopy(26158);
        java.lang.Object obj12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(obj12);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period16 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration15);
        org.joda.time.LocalDate localDate17 = dateTime13.toLocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.LocalDate localDate19 = localDate11.withFields((org.joda.time.ReadablePartial) localDate17);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test05239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05239");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException8 = new java.io.IOException("");
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException8);
        boolean boolean10 = mutableDateTime6.equals((java.lang.Object) iOException8);
        org.joda.time.Duration duration13 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration13, 1424);
        org.joda.time.Days days16 = duration13.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod19.clear();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration26 = duration22.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Interval interval31 = duration26.toIntervalTo((org.joda.time.ReadableInstant) dateTime30);
        mutablePeriod19.setPeriod((org.joda.time.ReadableInterval) interval31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant33, readableInstant34, periodType35);
        org.joda.time.DurationFieldType durationFieldType38 = periodType35.getFieldType((int) (short) 0);
        int int39 = mutablePeriod19.get(durationFieldType38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        mutableDateTime42.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime42.copy();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.eras();
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.now(chronology51);
        org.joda.time.DurationField durationField54 = chronology51.eras();
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration41, chronology51);
        org.joda.time.Duration duration57 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration41, 26148950);
        org.joda.time.DateTime dateTime59 = dateTime2.withDurationAdded((org.joda.time.ReadableDuration) duration13, 122);
        long long60 = dateTime59.getMillis();
        int int61 = dateTime59.getYearOfCentury();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(days16);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(interval31);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(durationFieldType38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(instant50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(localTime53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 115450065L + "'", long60 == 115450065L);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 70 + "'", int61 == 70);
    }

    @Test
    public void test05240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05240");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Instant instant17 = instant4.withMillis((long) 26172069);
        org.joda.time.Chronology chronology18 = instant4.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfMonth();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test05241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05241");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours5 = duration4.toStandardHours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = duration12.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration21);
        boolean boolean30 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration21);
        boolean boolean31 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration32 = duration4.toDuration();
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDay();
        java.lang.String str37 = periodType36.getName();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(100L, periodType36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str41 = duration40.toString();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours44 = duration43.toStandardHours();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        int int47 = dateTime46.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.Duration duration49 = duration40.plus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(readableInstant54, readableInstant55, periodType56);
        org.joda.time.DurationFieldType durationFieldType59 = periodType56.getFieldType((int) (short) 0);
        java.lang.String str60 = periodType56.toString();
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.Chronology chronology64 = instant63.getChronology();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 53, (long) (-1), periodType56, chronology64);
        org.joda.time.Period period66 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType56);
        org.joda.time.Instant instant67 = new org.joda.time.Instant();
        org.joda.time.Instant instant69 = instant67.withMillis(0L);
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.eras();
        org.joda.time.LocalTime localTime72 = org.joda.time.LocalTime.now(chronology70);
        org.joda.time.DurationField durationField73 = chronology70.eras();
        org.joda.time.LocalTime localTime74 = org.joda.time.LocalTime.now(chronology70);
        org.joda.time.Period period75 = duration40.toPeriod(periodType56, chronology70);
        org.joda.time.Period period76 = new org.joda.time.Period(1671667200000L, 946312L, periodType36, chronology70);
        org.joda.time.PeriodType periodType77 = periodType36.withMinutesRemoved();
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime(chronology78);
        org.joda.time.LocalTime localTime81 = localTime79.plusMinutes(26);
        org.joda.time.Chronology chronology82 = localTime81.getChronology();
        org.joda.time.DateTimeField dateTimeField83 = chronology82.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField84 = chronology82.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField85 = chronology82.yearOfCentury();
        org.joda.time.Period period86 = duration32.toPeriod(periodType36, chronology82);
        org.joda.time.PeriodType periodType87 = periodType36.withMonthsRemoved();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT86400S" + "'", str2, "PT86400S");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(hours5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 16 + "'", int8 == 16);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "YearDay" + "'", str37, "YearDay");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT86400S" + "'", str41, "PT86400S");
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(hours44);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 16 + "'", int47 == 16);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PeriodType[YearDayTime]" + "'", str60, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(localTime72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(periodType77);
        org.junit.Assert.assertNotNull(localTime81);
        org.junit.Assert.assertNotNull(chronology82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(periodType87);
    }

    @Test
    public void test05242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05242");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = dateTime26.toInstant();
        org.joda.time.DateTime dateTime37 = dateTime26.withDurationAdded((long) 3, 4);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getYearOfCentury();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute(53);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration51 = duration44.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType57 = periodType54.getFieldType((int) (short) 0);
        java.lang.String str58 = periodType54.toString();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration44, periodType54);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime37, periodType54);
        int int61 = mutableDateTime0.getEra();
        mutableDateTime0.setYear(26186255);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PeriodType[YearDayTime]" + "'", str58, "PeriodType[YearDayTime]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
    }

    @Test
    public void test05243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05243");
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str6 = duration5.toString();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours9 = duration8.toStandardHours();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.Duration duration14 = duration5.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.Duration duration19 = duration16.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        mutableDateTime20.add((long) 'a');
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.yearOfCentury();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration31 = duration28.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration32 = duration25.minus((org.joda.time.ReadableDuration) duration31);
        mutableDateTime20.add((org.joda.time.ReadableDuration) duration25);
        boolean boolean34 = duration19.isShorterThan((org.joda.time.ReadableDuration) duration25);
        boolean boolean35 = duration8.isLongerThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration43 = duration39.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration45 = duration19.plus((org.joda.time.ReadableDuration) duration43);
        mutablePeriod3.add((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Period period51 = period49.minusYears((-1));
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.years();
        org.joda.time.Period period54 = new org.joda.time.Period(60000L, periodType53);
        org.joda.time.Period period55 = period51.withFields((org.joda.time.ReadablePeriod) period54);
        org.joda.time.PeriodType periodType56 = period51.getPeriodType();
        org.joda.time.Period period57 = duration43.toPeriod(periodType56);
        org.joda.time.Period period58 = new org.joda.time.Period(555601323L, periodType56);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT86400S" + "'", str6, "PT86400S");
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(hours9);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 16 + "'", int12 == 16);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
    }

    @Test
    public void test05244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05244");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod4.addDays((int) (byte) 10);
        mutablePeriod4.addMillis((int) '4');
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = duration15.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean19 = duration13.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration20 = duration10.minus((org.joda.time.ReadableDuration) duration13);
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration20);
        long long22 = duration20.getStandardHours();
        org.joda.time.Seconds seconds23 = duration20.toStandardSeconds();
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((-86400000L));
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.weeks();
        java.util.Locale.LanguageRange[] languageRangeArray27 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList28 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList28, languageRangeArray27);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, strMap30);
        org.joda.time.Chronology chronology33 = null;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.lang.String str36 = locale34.getDisplayVariant(locale35);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology33, locale35);
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        java.lang.String str44 = locale41.getISO3Language();
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = locale45.getDisplayVariant(locale46);
        java.util.Locale locale48 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale49 = java.util.Locale.GERMAN;
        java.lang.String str50 = locale49.getDisplayName();
        java.util.Locale locale51 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology53 = null;
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.lang.String str56 = locale54.getDisplayVariant(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology53, locale55, (java.lang.Integer) 10);
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale59.getDisplayName();
        java.util.Locale locale61 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale62 = java.util.Locale.UK;
        java.util.Locale[] localeArray63 = new java.util.Locale[] { locale35, locale39, locale41, locale45, locale48, locale49, locale51, locale55, locale59, locale61, locale62 };
        java.util.ArrayList<java.util.Locale> localeList64 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList64, localeArray63);
        java.util.Locale.FilteringMode filteringMode66 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList67 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.util.Locale>) localeList64, filteringMode66);
        java.lang.String[] strArray76 = new java.lang.String[] { "clockhourOfDay", "2022-02-22T10:15:45.103", "1970", "English", "2022-02-22T10:15:44.882", "DateTimeField[year]", "53", "deu" };
        java.util.ArrayList<java.lang.String> strList77 = new java.util.ArrayList<java.lang.String>();
        boolean boolean78 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList77, strArray76);
        java.util.Locale.FilteringMode filteringMode79 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList28, (java.util.Collection<java.lang.String>) strList77, filteringMode79);
        boolean boolean81 = periodType26.equals((java.lang.Object) strList77);
        java.lang.String str82 = periodType26.getName();
        org.joda.time.Period period83 = duration20.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime25, periodType26);
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime88 = localDateTime86.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property89 = localDateTime88.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime90 = property89.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime92 = property89.addWrapFieldToCopy((int) (short) -1);
        org.joda.time.DateTime dateTime93 = localDateTime92.toDateTime();
        boolean boolean94 = periodType26.equals((java.lang.Object) localDateTime92);
        int int95 = localDateTime92.getDayOfWeek();
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 23L + "'", long22 == 23L);
        org.junit.Assert.assertNotNull(seconds23);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(languageRangeArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(languageRangeList31);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "de");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "deu" + "'", str44, "deu");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u5fb7\u6587" + "'", str50, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\u5fb7\u6587" + "'", str60, "\u5fb7\u6587");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_GB");
        org.junit.Assert.assertNotNull(localeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertTrue("'" + filteringMode66 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode66.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList67);
        org.junit.Assert.assertNotNull(strArray76);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + filteringMode79 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode79.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "Weeks" + "'", str82, "Weeks");
        org.junit.Assert.assertNotNull(period83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(localDateTime88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
        org.junit.Assert.assertTrue("'" + int95 + "' != '" + 1 + "'", int95 == 1);
    }

    @Test
    public void test05245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05245");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = dateTime26.toInstant();
        org.joda.time.DateTime dateTime37 = dateTime26.withDurationAdded((long) 3, 4);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getYearOfCentury();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute(53);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration51 = duration44.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType57 = periodType54.getFieldType((int) (short) 0);
        java.lang.String str58 = periodType54.toString();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration44, periodType54);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime37, periodType54);
        int int61 = mutableDateTime0.getEra();
        int int62 = mutableDateTime0.getWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setHourOfDay(26286);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26286 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 16 + "'", int11 == 16);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PeriodType[YearDayTime]" + "'", str58, "PeriodType[YearDayTime]");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
    }

    @Test
    public void test05246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05246");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 26157);
        mutableDateTime1.setMillis((long) 55);
        int int4 = mutableDateTime1.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setDateTime(62356, 72036057, 56, 966, 26526751, 26368, 26495347);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 966 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test05247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05247");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime0.minuteOfHour();
        mutableDateTime0.addWeekyears(26215);
        mutableDateTime0.addWeeks(33438);
        org.joda.time.ReadablePeriod readablePeriod47 = null;
        mutableDateTime0.add(readablePeriod47, 26312857);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[YearDayTime]" + "'", str35, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test05248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05248");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setYear(2);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime26.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundHalfCeiling();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMinutes(15);
        org.joda.time.Chronology chronology47 = dateTime44.getChronology();
        org.joda.time.DateTime dateTime49 = dateTime44.plusHours(19045);
        org.joda.time.DateTime dateTime51 = dateTime49.minus(51L);
        org.joda.time.DateTime dateTime53 = dateTime49.minusMillis(2016);
        mutableDateTime42.setDate((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardSeconds((long) 22);
        long long57 = duration56.getStandardMinutes();
        org.joda.time.DateTime dateTime59 = dateTime53.withDurationAdded((org.joda.time.ReadableDuration) duration56, 999897);
        org.joda.time.DateTime dateTime60 = dateTime59.toDateTime();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:22:16.458Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:22:16.458Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:22:16.458Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime60);
    }

    @Test
    public void test05249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05249");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        org.joda.time.LocalTime localTime4 = localTime2.plusSeconds((int) (byte) 10);
        int int5 = localTime2.size();
        int int7 = localTime2.getValue((int) (byte) 1);
        org.joda.time.LocalTime localTime9 = localTime2.withMillisOfDay(52);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime11 = localTime9.withMillisOfSecond(26462);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26462 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test05250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05250");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.months();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21, periodType22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(15);
        org.joda.time.Interval interval36 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Instant instant37 = instant9.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTime dateTime38 = instant9.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj40 = mutableDateTime39.clone();
        mutableDateTime39.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime39.dayOfWeek();
        mutableDateTime39.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime39.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime47 = property46.roundCeiling();
        mutableDateTime47.setMillisOfDay(49);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.Period period52 = period50.plusYears(356);
        org.joda.time.Period period53 = period52.toPeriod();
        org.joda.time.Period period54 = period52.toPeriod();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(obj40);
// flaky:         org.junit.Assert.assertEquals(obj40.toString(), "2022-02-22T07:22:16.490Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj40), "2022-02-22T07:22:16.490Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj40), "2022-02-22T07:22:16.490Z");
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(period52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(period54);
    }

    @Test
    public void test05251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05251");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMinutes(15);
        org.joda.time.Chronology chronology7 = dateTime4.getChronology();
        java.lang.String str8 = chronology7.toString();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology7);
        org.joda.time.Period period10 = new org.joda.time.Period((long) 55, 97L, chronology7);
        org.joda.time.DurationField durationField11 = chronology7.years();
        long long14 = durationField11.getValueAsLong((long) 26150803, (long) 36950209);
        long long15 = durationField11.getUnitMillis();
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(15);
        org.joda.time.Chronology chronology21 = dateTime18.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.hours();
        boolean boolean23 = localTime16.equals((java.lang.Object) durationField22);
        int int24 = durationField11.compareTo(durationField22);
        long long27 = durationField22.getValueAsLong(1112027L, 569L);
        int int29 = durationField22.getValue(0L);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ISOChronology[UTC]" + "'", str8, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 31556952000L + "'", long15 == 31556952000L);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test05252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05252");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 26157);
        mutableDateTime1.addSeconds(55);
    }

    @Test
    public void test05253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05253");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        mutableDateTime32.setMillisOfDay(62194);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.099S" + "'", str17, "PT0.099S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
    }

    @Test
    public void test05254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05254");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.addWeekyears((int) '4');
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.yearOfEra();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant16 = instant9.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period18 = duration15.toPeriod(periodType17);
        org.joda.time.Duration duration20 = duration15.withMillis(60000L);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str26 = duration25.toString();
        org.joda.time.Instant instant27 = instant21.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now();
        mutableDateTime28.add((long) 'a');
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime28.yearOfCentury();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration39 = duration36.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration40 = duration33.minus((org.joda.time.ReadableDuration) duration39);
        mutableDateTime28.add((org.joda.time.ReadableDuration) duration33);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime28.centuryOfEra();
        mutableDateTime28.addHours((int) (byte) 10);
        mutableDateTime28.addWeeks(100);
        boolean boolean47 = instant21.isAfter((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.Period period50 = new org.joda.time.Period(readableDuration48, readableInstant49);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) 100, 1L, periodType53);
        org.joda.time.Period period56 = period54.minusSeconds((-1));
        java.lang.String str57 = period54.toString();
        org.joda.time.Period period58 = period54.toPeriod();
        org.joda.time.PeriodType periodType59 = period54.getPeriodType();
        org.joda.time.Period period60 = period50.normalizedStandard(periodType59);
        java.lang.String str61 = periodType59.getName();
        int int62 = periodType59.size();
        org.joda.time.Period period63 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) instant21, periodType59);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(chronology64);
        org.joda.time.DateTime dateTime67 = dateTime65.plusMinutes(15);
        org.joda.time.Chronology chronology68 = dateTime65.getChronology();
        org.joda.time.DateTime dateTime70 = dateTime65.minusDays(46);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period(readableDuration72, readableInstant73);
        org.joda.time.PeriodType periodType77 = null;
        org.joda.time.Period period78 = new org.joda.time.Period((long) 100, 1L, periodType77);
        org.joda.time.Period period80 = period78.minusSeconds((-1));
        java.lang.String str81 = period78.toString();
        org.joda.time.Period period82 = period78.toPeriod();
        org.joda.time.PeriodType periodType83 = period78.getPeriodType();
        org.joda.time.Period period84 = period74.normalizedStandard(periodType83);
        org.joda.time.Instant instant85 = new org.joda.time.Instant();
        org.joda.time.Instant instant87 = instant85.withMillis(0L);
        org.joda.time.Chronology chronology88 = instant87.getChronology();
        org.joda.time.DurationField durationField89 = chronology88.eras();
        long long93 = chronology88.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField94 = chronology88.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod(44L, periodType83, chronology88);
        org.joda.time.Period period96 = duration15.toPeriodTo((org.joda.time.ReadableInstant) dateTime70, periodType83);
        mutableDateTime1.add((org.joda.time.ReadablePeriod) period96, 22623598);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT86400S" + "'", str26, "PT86400S");
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(period56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "PT0.099S" + "'", str57, "PT0.099S");
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(periodType59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "Standard" + "'", str61, "Standard");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 8 + "'", int62 == 8);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "PT0.099S" + "'", str81, "PT0.099S");
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(instant87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(durationField89);
        org.junit.Assert.assertTrue("'" + long93 + "' != '" + 105144L + "'", long93 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(period96);
    }

    @Test
    public void test05255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05255");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        int int4 = mutableDateTime1.getEra();
        org.joda.time.DateTimeField dateTimeField5 = mutableDateTime1.getRoundingField();
        mutableDateTime1.addSeconds(22);
        int int8 = mutableDateTime1.getMonthOfYear();
        mutableDateTime1.addHours(26202);
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = property12.roundHalfFloor();
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
    }

    @Test
    public void test05256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05256");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant11 = instant4.plus((org.joda.time.ReadableDuration) duration10);
        long long12 = instant11.getMillis();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField17 = chronology13.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) 36988464, 0L, chronology13);
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfDay();
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 86400000L + "'", long12 == 86400000L);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test05257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05257");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.Chronology chronology14 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter3.withDefaultYear(999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter3.withDefaultYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter3.withPivotYear(56);
        org.joda.time.DateTimeZone dateTimeZone21 = dateTimeFormatter3.getZone();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        int int31 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime25.withYear(5);
        org.joda.time.DateTime dateTime34 = dateTime25.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.DateTime dateTime40 = dateTime34.withZone(dateTimeZone37);
        int int42 = dateTimeZone37.getOffsetFromLocal(1031695L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter3.withZone(dateTimeZone37);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.parse("2022-02-22T07:20:54.186Z", dateTimeFormatter43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 105144L + "'", long12 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(timeZone29);
// flaky:         org.junit.Assert.assertEquals(timeZone29.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
    }

    @Test
    public void test05258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05258");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime8.toMutableDateTime(dateTimeZone9);
        long long14 = dateTimeZone9.adjustOffset((long) 37, true);
        java.lang.String str16 = dateTimeZone9.getShortName((long) 572);
        java.lang.String str17 = dateTimeZone9.getID();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((long) ' ', dateTimeZone9);
        org.joda.time.LocalDate.Property property19 = localDate18.weekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 37L + "'", long14 == 37L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00" + "'", str16, "+00:00");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertNotNull(property19);
    }

    @Test
    public void test05259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05259");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1440L, chronology5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.DateTime dateTime9 = org.joda.time.DateTime.now(chronology5);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(dateTime9);
    }

    @Test
    public void test05260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05260");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        java.lang.String str7 = mutableDateTime6.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        mutableDateTime8.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime11 = mutableDateTime8.copy();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.Period period16 = period14.withDays((int) (byte) 1);
        org.joda.time.Period period18 = period14.minusMillis(1424);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) period14);
        mutableDateTime6.add((org.joda.time.ReadablePeriod) period14);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime6.year();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundCeiling();
        boolean boolean24 = mutableDateTime22.equals((java.lang.Object) 1973);
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime22.toMutableDateTime();
        java.util.Date date26 = mutableDateTime22.toDate();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((long) 19);
        mutableDateTime22.add((org.joda.time.ReadablePeriod) mutablePeriod28, 26517);
        mutableDateTime22.addWeeks(62317);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "9000-01-01T00:00:00.000Z" + "'", str7, "9000-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(date26);
        org.junit.Assert.assertEquals(date26.toString(), "Wed Jan 01 00:00:00 UTC 9000");
    }

    @Test
    public void test05261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05261");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes(15);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = localDateTime4.toDateTime(dateTimeZone12);
        java.lang.String str14 = dateTimeZone12.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.Chronology chronology16 = mutableDateTime15.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setDayOfWeek(37079542);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37079542 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
    }

    @Test
    public void test05262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05262");
        org.joda.time.Duration duration1 = org.joda.time.Duration.parse("PT86400S");
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property5 = localDateTime2.hourOfDay();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str9 = dateTimeFieldType8.getName();
        int int10 = localDateTime2.indexOf(dateTimeFieldType8);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minusSeconds((int) (short) 0);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.minus((long) 0);
        org.joda.time.DateTime dateTime16 = localDateTime2.toDateTime((org.joda.time.ReadableInstant) instant15);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        long long20 = dateTimeZone17.previousTransition(100L);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) instant15, dateTimeZone17);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        mutablePeriod25.setYears((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray28 = mutablePeriod25.getFieldTypes();
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.forFields(durationFieldTypeArray28);
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.forFields(durationFieldTypeArray28);
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime21, periodType30);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime32.centuryOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter47 = null;
        org.joda.time.format.DateTimeParser dateTimeParser48 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter47, dateTimeParser48);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.Chronology chronology53 = instant52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.eras();
        long long58 = chronology53.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter59 = dateTimeFormatter49.withChronology(chronology53);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(chronology53);
        org.joda.time.DateTimeField dateTimeField61 = chronology53.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone63 = dateTimeZone62.toTimeZone();
        long long65 = dateTimeZone62.previousTransition(100L);
        int int67 = dateTimeZone62.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology68 = chronology53.withZone(dateTimeZone62);
        java.util.TimeZone timeZone69 = dateTimeZone62.toTimeZone();
        org.joda.time.DateTime dateTime70 = mutableDateTime32.toDateTime(dateTimeZone62);
        org.joda.time.Period period71 = duration1.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime32);
        java.lang.String str72 = mutableDateTime32.toString();
        java.util.Locale locale74 = java.util.Locale.PRC;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str75 = mutableDateTime32.toString("2022-02-22T07:21:25.087Z", locale74);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "clockhourOfDay" + "'", str9, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + (-1) + "'", int10 == (-1));
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(durationFieldTypeArray28);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(periodType30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 105144L + "'", long58 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(timeZone63);
// flaky:         org.junit.Assert.assertEquals(timeZone63.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L + "'", long65 == 100L);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(period71);
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "2022-02-23T07:22:17.128Z" + "'", str72, "2022-02-23T07:22:17.128Z");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
    }

    @Test
    public void test05263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05263");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean3 = localDate1.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfEra();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str10 = duration9.toString();
        org.joda.time.Instant instant11 = instant5.minus((org.joda.time.ReadableDuration) duration9);
        int int12 = property4.getDifference((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant16 = instant5.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours22 = duration21.toStandardHours();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration27 = duration18.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = duration29.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.yearOfCentury();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration45 = duration38.minus((org.joda.time.ReadableDuration) duration44);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration38);
        boolean boolean47 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration38);
        boolean boolean48 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant49 = instant16.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours52 = duration51.toStandardHours();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        int int55 = dateTime54.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.months();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime64, periodType65);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime58, periodType65);
        org.joda.time.Instant instant69 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration51, 113);
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 26148950, chronology70);
        org.joda.time.Period period72 = period71.toPeriod();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT86400S" + "'", str10, "PT86400S");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT86400S" + "'", str19, "PT86400S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(hours22);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 17 + "'", int25 == 17);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(hours52);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 17 + "'", int55 == 17);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(instant69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(period72);
    }

    @Test
    public void test05264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05264");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setDate(0L);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime((long) 1, chronology5);
        int int7 = dateTime6.getMinuteOfDay();
        org.joda.time.Instant instant8 = dateTime6.toInstant();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException12 = new java.io.IOException("");
        java.io.IOException iOException13 = new java.io.IOException((java.lang.Throwable) iOException12);
        boolean boolean14 = mutableDateTime10.equals((java.lang.Object) iOException12);
        org.joda.time.Duration duration17 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration17, 1424);
        org.joda.time.Days days20 = duration17.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod23.clear();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration30 = duration26.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes(15);
        org.joda.time.Interval interval35 = duration30.toIntervalTo((org.joda.time.ReadableInstant) dateTime34);
        mutablePeriod23.setPeriod((org.joda.time.ReadableInterval) interval35);
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.PeriodType periodType39 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(readableInstant37, readableInstant38, periodType39);
        org.joda.time.DurationFieldType durationFieldType42 = periodType39.getFieldType((int) (short) 0);
        int int43 = mutablePeriod23.get(durationFieldType42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        mutableDateTime46.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime46.copy();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.Chronology chronology55 = instant54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.eras();
        org.joda.time.LocalTime localTime57 = org.joda.time.LocalTime.now(chronology55);
        org.joda.time.DurationField durationField58 = chronology55.eras();
        mutablePeriod23.setPeriod((org.joda.time.ReadableDuration) duration45, chronology55);
        org.joda.time.Duration duration61 = duration17.withDurationAdded((org.joda.time.ReadableDuration) duration45, 26148950);
        org.joda.time.DateTime dateTime63 = dateTime6.withDurationAdded((org.joda.time.ReadableDuration) duration17, 122);
        org.joda.time.DateMidnight dateMidnight64 = dateTime6.toDateMidnight();
        boolean boolean65 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) dateMidnight64);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:17.175Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:17.175Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:17.175Z");
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(instant8);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(days20);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(interval35);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(durationFieldType42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(localTime57);
        org.junit.Assert.assertNotNull(durationField58);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateMidnight64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
    }

    @Test
    public void test05265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05265");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.centuryOfEra();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = localDateTime9.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTime dateTime20 = property19.roundFloorCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.withDayOfYear(46);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        boolean boolean24 = dateTimeZone23.isFixed();
        org.joda.time.DateTime dateTime25 = dateTime20.withZone(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime1.toMutableDateTime(dateTimeZone23);
        java.lang.String str28 = dateTimeZone23.getName(0L);
        boolean boolean29 = dateTimeZone23.isFixed();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now(dateTimeZone23);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusWeeks(26223);
        org.joda.time.Chronology chronology33 = localDateTime30.getChronology();
        org.joda.time.Period period34 = new org.joda.time.Period(1645514411919L, chronology33);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00" + "'", str28, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(chronology33);
    }

    @Test
    public void test05266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05266");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        int int7 = localDateTime6.getEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusHours(45);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.minusYears((int) (short) 100);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.centuryOfEra();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test05267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05267");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.months();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21, periodType22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(15);
        org.joda.time.Interval interval36 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Instant instant37 = instant9.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime mutableDateTime38 = instant37.toMutableDateTime();
        int int39 = mutableDateTime38.getDayOfYear();
        mutableDateTime38.addHours(46);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 86400000L + "'", long10 == 86400000L);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(interval36);
        org.junit.Assert.assertNotNull(instant37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test05268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05268");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime5 = property1.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property1.roundHalfCeiling();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime((long) (short) 100, chronology9);
        int int11 = localTime10.getMillisOfDay();
        org.joda.time.LocalTime.Property property12 = localTime10.millisOfSecond();
        org.joda.time.DurationField durationField13 = property12.getDurationField();
        org.joda.time.LocalTime localTime14 = property12.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField17 = property15.getField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setRounding(dateTimeField17, 777);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 777");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 100 + "'", int11 == 100);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test05269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05269");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.getMillisKeepLocal(dateTimeZone2, (long) 44);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(dateTimeZone0);
        java.lang.String str6 = mutableDateTime5.toString();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "2022-02-22T07:22:17.335Z" + "'", str6, "2022-02-22T07:22:17.335Z");
    }

    @Test
    public void test05270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05270");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime1.withDurationAdded(0L, (int) '4');
        org.joda.time.LocalDate localDate6 = dateTime5.toLocalDate();
        org.joda.time.DateMidnight dateMidnight7 = localDate6.toDateMidnight();
        org.joda.time.LocalDate localDate9 = localDate6.withWeekyear(33438);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime10.copy();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime10.weekOfWeekyear();
        org.joda.time.DateTime dateTime15 = localDate6.toDateTime((org.joda.time.ReadableInstant) mutableDateTime10);
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("2022-02-22T07:17:21.120Z");
        java.util.Calendar calendar18 = mutableDateTime10.toCalendar(locale17);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime10.getRoundingField();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime10.yearOfEra();
        org.joda.time.DateTimeField dateTimeField21 = property20.getField();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 17 + "'", int2 == 17);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(dateMidnight7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(calendar18);
// flaky:         org.junit.Assert.assertEquals(calendar18.toString(), "java.util.GregorianCalendar[time=1645514537442,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=17,MILLISECOND=442,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test05271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05271");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.DateTime dateTime17 = dateTime5.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.Seconds seconds18 = period11.toStandardSeconds();
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.millis();
        boolean boolean21 = periodType19.isSupported(durationFieldType20);
        int int22 = period11.indexOf(durationFieldType20);
        org.joda.time.Period period24 = period11.plusHours(26237);
        org.joda.time.Period period26 = period24.plusMinutes(6);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = property28.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime31 = property28.getMutableDateTime();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration36 = duration33.withDurationAdded((long) (short) 100, (int) ' ');
        long long37 = duration36.getMillis();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.DateTime dateTime45 = instant44.toDateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.months();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime47, periodType48);
        boolean boolean50 = dateTime41.isBefore((org.joda.time.ReadableInstant) dateTime45);
        int int51 = dateTime45.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.PeriodType periodType56 = periodType54.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime45, periodType54);
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod60.clear();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period64 = duration63.toPeriod();
        org.joda.time.Duration duration67 = duration63.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusMinutes(15);
        org.joda.time.Interval interval72 = duration67.toIntervalTo((org.joda.time.ReadableInstant) dateTime71);
        mutablePeriod60.setPeriod((org.joda.time.ReadableInterval) interval72);
        mutablePeriod60.setYears(0);
        mutablePeriod60.addMinutes((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration78 = null;
        org.joda.time.ReadableInstant readableInstant79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period(readableDuration78, readableInstant79);
        org.joda.time.Period period82 = period80.withDays((int) (byte) 1);
        org.joda.time.Chronology chronology84 = null;
        org.joda.time.LocalTime localTime85 = new org.joda.time.LocalTime((long) (short) 100, chronology84);
        org.joda.time.DurationFieldType durationFieldType86 = org.joda.time.DurationFieldType.millis();
        java.lang.String str87 = durationFieldType86.getName();
        boolean boolean88 = localTime85.isSupported(durationFieldType86);
        int int89 = period80.get(durationFieldType86);
        boolean boolean90 = mutablePeriod60.isSupported(durationFieldType86);
        int int91 = mutablePeriod57.get(durationFieldType86);
        mutableDateTime31.add(durationFieldType86, 0);
        org.joda.time.Period period95 = period24.withFieldAdded(durationFieldType86, 26439);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(seconds18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7 + "'", int22 == 7);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86403200L + "'", long37 == 86403200L);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(interval72);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "millis" + "'", str87, "millis");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + int91 + "' != '" + 200 + "'", int91 == 200);
        org.junit.Assert.assertNotNull(period95);
    }

    @Test
    public void test05272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05272");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addHours((int) (byte) 10);
        int int27 = mutableDateTime10.getSecondOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        boolean boolean37 = localDate28.isSupported(durationFieldType36);
        mutableDateTime10.add(durationFieldType36, (-292275054));
        org.joda.time.LocalDate localDate41 = localDate7.withFieldAdded(durationFieldType36, 53);
        org.joda.time.LocalDate.Property property42 = localDate7.yearOfCentury();
        int int43 = property42.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.set(45);
        org.joda.time.MutableDateTime mutableDateTime48 = property45.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime50 = property45.add(45);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        long long54 = dateTimeZone51.previousTransition(100L);
        int int56 = dateTimeZone51.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime57 = mutableDateTime50.toDateTime(dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.withDurationAdded(readableDuration58, (int) (byte) -1);
        int int61 = property42.getDifference((org.joda.time.ReadableInstant) dateTime60);
        java.lang.Class<?> wildcardClass62 = dateTime60.getClass();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 62537 + "'", int27 == 62537);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 99 + "'", int43 == 99);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-6977) + "'", int61 == (-6977));
        org.junit.Assert.assertNotNull(wildcardClass62);
    }

    @Test
    public void test05273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05273");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.addSeconds(0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours25 = duration24.toStandardHours();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.months();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime42 = dateTime16.plus((org.joda.time.ReadableDuration) duration41);
        int int43 = dateTime16.getHourOfDay();
        org.joda.time.DateTime dateTime45 = dateTime16.withCenturyOfEra(62243);
        int int46 = dateTime45.getMonthOfYear();
        org.joda.time.DateTime dateTime48 = dateTime45.plusSeconds(596);
        org.joda.time.DateTime dateTime50 = dateTime48.plus((long) 26440);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(hours25);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 17 + "'", int28 == 17);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 7 + "'", int43 == 7);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(dateTime50);
    }

    @Test
    public void test05274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05274");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        mutableDateTime11.setZoneRetainFields(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localTime3.toDateTimeToday(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears(24);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMonths((-198));
        java.util.GregorianCalendar gregorianCalendar20 = dateTime15.toGregorianCalendar();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:22:17.515Z" + "'", str10, "2022-02-22T07:22:17.515Z");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(gregorianCalendar20);
    }

    @Test
    public void test05275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05275");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = property5.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime9 = property5.set(1);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addYears(0);
        mutableDateTime10.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration37 = duration33.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant38 = instant31.plus((org.joda.time.ReadableDuration) duration37);
        long long39 = instant38.getMillis();
        org.joda.time.Duration duration40 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime10, (org.joda.time.ReadableInstant) instant38);
        mutableDateTime9.add((org.joda.time.ReadableDuration) duration40, 999);
        mutableDateTime9.setSecondOfMinute(24);
        java.lang.String str45 = mutableDateTime9.toString();
        org.joda.time.DateTimeZone dateTimeZone46 = mutableDateTime9.getZone();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((java.lang.Object) "2022-02-22T07:19:21.402Z", dateTimeZone46);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2022-02-22T07:19:21.402Z\" is malformed at \"Z\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(instant38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 86400000L + "'", long39 == 86400000L);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "-50070-09-17T19:06:24.624Z" + "'", str45, "-50070-09-17T19:06:24.624Z");
        org.junit.Assert.assertNotNull(dateTimeZone46);
    }

    @Test
    public void test05276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05276");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getYearOfCentury();
        int int9 = dateTime7.getWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime7.withEarlierOffsetAtOverlap();
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime10.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone13.isFixed();
        mutableDateTime12.setZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale21);
        java.lang.Object obj24 = dateTimeParserBucket23.saveState();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket23.getZone();
        org.joda.time.DateTime dateTime26 = localDateTime17.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime4.withZoneRetainFields(dateTimeZone25);
        java.lang.Object obj28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(obj28);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField36 = localDateTime34.getField((int) (byte) 0);
        long long38 = dateTimeField36.roundHalfEven((long) 1);
        int int39 = dateTime29.get(dateTimeField36);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withCenturyOfEra((int) 'a');
        java.util.Locale locale48 = java.util.Locale.GERMAN;
        java.lang.String str49 = locale48.getDisplayName();
        java.lang.String str50 = dateTimeField36.getAsText((org.joda.time.ReadablePartial) localDateTime44, 53, locale48);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property54 = localDateTime51.hourOfDay();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str58 = dateTimeFieldType57.getName();
        int int59 = localDateTime51.indexOf(dateTimeFieldType57);
        org.joda.time.LocalDateTime localDateTime61 = localDateTime51.minusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime51.minusSeconds((int) (byte) 100);
        int[] intArray66 = new int[] { 100, '#' };
        int int67 = dateTimeField36.getMaximumValue((org.joda.time.ReadablePartial) localDateTime51, intArray66);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime51.plusMinutes(27);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((long) 100, 1L, periodType72);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) 100, 1L, periodType76);
        org.joda.time.Period period78 = period73.plus((org.joda.time.ReadablePeriod) period77);
        org.joda.time.Period period80 = period77.withMonths((int) '#');
        org.joda.time.LocalDateTime localDateTime81 = localDateTime69.plus((org.joda.time.ReadablePeriod) period77);
        boolean boolean82 = dateTimeZone25.isLocalDateTimeGap(localDateTime69);
        org.joda.time.LocalDateTime.Property property83 = localDateTime69.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime85 = localDateTime69.withEra(26186255);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26186255 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:22:17.539Z" + "'", str5, "2022-02-22T07:22:17.539Z");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T07:22:17.539Z" + "'", str11, "2022-02-22T07:22:17.539Z");
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 2022 + "'", int39 == 2022);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\u5fb7\u6587" + "'", str49, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "53" + "'", str50, "53");
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "clockhourOfDay" + "'", str58, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(intArray66);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray66), "[100, 35]");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 292278993 + "'", int67 == 292278993);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(period78);
        org.junit.Assert.assertNotNull(period80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test05277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05277");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(0, 26170959, 26353940, 1345, 62434, 356, 26463);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1345 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05278");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.LocalDate localDate17 = localDate7.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.LocalDate.Property property18 = localDate7.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj20 = mutableDateTime19.clone();
        mutableDateTime19.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.add(1L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 44);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone26);
        mutableDateTime25.setZoneRetainFields(dateTimeZone26);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder34.clear();
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = dateTimeZone26.getName(555370422L, locale36);
        org.joda.time.DateTime dateTime38 = localDate7.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(23);
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.Interval interval43 = localDate7.toInterval(dateTimeZone42);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(10, (int) (byte) 100, 12, (-1), 999, (int) '4', (int) ' ', (int) (short) 100);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period55 = duration54.toPeriod();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration62 = duration59.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean63 = duration57.isLongerThan((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration64 = duration54.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration69 = duration66.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean70 = duration57.equals((java.lang.Object) duration66);
        long long71 = duration66.getStandardSeconds();
        mutablePeriod52.add((org.joda.time.ReadableDuration) duration66);
        org.joda.time.LocalDate localDate73 = localDate7.minus((org.joda.time.ReadablePeriod) mutablePeriod52);
        java.util.Date date74 = localDate73.toDate();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "2022-02-22T07:22:17.593Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "2022-02-22T07:22:17.593Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "2022-02-22T07:22:17.593Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 44L + "'", long30 == 44L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+23:00");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(period55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 86400L + "'", long71 == 86400L);
        org.junit.Assert.assertNotNull(localDate73);
        org.junit.Assert.assertNotNull(date74);
        org.junit.Assert.assertEquals(date74.toString(), "Thu Apr 22 00:00:00 UTC 2004");
    }

    @Test
    public void test05279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05279");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(chronology3);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertNotNull(localTime7);
    }

    @Test
    public void test05280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05280");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime8.toMutableDateTime();
        int int11 = mutableDateTime10.getYearOfEra();
        mutableDateTime10.setWeekyear(62491);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "53" + "'", str6, "53");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
    }

    @Test
    public void test05281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05281");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        int int4 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTime dateTime6 = dateTime1.withYearOfEra((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj8 = mutableDateTime7.clone();
        mutableDateTime7.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add(1L);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 44);
        org.joda.time.DateTime dateTime19 = org.joda.time.DateTime.now(dateTimeZone14);
        mutableDateTime13.setZoneRetainFields(dateTimeZone14);
        mutableDateTime13.addSeconds((int) (short) 10);
        int int23 = mutableDateTime13.getMillisOfDay();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime13.dayOfYear();
        boolean boolean25 = dateTime6.isAfter((org.joda.time.ReadableInstant) mutableDateTime13);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime13.setDateTime(26378969, 26286, 26402, 831, 26383, 55570, 2025);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 831 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 17 + "'", int4 == 17);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(obj8);
// flaky:         org.junit.Assert.assertEquals(obj8.toString(), "2022-02-22T07:22:17.753Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj8), "2022-02-22T07:22:17.753Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj8), "2022-02-22T07:22:17.753Z");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 44L + "'", long18 == 44L);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 10046 + "'", int23 == 10046);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test05282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05282");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((java.lang.Object) 1645514318109L);
    }

    @Test
    public void test05283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05283");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = localDateTime9.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        mutableDateTime4.setRounding(dateTimeField20);
        java.util.GregorianCalendar gregorianCalendar22 = mutableDateTime4.toGregorianCalendar();
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime4.copy();
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime23.toMutableDateTime();
        mutableDateTime24.setYear(254);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
    }

    @Test
    public void test05284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05284");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        java.lang.String str7 = localDateTime4.toString();
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        java.lang.String str10 = property8.toString();
        org.joda.time.DurationField durationField11 = property8.getDurationField();
        java.lang.String str12 = property8.getAsString();
        org.joda.time.LocalDateTime localDateTime13 = property8.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = property8.withMaximumValue();
        int int15 = localDateTime14.getHourOfDay();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T10:22:17.801" + "'", str7, "2022-02-22T10:22:17.801");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[weekOfWeekyear]" + "'", str10, "Property[weekOfWeekyear]");
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "8" + "'", str12, "8");
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 10 + "'", int15 == 10);
    }

    @Test
    public void test05285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05285");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime5 = localTime3.withHourOfDay(0);
        org.joda.time.LocalTime localTime7 = localTime5.withMillisOfSecond(44);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.Period period12 = period10.withDays((int) (byte) 1);
        org.joda.time.Period period14 = period10.withMonths(26148);
        org.joda.time.MutablePeriod mutablePeriod15 = period10.toMutablePeriod();
        org.joda.time.LocalTime localTime16 = localTime5.minus((org.joda.time.ReadablePeriod) mutablePeriod15);
        org.joda.time.LocalTime localTime18 = localTime16.plusMinutes((int) (short) 10);
        int int19 = localTime16.getSecondOfMinute();
        int int20 = localTime16.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj22 = mutableDateTime21.clone();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.millisOfDay();
        boolean boolean24 = localTime16.equals((java.lang.Object) mutableDateTime21);
        int int25 = mutableDateTime21.getWeekyear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = dateTimeZone27.getName(100L, locale29);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(948227L, dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime21.toMutableDateTime(dateTimeZone27);
        mutableDateTime21.setDate(1107514L);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime21.secondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime21.setDate(4225, 26477, 26238);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26477 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutablePeriod15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 17 + "'", int19 == 17);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(obj22);
// flaky:         org.junit.Assert.assertEquals(obj22.toString(), "2022-02-22T07:22:17.837Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj22), "2022-02-22T07:22:17.837Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj22), "2022-02-22T07:22:17.837Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u5fb7\u6587" + "'", str30, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test05286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05286");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.Chronology chronology38 = dateTimeFormatter2.getChronology();
        org.joda.time.Chronology chronology39 = dateTimeFormatter2.getChronology();
        org.joda.time.ReadWritableInstant readWritableInstant40 = null;
        // The following exception was thrown during execution in test generation
        try {
            int int43 = dateTimeFormatter2.parseInto(readWritableInstant40, "2022-02-22T07:22:10.629", 26515585);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2022 + "'", int24 == 2022);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u5fb7\u6587" + "'", str34, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "53" + "'", str35, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(chronology38);
        org.junit.Assert.assertNull(chronology39);
    }

    @Test
    public void test05287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05287");
        org.joda.time.Period period8 = new org.joda.time.Period(10, 21, 72600000, (int) '#', 10, 0, (int) (short) 100, 766);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.centuryOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period23 = period21.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minus((org.joda.time.ReadablePeriod) period21);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) period21, 0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1, dateTimeZone30);
        mutableDateTime28.setZone(dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration34, readableInstant35);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period39 = period36.withHours(69);
        mutableDateTime28.add((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Duration duration41 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime28);
        int int42 = mutableDateTime28.getMonthOfYear();
        int int43 = mutableDateTime28.getMinuteOfDay();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType57 = periodType54.getFieldType((int) (short) 0);
        java.lang.String str58 = periodType54.toString();
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.Chronology chronology62 = instant61.getChronology();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 53, (long) (-1), periodType54, chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType54);
        org.joda.time.Instant instant65 = new org.joda.time.Instant();
        org.joda.time.Instant instant67 = instant65.withMillis(0L);
        org.joda.time.Chronology chronology68 = instant67.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.eras();
        long long73 = chronology68.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField74 = chronology68.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField75 = chronology68.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(949680L, 100L, periodType54, chronology68);
        org.joda.time.Period period77 = new org.joda.time.Period((long) 38, (long) 32, periodType54);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(chronology81);
        org.joda.time.DateTime dateTime84 = dateTime82.plusMinutes(15);
        org.joda.time.Chronology chronology85 = dateTime82.getChronology();
        java.lang.String str86 = chronology85.toString();
        org.joda.time.DurationField durationField87 = chronology85.halfdays();
        org.joda.time.Period period88 = new org.joda.time.Period((long) (byte) 1, (long) (-1), chronology85);
        org.joda.time.DateTimeField dateTimeField89 = chronology85.dayOfMonth();
        org.joda.time.Period period90 = new org.joda.time.Period((-292275053L), chronology85);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((java.lang.Object) int43, periodType54, chronology85);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0S" + "'", str37, "PT0S");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 2 + "'", int42 == 2);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PeriodType[YearDayTime]" + "'", str58, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 105144L + "'", long73 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(chronology85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ISOChronology[UTC]" + "'", str86, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField87);
        org.junit.Assert.assertNotNull(dateTimeField89);
    }

    @Test
    public void test05288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05288");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addYears(0);
        mutableDateTime0.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant28 = instant21.plus((org.joda.time.ReadableDuration) duration27);
        long long29 = instant28.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) instant28);
        mutableDateTime0.addHours(20);
        mutableDateTime0.setMillisOfSecond(57);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime0.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField36 = property35.getField();
        org.joda.time.MutableDateTime mutableDateTime37 = property35.roundHalfEven();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86400000L + "'", long29 == 86400000L);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
    }

    @Test
    public void test05289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05289");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.LocalDate localDate14 = property12.roundCeilingCopy();
        org.joda.time.LocalDate localDate16 = localDate14.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight19 = localDate16.toDateMidnight(dateTimeZone17);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateMidnight19);
        java.lang.String str22 = dateMidnight19.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime24.addWeekyears((int) '4');
        mutableDateTime24.add((long) 'a');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime24.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateMidnight19, (org.joda.time.ReadableInstant) mutableDateTime24);
        mutablePeriod30.addMinutes(0);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc" + "'", str22, "\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test05290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05290");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTime();
        org.joda.time.DateTime dateTime10 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime12 = dateTime7.withWeekyear(407);
        org.joda.time.Chronology chronology14 = null;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.lang.String str17 = locale15.getDisplayVariant(locale16);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket18 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology14, locale16);
        java.lang.Object obj19 = dateTimeParserBucket18.saveState();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (short) 100, chronology21);
        org.joda.time.DurationFieldType durationFieldType23 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str24 = durationFieldType23.getName();
        boolean boolean25 = localTime22.isSupported(durationFieldType23);
        boolean boolean26 = dateTimeParserBucket18.restoreState((java.lang.Object) boolean25);
        org.joda.time.Chronology chronology27 = dateTimeParserBucket18.getChronology();
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime31 = dateTime29.withZoneRetainFields(dateTimeZone30);
        dateTimeParserBucket18.setZone(dateTimeZone30);
        long long33 = dateTimeParserBucket18.computeMillis();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket18.getChronology();
        dateTimeParserBucket18.setOffset((java.lang.Integer) 62170);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.yearOfCentury();
        dateTimeParserBucket18.saveField(dateTimeFieldType37, 11);
        org.joda.time.Chronology chronology40 = dateTimeParserBucket18.getChronology();
        java.util.Locale locale41 = dateTimeParserBucket18.getLocale();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(readableInstant47, readableInstant48, periodType49);
        org.joda.time.DurationFieldType durationFieldType52 = periodType49.getFieldType((int) (short) 0);
        java.lang.String str53 = periodType49.toString();
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Chronology chronology57 = instant56.getChronology();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 53, (long) (-1), periodType49, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType44.getField(chronology57);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusMinutes(15);
        org.joda.time.Chronology chronology64 = dateTime61.getChronology();
        java.lang.String str65 = chronology64.toString();
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType44.getField(chronology64);
        org.joda.time.DateTimeField dateTimeField67 = chronology64.dayOfYear();
        java.util.Locale locale68 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology64, locale68, (java.lang.Integer) 5);
        org.joda.time.DateTimeField dateTimeField71 = chronology64.dayOfYear();
        java.util.Locale.Category category72 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale73 = java.util.Locale.getDefault(category72);
        java.util.Locale locale74 = java.util.Locale.TAIWAN;
        java.util.Locale.setDefault(category72, locale74);
        java.util.Locale locale76 = java.util.Locale.getDefault(category72);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket(3755808026266L, chronology64, locale76, (java.lang.Integer) 0, 9);
        org.joda.time.DateTimeZone dateTimeZone80 = chronology64.getZone();
        dateTimeParserBucket18.setZone(dateTimeZone80);
        org.joda.time.DateTime dateTime82 = dateTime7.toDateTime(dateTimeZone80);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "weeks" + "'", str24, "weeks");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 97L + "'", long33 == 97L);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(periodType49);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PeriodType[YearDayTime]" + "'", str53, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ISOChronology[UTC]" + "'", str65, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + category72 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category72.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale73);
// flaky:         org.junit.Assert.assertEquals(locale73.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTime82);
    }

    @Test
    public void test05291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05291");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str11 = durationFieldType10.getName();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) boolean12);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket5.getChronology();
        org.joda.time.Chronology chronology16 = null;
        java.util.Locale locale17 = java.util.Locale.GERMAN;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.lang.String str19 = locale17.getDisplayVariant(locale18);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology16, locale18);
        java.lang.Object obj21 = dateTimeParserBucket20.saveState();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalTime localTime24 = new org.joda.time.LocalTime((long) (short) 100, chronology23);
        org.joda.time.DurationFieldType durationFieldType25 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str26 = durationFieldType25.getName();
        boolean boolean27 = localTime24.isSupported(durationFieldType25);
        boolean boolean28 = dateTimeParserBucket20.restoreState((java.lang.Object) boolean27);
        org.joda.time.Chronology chronology29 = dateTimeParserBucket20.getChronology();
        java.lang.Integer int30 = dateTimeParserBucket20.getPivotYear();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket20.getZone();
        dateTimeParserBucket5.setZone(dateTimeZone31);
        boolean boolean33 = dateTimeZone31.isFixed();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now(dateTimeZone31);
        mutableDateTime34.setSecondOfDay(1191);
        org.joda.time.ReadableDuration readableDuration37 = null;
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period(readableDuration37, readableInstant38);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) 100, 1L, periodType42);
        org.joda.time.Period period45 = period43.minusSeconds((-1));
        java.lang.String str46 = period43.toString();
        org.joda.time.Period period47 = period43.toPeriod();
        org.joda.time.PeriodType periodType48 = period43.getPeriodType();
        org.joda.time.Period period49 = period39.normalizedStandard(periodType48);
        java.lang.String str50 = periodType48.getName();
        org.joda.time.PeriodType periodType51 = periodType48.withYearsRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.Period period53 = new org.joda.time.Period((java.lang.Object) mutableDateTime34, periodType51);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.MutableDateTime");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weeks" + "'", str11, "weeks");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "weeks" + "'", str26, "weeks");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNull(int30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT0.099S" + "'", str46, "PT0.099S");
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Standard" + "'", str50, "Standard");
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
    }

    @Test
    public void test05292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05292");
        org.joda.time.Period period8 = new org.joda.time.Period(10, 21, 72600000, (int) '#', 10, 0, (int) (short) 100, 766);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.centuryOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property15 = localDateTime12.hourOfDay();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period23 = period21.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minus((org.joda.time.ReadablePeriod) period21);
        mutableDateTime9.add((org.joda.time.ReadablePeriod) period21, 0);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime9.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) (short) -1, dateTimeZone30);
        mutableDateTime28.setZone(dateTimeZone30);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration34, readableInstant35);
        java.lang.String str37 = period36.toString();
        org.joda.time.Period period39 = period36.withHours(69);
        mutableDateTime28.add((org.joda.time.ReadablePeriod) period36);
        org.joda.time.Duration duration41 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime28);
        int[] intArray42 = period8.getValues();
        org.joda.time.Period period43 = period8.normalizedStandard();
        org.joda.time.format.PeriodFormatter periodFormatter44 = null;
        java.lang.String str45 = period43.toString(periodFormatter44);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT0S" + "'", str37, "PT0S");
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(intArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray42), "[10, 21, 72600000, 35, 10, 0, 100, 766]");
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "P11Y9M72600005WT10H1M40.766S" + "'", str45, "P11Y9M72600005WT10H1M40.766S");
    }

    @Test
    public void test05293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05293");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = dateTime26.toInstant();
        org.joda.time.DateTime dateTime37 = dateTime26.withDurationAdded((long) 3, 4);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getYearOfCentury();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute(53);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration51 = duration44.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType57 = periodType54.getFieldType((int) (short) 0);
        java.lang.String str58 = periodType54.toString();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration44, periodType54);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime37, periodType54);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime0.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime64 = property62.add(0L);
        boolean boolean65 = property62.isLeap();
        java.util.Locale.Category category66 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale67 = java.util.Locale.getDefault(category66);
        java.util.Set<java.lang.String> strSet68 = locale67.getUnicodeLocaleKeys();
        java.lang.String str69 = property62.getAsText(locale67);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 18 + "'", int11 == 18);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PeriodType[YearDayTime]" + "'", str58, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + category66 + "' != '" + java.util.Locale.Category.FORMAT + "'", category66.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet68);
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "18" + "'", str69, "18");
    }

    @Test
    public void test05294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05294");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        int int20 = mutableDateTime0.getWeekyear();
        int int21 = mutableDateTime0.getDayOfWeek();
        org.joda.time.Period period23 = org.joda.time.Period.days(62176);
        org.joda.time.Period period25 = period23.minusHours(62215);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period25);
        java.util.Locale locale28 = java.util.Locale.CHINESE;
        java.lang.String str29 = locale28.getDisplayCountry();
        java.lang.String str30 = mutableDateTime0.toString("+10:16:28.464", locale28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = dateTimeZone32.getName(100L, locale34);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(948227L, dateTimeZone32);
        long long38 = mutableDateTime37.getMillis();
        mutableDateTime37.setWeekyear(1439);
        boolean boolean42 = mutableDateTime37.isBefore(1645514186724L);
        long long43 = mutableDateTime37.getMillis();
        org.joda.time.DateTimeZone dateTimeZone44 = mutableDateTime37.getZone();
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime0.toMutableDateTime(dateTimeZone44);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 3 + "'", int21 == 3);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "+10:16:28.464" + "'", str30, "+10:16:28.464");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u5fb7\u6587" + "'", str35, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "+00:00" + "'", str36, "+00:00");
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 948227L + "'", long38 == 948227L);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-16756587851773L) + "'", long43 == (-16756587851773L));
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
    }

    @Test
    public void test05295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05295");
        org.joda.time.tz.Provider provider0 = org.joda.time.DateTimeZone.getProvider();
        java.util.Set<java.lang.String> strSet1 = provider0.getAvailableIDs();
        java.util.Spliterator<java.lang.String> strSpliterator2 = strSet1.spliterator();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate((long) (byte) -1);
        int int5 = localDate4.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        long long10 = dateTimeZone6.getMillisKeepLocal(dateTimeZone8, (long) 44);
        org.joda.time.DateTime dateTime11 = localDate4.toDateTimeAtMidnight(dateTimeZone6);
        java.util.Locale locale13 = null;
        java.lang.String str14 = dateTimeZone6.getName(946000L, locale13);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(dateTimeZone6);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(dateTimeZone6);
        org.joda.time.LocalDate.Property property17 = localDate16.year();
        boolean boolean18 = strSet1.equals((java.lang.Object) localDate16);
        org.junit.Assert.assertNotNull(provider0);
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strSpliterator2);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1969 + "'", int5 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 44L + "'", long10 == 44L);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test05296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05296");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 36946953);
        long long2 = duration1.getMillis();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        int int7 = dateTime6.getMinuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime6.plusWeeks(0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = dateTime6.toDateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime6.withMillisOfSecond(765);
        org.joda.time.Period period14 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        int int19 = property16.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime21 = property16.add((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime23 = property16.add((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableInstant27, readableInstant28, periodType29);
        org.joda.time.DurationFieldType durationFieldType32 = periodType29.getFieldType((int) (short) 0);
        java.lang.String str33 = periodType29.toString();
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.Period period38 = new org.joda.time.Period((long) 53, (long) (-1), periodType29, chronology37);
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType24.getField(chronology37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMinutes(15);
        org.joda.time.Chronology chronology44 = dateTime41.getChronology();
        java.lang.String str45 = chronology44.toString();
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType24.getField(chronology44);
        java.lang.String str47 = dateTimeFieldType24.toString();
        boolean boolean48 = mutableDateTime23.isSupported(dateTimeFieldType24);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime23.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime(876L);
        mutableDateTime23.setTime((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearDay();
        java.lang.String str54 = periodType53.getName();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) mutableDateTime23, periodType53);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 133009030800000L + "'", long2 == 133009030800000L);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(periodType29);
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PeriodType[YearDayTime]" + "'", str33, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ISOChronology[UTC]" + "'", str45, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "minuteOfDay" + "'", str47, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "YearDay" + "'", str54, "YearDay");
    }

    @Test
    public void test05297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05297");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getYearOfCentury();
        int int9 = dateTime7.getWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime7.withEarlierOffsetAtOverlap();
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime10.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone13.isFixed();
        mutableDateTime12.setZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone13);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime();
        org.joda.time.Chronology chronology19 = null;
        java.util.Locale locale20 = java.util.Locale.GERMAN;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale20.getDisplayVariant(locale21);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology19, locale21);
        java.lang.Object obj24 = dateTimeParserBucket23.saveState();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeParserBucket23.getZone();
        org.joda.time.DateTime dateTime26 = localDateTime17.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime4.withZoneRetainFields(dateTimeZone25);
        long long29 = dateTimeZone25.convertUTCToLocal((long) 26333);
        long long31 = dateTimeZone25.convertUTCToLocal(24141110400000L);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(dateTimeZone25);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:22:18.484Z" + "'", str5, "2022-02-22T07:22:18.484Z");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 22 + "'", int8 == 22);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 2022 + "'", int9 == 2022);
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "2022-02-22T07:22:18.484Z" + "'", str11, "2022-02-22T07:22:18.484Z");
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(obj24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 26333L + "'", long29 == 26333L);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 24141110400000L + "'", long31 == 24141110400000L);
    }

    @Test
    public void test05298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05298");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj12 = mutableDateTime11.clone();
        mutableDateTime11.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.dayOfWeek();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime11.weekyear();
        int int17 = mutableDateTime11.getMinuteOfHour();
        mutableDateTime11.setMillisOfDay(26333);
        int int20 = mutableDateTime11.getYearOfCentury();
        java.lang.String str21 = mutableDateTime11.toString();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) mutableDateTime11);
        mutablePeriod22.addDays(39172808);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(obj12);
// flaky:         org.junit.Assert.assertEquals(obj12.toString(), "2022-02-22T07:22:18.563Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj12), "2022-02-22T07:22:18.563Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj12), "2022-02-22T07:22:18.563Z");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "2022-02-22T00:00:26.333Z" + "'", str21, "2022-02-22T00:00:26.333Z");
    }

    @Test
    public void test05299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05299");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours21 = duration20.toStandardHours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration17.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean47 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant48 = instant15.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now();
        mutableDateTime52.add((long) 'a');
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime52.yearOfCentury();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration63 = duration60.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration64 = duration57.minus((org.joda.time.ReadableDuration) duration63);
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime52.centuryOfEra();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology67);
        int int69 = dateTime68.getYearOfCentury();
        org.joda.time.DateTime dateTime71 = dateTime68.withSecondOfMinute(53);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period74 = duration73.toPeriod();
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration79 = duration76.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration80 = duration73.minus((org.joda.time.ReadableDuration) duration79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(readableInstant81, readableInstant82, periodType83);
        org.joda.time.DurationFieldType durationFieldType86 = periodType83.getFieldType((int) (short) 0);
        java.lang.String str87 = periodType83.toString();
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableDuration) duration73, periodType83);
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration91 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration73, 0);
        org.joda.time.Instant instant92 = instant48.minus((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Chronology chronology93 = instant48.getChronology();
        org.joda.time.DateTimeField dateTimeField94 = chronology93.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField95 = chronology93.clockhourOfDay();
        long long98 = dateTimeField95.getDifferenceAsLong(861235200000L, (long) 62244);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PT86400S" + "'", str9, "PT86400S");
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(instant15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "PT86400S" + "'", str18, "PT86400S");
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(hours21);
// flaky:         org.junit.Assert.assertTrue("'" + int24 + "' != '" + 18 + "'", int24 == 18);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 22 + "'", int69 == 22);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertNotNull(duration79);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(durationFieldType86);
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "PeriodType[YearDayTime]" + "'", str87, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(duration91);
        org.junit.Assert.assertNotNull(instant92);
        org.junit.Assert.assertNotNull(chronology93);
        org.junit.Assert.assertNotNull(dateTimeField94);
        org.junit.Assert.assertNotNull(dateTimeField95);
        org.junit.Assert.assertTrue("'" + long98 + "' != '" + 239231L + "'", long98 == 239231L);
    }

    @Test
    public void test05300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05300");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter17.withChronology(chronology21);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        long long33 = dateTimeZone30.previousTransition(100L);
        int int35 = dateTimeZone30.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology36 = chronology21.withZone(dateTimeZone30);
        java.util.TimeZone timeZone37 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTime dateTime38 = mutableDateTime0.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime40 = dateTime38.withWeekyear(26202);
        int int41 = dateTime38.getDayOfYear();
        boolean boolean42 = dateTime38.isBeforeNow();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L + "'", long33 == 100L);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(timeZone37);
        org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 54 + "'", int41 == 54);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test05301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05301");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.getMillisKeepLocal(dateTimeZone2, (long) 44);
        boolean boolean6 = dateTimeZone2.isStandardOffset((long) (-1));
        java.lang.String str7 = dateTimeZone2.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime8.add((long) 672);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setDayOfYear(26366);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26366 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
    }

    @Test
    public void test05302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05302");
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime9 = instant8.toMutableDateTime();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(4801284961717L);
        org.joda.time.Instant instant12 = instant8.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.LocalTime localTime14 = new org.joda.time.LocalTime((long) (-57), chronology13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((-2022), 26358535, 26436, 442, 26373, 23, 26486341, chronology13);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 442 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
    }

    @Test
    public void test05303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05303");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        mutableDateTime0.addDays(51);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(15);
        org.joda.time.DateTime dateTime27 = localDateTime20.toDateTime((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = localDateTime20.toDateTime(dateTimeZone28);
        org.joda.time.DateTime.Property property30 = dateTime29.minuteOfHour();
        org.joda.time.DateTime dateTime31 = property30.roundFloorCopy();
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime0.weekOfWeekyear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property33);
    }

    @Test
    public void test05304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05304");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(dateTimeZone11);
        org.joda.time.Interval interval15 = localDate14.toInterval();
        org.joda.time.LocalDate.Property property16 = localDate14.monthOfYear();
        org.joda.time.LocalDate localDate18 = property16.addWrapFieldToCopy(15);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(interval15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
    }

    @Test
    public void test05305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05305");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.Interval interval12 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration7.toDuration();
        org.joda.time.Period period14 = duration7.toPeriod();
        org.joda.time.Period period16 = new org.joda.time.Period(960800L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours22 = duration21.toStandardHours();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration27 = duration18.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = duration29.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.yearOfCentury();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration45 = duration38.minus((org.joda.time.ReadableDuration) duration44);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration38);
        boolean boolean47 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration38);
        boolean boolean48 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period53 = duration52.toPeriod();
        org.joda.time.Duration duration56 = duration52.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration58 = duration32.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        int int61 = dateTime60.getYearOfCentury();
        int int62 = dateTime60.getWeekyear();
        org.joda.time.DateTime dateTime64 = dateTime60.plus((long) 15);
        org.joda.time.DateTime.Property property65 = dateTime60.year();
        org.joda.time.DateTime dateTime66 = property65.roundHalfFloorCopy();
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period(readableDuration67, readableInstant68);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((long) 100, 1L, periodType72);
        org.joda.time.Period period75 = period73.minusSeconds((-1));
        java.lang.String str76 = period73.toString();
        org.joda.time.Period period77 = period73.toPeriod();
        org.joda.time.PeriodType periodType78 = period73.getPeriodType();
        org.joda.time.Period period79 = period69.normalizedStandard(periodType78);
        java.lang.String str80 = periodType78.getName();
        org.joda.time.PeriodType periodType81 = periodType78.withYearsRemoved();
        org.joda.time.Period period82 = duration56.toPeriodTo((org.joda.time.ReadableInstant) dateTime66, periodType81);
        org.joda.time.PeriodType periodType83 = periodType81.withSecondsRemoved();
        org.joda.time.Period period84 = period16.normalizedStandard(periodType83);
        org.joda.time.PeriodType periodType85 = periodType83.withYearsRemoved();
        org.joda.time.Period period86 = period14.withPeriodType(periodType83);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 18 + "'", int11 == 18);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT86400S" + "'", str19, "PT86400S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(hours22);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 18 + "'", int25 == 18);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 22 + "'", int61 == 22);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 2022 + "'", int62 == 2022);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "PT0.099S" + "'", str76, "PT0.099S");
        org.junit.Assert.assertNotNull(period77);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "Standard" + "'", str80, "Standard");
        org.junit.Assert.assertNotNull(periodType81);
        org.junit.Assert.assertNotNull(period82);
        org.junit.Assert.assertNotNull(periodType83);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(periodType85);
        org.junit.Assert.assertNotNull(period86);
    }

    @Test
    public void test05306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05306");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.hourOfDay();
        boolean boolean42 = dateTimeField41.isSupported();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
    }

    @Test
    public void test05307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05307");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period6 = period4.normalizedStandard(periodType5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean9 = localDate7.isSupported(dateTimeFieldType8);
        org.joda.time.LocalDate.Property property10 = localDate7.yearOfEra();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str16 = duration15.toString();
        org.joda.time.Instant instant17 = instant11.minus((org.joda.time.ReadableDuration) duration15);
        int int18 = property10.getDifference((org.joda.time.ReadableInstant) instant11);
        org.joda.time.Duration duration21 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant22 = instant11.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str25 = duration24.toString();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours28 = duration27.toStandardHours();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Duration duration33 = duration24.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        mutableDateTime39.add((long) 'a');
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.yearOfCentury();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration51 = duration44.minus((org.joda.time.ReadableDuration) duration50);
        mutableDateTime39.add((org.joda.time.ReadableDuration) duration44);
        boolean boolean53 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration44);
        boolean boolean54 = duration27.isLongerThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Instant instant55 = instant22.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours58 = duration57.toStandardHours();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        int int61 = dateTime60.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant65 = new org.joda.time.Instant();
        org.joda.time.Instant instant67 = instant65.withMillis(0L);
        org.joda.time.DateTime dateTime68 = instant67.toDateTime();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.months();
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableInstant) dateTime70, periodType71);
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) dateTime64, periodType71);
        org.joda.time.Instant instant75 = instant22.withDurationAdded((org.joda.time.ReadableDuration) duration57, 113);
        org.joda.time.Chronology chronology76 = instant75.getChronology();
        org.joda.time.Chronology chronology77 = instant75.getChronology();
        org.joda.time.Period period78 = new org.joda.time.Period((long) 26186255, (long) 53, periodType5, chronology77);
        org.joda.time.DateTime dateTime79 = org.joda.time.DateTime.now(chronology77);
        org.joda.time.DurationField durationField80 = chronology77.years();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PT86400S" + "'", str16, "PT86400S");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PT86400S" + "'", str25, "PT86400S");
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(hours28);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 18 + "'", int31 == 18);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(hours58);
// flaky:         org.junit.Assert.assertTrue("'" + int61 + "' != '" + 18 + "'", int61 == 18);
        org.junit.Assert.assertNotNull(instant67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(instant75);
        org.junit.Assert.assertNotNull(chronology76);
        org.junit.Assert.assertNotNull(chronology77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(durationField80);
    }

    @Test
    public void test05308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05308");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str11 = durationFieldType10.getName();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) boolean12);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = dateTime16.withZoneRetainFields(dateTimeZone17);
        dateTimeParserBucket5.setZone(dateTimeZone17);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder24.clear();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str28 = locale26.getISO3Language();
        java.lang.String str29 = locale26.getISO3Country();
        java.util.Locale.Builder builder30 = builder25.setLocale(locale26);
        java.util.Locale locale31 = locale26.stripExtensions();
        dateTimeParserBucket5.saveField(dateTimeFieldType22, "1969-12-31", locale26);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        dateTimeParserBucket5.saveField(dateTimeFieldType33, "", locale36);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 575);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime46 = property44.set(45);
        org.joda.time.MutableDateTime mutableDateTime47 = property44.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime49 = property44.add(45);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        long long53 = dateTimeZone50.previousTransition(100L);
        int int55 = dateTimeZone50.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime56 = mutableDateTime49.toDateTime(dateTimeZone50);
        mutableDateTime42.setZoneRetainFields(dateTimeZone50);
        java.lang.String str59 = dateTimeZone50.getNameKey((long) 36950209);
        java.lang.String str60 = dateTimeZone50.getID();
        long long63 = dateTimeZone50.convertLocalToUTC(1645514162999L, true);
        dateTimeParserBucket5.setZone(dateTimeZone50);
        java.lang.String str66 = dateTimeZone50.getShortName((long) 152);
        java.lang.Object obj67 = null;
        boolean boolean68 = dateTimeZone50.equals(obj67);
        java.lang.String str70 = dateTimeZone50.getShortName((long) 239);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weeks" + "'", str11, "weeks");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u5fb7\u6587" + "'", str27, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "deu" + "'", str28, "deu");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645514162999L + "'", long63 == 1645514162999L);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "+00:00" + "'", str70, "+00:00");
    }

    @Test
    public void test05309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05309");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.addDays((int) '4');
        mutablePeriod3.setHours(5);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime9.yearOfCentury();
        mutableDateTime9.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration17, readableInstant18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period25 = period23.minusSeconds((-1));
        java.lang.String str26 = period23.toString();
        org.joda.time.Period period27 = period23.toPeriod();
        org.joda.time.PeriodType periodType28 = period23.getPeriodType();
        org.joda.time.Period period29 = period19.normalizedStandard(periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = null;
        int int31 = periodType28.indexOf(durationFieldType30);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType28, chronology35);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime9.toMutableDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField42 = chronology35.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField43 = chronology35.clockhourOfDay();
        mutablePeriod3.setPeriod((long) (short) 0, chronology35);
        mutablePeriod3.setDays((int) (short) 100);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PT0.099S" + "'", str26, "PT0.099S");
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(periodType28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
    }

    @Test
    public void test05310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05310");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        java.lang.Object obj33 = mutableDateTime0.clone();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.add(62215);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Chronology chronology40 = instant39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.eras();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.DurationField durationField43 = chronology40.eras();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.clockhourOfHalfday();
        mutableDateTime36.setRounding(dateTimeField45);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.eras();
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.now(chronology58);
        org.joda.time.DurationField durationField61 = chronology58.eras();
        mutablePeriod53.setPeriod((long) 999, chronology58);
        org.joda.time.Chronology chronology63 = chronology58.withUTC();
        org.joda.time.Period period64 = new org.joda.time.Period((long) 62172, 3155760000000L, chronology58);
        org.joda.time.DateTimeField dateTimeField65 = chronology58.weekyearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime36.setRounding(dateTimeField65, 833);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 833");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.099S" + "'", str17, "PT0.099S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(obj33);
// flaky:         org.junit.Assert.assertEquals(obj33.toString(), "2022-02-22T07:22:19.227Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj33), "2022-02-22T07:22:19.227Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj33), "2022-02-22T07:22:19.227Z");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(localTime60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test05311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05311");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) ' ', 16, 26202, 56);
        mutablePeriod4.setMillis(26272);
        mutablePeriod4.addYears(62187);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.set(45);
        org.joda.time.MutableDateTime mutableDateTime13 = property10.roundFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 44, chronology19);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType14.getField(chronology19);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.Period period30 = period28.minusSeconds((-1));
        java.lang.String str31 = period28.toString();
        long long34 = chronology19.add((org.joda.time.ReadablePeriod) period28, (long) ' ', (int) 'a');
        org.joda.time.Period period36 = period28.minusHours((-292275054));
        org.joda.time.Period period38 = period36.minusHours(2000);
        int int39 = period36.getMinutes();
        org.joda.time.Period period40 = period36.toPeriod();
        mutableDateTime13.add((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period43 = period40.minusYears(443);
        org.joda.time.Period period45 = period43.minusDays(19);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(readableInstant46, readableInstant47, periodType48);
        mutablePeriod49.setYears((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray52 = mutablePeriod49.getFieldTypes();
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.forFields(durationFieldTypeArray52);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.forFields(durationFieldTypeArray52);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.forFields(durationFieldTypeArray52);
        org.joda.time.PeriodType periodType56 = periodType55.withYearsRemoved();
        org.joda.time.Period period57 = period45.normalizedStandard(periodType55);
        mutablePeriod4.add((org.joda.time.ReadablePeriod) period45);
        mutablePeriod4.setYears(0);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "PT0.099S" + "'", str31, "PT0.099S");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + (-9571L) + "'", long34 == (-9571L));
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(period38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(periodType48);
        org.junit.Assert.assertNotNull(durationFieldTypeArray52);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(period57);
    }

    @Test
    public void test05312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05312");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.LocalDateTime localDateTime5 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.DateTime dateTime16 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = localDateTime9.toDateTime(dateTimeZone17);
        org.joda.time.DateTime.Property property19 = dateTime18.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField20 = property19.getField();
        mutableDateTime4.setRounding(dateTimeField20);
        java.util.GregorianCalendar gregorianCalendar22 = mutableDateTime4.toGregorianCalendar();
        org.joda.time.LocalDateTime localDateTime23 = org.joda.time.LocalDateTime.fromCalendarFields((java.util.Calendar) gregorianCalendar22);
        int int24 = localDateTime23.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property25 = localDateTime23.weekyear();
        int int26 = localDateTime23.getDayOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 5 + "'", int24 == 5);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test05313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05313");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        long long8 = dateTime3.getMillis();
        org.joda.time.DateTime dateTime10 = dateTime3.minusMillis(1969);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getYearOfCentury();
        int int14 = dateTime12.getWeekyear();
        org.joda.time.DateTime dateTime16 = dateTime12.plus((long) 15);
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.DateTime dateTime19 = dateTime16.withCenturyOfEra((int) '#');
        org.joda.time.DateTime dateTime21 = dateTime16.withYear((int) 'u');
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime22.copy();
        mutableDateTime22.setDate((long) '#');
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        int int32 = localDate28.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight34 = localDate28.toDateMidnight(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = mutableDateTime22.toDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime37 = org.joda.time.DateTime.now(dateTimeZone33);
        org.joda.time.DateTime dateTime38 = dateTime16.toDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime40 = dateTime16.minusYears(152);
        int int41 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(periodType6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2022 + "'", int14 == 2022);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53 + "'", int32 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
    }

    @Test
    public void test05314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05314");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.LocalDate localDate17 = localDate7.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.LocalDate.Property property18 = localDate7.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj20 = mutableDateTime19.clone();
        mutableDateTime19.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.add(1L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 44);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone26);
        mutableDateTime25.setZoneRetainFields(dateTimeZone26);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder34.clear();
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = dateTimeZone26.getName(555370422L, locale36);
        org.joda.time.DateTime dateTime38 = localDate7.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime40 = instant39.toMutableDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime41 = instant39.toMutableDateTimeISO();
        int int42 = dateTime38.compareTo((org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMinutes(15);
        org.joda.time.Chronology chronology49 = dateTime46.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.hours();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1440L, chronology49);
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(chronology49);
        org.joda.time.Chronology chronology53 = chronology49.withUTC();
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime((long) 575, chronology53);
        org.joda.time.DateTimeField dateTimeField55 = chronology53.millisOfDay();
        boolean boolean57 = dateTimeField55.isLeap((long) (byte) 0);
        org.joda.time.Chronology chronology60 = null;
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.lang.String str63 = locale61.getDisplayVariant(locale62);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology60, locale62);
        java.lang.String str65 = locale62.getDisplayScript();
        java.util.Locale locale66 = locale62.stripExtensions();
        java.lang.String str67 = locale62.getISO3Language();
        java.lang.String str68 = dateTimeField55.getAsText(39L, locale62);
        mutableDateTime41.setRounding(dateTimeField55);
        long long71 = dateTimeField55.roundHalfFloor(1175327L);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "2022-02-22T07:22:19.302Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "2022-02-22T07:22:19.302Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "2022-02-22T07:22:19.302Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 44L + "'", long30 == 44L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "eng" + "'", str67, "eng");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "39" + "'", str68, "39");
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1175327L + "'", long71 == 1175327L);
    }

    @Test
    public void test05315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05315");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.LocalDate localDate4 = property2.roundCeilingCopy();
        org.joda.time.Chronology chronology5 = localDate4.getChronology();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime9 = localDate4.toDateTimeAtMidnight(dateTimeZone8);
        java.lang.String str10 = dateTimeZone8.getID();
        java.util.Locale locale12 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str13 = dateTimeZone8.getShortName(0L, locale12);
        long long15 = dateTimeZone8.convertUTCToLocal((long) 26280146);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(10627200000L, dateTimeZone8);
        mutableDateTime16.setSecondOfMinute(0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+53:00" + "'", str10, "+53:00");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "+53:00" + "'", str13, "+53:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 217080146L + "'", long15 == 217080146L);
    }

    @Test
    public void test05316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05316");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        boolean boolean20 = mutableDateTime19.isEqualNow();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime19.minuteOfDay();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:22:19.407Z" + "'", str14, "2022-02-22T07:22:19.407Z");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test05317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05317");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-22T07:16:40.348Z");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfEven();
        int int6 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.addMonths(72020057);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test05318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05318");
        java.lang.Object obj0 = null;
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(obj0, dateTimeZone1);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now(dateTimeZone1);
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        mutableDateTime8.add((long) 'a');
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str15 = duration14.toString();
        boolean boolean16 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Hours hours17 = duration12.toStandardHours();
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration12, 20);
        mutableDateTime8.setMillisOfDay(36946953);
        org.joda.time.DateTimeField dateTimeField22 = mutableDateTime8.getRoundingField();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration28 = duration24.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean34 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime7.plus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration38 = duration30.withMillis((long) 890);
        org.joda.time.Duration duration40 = duration30.withMillis(4801284983024L);
        java.lang.String str41 = duration40.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German" + "'", str4, "German");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT86400S" + "'", str15, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(hours17);
        org.junit.Assert.assertNull(dateTimeField22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT4801284983.024S" + "'", str41, "PT4801284983.024S");
    }

    @Test
    public void test05319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05319");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T07:16:00.803Z");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        long long13 = chronology8.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter4.withChronology(chronology8);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(chronology8);
        org.joda.time.DateTimeField dateTimeField16 = chronology8.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        long long20 = dateTimeZone17.previousTransition(100L);
        int int22 = dateTimeZone17.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology23 = chronology8.withZone(dateTimeZone17);
        java.util.TimeZone timeZone24 = dateTimeZone17.toTimeZone();
        boolean boolean25 = timeZone1.hasSameRules(timeZone24);
        java.lang.String str26 = timeZone1.getID();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        mutableDateTime27.add((long) 'a');
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.yearOfCentury();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration38 = duration35.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration39 = duration32.minus((org.joda.time.ReadableDuration) duration38);
        mutableDateTime27.add((org.joda.time.ReadableDuration) duration32);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime27.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        int int47 = property45.get();
        java.util.Locale locale48 = java.util.Locale.getDefault();
        java.lang.String str49 = property45.getAsShortText(locale48);
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int56 = localDateTime54.get(dateTimeFieldType55);
        java.util.Locale locale57 = java.util.Locale.TRADITIONAL_CHINESE;
        boolean boolean58 = localDateTime54.equals((java.lang.Object) locale57);
        java.lang.String str59 = locale48.getDisplayVariant(locale57);
        java.lang.String str60 = locale48.getScript();
        java.lang.String str61 = property41.getAsShortText(locale48);
        org.joda.time.MutableDateTime mutableDateTime62 = property41.roundHalfEven();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.year();
        mutableDateTime62.addSeconds(547820);
        java.util.Date date66 = mutableDateTime62.toDate();
        boolean boolean67 = timeZone1.inDaylightTime(date66);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 105144L + "'", long13 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L + "'", long20 == 100L);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "GMT" + "'", str26, "GMT");
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 7 + "'", int47 == 7);
        org.junit.Assert.assertNotNull(locale48);
// flaky:         org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "7" + "'", str49, "7");
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1439 + "'", int56 == 1439);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "20" + "'", str61, "20");
        org.junit.Assert.assertNotNull(mutableDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(date66);
        org.junit.Assert.assertEquals(date66.toString(), "Fri Jan 07 08:10:20 UTC 2000");
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
    }

    @Test
    public void test05320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05320");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.DateTime dateTime2 = mutableDateTime1.toDateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime6 = dateTime4.withZoneRetainFields(dateTimeZone5);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDate7.toDateTimeAtCurrentTime(dateTimeZone9);
        int int12 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTime dateTime14 = dateTime11.minusWeeks(44);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded((-1L), 36946953);
        int int18 = dateTime17.getMinuteOfDay();
        org.joda.time.DateTime dateTime20 = dateTime17.plusDays(49);
        org.joda.time.DateMidnight dateMidnight21 = dateTime17.toDateMidnight();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) dateMidnight21);
        mutableDateTime1.setWeekyear(243);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(dateTime2);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1266 + "'", int18 == 1266);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight21);
    }

    @Test
    public void test05321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05321");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        mutablePeriod2.addMinutes(53);
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod8.clear();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(15);
        org.joda.time.Interval interval20 = duration15.toIntervalTo((org.joda.time.ReadableInstant) dateTime19);
        mutablePeriod8.setPeriod((org.joda.time.ReadableInterval) interval20);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.set(45);
        org.joda.time.MutableDateTime mutableDateTime27 = property24.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = property24.add(45);
        java.lang.String str30 = mutableDateTime29.toString();
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime31.copy();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration35, readableInstant36);
        org.joda.time.Period period39 = period37.withDays((int) (byte) 1);
        org.joda.time.Period period41 = period37.minusMillis(1424);
        mutableDateTime31.add((org.joda.time.ReadablePeriod) period37);
        mutableDateTime29.add((org.joda.time.ReadablePeriod) period37);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime29.year();
        org.joda.time.MutableDateTime mutableDateTime45 = property44.roundCeiling();
        boolean boolean47 = mutableDateTime45.equals((java.lang.Object) 1973);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime45.centuryOfEra();
        org.joda.time.Duration duration49 = mutablePeriod2.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime45);
        mutableDateTime45.setMillisOfSecond(0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 1, chronology53);
        int int55 = dateTime54.getMinuteOfDay();
        int int56 = dateTime54.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property57 = dateTime54.dayOfMonth();
        org.joda.time.LocalDate localDate58 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property59 = localDate58.monthOfYear();
        org.joda.time.DateTimeField dateTimeField60 = property59.getField();
        org.joda.time.LocalDate localDate61 = property59.roundCeilingCopy();
        org.joda.time.Chronology chronology62 = localDate61.getChronology();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType64 = dateTimeField63.getType();
        boolean boolean65 = dateTime54.isSupported(dateTimeFieldType64);
        org.joda.time.Instant instant66 = new org.joda.time.Instant();
        org.joda.time.Instant instant68 = instant66.withMillis(0L);
        org.joda.time.Chronology chronology69 = instant68.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.eras();
        long long74 = chronology69.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField75 = chronology69.monthOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology69.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField77 = chronology69.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField78 = chronology69.monthOfYear();
        org.joda.time.DateTimeField dateTimeField79 = chronology69.monthOfYear();
        boolean boolean80 = dateTimeFieldType64.isSupported(chronology69);
        org.joda.time.DateTimeField dateTimeField81 = chronology69.halfdayOfDay();
        boolean boolean82 = dateTimeField81.isSupported();
        mutableDateTime45.setRounding(dateTimeField81);
        org.joda.time.MutableDateTime mutableDateTime84 = mutableDateTime45.copy();
        mutableDateTime84.addHours(26318841);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(interval20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "9000-01-01T00:00:00.000Z" + "'", str30, "9000-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 1 + "'", int56 == 1);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(localDate61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFieldType64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(instant68);
        org.junit.Assert.assertNotNull(chronology69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 105144L + "'", long74 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(dateTimeField78);
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertNotNull(mutableDateTime84);
    }

    @Test
    public void test05322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05322");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        mutableDateTime6.addWeeks(10);
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime9.hourOfDay();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str16 = dateTimeFieldType15.getName();
        int int17 = localDateTime9.indexOf(dateTimeFieldType15);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime9.minusSeconds((int) (short) 0);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.minus((long) 0);
        org.joda.time.DateTime dateTime23 = localDateTime9.toDateTime((org.joda.time.ReadableInstant) instant22);
        boolean boolean24 = mutableDateTime6.isBefore((org.joda.time.ReadableInstant) dateTime23);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime26 = dateTime23.withEra((-268));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -268 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "clockhourOfDay" + "'", str16, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test05323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05323");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime7 = property4.roundFloor();
        mutableDateTime7.setWeekyear(62277);
        java.lang.Object obj10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(obj10);
        boolean boolean13 = dateTime11.isBefore((long) 7);
        java.lang.String str14 = dateTime11.toString();
        org.joda.time.DateTime dateTime16 = dateTime11.minus((long) 7);
        org.joda.time.DateTime.Property property17 = dateTime11.millisOfSecond();
        org.joda.time.DateTime dateTime19 = property17.addToCopy(23);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillis((long) 2045);
        org.joda.time.DateTime.Property property22 = dateTime19.millisOfDay();
        mutableDateTime7.setMillis((org.joda.time.ReadableInstant) dateTime19);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2022-02-22T07:22:19.921Z" + "'", str14, "2022-02-22T07:22:19.921Z");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
    }

    @Test
    public void test05324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05324");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        int int39 = mutableDateTime0.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setMinuteOfHour(37203052);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37203052 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:22:19.950Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:22:19.950Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:22:19.950Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 194 + "'", int39 == 194);
    }

    @Test
    public void test05325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05325");
        java.util.TimeZone timeZone0 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId1 = timeZone0.toZoneId();
        java.util.TimeZone timeZone2 = java.util.TimeZone.getTimeZone(zoneId1);
        timeZone2.setRawOffset((-198));
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone2);
        java.util.TimeZone timeZone7 = java.util.TimeZone.getTimeZone("2022-02-22T07:16:00.803Z");
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        long long19 = chronology14.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter10.withChronology(chronology14);
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime(chronology14);
        org.joda.time.DateTimeField dateTimeField22 = chronology14.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        long long26 = dateTimeZone23.previousTransition(100L);
        int int28 = dateTimeZone23.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology29 = chronology14.withZone(dateTimeZone23);
        java.util.TimeZone timeZone30 = dateTimeZone23.toTimeZone();
        boolean boolean31 = timeZone7.hasSameRules(timeZone30);
        timeZone30.setRawOffset(161);
        boolean boolean34 = timeZone2.hasSameRules(timeZone30);
        org.junit.Assert.assertNotNull(timeZone0);
// flaky:         org.junit.Assert.assertEquals(timeZone0.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(zoneId1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 105144L + "'", long19 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L + "'", long26 == 100L);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test05326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05326");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.millisOfDay();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add((long) 26385643);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT86400S" + "'", str7, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test05327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05327");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        boolean boolean17 = instant0.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj19 = mutableDateTime18.clone();
        mutableDateTime18.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.dayOfWeek();
        mutableDateTime18.setMillisOfDay(2);
        int int25 = instant0.compareTo((org.joda.time.ReadableInstant) mutableDateTime18);
        mutableDateTime18.setMonthOfYear(4);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime18.setDayOfMonth(992);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 992 for dayOfMonth must be in the range [1,30]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "2022-02-22T07:22:20.000Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "2022-02-22T07:22:20.000Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "2022-02-22T07:22:20.000Z");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
    }

    @Test
    public void test05328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05328");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        int int7 = dateTime5.getWeekOfWeekyear();
        java.lang.String str8 = dateTime5.toString();
        org.joda.time.DateTime dateTime10 = dateTime5.withWeekyear((int) (byte) 0);
        org.joda.time.DateTime.Property property11 = dateTime10.hourOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 8 + "'", int7 == 8);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "2022-02-22T07:22:20.026Z" + "'", str8, "2022-02-22T07:22:20.026Z");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test05329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05329");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone11);
        org.joda.time.DateTime dateTime16 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime18 = dateTime16.plusMonths(26222789);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test05330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05330");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.DateTimeField dateTimeField7 = mutableDateTime6.getRoundingField();
        mutableDateTime6.setSecondOfMinute(0);
        mutableDateTime6.addSeconds((int) (short) 1);
        java.util.Date date12 = mutableDateTime6.toDate();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDayOfMonth((int) 'x');
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 120 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNull(dateTimeField7);
        org.junit.Assert.assertNotNull(date12);
        org.junit.Assert.assertEquals(date12.toString(), "Mon Feb 21 00:00:01 UTC 2022");
    }

    @Test
    public void test05331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05331");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        int int6 = mutableDateTime5.getDayOfMonth();
        int int7 = mutableDateTime5.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.monthOfYear();
        org.joda.time.Duration duration10 = org.joda.time.Duration.millis(2208988800041L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((-1576791296L));
        boolean boolean13 = duration10.isEqual((org.joda.time.ReadableDuration) duration12);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration12);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05332");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        int int5 = mutableDateTime0.getHourOfDay();
        mutableDateTime0.addWeeks(99);
        mutableDateTime0.add((long) 26252);
        boolean boolean11 = mutableDateTime0.isEqual((long) 15559679);
        org.joda.time.DateTimeZone dateTimeZone14 = null;
        org.joda.time.LocalTime localTime15 = new org.joda.time.LocalTime(dateTimeZone14);
        org.joda.time.LocalTime localTime17 = localTime15.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.millisOfSecond();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setRounding(dateTimeField20, 37161044);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 37161044");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:20.082Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:20.082Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:20.082Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test05333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05333");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        org.joda.time.DateTime dateTime5 = dateTime1.withDurationAdded(0L, (int) '4');
        org.joda.time.DateTime.Property property6 = dateTime5.year();
        org.joda.time.DateTime.Property property7 = dateTime5.yearOfEra();
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 20 + "'", int2 == 20);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test05334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05334");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime6.setMillis(readableInstant8);
        mutableDateTime6.setMillisOfDay(54);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        int int15 = dateTime13.getWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime13.plus((long) 15);
        org.joda.time.DateTime.Property property18 = dateTime13.year();
        org.joda.time.DateTime dateTime20 = property18.addToCopy((long) 25);
        org.joda.time.DateTime dateTime21 = property18.roundCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj23 = mutableDateTime22.clone();
        mutableDateTime22.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.dayOfWeek();
        int int27 = mutableDateTime22.getMinuteOfDay();
        boolean boolean28 = dateTime21.isEqual((org.joda.time.ReadableInstant) mutableDateTime22);
        int int29 = dateTime21.getYearOfCentury();
        boolean boolean30 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime32 = dateTime21.plusWeeks(26345);
        org.joda.time.LocalDate localDate33 = dateTime32.toLocalDate();
        boolean boolean35 = localDate33.equals((java.lang.Object) "2022-02-22T07:17:48.916Z");
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 22 + "'", int14 == 22);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(obj23);
// flaky:         org.junit.Assert.assertEquals(obj23.toString(), "2022-02-22T07:22:20.101Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj23), "2022-02-22T07:22:20.101Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj23), "2022-02-22T07:22:20.101Z");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 23 + "'", int29 == 23);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
    }

    @Test
    public void test05335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05335");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        long long13 = chronology8.add(0L, (long) 2022, (int) '4');
        mutablePeriod3.setPeriod((long) 58, chronology8);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.weekyear();
        java.lang.String str17 = dateTimeField15.getAsText((long) (-52));
        java.lang.String str19 = dateTimeField15.getAsText(66096011693L);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalDate localDate23 = property21.roundCeilingCopy();
        org.joda.time.LocalDate localDate25 = localDate23.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight28 = localDate25.toDateMidnight(dateTimeZone26);
        org.joda.time.DateTimeFieldType dateTimeFieldType29 = org.joda.time.DateTimeFieldType.yearOfEra();
        boolean boolean30 = localDate25.isSupported(dateTimeFieldType29);
        org.joda.time.LocalDate.Property property31 = localDate25.dayOfMonth();
        org.joda.time.LocalDate localDate32 = property31.roundHalfCeilingCopy();
        java.util.Locale locale34 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale34);
        java.util.Locale locale36 = locale34.stripExtensions();
        boolean boolean37 = locale34.hasExtensions();
        java.lang.String str38 = locale34.getScript();
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale39.getScript();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.lang.String str43 = locale41.getDisplayVariant(locale42);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getDisplayName();
        java.lang.String str48 = dateTimeZone44.getName(100L, locale46);
        java.lang.String str49 = locale42.getDisplayScript(locale46);
        java.lang.String str50 = locale42.toLanguageTag();
        java.lang.String str51 = locale39.getDisplayVariant(locale42);
        java.lang.String str52 = locale34.getDisplayScript(locale39);
        java.lang.String str53 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDate32, 26202, locale34);
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 105144L + "'", long13 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970" + "'", str17, "1970");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1972" + "'", str19, "1972");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateMidnight28);
        org.junit.Assert.assertNotNull(dateTimeFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_CN");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "de");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "de");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\u5fb7\u6587" + "'", str47, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "en-CA" + "'", str50, "en-CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "26202" + "'", str53, "26202");
    }

    @Test
    public void test05336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05336");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours5 = duration4.toStandardHours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = duration12.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration21);
        boolean boolean30 = duration15.isShorterThan((org.joda.time.ReadableDuration) duration21);
        boolean boolean31 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration39 = duration35.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration41 = duration15.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Period period42 = duration39.toPeriod();
        java.lang.Class<?> wildcardClass43 = duration39.getClass();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT86400S" + "'", str2, "PT86400S");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(hours5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + true + "'", boolean30 == true);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(wildcardClass43);
    }

    @Test
    public void test05337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05337");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        java.lang.Object obj14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(obj14);
        org.joda.time.LocalDateTime localDateTime16 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField22 = localDateTime20.getField((int) (byte) 0);
        long long24 = dateTimeField22.roundHalfEven((long) 1);
        int int25 = dateTime15.get(dateTimeField22);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withCenturyOfEra((int) 'a');
        java.util.Locale locale34 = java.util.Locale.GERMAN;
        java.lang.String str35 = locale34.getDisplayName();
        java.lang.String str36 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime30, 53, locale34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter3.withLocale(locale34);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatter3.getPrinter();
        boolean boolean39 = dateTimeFormatter3.isParser();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime43 = dateTime41.withZoneRetainFields(dateTimeZone42);
        boolean boolean45 = dateTime43.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology46 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField47 = chronology46.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter3.withChronology(chronology46);
        boolean boolean49 = dateTimeFormatter3.isOffsetParsed();
        java.util.Locale locale50 = dateTimeFormatter3.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter3.withOffsetParsed();
        boolean boolean52 = dateTimeFormatter51.isParser();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.parse("2022-02-22T07:16:47.336Z", dateTimeFormatter51);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 105144L + "'", long12 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "de");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u5fb7\u6587" + "'", str35, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "53" + "'", str36, "53");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNull(dateTimePrinter38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(locale50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test05338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05338");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        mutablePeriod2.setYears(0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getYearOfCentury();
        int int21 = dateTime19.getWeekyear();
        org.joda.time.DateTime dateTime22 = dateTime19.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property23 = dateTime19.yearOfEra();
        org.joda.time.DateTime dateTime24 = property23.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime25 = property23.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property26 = dateTime25.dayOfYear();
        org.joda.time.DateTime dateTime28 = dateTime25.withMillis((long) (short) 1);
        org.joda.time.DateTime dateTime30 = dateTime25.minusYears(26265573);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.set(45);
        org.joda.time.MutableDateTime mutableDateTime35 = property32.roundFloor();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod38.clear();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period42 = duration41.toPeriod();
        org.joda.time.Duration duration45 = duration41.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMinutes(15);
        org.joda.time.Interval interval50 = duration45.toIntervalTo((org.joda.time.ReadableInstant) dateTime49);
        mutablePeriod38.setPeriod((org.joda.time.ReadableInterval) interval50);
        mutablePeriod38.setYears(0);
        mutablePeriod38.addMinutes((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period(readableDuration56, readableInstant57);
        org.joda.time.Period period60 = period58.withDays((int) (byte) 1);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((long) (short) 100, chronology62);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.millis();
        java.lang.String str65 = durationFieldType64.getName();
        boolean boolean66 = localTime63.isSupported(durationFieldType64);
        int int67 = period58.get(durationFieldType64);
        boolean boolean68 = mutablePeriod38.isSupported(durationFieldType64);
        int int69 = mutablePeriod38.getSeconds();
        mutableDateTime35.add((org.joda.time.ReadablePeriod) mutablePeriod38, 1424);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime35.yearOfCentury();
        mutableDateTime35.setMillis(1171625L);
        mutableDateTime35.addDays(15556368);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) mutableDateTime35);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(interval50);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(durationFieldType64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "millis" + "'", str65, "millis");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(property72);
    }

    @Test
    public void test05339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05339");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setSecondOfDay(37140589);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 37140589 for secondOfDay must be in the range [0,86399]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test05340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05340");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusMillis(49);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime6.withSecondOfMinute(3);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMillisOfSecond(52);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.property(dateTimeFieldType13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusDays(62262);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str21 = duration20.toString();
        mutableDateTime18.add((org.joda.time.ReadableDuration) duration20, 8);
        mutableDateTime18.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime18.weekyear();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime18.millisOfDay();
        org.joda.time.DateTime dateTime28 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime18.dayOfWeek();
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT86400S" + "'", str21, "PT86400S");
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test05341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05341");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-22T07:16:40.348Z");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.roundHalfEven();
        int int6 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime5.yearOfCentury();
        int int8 = mutableDateTime5.getCenturyOfEra();
        int int9 = mutableDateTime5.getSecondOfMinute();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 20 + "'", int8 == 20);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
    }

    @Test
    public void test05342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05342");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.withMillisOfDay(50);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfEra();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime12 = instant11.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.yearOfCentury();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration24 = duration21.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration25 = duration18.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime13.centuryOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        int int30 = dateTime29.getYearOfCentury();
        org.joda.time.DateTime dateTime32 = dateTime29.withSecondOfMinute(53);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration40 = duration37.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration41 = duration34.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant42, readableInstant43, periodType44);
        org.joda.time.DurationFieldType durationFieldType47 = periodType44.getFieldType((int) (short) 0);
        java.lang.String str48 = periodType44.toString();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime29, (org.joda.time.ReadableDuration) duration34, periodType44);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration34);
        mutableDateTime13.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime13.weekOfWeekyear();
        boolean boolean54 = instant11.isAfter((org.joda.time.ReadableInstant) mutableDateTime13);
        long long55 = instant11.getMillis();
        long long56 = property10.getDifferenceAsLong((org.joda.time.ReadableInstant) instant11);
        org.joda.time.DateTime dateTime58 = property10.addToCopy((long) 52);
        java.lang.String str59 = dateTime58.toString();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "PeriodType[YearDayTime]" + "'", str48, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long55 + "' != '" + 1645514540622L + "'", long55 == 1645514540622L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "2074-02-22T00:00:00.050Z" + "'", str59, "2074-02-22T00:00:00.050Z");
    }

    @Test
    public void test05343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05343");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj2 = mutableDateTime1.clone();
        mutableDateTime1.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone8.getMillisKeepLocal(dateTimeZone10, (long) 44);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone8);
        mutableDateTime7.setZoneRetainFields(dateTimeZone8);
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clear();
        java.util.Locale locale18 = builder17.build();
        java.lang.String str19 = dateTimeZone8.getName(555370422L, locale18);
        java.lang.String str21 = dateTimeZone8.getShortName(962578L);
        long long24 = dateTimeZone8.convertLocalToUTC((long) 62151, false);
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 26150565, dateTimeZone8);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration34 = duration30.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant35 = instant28.plus((org.joda.time.ReadableDuration) duration34);
        long long36 = instant35.getMillis();
        long long37 = instant35.getMillis();
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str43 = duration42.toString();
        org.joda.time.Instant instant44 = instant38.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.MutableDateTime mutableDateTime45 = instant38.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str53 = dateTimeFieldType52.getName();
        int int54 = localDateTime46.indexOf(dateTimeFieldType52);
        java.lang.String str55 = dateTimeFieldType52.getName();
        int int56 = mutableDateTime45.get(dateTimeFieldType52);
        int int57 = instant35.get(dateTimeFieldType52);
        java.lang.String str58 = dateTimeFieldType52.toString();
        int int59 = localDateTime25.indexOf(dateTimeFieldType52);
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(readableInstant60, readableInstant61, periodType62);
        mutablePeriod63.setYears((int) '#');
        org.joda.time.Chronology chronology67 = null;
        mutablePeriod63.add((long) 1, chronology67);
        org.joda.time.ReadableInterval readableInterval69 = null;
        mutablePeriod63.setPeriod(readableInterval69);
        org.joda.time.DurationFieldType durationFieldType71 = org.joda.time.DurationFieldType.millis();
        int int72 = mutablePeriod63.indexOf(durationFieldType71);
        org.joda.time.MutablePeriod mutablePeriod73 = mutablePeriod63.toMutablePeriod();
        int int74 = mutablePeriod73.getMonths();
        mutablePeriod73.addDays(4);
        mutablePeriod73.clear();
        int int78 = mutablePeriod73.getYears();
        org.joda.time.DateTimeZone dateTimeZone82 = null;
        org.joda.time.LocalTime localTime83 = new org.joda.time.LocalTime(dateTimeZone82);
        org.joda.time.LocalTime localTime85 = localTime83.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology86 = localTime85.getChronology();
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology86);
        org.joda.time.DateTimeField dateTimeField88 = chronology86.millisOfDay();
        mutablePeriod73.setPeriod(6L, chronology86);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime90 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimeFieldType52, chronology86);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateTimeFieldType$StandardDateTimeFieldType");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj2);
// flaky:         org.junit.Assert.assertEquals(obj2.toString(), "2022-02-22T07:22:20.649Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "2022-02-22T07:22:20.649Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "2022-02-22T07:22:20.649Z");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 44L + "'", long12 == 44L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 62151L + "'", long24 == 62151L);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 86400000L + "'", long36 == 86400000L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 86400000L + "'", long37 == 86400000L);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT86400S" + "'", str43, "PT86400S");
        org.junit.Assert.assertNotNull(instant44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "clockhourOfDay" + "'", str53, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "clockhourOfDay" + "'", str55, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 7 + "'", int56 == 7);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 24 + "'", int57 == 24);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "clockhourOfDay" + "'", str58, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertNotNull(periodType62);
        org.junit.Assert.assertNotNull(durationFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 5 + "'", int72 == 5);
        org.junit.Assert.assertNotNull(mutablePeriod73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 0 + "'", int74 == 0);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertNotNull(localTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField88);
    }

    @Test
    public void test05344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05344");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.plusSeconds(25);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField10 = property9.getField();
        org.joda.time.LocalDateTime localDateTime11 = property9.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears(26481328);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test05345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05345");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration16 = duration12.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Period period19 = period17.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        mutableDateTime20.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime20.copy();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant30, readableInstant31, periodType32);
        org.joda.time.DurationFieldType durationFieldType35 = periodType32.getFieldType((int) (short) 0);
        java.lang.String str36 = periodType32.toString();
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Chronology chronology40 = instant39.getChronology();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 53, (long) (-1), periodType32, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType27.getField(chronology40);
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = locale43.getDisplayLanguage();
        int int45 = dateTimeField42.getMaximumTextLength(locale43);
        mutableDateTime26.setRounding(dateTimeField42);
        org.joda.time.Duration duration47 = period17.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime26.centuryOfEra();
        int int49 = mutableDateTime26.getYear();
        int int50 = dateTime7.compareTo((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setMinuteOfHour(23);
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime26.dayOfMonth();
        int int54 = mutableDateTime26.getCenturyOfEra();
        mutableDateTime26.addHours(26278);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime26.yearOfCentury();
        mutableDateTime26.add((long) 33722);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PeriodType[YearDayTime]" + "'", str36, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u82f1\u6587" + "'", str44, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 20 + "'", int54 == 20);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test05346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05346");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZoneUTC();
        boolean boolean14 = dateTimeFormatter2.isPrinter();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime15.copy();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime21 = property19.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime23 = property19.set(1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        int int27 = dateTime25.getWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime25.withEarlierOffsetAtOverlap();
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime28.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        boolean boolean32 = dateTimeZone31.isFixed();
        mutableDateTime30.setZoneRetainFields(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime23.toMutableDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate35 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withZone(dateTimeZone31);
        int int37 = dateTimeFormatter2.getDefaultYear();
        java.lang.Integer int38 = dateTimeFormatter2.getPivotYear();
        java.util.Locale locale39 = dateTimeFormatter2.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime41 = dateTimeFormatter2.parseLocalDateTime("1974-11-27T20:41:59.999");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "2022-02-22T07:22:20.709Z" + "'", str29, "2022-02-22T07:22:20.709Z");
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(localDate35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 2000 + "'", int37 == 2000);
        org.junit.Assert.assertNull(int38);
        org.junit.Assert.assertNull(locale39);
    }

    @Test
    public void test05347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05347");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField5 = chronology3.hourOfDay();
        long long7 = dateTimeField5.roundHalfFloor(960000L);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType15 = periodType12.getFieldType((int) (short) 0);
        java.lang.String str16 = periodType12.toString();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 53, (long) (-1), periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime25.yearOfCentury();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration36 = duration33.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration37 = duration30.minus((org.joda.time.ReadableDuration) duration36);
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime25.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property43 = localDateTime40.hourOfDay();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        int int45 = property43.get();
        java.util.Locale locale46 = java.util.Locale.getDefault();
        java.lang.String str47 = property43.getAsShortText(locale46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology49);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int54 = localDateTime52.get(dateTimeFieldType53);
        java.util.Locale locale55 = java.util.Locale.TRADITIONAL_CHINESE;
        boolean boolean56 = localDateTime52.equals((java.lang.Object) locale55);
        java.lang.String str57 = locale46.getDisplayVariant(locale55);
        java.lang.String str58 = locale46.getScript();
        java.lang.String str59 = property39.getAsShortText(locale46);
        java.lang.String str60 = dateTimeField23.getAsText(4492800000L, locale46);
        int int61 = dateTimeField5.getMaximumTextLength(locale46);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = dateTimeField5.getType();
        java.lang.String str64 = dateTimeField5.getAsShortText((long) 52);
        int int65 = dateTimeField5.getMaximumValue();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PeriodType[YearDayTime]" + "'", str16, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 7 + "'", int45 == 7);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "7" + "'", str47, "7");
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1439 + "'", int54 == 1439);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "20" + "'", str59, "20");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertNotNull(dateTimeFieldType62);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "0" + "'", str64, "0");
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 23 + "'", int65 == 23);
    }

    @Test
    public void test05348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05348");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj21 = mutableDateTime20.clone();
        mutableDateTime20.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.add(1L);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        mutableDateTime26.setZoneRetainFields(dateTimeZone27);
        mutableDateTime26.addSeconds((int) (short) 10);
        java.lang.Object obj36 = mutableDateTime26.clone();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime26.era();
        boolean boolean38 = mutableDateTime0.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setYear(2);
        mutableDateTime26.setMillisOfDay(62170);
        boolean boolean44 = mutableDateTime26.isBefore(1645514264532L);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(obj21);
// flaky:         org.junit.Assert.assertEquals(obj21.toString(), "2022-02-22T07:22:20.747Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "2022-02-22T07:22:20.747Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "2022-02-22T07:22:20.747Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(obj36);
        org.junit.Assert.assertEquals(obj36.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj36), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test05349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05349");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours3 = duration2.toStandardHours();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) dateTime5);
        org.joda.time.DateTime dateTime9 = dateTime5.plus(0L);
        org.joda.time.Instant instant10 = dateTime9.toInstant();
        org.joda.time.DateTime.Property property11 = dateTime9.weekOfWeekyear();
        int int12 = dateTime9.getMillisOfDay();
        org.joda.time.Instant instant13 = dateTime9.toInstant();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        long long18 = dateTimeZone14.getMillisKeepLocal(dateTimeZone16, (long) 44);
        boolean boolean20 = dateTimeZone16.isStandardOffset((long) (-1));
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((java.lang.Object) instant13, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(1040955L, dateTimeZone16);
        org.joda.time.DateTime dateTime25 = dateTime23.plusYears(26415);
        org.joda.time.DateTime dateTime27 = dateTime25.plusDays(33);
        org.joda.time.DateTime.Property property28 = dateTime25.yearOfEra();
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(hours3);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 20 + "'", int6 == 20);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(instant10);
        org.junit.Assert.assertNotNull(property11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 26540764 + "'", int12 == 26540764);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
        org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 44L + "'", long18 == 44L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
    }

    @Test
    public void test05350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05350");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.Instant instant2 = instant0.toInstant();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod5.clear();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration12 = duration8.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(15);
        org.joda.time.Interval interval17 = duration12.toIntervalTo((org.joda.time.ReadableInstant) dateTime16);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant19, readableInstant20, periodType21);
        org.joda.time.DurationFieldType durationFieldType24 = periodType21.getFieldType((int) (short) 0);
        int int25 = mutablePeriod5.get(durationFieldType24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now();
        mutableDateTime28.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime28.copy();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime28.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.eras();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration27, chronology37);
        org.joda.time.Instant instant42 = instant2.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.DateTime dateTime43 = instant2.toDateTime();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(interval17);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(instant36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(instant42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test05351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05351");
        org.joda.time.Instant instant1 = org.joda.time.Instant.parse("2022-02-22T10:16:18.754");
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.monthOfYear();
        java.lang.String str4 = property3.getAsText();
        org.junit.Assert.assertNotNull(instant1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u4e8c\u6708" + "'", str4, "\u4e8c\u6708");
    }

    @Test
    public void test05352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05352");
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime(1979, 157, 26290, 0, 966, 26233410, 194);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 966 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05353");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addHours((int) (byte) 10);
        int int27 = mutableDateTime10.getSecondOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        boolean boolean37 = localDate28.isSupported(durationFieldType36);
        mutableDateTime10.add(durationFieldType36, (-292275054));
        org.joda.time.LocalDate localDate41 = localDate7.withFieldAdded(durationFieldType36, 53);
        org.joda.time.LocalDate.Property property42 = localDate7.yearOfCentury();
        int int43 = property42.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.set(45);
        org.joda.time.MutableDateTime mutableDateTime48 = property45.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime50 = property45.add(45);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        long long54 = dateTimeZone51.previousTransition(100L);
        int int56 = dateTimeZone51.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime57 = mutableDateTime50.toDateTime(dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.withDurationAdded(readableDuration58, (int) (byte) -1);
        int int61 = property42.getDifference((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime63 = dateTime60.withYear(2022);
        int int64 = dateTime60.getEra();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(62243, 200, 10, 64173, 3021, 96, 26266184, 33);
        org.joda.time.DateTime dateTime74 = dateTime60.minus((org.joda.time.ReadablePeriod) mutablePeriod73);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 62541 + "'", int27 == 62541);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 99 + "'", int43 == 99);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-6977) + "'", int61 == (-6977));
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 1 + "'", int64 == 1);
        org.junit.Assert.assertNotNull(dateTime74);
    }

    @Test
    public void test05354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05354");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTime();
        int int10 = dateTime7.getWeekOfWeekyear();
        org.joda.time.DateTime.Property property11 = dateTime7.dayOfMonth();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 52 + "'", int10 == 52);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test05355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05355");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        int int15 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays(0);
        org.joda.time.DateTime dateTime18 = dateTime17.toDateTimeISO();
        org.joda.time.DateTime dateTime20 = dateTime17.plusDays(41);
        org.joda.time.DateTime dateTime22 = dateTime17.plusMonths(27);
        int int23 = dateTime22.getYear();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 26541 + "'", int15 == 26541);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2024 + "'", int23 == 2024);
    }

    @Test
    public void test05356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05356");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfCeiling();
        int int6 = mutableDateTime5.getDayOfMonth();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration15 = duration8.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17, periodType18);
        mutablePeriod19.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod22 = mutablePeriod19.toMutablePeriod();
        org.joda.time.LocalDate localDate23 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property24 = localDate23.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean26 = localDate23.isSupported(dateTimeFieldType25);
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType25.getRangeDurationType();
        int int28 = mutablePeriod19.indexOf(durationFieldType27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = duration30.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        mutableDateTime34.add((long) 'a');
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.yearOfCentury();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration45 = duration42.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration46 = duration39.minus((org.joda.time.ReadableDuration) duration45);
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration39);
        boolean boolean48 = duration33.isShorterThan((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration50 = duration39.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now();
        mutableDateTime51.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime51.copy();
        mutableDateTime51.setDate((long) '#');
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property58 = localDate57.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean60 = localDate57.isSupported(dateTimeFieldType59);
        int int61 = localDate57.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight63 = localDate57.toDateMidnight(dateTimeZone62);
        org.joda.time.DateTime dateTime64 = mutableDateTime51.toDateTime(dateTimeZone62);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.MutablePeriod mutablePeriod66 = mutablePeriod65.copy();
        mutablePeriod66.clear();
        mutablePeriod66.setPeriod(21L, (long) '#');
        mutablePeriod19.setPeriod((org.joda.time.ReadablePeriod) mutablePeriod66);
        org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate();
        int int73 = localDate72.getDayOfMonth();
        org.joda.time.DateTime dateTime74 = localDate72.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate76 = localDate72.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate78 = localDate76.plusDays(26150565);
        org.joda.time.DateTimeZone dateTimeZone79 = null;
        org.joda.time.DateTime dateTime80 = localDate76.toDateTimeAtStartOfDay(dateTimeZone79);
        org.joda.time.Duration duration81 = mutablePeriod66.toDurationFrom((org.joda.time.ReadableInstant) dateTime80);
        int int82 = duration14.compareTo((org.joda.time.ReadableDuration) duration81);
        org.joda.time.Duration duration83 = duration81.toDuration();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime5, (org.joda.time.ReadableDuration) duration83);
        mutablePeriod84.setWeeks(37118622);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(mutablePeriod22);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(period40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 53 + "'", int61 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateMidnight63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(mutablePeriod66);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 22 + "'", int73 == 22);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(localDate76);
        org.junit.Assert.assertNotNull(localDate78);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(duration81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 1 + "'", int82 == 1);
        org.junit.Assert.assertNotNull(duration83);
    }

    @Test
    public void test05357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05357");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("2022-02-22T07:18:45.231Z", 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=10.0");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
    }

    @Test
    public void test05358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05358");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        java.lang.String str6 = chronology5.toString();
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) 2022, chronology5);
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.hourOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str15 = dateTimeFieldType14.getName();
        int int16 = localDateTime8.indexOf(dateTimeFieldType14);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime8.minusSeconds((int) (short) 0);
        int int19 = localDateTime18.getYearOfEra();
        int int20 = localDateTime18.size();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusHours(26177);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime7.withFields((org.joda.time.ReadablePartial) localDateTime22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime22.withYear(26209);
        java.lang.Object obj26 = null;
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = dateTimeZone27.getName(100L, locale29);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime(obj26, dateTimeZone27);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now(dateTimeZone27);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        mutableDateTime34.add((long) 'a');
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str41 = duration40.toString();
        boolean boolean42 = duration38.isShorterThan((org.joda.time.ReadableDuration) duration40);
        org.joda.time.Hours hours43 = duration38.toStandardHours();
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration38, 20);
        mutableDateTime34.setMillisOfDay(36946953);
        org.joda.time.DateTimeField dateTimeField48 = mutableDateTime34.getRoundingField();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.Duration duration54 = duration50.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration59 = duration56.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean60 = duration54.isLongerThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Period period61 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime34, (org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime33.plus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime localDateTime63 = localDateTime22.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.LocalDateTime.Property property64 = localDateTime22.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime65 = property64.roundHalfCeilingCopy();
        int int66 = property64.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ISOChronology[UTC]" + "'", str6, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "clockhourOfDay" + "'", str15, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 2022 + "'", int19 == 2022);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u5fb7\u6587" + "'", str30, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00" + "'", str31, "+00:00");
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "PT86400S" + "'", str41, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(hours43);
        org.junit.Assert.assertNull(dateTimeField48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
    }

    @Test
    public void test05359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05359");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setDate(0L);
        java.lang.Object obj4 = mutableDateTime0.clone();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:21.258Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:21.258Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:21.258Z");
        org.junit.Assert.assertNotNull(obj4);
// flaky:         org.junit.Assert.assertEquals(obj4.toString(), "1970-01-01T07:22:21.258Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "1970-01-01T07:22:21.258Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "1970-01-01T07:22:21.258Z");
    }

    @Test
    public void test05360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05360");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        boolean boolean6 = dateTime4.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology7 = dateTime4.getChronology();
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology7, locale8, (java.lang.Integer) 50);
        org.joda.time.DurationField durationField11 = chronology7.eras();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.LocalTime localTime14 = localTime12.withMillisOfDay(26199);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
    }

    @Test
    public void test05361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05361");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        int int4 = dateTime3.getSecondOfDay();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod7.clear();
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period17 = period12.plus((org.joda.time.ReadablePeriod) period16);
        org.joda.time.MutablePeriod mutablePeriod18 = period17.toMutablePeriod();
        mutablePeriod18.setMillis(62167);
        mutablePeriod7.mergePeriod((org.joda.time.ReadablePeriod) mutablePeriod18);
        mutablePeriod7.setPeriod((long) 97);
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod28.addDays((int) (byte) 10);
        mutablePeriod28.addMillis((int) '4');
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean43 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration44 = duration34.minus((org.joda.time.ReadableDuration) duration37);
        mutablePeriod28.setPeriod((org.joda.time.ReadableDuration) duration44);
        long long46 = duration44.getStandardHours();
        java.lang.String str47 = duration44.toString();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes(15);
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.hours();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1440L, chronology53);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.Interval interval57 = duration44.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime56);
        mutablePeriod7.setPeriod((org.joda.time.ReadableInterval) interval57);
        org.joda.time.DateTime dateTime59 = dateTime3.minus((org.joda.time.ReadablePeriod) mutablePeriod7);
        org.junit.Assert.assertNotNull(dateTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 27441 + "'", int4 == 27441);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(mutablePeriod18);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 23L + "'", long46 == 23L);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "PT86300S" + "'", str47, "PT86300S");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertNotNull(interval57);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test05362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05362");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes(15);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant17, readableInstant18, periodType19);
        org.joda.time.DurationFieldType durationFieldType22 = periodType19.getFieldType((int) (short) 0);
        java.lang.String str23 = periodType19.toString();
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 53, (long) (-1), periodType19, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType14.getField(chronology27);
        java.util.Locale locale30 = java.util.Locale.UK;
        java.lang.String str31 = locale30.getDisplayLanguage();
        int int32 = dateTimeField29.getMaximumTextLength(locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket33 = new org.joda.time.format.DateTimeParserBucket(3155695200000L, chronology12, locale30);
        org.joda.time.DateTimeField dateTimeField34 = chronology12.secondOfMinute();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean38 = localDate35.isSupported(dateTimeFieldType37);
        int int39 = localDate35.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight41 = localDate35.toDateMidnight(dateTimeZone40);
        org.joda.time.LocalDate.Property property42 = localDate35.year();
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.eras();
        long long51 = chronology46.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField52 = chronology46.halfdayOfDay();
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.monthOfYear();
        org.joda.time.DateTimeField dateTimeField55 = property54.getField();
        org.joda.time.LocalDate localDate56 = property54.roundCeilingCopy();
        org.joda.time.LocalDate localDate58 = localDate56.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate60 = localDate56.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate62 = localDate60.plusWeeks((int) (byte) 10);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Chronology chronology67 = instant66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.eras();
        long long72 = chronology67.add(0L, (long) 2022, (int) '4');
        org.joda.time.ReadableDuration readableDuration73 = null;
        org.joda.time.ReadableInstant readableInstant74 = null;
        org.joda.time.Period period75 = new org.joda.time.Period(readableDuration73, readableInstant74);
        int[] intArray78 = chronology67.get((org.joda.time.ReadablePeriod) period75, (long) 0, (long) 48);
        int[] intArray80 = dateTimeField52.addWrapField((org.joda.time.ReadablePartial) localDate60, 0, intArray78, 443);
        chronology12.validate((org.joda.time.ReadablePartial) localDate35, intArray80);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime(1380, 26527, 233, 38219999, 952, 350, 26456752, chronology12);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 38219999 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ISOChronology[UTC]" + "'", str13, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PeriodType[YearDayTime]" + "'", str23, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\u82f1\u6587" + "'", str31, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 4 + "'", int32 == 4);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 53 + "'", int39 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateMidnight41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(instant45);
        org.junit.Assert.assertNotNull(chronology46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 105144L + "'", long51 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(localDate56);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 105144L + "'", long72 == 105144L);
        org.junit.Assert.assertNotNull(intArray78);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray78), "[1, 1, 1, 0, 0, 0, 0, 48]");
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[1, 1, 1, 0, 0, 0, 0, 48]");
    }

    @Test
    public void test05363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05363");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        org.joda.time.DurationFieldType durationFieldType10 = dateTimeFieldType8.getRangeDurationType();
        mutableDateTime1.set(dateTimeFieldType8, 4);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundHalfEven();
        mutableDateTime14.setWeekyear(26360);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
    }

    @Test
    public void test05364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05364");
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(readableInstant7, readableInstant8, periodType9);
        org.joda.time.DurationFieldType durationFieldType12 = periodType9.getFieldType((int) (short) 0);
        java.lang.String str13 = periodType9.toString();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.Period period18 = new org.joda.time.Period((long) 53, (long) (-1), periodType9, chronology17);
        org.joda.time.Period period19 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType9);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        long long28 = chronology23.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField29 = chronology23.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(949680L, 100L, periodType9, chronology23);
        org.joda.time.DateTimeField dateTimeField32 = chronology23.yearOfEra();
        org.joda.time.DateTimeField dateTimeField33 = chronology23.millisOfDay();
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.PeriodType periodType40 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod(readableInstant38, readableInstant39, periodType40);
        org.joda.time.DurationFieldType durationFieldType43 = periodType40.getFieldType((int) (short) 0);
        java.lang.String str44 = periodType40.toString();
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        org.joda.time.Period period49 = new org.joda.time.Period((long) 53, (long) (-1), periodType40, chronology48);
        org.joda.time.LocalDate localDate50 = org.joda.time.LocalDate.now(chronology48);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 'a', chronology48);
        java.util.Locale.Builder builder52 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder53 = builder52.clear();
        java.util.Locale locale54 = java.util.Locale.GERMAN;
        java.lang.String str55 = locale54.getDisplayName();
        java.lang.String str56 = locale54.getISO3Language();
        java.lang.String str57 = locale54.getISO3Country();
        java.util.Locale.Builder builder58 = builder53.setLocale(locale54);
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str61 = locale59.getDisplayVariant(locale60);
        java.util.Locale.Builder builder62 = builder58.setLocale(locale60);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket63 = new org.joda.time.format.DateTimeParserBucket((long) 36, chronology48, locale60);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket64 = new org.joda.time.format.DateTimeParserBucket((long) 26211, chronology23, locale60);
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(chronology23);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "PeriodType[YearDayTime]" + "'", str13, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 105144L + "'", long28 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "PeriodType[YearDayTime]" + "'", str44, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(localDate50);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "de");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\u5fb7\u6587" + "'", str55, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "deu" + "'", str56, "deu");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "de");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(mutableDateTime65);
    }

    @Test
    public void test05365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05365");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        org.joda.time.Period period23 = period19.toPeriod();
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.Period period25 = period15.normalizedStandard(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = periodType24.indexOf(durationFieldType26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType24, chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime5.toMutableDateTime(chronology31);
        mutablePeriod2.setPeriod((long) 36946953, 960000L, chronology31);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.set(45);
        org.joda.time.MutableDateTime mutableDateTime43 = property40.roundFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 44, chronology49);
        org.joda.time.DateTimeField dateTimeField54 = dateTimeFieldType44.getField(chronology49);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) 100, 1L, periodType57);
        org.joda.time.Period period60 = period58.minusSeconds((-1));
        java.lang.String str61 = period58.toString();
        long long64 = chronology49.add((org.joda.time.ReadablePeriod) period58, (long) ' ', (int) 'a');
        org.joda.time.Period period66 = period58.minusHours((-292275054));
        org.joda.time.Period period68 = period66.minusHours(2000);
        int int69 = period66.getMinutes();
        org.joda.time.Period period70 = period66.toPeriod();
        mutableDateTime43.add((org.joda.time.ReadablePeriod) period70);
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime43.minuteOfHour();
        org.joda.time.Duration duration73 = mutablePeriod2.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime43);
        mutablePeriod2.addDays(302);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.099S" + "'", str22, "PT0.099S");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PT0.099S" + "'", str61, "PT0.099S");
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + (-9571L) + "'", long64 == (-9571L));
        org.junit.Assert.assertNotNull(period66);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 0 + "'", int69 == 0);
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(duration73);
    }

    @Test
    public void test05366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05366");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean3 = localDate1.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfEra();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str10 = duration9.toString();
        org.joda.time.Instant instant11 = instant5.minus((org.joda.time.ReadableDuration) duration9);
        int int12 = property4.getDifference((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant16 = instant5.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours22 = duration21.toStandardHours();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration27 = duration18.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = duration29.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.yearOfCentury();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration45 = duration38.minus((org.joda.time.ReadableDuration) duration44);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration38);
        boolean boolean47 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration38);
        boolean boolean48 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant49 = instant16.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration57 = duration53.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableDuration) duration57);
        org.joda.time.Period period60 = period58.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now();
        mutableDateTime61.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime64 = mutableDateTime61.copy();
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime61.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime66 = property65.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime67 = property65.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(readableInstant71, readableInstant72, periodType73);
        org.joda.time.DurationFieldType durationFieldType76 = periodType73.getFieldType((int) (short) 0);
        java.lang.String str77 = periodType73.toString();
        org.joda.time.Instant instant78 = new org.joda.time.Instant();
        org.joda.time.Instant instant80 = instant78.withMillis(0L);
        org.joda.time.Chronology chronology81 = instant80.getChronology();
        org.joda.time.Period period82 = new org.joda.time.Period((long) 53, (long) (-1), periodType73, chronology81);
        org.joda.time.DateTimeField dateTimeField83 = dateTimeFieldType68.getField(chronology81);
        java.util.Locale locale84 = java.util.Locale.UK;
        java.lang.String str85 = locale84.getDisplayLanguage();
        int int86 = dateTimeField83.getMaximumTextLength(locale84);
        mutableDateTime67.setRounding(dateTimeField83);
        org.joda.time.Duration duration88 = period58.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime67);
        boolean boolean89 = instant49.isBefore((org.joda.time.ReadableInstant) mutableDateTime67);
        mutableDateTime67.addWeekyears(12);
        org.joda.time.DateTimeZone dateTimeZone92 = mutableDateTime67.getZone();
        org.joda.time.MutableDateTime mutableDateTime93 = new org.joda.time.MutableDateTime((-8553580955L), dateTimeZone92);
        long long94 = mutableDateTime93.getMillis();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT86400S" + "'", str10, "PT86400S");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT86400S" + "'", str19, "PT86400S");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(hours22);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 21 + "'", int25 == 21);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(period30);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(mutableDateTime66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(dateTimeFieldType68);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "PeriodType[YearDayTime]" + "'", str77, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant80);
        org.junit.Assert.assertNotNull(chronology81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\u82f1\u6587" + "'", str85, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int86 + "' != '" + 4 + "'", int86 == 4);
        org.junit.Assert.assertNotNull(duration88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(dateTimeZone92);
        org.junit.Assert.assertTrue("'" + long94 + "' != '" + (-8553580955L) + "'", long94 == (-8553580955L));
    }

    @Test
    public void test05367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05367");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime1.withFieldAdded(durationFieldType2, (int) (short) -1);
        int int5 = localDateTime4.getEra();
        java.io.IOException iOException8 = new java.io.IOException("");
        java.io.IOException iOException9 = new java.io.IOException("2022-02-22T10:15:44.882", (java.lang.Throwable) iOException8);
        boolean boolean10 = localDateTime4.equals((java.lang.Object) iOException9);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withMillisOfDay(26150);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone13.getMillisKeepLocal(dateTimeZone15, (long) 44);
        java.lang.String str19 = dateTimeZone15.getName(0L);
        org.joda.time.DateTime dateTime20 = localDateTime4.toDateTime(dateTimeZone15);
        java.lang.String str21 = dateTimeZone15.getID();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime23 = instant22.toMutableDateTime();
        org.joda.time.Instant instant24 = instant22.toInstant();
        int int25 = dateTimeZone15.getOffset((org.joda.time.ReadableInstant) instant24);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone15);
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
        org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 44L + "'", long17 == 44L);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00" + "'", str19, "+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
    }

    @Test
    public void test05368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05368");
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod(999, 12, 8, (int) (byte) 10, 5, (-292275054), 15, 50);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.PeriodType periodType15 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod(readableInstant13, readableInstant14, periodType15);
        org.joda.time.DurationFieldType durationFieldType18 = periodType15.getFieldType((int) (short) 0);
        java.lang.String str19 = periodType15.toString();
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.Period period24 = new org.joda.time.Period((long) 53, (long) (-1), periodType15, chronology23);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType10.getField(chronology23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        java.lang.String str31 = chronology30.toString();
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType10.getField(chronology30);
        org.joda.time.DurationField durationField33 = chronology30.centuries();
        mutablePeriod8.setPeriod(60000L, chronology30);
        org.joda.time.DateTimeField dateTimeField35 = chronology30.minuteOfDay();
        java.util.Locale locale37 = null;
        java.lang.String str38 = dateTimeField35.getAsText(26266, locale37);
        org.joda.time.DateTimeZone dateTimeZone39 = null;
        org.joda.time.LocalTime localTime40 = new org.joda.time.LocalTime(dateTimeZone39);
        org.joda.time.LocalTime localTime42 = localTime40.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime44 = localTime42.withHourOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int46 = localTime42.get(dateTimeFieldType45);
        org.joda.time.LocalTime.Property property47 = localTime42.minuteOfHour();
        org.joda.time.LocalTime.Property property48 = localTime42.millisOfDay();
        org.joda.time.tz.NameProvider nameProvider50 = org.joda.time.DateTimeZone.getNameProvider();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(readableInstant54, readableInstant55, periodType56);
        org.joda.time.DurationFieldType durationFieldType59 = periodType56.getFieldType((int) (short) 0);
        java.lang.String str60 = periodType56.toString();
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.Chronology chronology64 = instant63.getChronology();
        org.joda.time.Period period65 = new org.joda.time.Period((long) 53, (long) (-1), periodType56, chronology64);
        org.joda.time.DateTimeField dateTimeField66 = dateTimeFieldType51.getField(chronology64);
        java.util.Locale locale67 = java.util.Locale.UK;
        java.lang.String str68 = locale67.getDisplayLanguage();
        int int69 = dateTimeField66.getMaximumTextLength(locale67);
        java.lang.String str70 = locale67.getScript();
        java.lang.String str73 = nameProvider50.getShortName(locale67, "2022-02-22T07:15:58.735Z", "DurationField[years]");
        java.util.Locale.Builder builder74 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder75 = builder74.clear();
        java.util.Locale locale76 = builder75.build();
        boolean boolean77 = locale76.hasExtensions();
        java.lang.String str79 = locale76.getExtension('x');
        java.util.Locale locale80 = locale76.stripExtensions();
        java.lang.String str83 = nameProvider50.getName(locale80, "P2DT4H", "2022-02-22T10:16:14.581");
        java.util.Locale locale84 = null;
        java.lang.String str87 = nameProvider50.getName(locale84, "2022-02-22T10:15:50.303", "2022-02-22T10:15:57.017");
        java.util.Locale locale90 = new java.util.Locale("hourOfDay", "2022-02-22T07:16:18.034Z");
        java.lang.String str91 = locale90.toLanguageTag();
        java.lang.String str94 = nameProvider50.getName(locale90, "2022-02-22T07:17:40.472Z", "");
        java.lang.String str95 = dateTimeField35.getAsShortText((org.joda.time.ReadablePartial) localTime42, 26265573, locale90);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime96 = new org.joda.time.MutableDateTime((java.lang.Object) locale90);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.util.Locale");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PeriodType[YearDayTime]" + "'", str19, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "ISOChronology[UTC]" + "'", str31, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "26266" + "'", str38, "26266");
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 21 + "'", int46 == 21);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(nameProvider50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(periodType56);
        org.junit.Assert.assertNotNull(durationFieldType59);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "PeriodType[YearDayTime]" + "'", str60, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "English" + "'", str68, "English");
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 4 + "'", int69 == 4);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNull(str79);
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "");
        org.junit.Assert.assertNull(str83);
        org.junit.Assert.assertNull(str87);
        org.junit.Assert.assertEquals(locale90.toString(), "hourofday_2022-02-22T07:16:18.034Z");
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "und" + "'", str91, "und");
        org.junit.Assert.assertNull(str94);
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "26265573" + "'", str95, "26265573");
    }

    @Test
    public void test05369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05369");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        int int17 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.withEarlierOffsetAtOverlap();
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime18.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime13.toMutableDateTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone21);
        java.lang.Object obj27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDate localDate32 = dateTime28.toLocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfMonth();
        java.util.Date date34 = localDate32.toDate();
        org.joda.time.LocalDate.Property property35 = localDate32.dayOfYear();
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = property35.getAsText(locale36);
        java.lang.String str38 = dateTimeZone21.getShortName(360000000L, locale36);
        java.lang.String str39 = property4.getAsText(locale36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate41 = property4.setCopy(133);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 133 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2022 + "'", int17 == 2022);
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "2022-02-22T07:22:21.632Z" + "'", str19, "2022-02-22T07:22:21.632Z");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(date34);
        org.junit.Assert.assertEquals(date34.toString(), "Tue Feb 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "53" + "'", str37, "53");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00" + "'", str38, "+00:00");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Dienstag" + "'", str39, "Dienstag");
    }

    @Test
    public void test05370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05370");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        long long9 = chronology4.add(0L, (long) 2022, (int) '4');
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(0L, chronology4);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMinutes(15);
        org.joda.time.DateTime dateTime24 = localDateTime17.toDateTime((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime26 = localDateTime17.toDateTime(dateTimeZone25);
        org.joda.time.DateTime dateTime27 = dateTime12.withZoneRetainFields(dateTimeZone25);
        org.joda.time.DateTime dateTime29 = dateTime27.withYearOfCentury(54);
        org.joda.time.DateTime dateTime32 = dateTime27.withDurationAdded((long) 26150803, 7);
        org.joda.time.DateTime dateTime33 = dateTime27.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getDisplayName();
        java.lang.String str39 = dateTimeZone35.getName(100L, locale37);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime(948227L, dateTimeZone35);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.year();
        org.joda.time.ReadableInstant readableInstant42 = null;
        mutableDateTime40.setMillis(readableInstant42);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        int int46 = dateTime45.getYearOfCentury();
        int int47 = dateTime45.getWeekyear();
        org.joda.time.DateTime dateTime49 = dateTime45.plus((long) 15);
        org.joda.time.DateTime.Property property50 = dateTime45.year();
        org.joda.time.DateTime dateTime51 = property50.roundHalfFloorCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = null;
        org.joda.time.format.DateTimeParser dateTimeParser53 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter52, dateTimeParser53);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.eras();
        long long63 = chronology58.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter64 = dateTimeFormatter54.withChronology(chronology58);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime(chronology58);
        org.joda.time.DateTimeField dateTimeField66 = chronology58.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone68 = dateTimeZone67.toTimeZone();
        long long70 = dateTimeZone67.previousTransition(100L);
        int int72 = dateTimeZone67.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology73 = chronology58.withZone(dateTimeZone67);
        java.util.TimeZone timeZone74 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTime dateTime75 = dateTime51.toDateTime(dateTimeZone67);
        mutableDateTime40.setZoneRetainFields(dateTimeZone67);
        org.joda.time.DateTime dateTime77 = dateTime33.toDateTime(dateTimeZone67);
        org.joda.time.DateTime dateTime78 = localDateTime10.toDateTime(dateTimeZone67);
        long long82 = dateTimeZone67.convertLocalToUTC((long) 62354, true, 53892L);
        long long85 = dateTimeZone67.convertLocalToUTC((long) 26275855, false);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone67);
        org.junit.Assert.assertNotNull(instant3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 105144L + "'", long9 == 105144L);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "German" + "'", str38, "German");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "+00:00" + "'", str39, "+00:00");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 22 + "'", int46 == 22);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 2022 + "'", int47 == 2022);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 105144L + "'", long63 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter64);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L + "'", long70 == 100L);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 62354L + "'", long82 == 62354L);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 26275855L + "'", long85 == 26275855L);
    }

    @Test
    public void test05371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05371");
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration10, readableInstant11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period18 = period16.minusSeconds((-1));
        java.lang.String str19 = period16.toString();
        org.joda.time.Period period20 = period16.toPeriod();
        org.joda.time.PeriodType periodType21 = period16.getPeriodType();
        org.joda.time.Period period22 = period12.normalizedStandard(periodType21);
        java.lang.String str23 = periodType21.getName();
        java.lang.String str24 = periodType21.toString();
        java.lang.String str25 = periodType21.getName();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(6, 13, 38, 62234, 1439, 47831274, 43, 26241, periodType21);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException30 = new java.io.IOException("");
        java.io.IOException iOException31 = new java.io.IOException((java.lang.Throwable) iOException30);
        boolean boolean32 = mutableDateTime28.equals((java.lang.Object) iOException30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.DurationFieldType durationFieldType37 = dateTimeFieldType35.getRangeDurationType();
        mutableDateTime28.set(dateTimeFieldType35, 4);
        mutableDateTime28.addMillis(26195);
        org.joda.time.Chronology chronology42 = mutableDateTime28.getChronology();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 105195495, (long) 26486341, periodType21, chronology42);
        mutablePeriod43.addWeeks(0);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT0.099S" + "'", str19, "PT0.099S");
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Standard" + "'", str23, "Standard");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PeriodType[Standard]" + "'", str24, "PeriodType[Standard]");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Standard" + "'", str25, "Standard");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(chronology42);
    }

    @Test
    public void test05372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05372");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        int int20 = mutableDateTime0.getWeekyear();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.LocalDate localDate24 = property22.roundCeilingCopy();
        org.joda.time.LocalDate localDate26 = localDate24.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone27);
        org.joda.time.DateMidnight dateMidnight29 = localDate26.toDateMidnight(dateTimeZone27);
        mutableDateTime0.setZoneRetainFields(dateTimeZone27);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = org.joda.time.DateTime.now(dateTimeZone27);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(dateMidnight29);
        org.junit.Assert.assertNotNull(dateTime32);
    }

    @Test
    public void test05373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05373");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.Interval interval12 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration7.toDuration();
        org.joda.time.Period period14 = duration7.toPeriod();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(15);
        org.joda.time.DateTime dateTime28 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = dateTime16.withZoneRetainFields(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        mutableDateTime32.addSeconds(0);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours40 = duration39.toStandardHours();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        int int43 = dateTime42.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.months();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime52, periodType53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime46, periodType53);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime32, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime57 = dateTime31.plus((org.joda.time.ReadableDuration) duration56);
        int int58 = dateTime57.getWeekyear();
        org.joda.time.Period period59 = duration7.toPeriodTo((org.joda.time.ReadableInstant) dateTime57);
        long long60 = duration7.getStandardHours();
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 21 + "'", int11 == 21);
        org.junit.Assert.assertNotNull(interval12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(duration39);
        org.junit.Assert.assertNotNull(hours40);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 21 + "'", int43 == 21);
        org.junit.Assert.assertNotNull(instant49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(periodType53);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1970 + "'", int58 == 1970);
        org.junit.Assert.assertNotNull(period59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 24L + "'", long60 == 24L);
    }

    @Test
    public void test05374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05374");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        int int15 = dateTime14.getSecondOfDay();
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime14.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        boolean boolean22 = dateTime20.equals((java.lang.Object) (-1L));
        java.util.GregorianCalendar gregorianCalendar23 = dateTime20.toGregorianCalendar();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime26 = dateTime20.withField(dateTimeFieldType24, 22);
        org.joda.time.DateTime dateTime28 = dateTime14.withField(dateTimeFieldType24, 572);
        org.joda.time.DateTimeZone dateTimeZone29 = null;
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(dateTimeZone29);
        org.joda.time.LocalTime localTime32 = localTime30.minusHours((int) (byte) 100);
        int int33 = localTime32.getMinuteOfHour();
        java.lang.String str35 = localTime32.toString("1");
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period42 = duration41.toPeriod();
        org.joda.time.Duration duration45 = duration41.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant46 = instant39.plus((org.joda.time.ReadableDuration) duration45);
        long long47 = instant46.getMillis();
        org.joda.time.Chronology chronology48 = instant46.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.months();
        org.joda.time.Period period50 = new org.joda.time.Period((-205878993L), chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone52 = chronology48.getZone();
        org.joda.time.DateTime dateTime53 = localTime32.toDateTimeToday(dateTimeZone52);
        long long55 = dateTimeZone52.previousTransition((long) (-3228));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate((java.lang.Object) 572, dateTimeZone52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 26541 + "'", int15 == 26541);
        org.junit.Assert.assertNotNull(yearMonthDay16);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(gregorianCalendar23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localTime32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 22 + "'", int33 == 22);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1" + "'", str35, "1");
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(period42);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 86400000L + "'", long47 == 86400000L);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-3228L) + "'", long55 == (-3228L));
    }

    @Test
    public void test05375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05375");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter3.withZoneUTC();
        boolean boolean15 = dateTimeFormatter3.isPrinter();
        org.joda.time.Chronology chronology16 = dateTimeFormatter3.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter3.withOffsetParsed();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean28 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration29 = duration19.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        int int32 = dateTime31.getYearOfCentury();
        int int33 = dateTime31.getWeekyear();
        org.joda.time.DateTime dateTime35 = dateTime31.plus((long) 15);
        org.joda.time.DateTime.Property property36 = dateTime31.year();
        org.joda.time.DateTime dateTime37 = property36.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property38 = dateTime37.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime37.toMutableDateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime43 = dateTime41.withZoneRetainFields(dateTimeZone42);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtCurrentTime(dateTimeZone46);
        int int49 = dateTime43.compareTo((org.joda.time.ReadableInstant) dateTime48);
        int int50 = dateTime48.getCenturyOfEra();
        org.joda.time.DateTime dateTime52 = dateTime48.withWeekyear(44);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(readableInstant55, readableInstant56, periodType57);
        org.joda.time.DurationFieldType durationFieldType60 = periodType57.getFieldType((int) (short) 0);
        java.lang.String str61 = periodType57.toString();
        org.joda.time.Instant instant62 = new org.joda.time.Instant();
        org.joda.time.Instant instant64 = instant62.withMillis(0L);
        org.joda.time.Chronology chronology65 = instant64.getChronology();
        org.joda.time.Period period66 = new org.joda.time.Period((long) 53, (long) (-1), periodType57, chronology65);
        org.joda.time.PeriodType periodType67 = periodType57.withMonthsRemoved();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableInstant) dateTime48, periodType57);
        org.joda.time.Period period69 = period68.toPeriod();
        org.joda.time.Period period71 = period68.minusHours(26184);
        org.joda.time.PeriodType periodType72 = period71.getPeriodType();
        java.lang.Object obj73 = null;
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime(obj73);
        boolean boolean76 = dateTime74.isBefore((long) 7);
        java.lang.String str77 = dateTime74.toString();
        org.joda.time.DateTime dateTime79 = dateTime74.minus((long) 7);
        org.joda.time.Instant instant80 = new org.joda.time.Instant();
        org.joda.time.Instant instant82 = instant80.withMillis(0L);
        org.joda.time.Chronology chronology83 = instant82.getChronology();
        org.joda.time.DateTime dateTime84 = dateTime74.toDateTime(chronology83);
        org.joda.time.Period period85 = duration29.toPeriod(periodType72, chronology83);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter86 = dateTimeFormatter3.withChronology(chronology83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime87 = org.joda.time.LocalDateTime.parse("2022-02-22T07:16:52.687Z", dateTimeFormatter3);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 105144L + "'", long12 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 22 + "'", int32 == 22);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2022 + "'", int33 == 2022);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
        org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + (-1) + "'", int49 == (-1));
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 20 + "'", int50 == 20);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PeriodType[YearDayTime]" + "'", str61, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(periodType72);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "2022-02-22T07:22:21.839Z" + "'", str77, "2022-02-22T07:22:21.839Z");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(instant82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTime84);
        org.junit.Assert.assertNotNull(period85);
        org.junit.Assert.assertNotNull(dateTimeFormatter86);
    }

    @Test
    public void test05376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05376");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        mutableDateTime0.setWeekyear((int) 'u');
        java.lang.Object obj8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime9.copy();
        mutableDateTime9.setDate((long) '#');
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean18 = localDate15.isSupported(dateTimeFieldType17);
        int int19 = localDate15.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight21 = localDate15.toDateMidnight(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime9.toDateTime(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(obj8, dateTimeZone20);
        java.lang.String str26 = dateTimeZone20.getName(105144L);
        long long28 = dateTimeZone20.nextTransition(3155760000000L);
        mutableDateTime0.setZone(dateTimeZone20);
        int int30 = mutableDateTime0.getSecondOfMinute();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setSecondOfMinute(83100000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 83100000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3155760000000L + "'", long28 == 3155760000000L);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 21 + "'", int30 == 21);
    }

    @Test
    public void test05377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05377");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfYear();
        org.joda.time.Period period6 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period8 = period6.withDays(2022);
        org.joda.time.DateTime dateTime10 = dateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period8, (int) (short) 100);
        org.joda.time.DateTime dateTime11 = dateTime10.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime12.copy();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime12.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        mutableDateTime18.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime18.copy();
        mutableDateTime18.setDate((long) '#');
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean27 = localDate24.isSupported(dateTimeFieldType26);
        int int28 = localDate24.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight30 = localDate24.toDateMidnight(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = mutableDateTime18.toDateTime(dateTimeZone29);
        org.joda.time.LocalDate localDate32 = org.joda.time.LocalDate.now(dateTimeZone29);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) 100, 1L, periodType35);
        org.joda.time.PeriodType periodType37 = period36.getPeriodType();
        boolean boolean38 = dateTimeZone29.equals((java.lang.Object) periodType37);
        mutableDateTime12.setZoneRetainFields(dateTimeZone29);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate(dateTimeZone29);
        org.joda.time.DateTime dateTime41 = dateTime11.withZone(dateTimeZone29);
        int int42 = dateTime41.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime44 = dateTime41.withMinuteOfHour(256);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 256 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 53 + "'", int28 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(dateMidnight30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDate32);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
    }

    @Test
    public void test05378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05378");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.DateTime.Property property40 = dateTime30.centuryOfEra();
        org.joda.time.DateTime dateTime41 = property40.roundCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str46 = duration45.toString();
        mutableDateTime43.add((org.joda.time.ReadableDuration) duration45, 8);
        mutableDateTime43.addSeconds(1970);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime43.monthOfYear();
        mutableDateTime43.addHours(738);
        int int54 = dateTime41.compareTo((org.joda.time.ReadableInstant) mutableDateTime43);
        long long55 = dateTime41.getMillis();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PT86400S" + "'", str46, "PT86400S");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 946684800000L + "'", long55 == 946684800000L);
    }

    @Test
    public void test05379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05379");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = duration1.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        boolean boolean19 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.Duration duration21 = duration10.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime22.copy();
        mutableDateTime22.setDate((long) '#');
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        int int32 = localDate28.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight34 = localDate28.toDateMidnight(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = mutableDateTime22.toDateTime(dateTimeZone33);
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) mutableDateTime22);
        org.joda.time.MutablePeriod mutablePeriod37 = mutablePeriod36.copy();
        mutablePeriod37.clear();
        mutablePeriod37.setPeriod(21L, (long) '#');
        org.joda.time.MutablePeriod mutablePeriod42 = mutablePeriod37.toMutablePeriod();
        mutablePeriod37.setMinutes(46);
        mutablePeriod37.addDays(2320);
        mutablePeriod37.addSeconds(62172);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53 + "'", int32 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateMidnight34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(mutablePeriod37);
        org.junit.Assert.assertNotNull(mutablePeriod42);
    }

    @Test
    public void test05380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05380");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        int int6 = mutableDateTime5.getDayOfMonth();
        int int7 = mutableDateTime5.getMonthOfYear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.dayOfYear();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(4801284961717L);
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(10, 1, 53, 15);
        boolean boolean16 = duration10.equals((java.lang.Object) 53);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj18 = mutableDateTime17.clone();
        mutableDateTime17.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.add(1L);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        long long28 = dateTimeZone24.getMillisKeepLocal(dateTimeZone26, (long) 44);
        org.joda.time.DateTime dateTime29 = org.joda.time.DateTime.now(dateTimeZone24);
        mutableDateTime23.setZoneRetainFields(dateTimeZone24);
        mutableDateTime23.addSeconds((int) (short) 10);
        org.joda.time.Interval interval33 = duration10.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.Period period34 = duration10.toPeriod();
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 22 + "'", int6 == 22);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 2 + "'", int7 == 2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(obj18);
// flaky:         org.junit.Assert.assertEquals(obj18.toString(), "2022-02-22T07:22:22.094Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "2022-02-22T07:22:22.094Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "2022-02-22T07:22:22.094Z");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
        org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 44L + "'", long28 == 44L);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(interval33);
        org.junit.Assert.assertNotNull(period34);
    }

    @Test
    public void test05381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05381");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.LocalTime localTime6 = property4.addCopy(0);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.DateTime dateTime8 = localTime6.toDateTimeToday(dateTimeZone7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime((long) (short) 100, chronology10);
        int int12 = localTime11.getMillisOfDay();
        org.joda.time.LocalTime.Property property13 = localTime11.millisOfSecond();
        org.joda.time.DurationField durationField14 = property13.getLeapDurationField();
        org.joda.time.LocalTime localTime16 = property13.setCopy(48);
        boolean boolean17 = localTime6.isEqual((org.joda.time.ReadablePartial) localTime16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period23 = period21.minusSeconds((-1));
        java.lang.String str24 = period21.toString();
        org.joda.time.Duration duration25 = period21.toStandardDuration();
        org.joda.time.LocalTime localTime27 = localTime16.withPeriodAdded((org.joda.time.ReadablePeriod) period21, 27);
        org.joda.time.LocalTime.Property property28 = localTime27.millisOfSecond();
        org.joda.time.LocalTime localTime29 = property28.withMaximumValue();
        org.joda.time.LocalTime localTime30 = property28.withMaximumValue();
        int int31 = localTime30.getMillisOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 100 + "'", int3 == 100);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 100 + "'", int12 == 100);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNull(durationField14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.099S" + "'", str24, "PT0.099S");
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(localTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 86397999 + "'", int31 == 86397999);
    }

    @Test
    public void test05382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05382");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        long long7 = mutableDateTime6.getMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean15 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration14);
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (byte) 0);
        long long26 = dateTimeField24.roundHalfEven((long) 1);
        int int27 = dateTime17.get(dateTimeField24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) 'a');
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getDisplayName();
        java.lang.String str38 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime32, 53, locale36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusMillis((int) (byte) 0);
        int int52 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        boolean boolean53 = duration9.equals((java.lang.Object) int52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        int int56 = dateTime55.getSecondOfMinute();
        int int57 = dateTime55.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant58, readableInstant59, periodType60);
        mutablePeriod61.setYears((int) '#');
        mutablePeriod61.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime66 = dateTime55.plus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration9);
        java.lang.Object obj69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(obj69);
        boolean boolean72 = dateTime70.isBefore((long) 7);
        java.lang.String str73 = dateTime70.toString();
        org.joda.time.DateTime dateTime75 = dateTime70.minus((long) 7);
        org.joda.time.Instant instant76 = new org.joda.time.Instant();
        org.joda.time.Instant instant78 = instant76.withMillis(0L);
        org.joda.time.Chronology chronology79 = instant78.getChronology();
        org.joda.time.DateTime dateTime80 = dateTime70.toDateTime(chronology79);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTime dateTime83 = dateTime81.minusDays(2100);
        int int84 = mutableDateTime6.compareTo((org.joda.time.ReadableInstant) dateTime81);
        int int85 = mutableDateTime6.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property86 = mutableDateTime6.era();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime6.setDateTime(832, 62467, 26510973, 26373, 82800, 37219474, 26148950);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26373 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 948227L + "'", long7 == 948227L);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\u5fb7\u6587" + "'", str37, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "53" + "'", str38, "53");
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(period41);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 1 + "'", int52 == 1);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int56 + "' != '" + 22 + "'", int56 == 22);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 2022 + "'", int57 == 2022);
        org.junit.Assert.assertNotNull(periodType60);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "2022-02-22T07:22:22.127Z" + "'", str73, "2022-02-22T07:22:22.127Z");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTime80);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertTrue("'" + int84 + "' != '" + (-1) + "'", int84 == (-1));
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 70 + "'", int85 == 70);
        org.junit.Assert.assertNotNull(property86);
    }

    @Test
    public void test05383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05383");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        int int2 = mutableDateTime0.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = null;
        org.joda.time.LocalTime localTime4 = new org.joda.time.LocalTime(dateTimeZone3);
        org.joda.time.LocalTime localTime6 = localTime4.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime8 = localTime6.withHourOfDay(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.secondOfMinute();
        int int10 = localTime6.get(dateTimeFieldType9);
        org.joda.time.Period period12 = org.joda.time.Period.weeks(161);
        org.joda.time.LocalTime localTime13 = localTime6.minus((org.joda.time.ReadablePeriod) period12);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period12);
        java.util.GregorianCalendar gregorianCalendar15 = mutableDateTime0.toGregorianCalendar();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime16.copy();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfYear();
        java.lang.String str22 = property21.getAsText();
        org.joda.time.MutableDateTime mutableDateTime24 = property21.add((long) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getYearOfCentury();
        int int28 = dateTime26.getWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime26.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property30 = dateTime26.yearOfEra();
        org.joda.time.DateTime dateTime31 = property30.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime32 = property30.roundHalfEvenCopy();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours35 = duration34.toStandardHours();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        int int38 = dateTime37.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime37);
        mutablePeriod39.addSeconds(292278993);
        mutablePeriod39.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime45 = dateTime32.minus((org.joda.time.ReadablePeriod) mutablePeriod39);
        org.joda.time.DateTime dateTime48 = dateTime32.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration58 = duration55.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean59 = duration53.isLongerThan((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration60 = duration50.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration65 = duration62.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean66 = duration53.equals((java.lang.Object) duration62);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime48, (org.joda.time.ReadableDuration) duration53);
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Instant instant69 = new org.joda.time.Instant();
        org.joda.time.Instant instant71 = instant69.withMillis(0L);
        org.joda.time.Chronology chronology72 = instant71.getChronology();
        org.joda.time.DurationField durationField73 = chronology72.eras();
        org.joda.time.LocalTime localTime74 = org.joda.time.LocalTime.now(chronology72);
        org.joda.time.Period period75 = duration53.toPeriod(periodType68, chronology72);
        org.joda.time.DurationFieldType durationFieldType77 = period75.getFieldType(1);
        mutableDateTime24.add(durationFieldType77, 61);
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime24.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime81 = property80.getMutableDateTime();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime81);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setDayOfMonth(26456752);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26456752 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 2022 + "'", int2 == 2022);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(gregorianCalendar15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "53" + "'", str22, "53");
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 22 + "'", int27 == 22);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 2022 + "'", int28 == 2022);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(hours35);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 22 + "'", int38 == 22);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(chronology72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(localTime74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(mutableDateTime81);
    }

    @Test
    public void test05384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05384");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration15, readableInstant16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period23 = period21.minusSeconds((-1));
        java.lang.String str24 = period21.toString();
        org.joda.time.Period period25 = period21.toPeriod();
        org.joda.time.PeriodType periodType26 = period21.getPeriodType();
        org.joda.time.Period period27 = period17.normalizedStandard(periodType26);
        org.joda.time.DurationFieldType durationFieldType28 = null;
        int int29 = periodType26.indexOf(durationFieldType28);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.eras();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now(chronology33);
        org.joda.time.DurationField durationField36 = chronology33.eras();
        org.joda.time.DateTimeField dateTimeField37 = chronology33.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType26, chronology33);
        org.joda.time.MutableDateTime mutableDateTime39 = mutableDateTime7.toMutableDateTime(chronology33);
        mutablePeriod4.setPeriod((long) 36946953, 960000L, chronology33);
        org.joda.time.Period period41 = new org.joda.time.Period(1011879L, periodType1, chronology33);
        java.lang.String str42 = periodType1.getName();
        org.junit.Assert.assertNotNull(periodType1);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "PT0.099S" + "'", str24, "PT0.099S");
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(periodType26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(localTime35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "YearDay" + "'", str42, "YearDay");
    }

    @Test
    public void test05385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05385");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration16 = duration12.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Period period19 = period17.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        mutableDateTime20.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime20.copy();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime20.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime26 = property24.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.PeriodType periodType32 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(readableInstant30, readableInstant31, periodType32);
        org.joda.time.DurationFieldType durationFieldType35 = periodType32.getFieldType((int) (short) 0);
        java.lang.String str36 = periodType32.toString();
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Chronology chronology40 = instant39.getChronology();
        org.joda.time.Period period41 = new org.joda.time.Period((long) 53, (long) (-1), periodType32, chronology40);
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType27.getField(chronology40);
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = locale43.getDisplayLanguage();
        int int45 = dateTimeField42.getMaximumTextLength(locale43);
        mutableDateTime26.setRounding(dateTimeField42);
        org.joda.time.Duration duration47 = period17.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime26.centuryOfEra();
        int int49 = mutableDateTime26.getYear();
        int int50 = dateTime7.compareTo((org.joda.time.ReadableInstant) mutableDateTime26);
        mutableDateTime26.setMinuteOfHour(23);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        mutableDateTime53.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime53.copy();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime53.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime53.dayOfYear();
        java.lang.String str59 = property58.getAsText();
        org.joda.time.MutableDateTime mutableDateTime61 = property58.add((long) (short) 0);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime61.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime63 = mutableDateTime61.toMutableDateTime();
        mutableDateTime61.setYear(62254);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(readableInstant69, readableInstant70, periodType71);
        org.joda.time.DurationFieldType durationFieldType74 = periodType71.getFieldType((int) (short) 0);
        java.lang.String str75 = periodType71.toString();
        org.joda.time.Instant instant76 = new org.joda.time.Instant();
        org.joda.time.Instant instant78 = instant76.withMillis(0L);
        org.joda.time.Chronology chronology79 = instant78.getChronology();
        org.joda.time.Period period80 = new org.joda.time.Period((long) 53, (long) (-1), periodType71, chronology79);
        org.joda.time.DateTimeField dateTimeField81 = dateTimeFieldType66.getField(chronology79);
        org.joda.time.DateTimeField dateTimeField82 = chronology79.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone83 = chronology79.getZone();
        long long85 = dateTimeZone83.previousTransition((long) 62262);
        mutableDateTime61.setZoneRetainFields(dateTimeZone83);
        int int87 = mutableDateTime61.getDayOfMonth();
        mutableDateTime26.setTime((org.joda.time.ReadableInstant) mutableDateTime61);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(periodType32);
        org.junit.Assert.assertNotNull(durationFieldType35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PeriodType[YearDayTime]" + "'", str36, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u82f1\u6587" + "'", str44, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 4 + "'", int45 == 4);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2022 + "'", int49 == 2022);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + (-1) + "'", int50 == (-1));
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "53" + "'", str59, "53");
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime63);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(durationFieldType74);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "PeriodType[YearDayTime]" + "'", str75, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant78);
        org.junit.Assert.assertNotNull(chronology79);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 62262L + "'", long85 == 62262L);
        org.junit.Assert.assertTrue("'" + int87 + "' != '" + 22 + "'", int87 == 22);
    }

    @Test
    public void test05386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05386");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property4 = localDate3.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean6 = localDate3.isSupported(dateTimeFieldType5);
        org.joda.time.Chronology chronology7 = localDate3.getChronology();
        org.joda.time.MutablePeriod mutablePeriod8 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology7);
        boolean boolean9 = durationFieldType0.isSupported(chronology7);
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime14 = dateTime12.withZoneRetainFields(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone17);
        int int20 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime22 = dateTime19.minusWeeks(44);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(15);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        java.lang.String str28 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.dayOfYear();
        org.joda.time.DateTime dateTime30 = dateTime19.withChronology(chronology27);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        org.joda.time.DurationFieldType durationFieldType37 = periodType34.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType38 = periodType34.withMillisRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime30, readableDuration31, periodType38);
        org.joda.time.Period period40 = new org.joda.time.Period(0L, periodType38);
        org.joda.time.DurationFieldType durationFieldType41 = org.joda.time.DurationFieldType.weekyears();
        int int42 = period40.indexOf(durationFieldType41);
        int[] intArray44 = chronology7.get((org.joda.time.ReadablePeriod) period40, 984293L);
        org.joda.time.DateTimeField dateTimeField45 = chronology7.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField46 = chronology7.weekyearOfCentury();
        java.lang.String str47 = dateTimeField46.toString();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
        org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ISOChronology[UTC]" + "'", str28, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(periodType34);
        org.junit.Assert.assertNotNull(durationFieldType37);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(durationFieldType41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(intArray44);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray44), "[0, 0, 0, 16, 24]");
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str47, "DateTimeField[weekyearOfCentury]");
    }

    @Test
    public void test05387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05387");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone17 = chronology13.getZone();
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime(dateTimeZone17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime23.copy();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime28 = property27.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime31 = property27.set(1);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getYearOfCentury();
        int int35 = dateTime33.getWeekyear();
        org.joda.time.DateTime dateTime36 = dateTime33.withEarlierOffsetAtOverlap();
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.MutableDateTime mutableDateTime38 = dateTime36.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        boolean boolean40 = dateTimeZone39.isFixed();
        mutableDateTime38.setZoneRetainFields(dateTimeZone39);
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime31.toMutableDateTime(dateTimeZone39);
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(dateTimeZone39);
        long long46 = dateTimeZone39.convertLocalToUTC(2100L, true);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((java.lang.Object) instant21, dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now(dateTimeZone39);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime(dateTimeZone39);
        int int50 = localDateTime18.compareTo((org.joda.time.ReadablePartial) localDateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(mutableDateTime29);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 22 + "'", int34 == 22);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2022 + "'", int35 == 2022);
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "2022-02-22T07:22:22.475Z" + "'", str37, "2022-02-22T07:22:22.475Z");
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2100L + "'", long46 == 2100L);
        org.junit.Assert.assertNotNull(localDateTime48);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
    }

    @Test
    public void test05388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05388");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType4);
        org.joda.time.DurationFieldType durationFieldType7 = periodType4.getFieldType((int) (short) 0);
        java.lang.String str8 = periodType4.toString();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 53, (long) (-1), periodType4, chronology12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.LocalDate.Property property15 = localDate14.centuryOfEra();
        org.joda.time.LocalDate localDate16 = property15.roundCeilingCopy();
        java.util.Date date17 = localDate16.toDate();
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        int int22 = localDate18.getDayOfYear();
        org.joda.time.Interval interval23 = localDate18.toInterval();
        int int24 = localDate16.compareTo((org.joda.time.ReadablePartial) localDate18);
        org.joda.time.DateTime dateTime25 = localDate16.toDateTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime26 = dateTime25.toMutableDateTime();
        int int27 = mutableDateTime26.getHourOfDay();
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[YearDayTime]" + "'", str8, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(date17);
        org.junit.Assert.assertEquals(date17.toString(), "Fri Jan 01 00:00:00 UTC 2100");
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 53 + "'", int22 == 53);
        org.junit.Assert.assertNotNull(interval23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test05389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05389");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.getMillisKeepLocal(dateTimeZone2, (long) 44);
        boolean boolean6 = dateTimeZone2.isStandardOffset((long) (-1));
        java.lang.String str7 = dateTimeZone2.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime8.setSecondOfMinute(41);
        mutableDateTime8.addMillis(10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime8.setTime(62215, 26341950, 26471738, 47924975);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62215 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 44L + "'", long4 == 44L);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "UTC" + "'", str7, "UTC");
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test05390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05390");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.yearOfEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime39.setMillisOfSecond(26415);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26415 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(property40);
    }

    @Test
    public void test05391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05391");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        org.joda.time.Period period23 = period19.toPeriod();
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.Period period25 = period15.normalizedStandard(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = periodType24.indexOf(durationFieldType26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType24, chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime5.toMutableDateTime(chronology31);
        mutablePeriod2.setPeriod((long) 36946953, 960000L, chronology31);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        mutablePeriod44.setPeriod((long) 999, chronology49);
        mutablePeriod2.add(949680L, chronology49);
        int int55 = mutablePeriod2.getWeeks();
        int int56 = mutablePeriod2.getHours();
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "PT0.099S" + "'", str22, "PT0.099S");
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1) + "'", int27 == (-1));
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(localTime33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(instant48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(localTime51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + (-9) + "'", int56 == (-9));
    }

    @Test
    public void test05392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05392");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.Instant instant5 = instant3.toInstant();
        long long6 = instant5.getMillis();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) 100);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Instant instant25 = instant5.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) -1);
        org.joda.time.Duration duration26 = duration1.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.set(45);
        org.joda.time.MutableDateTime mutableDateTime31 = property28.roundFloor();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(15);
        org.joda.time.DateTime dateTime43 = localDateTime36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = localDateTime36.toDateTime(dateTimeZone44);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        mutableDateTime31.setRounding(dateTimeField47);
        java.lang.Object obj49 = mutableDateTime31.clone();
        java.lang.String str50 = mutableDateTime31.toString();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration55 = duration52.withDurationAdded((long) (short) 100, (int) ' ');
        long long56 = duration55.getMillis();
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.months();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime66, periodType67);
        boolean boolean69 = dateTime60.isBefore((org.joda.time.ReadableInstant) dateTime64);
        int int70 = dateTime64.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(readableInstant71, readableInstant72, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime64, periodType73);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(periodType73);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) mutableDateTime31, periodType73);
        mutableDateTime31.addMillis(26212);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime31.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime82 = property81.roundHalfEven();
        java.lang.String str83 = mutableDateTime82.toString();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(instant5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1645514542638L + "'", long6 == 1645514542638L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(mutableDateTime31);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "4500-01-01T00:00:00.000Z" + "'", str50, "4500-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 86403200L + "'", long56 == 86403200L);
        org.junit.Assert.assertNotNull(instant59);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(instant63);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(periodType67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + int70 + "' != '" + 1 + "'", int70 == 1);
        org.junit.Assert.assertNotNull(periodType73);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(mutableDateTime82);
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "4500-01-01T00:00:00.000Z" + "'", str83, "4500-01-01T00:00:00.000Z");
    }

    @Test
    public void test05393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05393");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime6.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology9);
        int int11 = mutablePeriod10.getHours();
        org.joda.time.Period period12 = period2.minus((org.joda.time.ReadablePeriod) mutablePeriod10);
        mutablePeriod10.setYears(26157);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Chronology chronology18 = instant17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.eras();
        long long23 = chronology18.add(0L, (long) 2022, (int) '4');
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        int[] intArray29 = chronology18.get((org.joda.time.ReadablePeriod) period26, (long) 0, (long) 48);
        org.joda.time.Period period31 = period26.plusMonths(489);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str34 = duration33.toString();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours37 = duration36.toStandardHours();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod41 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.Duration duration42 = duration33.plus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = duration44.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now();
        mutableDateTime48.add((long) 'a');
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime48.yearOfCentury();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration59 = duration56.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration60 = duration53.minus((org.joda.time.ReadableDuration) duration59);
        mutableDateTime48.add((org.joda.time.ReadableDuration) duration53);
        boolean boolean62 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration53);
        boolean boolean63 = duration36.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period68 = duration67.toPeriod();
        org.joda.time.Duration duration71 = duration67.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period72 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableDuration) duration71);
        org.joda.time.Duration duration73 = duration47.plus((org.joda.time.ReadableDuration) duration71);
        org.joda.time.Period period74 = duration71.toPeriod();
        org.joda.time.Period period75 = period26.plus((org.joda.time.ReadablePeriod) period74);
        org.joda.time.DurationFieldType durationFieldType77 = period26.getFieldType(0);
        boolean boolean78 = mutablePeriod10.isSupported(durationFieldType77);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 105144L + "'", long23 == 105144L);
        org.junit.Assert.assertNotNull(intArray29);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray29), "[0, 0, 0, 0, 0, 0, 0, 48]");
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT86400S" + "'", str34, "PT86400S");
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(hours37);
// flaky:         org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(period74);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
    }

    @Test
    public void test05394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05394");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.weekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime12 = property10.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime12.toMutableDateTime();
        int int14 = mutableDateTime13.getSecondOfDay();
        org.joda.time.Chronology chronology15 = mutableDateTime13.getChronology();
        mutableDateTime0.setChronology(chronology15);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime0.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundCeiling();
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime18.getZone();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration29 = duration25.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant30 = instant23.plus((org.joda.time.ReadableDuration) duration29);
        long long31 = instant30.getMillis();
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.months();
        org.joda.time.Period period34 = new org.joda.time.Period((-205878993L), chronology32);
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone36 = chronology32.getZone();
        org.joda.time.DurationField durationField37 = chronology32.hours();
        mutableDateTime18.setChronology(chronology32);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(obj1);
// flaky:         org.junit.Assert.assertEquals(obj1.toString(), "2022-02-22T07:22:22.738Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "2022-02-22T07:22:22.738Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "2022-02-22T07:22:22.738Z");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 26542 + "'", int14 == 26542);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 86400000L + "'", long31 == 86400000L);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(durationField37);
    }

    @Test
    public void test05395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05395");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        mutableDateTime16.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.toPeriod();
        org.joda.time.PeriodType periodType35 = period30.getPeriodType();
        org.joda.time.Period period36 = period26.normalizedStandard(periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        int int38 = periodType35.indexOf(durationFieldType37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.eras();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.DurationField durationField45 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType35, chronology42);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime16.toMutableDateTime(chronology42);
        mutableDateTime16.setDayOfYear(44);
        int int51 = mutableDateTime16.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addMillis(365);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.DateTime dateTime58 = instant57.toDateTime();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.months();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime60, periodType61);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((long) 100, 1L, periodType65);
        org.joda.time.Period period68 = period66.minusSeconds((-1));
        java.lang.String str69 = period66.toString();
        org.joda.time.Period period70 = period66.toPeriod();
        org.joda.time.PeriodType periodType71 = period66.getPeriodType();
        org.joda.time.DateTime dateTime72 = dateTime60.plus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((long) (short) 100, chronology74);
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.millis();
        java.lang.String str77 = durationFieldType76.getName();
        boolean boolean78 = localTime75.isSupported(durationFieldType76);
        int int79 = period66.get(durationFieldType76);
        mutableDateTime16.add(durationFieldType76, 442);
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime16.dayOfMonth();
        org.joda.time.Chronology chronology83 = mutableDateTime16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(47892750L, (long) 25653799, chronology83);
        org.joda.time.DateTimeField dateTimeField85 = chronology83.clockhourOfHalfday();
        org.joda.time.Period period86 = new org.joda.time.Period((long) (byte) 0, chronology83);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "PT0.099S" + "'", str33, "PT0.099S");
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(periodType35);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(instant41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 7 + "'", int51 == 7);
        org.junit.Assert.assertNotNull(instant57);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT0.099S" + "'", str69, "PT0.099S");
        org.junit.Assert.assertNotNull(period70);
        org.junit.Assert.assertNotNull(periodType71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(durationFieldType76);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "millis" + "'", str77, "millis");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + (-99) + "'", int79 == (-99));
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField85);
    }

    @Test
    public void test05396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05396");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        mutableDateTime0.setWeekyear((int) 'u');
        java.lang.Object obj8 = null;
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime9.copy();
        mutableDateTime9.setDate((long) '#');
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean18 = localDate15.isSupported(dateTimeFieldType17);
        int int19 = localDate15.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight21 = localDate15.toDateMidnight(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = mutableDateTime9.toDateTime(dateTimeZone20);
        org.joda.time.LocalDate localDate23 = org.joda.time.LocalDate.now(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(obj8, dateTimeZone20);
        java.lang.String str26 = dateTimeZone20.getName(105144L);
        long long28 = dateTimeZone20.nextTransition(3155760000000L);
        mutableDateTime0.setZone(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(dateTimeZone20);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.LocalDate localDate34 = property32.roundCeilingCopy();
        org.joda.time.LocalDate localDate36 = localDate34.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone37);
        org.joda.time.DateMidnight dateMidnight39 = localDate36.toDateMidnight(dateTimeZone37);
        org.joda.time.LocalDate.Property property40 = localDate36.monthOfYear();
        org.joda.time.DateTime dateTime41 = localDate36.toDateTimeAtMidnight();
        mutableDateTime30.setMillis((org.joda.time.ReadableInstant) dateTime41);
        mutableDateTime30.addWeekyears(62234);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 53 + "'", int19 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "+00:00" + "'", str26, "+00:00");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3155760000000L + "'", long28 == 3155760000000L);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDate34);
        org.junit.Assert.assertNotNull(localDate36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(dateMidnight39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test05397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05397");
        java.lang.Object obj0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = duration9.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration13 = duration6.minus((org.joda.time.ReadableDuration) duration12);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration6);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.centuryOfEra();
        mutableDateTime1.addHours((int) (byte) 10);
        mutableDateTime1.addYears(12);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime21 = instant20.toDateTime();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMinutes(15);
        org.joda.time.DateTime dateTime33 = localDateTime26.toDateTime((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime35 = localDateTime26.toDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime36 = dateTime21.withZoneRetainFields(dateTimeZone34);
        java.lang.String str37 = dateTimeZone34.toString();
        java.lang.String str38 = dateTimeZone34.getID();
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone34);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime1.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone42 = mutableDateTime1.getZone();
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime(obj0, dateTimeZone42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withSecondOfMinute(26499);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26499 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "UTC" + "'", str37, "UTC");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "UTC" + "'", str38, "UTC");
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test05398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05398");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.LocalDate localDate4 = property2.roundCeilingCopy();
        org.joda.time.LocalDate localDate6 = localDate4.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate8 = localDate4.withWeekOfWeekyear(46);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 26198, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime12.toString(dateTimeFormatter14);
        org.joda.time.DateTime dateTime17 = dateTime12.minusMonths(22);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        org.joda.time.DateTime dateTime23 = dateTime12.withChronology(chronology21);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.centuryOfEra();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime24.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        boolean boolean28 = dateTime12.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        int int30 = localDate29.getDayOfMonth();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        boolean boolean32 = dateTimeFieldType27.isSupported(chronology31);
        mutableDateTime10.setChronology(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.secondOfDay();
        long long37 = dateTimeField34.addWrapField((long) 37174539, 33489);
        long long40 = dateTimeField34.add(1167224438217600245L, 902);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeField3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 22 + "'", int13 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T07:22:22.842Z" + "'", str15, "2022-02-22T07:22:22.842Z");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 22 + "'", int30 == 22);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 70663539L + "'", long37 == 70663539L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1167224438218502245L + "'", long40 == 1167224438218502245L);
    }

    @Test
    public void test05399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05399");
        org.joda.time.PeriodType periodType2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period((long) 100, 1L, periodType2);
        org.joda.time.Period period5 = period3.minusSeconds((-1));
        java.lang.String str6 = period3.toString();
        org.joda.time.Period period8 = period3.plusMillis(15);
        org.joda.time.Period period10 = period8.plusHours(2021);
        org.joda.time.Seconds seconds11 = period10.toStandardSeconds();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((java.lang.Object) period10);
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod17.addDays((int) (byte) 10);
        mutablePeriod17.addMillis((int) '4');
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration31 = duration28.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean32 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration33 = duration23.minus((org.joda.time.ReadableDuration) duration26);
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration33);
        long long35 = duration33.getStandardHours();
        java.lang.String str36 = duration33.toString();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        org.joda.time.DateTime dateTime41 = dateTime39.plusMinutes(15);
        org.joda.time.Chronology chronology42 = dateTime39.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.hours();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1440L, chronology42);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology42);
        org.joda.time.Interval interval46 = duration33.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime45);
        mutablePeriod12.setPeriod((org.joda.time.ReadableInterval) interval46);
        mutablePeriod12.setDays(1524);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "PT0.099S" + "'", str6, "PT0.099S");
        org.junit.Assert.assertNotNull(period8);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(seconds11);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 23L + "'", long35 == 23L);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "PT86300S" + "'", str36, "PT86300S");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(interval46);
    }

    @Test
    public void test05400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05400");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant4, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.yearOfCentury();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration24 = duration21.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration25 = duration18.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime13.centuryOfEra();
        mutableDateTime13.addHours((int) (byte) 10);
        mutableDateTime13.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField32 = mutableDateTime13.getRoundingField();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj34 = mutableDateTime33.clone();
        mutableDateTime33.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.add(1L);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        long long44 = dateTimeZone40.getMillisKeepLocal(dateTimeZone42, (long) 44);
        org.joda.time.DateTime dateTime45 = org.joda.time.DateTime.now(dateTimeZone40);
        mutableDateTime39.setZoneRetainFields(dateTimeZone40);
        mutableDateTime39.addSeconds((int) (short) 10);
        java.lang.Object obj49 = mutableDateTime39.clone();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime39.era();
        boolean boolean51 = mutableDateTime13.isAfter((org.joda.time.ReadableInstant) mutableDateTime39);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime39);
        int int53 = instant4.compareTo((org.joda.time.ReadableInstant) mutableDateTime39);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime39.setDayOfYear(1948);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1948 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:22:22.919Z" + "'", str10, "2022-02-22T07:22:22.919Z");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNull(dateTimeField32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(obj34);
// flaky:         org.junit.Assert.assertEquals(obj34.toString(), "2022-02-22T07:22:22.919Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "2022-02-22T07:22:22.919Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "2022-02-22T07:22:22.919Z");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "\u5354\u8abf\u4e16\u754c\u6642\u9593");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 44L + "'", long44 == 44L);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(obj49);
        org.junit.Assert.assertEquals(obj49.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj49), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj49), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + (-1) + "'", int53 == (-1));
    }

    @Test
    public void test05401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05401");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime17.toString(dateTimeFormatter19);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime17);
        mutableDateTime15.addDays(22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (short) 100, chronology25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str28 = durationFieldType27.getName();
        boolean boolean29 = localTime26.isSupported(durationFieldType27);
        mutableDateTime15.add(durationFieldType27, 3);
        int int32 = mutableDateTime15.getCenturyOfEra();
        mutableDateTime15.addMonths(26357);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:22:22.970Z" + "'", str20, "2022-02-22T07:22:22.970Z");
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "weeks" + "'", str28, "weeks");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 20 + "'", int32 == 20);
    }

    @Test
    public void test05402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05402");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant24 = instant17.plus((org.joda.time.ReadableDuration) duration23);
        long long25 = instant24.getMillis();
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.months();
        org.joda.time.Period period28 = new org.joda.time.Period((-205878993L), chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology26.getZone();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime0, chronology26);
        org.joda.time.LocalTime localTime33 = localTime31.withMillisOfDay((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime35 = localTime33.withSecondOfMinute(104);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 104 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(periodType9);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(instant24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 86400000L + "'", long25 == 86400000L);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(localTime33);
    }

    @Test
    public void test05403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05403");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillis((long) (short) 1);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str17 = duration16.toString();
        boolean boolean18 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration28 = duration25.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean29 = duration23.isLongerThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration30 = duration20.minus((org.joda.time.ReadableDuration) duration23);
        boolean boolean31 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration32, readableInstant33);
        org.joda.time.Period period36 = period34.withDays((int) (byte) 1);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours39 = duration38.toStandardHours();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        int int42 = dateTime41.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = period34.toDurationFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration46 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration44, (int) ' ');
        int int47 = duration12.compareTo((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusMinutes(15);
        org.joda.time.Instant instant52 = dateTime51.toInstant();
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        mutableDateTime53.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime53.copy();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime53.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime59 = property57.roundHalfCeiling();
        org.joda.time.Duration duration60 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime51, (org.joda.time.ReadableInstant) mutableDateTime59);
        boolean boolean61 = duration30.isShorterThan((org.joda.time.ReadableDuration) duration60);
        org.joda.time.DateTime dateTime62 = dateTime7.minus((org.joda.time.ReadableDuration) duration60);
        java.lang.Object obj63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(obj63);
        org.joda.time.LocalDateTime localDateTime65 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime69 = localDateTime67.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField71 = localDateTime69.getField((int) (byte) 0);
        long long73 = dateTimeField71.roundHalfEven((long) 1);
        int int74 = dateTime64.get(dateTimeField71);
        boolean boolean75 = dateTime64.isBeforeNow();
        org.joda.time.DateTime dateTime77 = dateTime64.minusYears(8);
        org.joda.time.DateTime dateTime79 = dateTime64.withYearOfEra(1380);
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration60, (org.joda.time.ReadableInstant) dateTime79);
        java.lang.Class<?> wildcardClass81 = dateTime79.getClass();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT86400S" + "'", str17, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(period21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(period36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(hours39);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 23 + "'", int42 == 23);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(mutableDateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(localDateTime69);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 2022 + "'", int74 == 2022);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(wildcardClass81);
    }

    @Test
    public void test05404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05404");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime2 = instant0.toMutableDateTimeISO();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.MutableDateTime mutableDateTime4 = instant0.toMutableDateTime(chronology3);
        org.joda.time.Instant instant6 = instant0.plus(1000L);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(instant6);
    }

    @Test
    public void test05405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05405");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.LocalTime localTime2 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology3 = localTime2.getChronology();
        boolean boolean4 = dateTimeFieldType0.isSupported(chronology3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.minutes();
        java.lang.String str7 = durationField6.toString();
        long long10 = durationField6.getValueAsLong(26150L, 26277075624L);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DurationField[minutes]" + "'", str7, "DurationField[minutes]");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test05406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05406");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.addMinutes(1424);
        boolean boolean10 = mutableDateTime1.isEqual((long) (-6));
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType12 = periodType11.withDaysRemoved();
        boolean boolean13 = mutableDateTime1.equals((java.lang.Object) periodType11);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test05407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05407");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusYears(26148950);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.DateTime dateTime30 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = localDateTime23.toDateTime(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = dateTime18.withZoneRetainFields(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        mutableDateTime34.add((long) 'a');
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.yearOfCentury();
        mutableDateTime34.addSeconds(0);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours42 = duration41.toStandardHours();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        int int45 = dateTime44.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.DateTime dateTime52 = instant51.toDateTime();
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType55 = org.joda.time.PeriodType.months();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime52, (org.joda.time.ReadableInstant) dateTime54, periodType55);
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime48, periodType55);
        org.joda.time.Duration duration58 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime34, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.DateTime dateTime59 = dateTime33.plus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str64 = duration63.toString();
        boolean boolean65 = duration61.isShorterThan((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period68 = duration67.toPeriod();
        org.joda.time.Duration duration71 = duration67.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration76 = duration73.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean77 = duration71.isLongerThan((org.joda.time.ReadableDuration) duration73);
        boolean boolean78 = duration63.isEqual((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration80 = duration73.withMillis((long) 22);
        org.joda.time.Duration duration82 = duration73.withMillis(3024000005L);
        org.joda.time.Duration duration83 = duration58.plus((org.joda.time.ReadableDuration) duration73);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime13.plus((org.joda.time.ReadableDuration) duration83);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime13.plusMinutes(37242433);
        org.joda.time.LocalDateTime.Property property87 = localDateTime13.dayOfYear();
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime34);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(hours42);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 23 + "'", int45 == 23);
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(periodType55);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(duration61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PT86400S" + "'", str64, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(duration67);
        org.junit.Assert.assertNotNull(period68);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration73);
        org.junit.Assert.assertNotNull(duration76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(duration80);
        org.junit.Assert.assertNotNull(duration82);
        org.junit.Assert.assertNotNull(duration83);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(localDateTime86);
        org.junit.Assert.assertNotNull(property87);
    }

    @Test
    public void test05408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05408");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.LocalDate.Property property13 = localDate6.year();
        org.joda.time.LocalDate.Property property14 = localDate6.centuryOfEra();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) -1);
        int int17 = localDate16.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        long long22 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 44);
        org.joda.time.DateTime dateTime23 = localDate16.toDateTimeAtMidnight(dateTimeZone18);
        org.joda.time.DateTime dateTime24 = localDate16.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime25.yearOfCentury();
        mutableDateTime25.addWeekyears((int) (byte) 1);
        int int31 = dateTime24.compareTo((org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime25.centuryOfEra();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str37 = duration36.toString();
        boolean boolean38 = duration34.isShorterThan((org.joda.time.ReadableDuration) duration36);
        long long39 = duration34.getStandardMinutes();
        long long40 = duration34.getStandardMinutes();
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration34, 26150565);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj44 = mutableDateTime43.clone();
        mutableDateTime43.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime43.dayOfWeek();
        mutableDateTime43.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime43.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime51 = property50.roundCeiling();
        mutableDateTime51.setMillisOfDay(49);
        boolean boolean54 = mutableDateTime25.isEqual((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.dayOfMonth();
        int int56 = mutableDateTime25.get(dateTimeFieldType55);
        boolean boolean57 = localDate6.isSupported(dateTimeFieldType55);
        org.joda.time.DateTime.Property property58 = dateTime5.property(dateTimeFieldType55);
        org.joda.time.DateTime dateTime59 = property58.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
        org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1969 + "'", int17 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
        org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 44L + "'", long22 == 44L);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "PT86400S" + "'", str37, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 1440L + "'", long39 == 1440L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1440L + "'", long40 == 1440L);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(obj44);
// flaky:         org.junit.Assert.assertEquals(obj44.toString(), "2022-02-22T07:22:23.208Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "2022-02-22T07:22:23.208Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "2022-02-22T07:22:23.208Z");
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 15 + "'", int56 == 15);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test05409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05409");
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableDuration1, readableInstant2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period9 = period7.minusSeconds((-1));
        java.lang.String str10 = period7.toString();
        org.joda.time.Period period11 = period7.toPeriod();
        org.joda.time.PeriodType periodType12 = period7.getPeriodType();
        org.joda.time.Period period13 = period3.normalizedStandard(periodType12);
        java.lang.String str14 = periodType12.getName();
        org.joda.time.PeriodType periodType15 = periodType12.withYearsRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.eras();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfHalfday();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now(chronology20);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 55, periodType15, chronology20);
        org.joda.time.Period period29 = period27.plusMillis(1969);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.099S" + "'", str10, "PT0.099S");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Standard" + "'", str14, "Standard");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(period29);
    }

    @Test
    public void test05410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05410");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.Instant instant2 = instant0.toInstant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime();
        mutableDateTime3.addMonths(2227);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime3.setTime(62342, 443, 26540403, (-369858));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62342 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(mutableDateTime3);
    }

    @Test
    public void test05411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05411");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        int int19 = mutableDateTime0.getYearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime0.copy();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setMonthOfYear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 22 + "'", int19 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime20);
    }

    @Test
    public void test05412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05412");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.addSeconds(0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours25 = duration24.toStandardHours();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.months();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime42 = dateTime16.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime44 = dateTime16.minusYears(29);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime48 = property46.set(45);
        org.joda.time.MutableDateTime mutableDateTime49 = property46.roundFloor();
        org.joda.time.LocalDateTime localDateTime50 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        org.joda.time.DateTime dateTime60 = dateTime58.plusMinutes(15);
        org.joda.time.DateTime dateTime61 = localDateTime54.toDateTime((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime63 = localDateTime54.toDateTime(dateTimeZone62);
        org.joda.time.DateTime.Property property64 = dateTime63.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField65 = property64.getField();
        mutableDateTime49.setRounding(dateTimeField65);
        boolean boolean67 = dateTime44.isBefore((org.joda.time.ReadableInstant) mutableDateTime49);
        mutableDateTime49.setSecondOfDay(365);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime49.centuryOfEra();
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(hours25);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 23 + "'", int28 == 23);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(property70);
    }

    @Test
    public void test05413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05413");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.LocalDateTime localDateTime6 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(15);
        org.joda.time.DateTime dateTime17 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = localDateTime10.toDateTime(dateTimeZone18);
        org.joda.time.DateTime dateTime20 = dateTime5.withZoneRetainFields(dateTimeZone18);
        java.lang.String str21 = dateTimeZone18.toString();
        java.lang.String str22 = dateTimeZone18.getID();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime25.copy();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.yearOfCentury();
        mutableDateTime25.setHourOfDay(9);
        int int32 = dateTimeZone18.getOffset((org.joda.time.ReadableInstant) mutableDateTime25);
        int int33 = mutableDateTime25.getSecondOfDay();
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime25);
        mutableDateTime25.addYears(37040809);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime25.setDateTime(335, 26183562, 26333, 266, 0, 19, 37331542);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 266 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "UTC" + "'", str21, "UTC");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "UTC" + "'", str22, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 33743 + "'", int33 == 33743);
    }

    @Test
    public void test05414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05414");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale2.getISO3Language();
        java.util.Locale.Builder builder5 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType15 = periodType12.getFieldType((int) (short) 0);
        java.lang.String str16 = periodType12.toString();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 53, (long) (-1), periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType7.getField(chronology20);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = locale23.getDisplayLanguage();
        int int25 = dateTimeField22.getMaximumTextLength(locale23);
        java.lang.String str26 = locale23.getScript();
        java.util.Locale.Builder builder27 = builder1.setLocale(locale23);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property32 = localDate28.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime33.copy();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime38 = property37.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime41 = property37.set(1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getYearOfCentury();
        int int45 = dateTime43.getWeekyear();
        org.joda.time.DateTime dateTime46 = dateTime43.withEarlierOffsetAtOverlap();
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime46.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        boolean boolean50 = dateTimeZone49.isFixed();
        mutableDateTime48.setZoneRetainFields(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime41.toMutableDateTime(dateTimeZone49);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(dateTimeZone49);
        java.lang.Object obj55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(obj55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.LocalDate localDate60 = dateTime56.toLocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfMonth();
        java.util.Date date62 = localDate60.toDate();
        org.joda.time.LocalDate.Property property63 = localDate60.dayOfYear();
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.lang.String str65 = property63.getAsText(locale64);
        java.lang.String str66 = dateTimeZone49.getShortName(360000000L, locale64);
        java.lang.String str67 = property32.getAsText(locale64);
        java.util.Set<java.lang.String> strSet68 = locale64.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder69 = builder1.setLocale(locale64);
        java.util.Set<java.lang.String> strSet70 = locale64.getUnicodeLocaleKeys();
        java.util.Locale locale74 = new java.util.Locale("1970_MILLIS", "2022-02-22T07:16:23.777Z", "20");
        java.lang.String str75 = locale64.getDisplayScript(locale74);
        java.util.Locale locale76 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str77 = locale74.getDisplayCountry(locale76);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u5fb7\u6587" + "'", str3, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PeriodType[YearDayTime]" + "'", str16, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u82f1\u6587" + "'", str24, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(mutableDateTime33);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 22 + "'", int44 == 22);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 2022 + "'", int45 == 2022);
        org.junit.Assert.assertNotNull(dateTime46);
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "2022-02-22T07:22:23.405Z" + "'", str47, "2022-02-22T07:22:23.405Z");
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(localDate53);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(localDate60);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(date62);
        org.junit.Assert.assertEquals(date62.toString(), "Tue Feb 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "de");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "53" + "'", str65, "53");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00" + "'", str66, "+00:00");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Dienstag" + "'", str67, "Dienstag");
        org.junit.Assert.assertNotNull(strSet68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strSet70);
        org.junit.Assert.assertEquals(locale74.toString(), "1970_millis_2022-02-22T07:16:23.777Z_20");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
    }

    @Test
    public void test05415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05415");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime1.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime1.minusMonths(22);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DateTime dateTime12 = dateTime1.withChronology(chronology10);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.secondOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "2022-02-22T07:22:23.432Z" + "'", str4, "2022-02-22T07:22:23.432Z");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
    }

    @Test
    public void test05416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05416");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.addDays((int) '4');
        mutablePeriod3.setHours(5);
        int int8 = mutablePeriod3.getHours();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean12 = localDate9.isSupported(dateTimeFieldType11);
        int int13 = localDate9.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight15 = localDate9.toDateMidnight(dateTimeZone14);
        org.joda.time.LocalDate.Property property16 = localDate9.year();
        org.joda.time.LocalDate localDate17 = property16.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property18 = localDate17.dayOfMonth();
        org.joda.time.LocalDate localDate20 = localDate17.minusMonths(36956320);
        int int21 = localDate20.getEra();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        mutableDateTime22.add((long) 'a');
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str29 = duration28.toString();
        boolean boolean30 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Hours hours31 = duration26.toStandardHours();
        mutableDateTime22.add((org.joda.time.ReadableDuration) duration26, 20);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = null;
        java.lang.String str38 = dateTime35.toString(dateTimeFormatter37);
        org.joda.time.DateTime dateTime40 = dateTime35.minusMonths(22);
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.Chronology chronology44 = instant43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.eras();
        org.joda.time.DateTime dateTime46 = dateTime35.withChronology(chronology44);
        org.joda.time.Period period47 = duration26.toPeriod(chronology44);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period(readableDuration50, readableInstant51);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((long) 100, 1L, periodType55);
        org.joda.time.Period period58 = period56.minusSeconds((-1));
        java.lang.String str59 = period56.toString();
        org.joda.time.Period period60 = period56.toPeriod();
        org.joda.time.PeriodType periodType61 = period56.getPeriodType();
        org.joda.time.Period period62 = period52.normalizedStandard(periodType61);
        java.lang.String str63 = periodType61.getName();
        java.lang.String str64 = periodType61.toString();
        org.joda.time.PeriodType periodType65 = periodType61.withDaysRemoved();
        org.joda.time.PeriodType periodType66 = periodType65.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType66);
        int[] intArray69 = chronology44.get((org.joda.time.ReadablePeriod) mutablePeriod67, 1L);
        org.joda.time.Period period71 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period73 = period71.minusMillis(19045);
        org.joda.time.Period period75 = period71.minusYears(0);
        org.joda.time.DurationFieldType durationFieldType77 = period71.getFieldType(0);
        int int78 = mutablePeriod67.indexOf(durationFieldType77);
        boolean boolean79 = localDate20.isSupported(durationFieldType77);
        mutablePeriod3.set(durationFieldType77, (-580));
        org.junit.Assert.assertNotNull(periodType2);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 5 + "'", int8 == 5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "PT86400S" + "'", str29, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(hours31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "2022-02-22T07:22:23.444Z" + "'", str38, "2022-02-22T07:22:23.444Z");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(period47);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "PT0.099S" + "'", str59, "PT0.099S");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(periodType61);
        org.junit.Assert.assertNotNull(period62);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "Standard" + "'", str63, "Standard");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "PeriodType[Standard]" + "'", str64, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType65);
        org.junit.Assert.assertNotNull(periodType66);
        org.junit.Assert.assertNotNull(intArray69);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray69), "[0, 0, 0, 0, 0, 1]");
        org.junit.Assert.assertNotNull(period71);
        org.junit.Assert.assertNotNull(period73);
        org.junit.Assert.assertNotNull(period75);
        org.junit.Assert.assertNotNull(durationFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 0 + "'", int78 == 0);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
    }

    @Test
    public void test05417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05417");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.millisOfSecond();
        mutableDateTime0.addDays((int) (short) 0);
        int int4 = mutableDateTime0.getYearOfCentury();
        mutableDateTime0.addMonths(26222789);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
    }

    @Test
    public void test05418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05418");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours35 = duration34.toStandardHours();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        int int38 = dateTime37.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime41 = dateTime37.plus(0L);
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime32.add(durationFieldType43, 99);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(readableInstant49, readableInstant50, periodType51);
        org.joda.time.DurationFieldType durationFieldType54 = periodType51.getFieldType((int) (short) 0);
        java.lang.String str55 = periodType51.toString();
        org.joda.time.Instant instant56 = new org.joda.time.Instant();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Chronology chronology59 = instant58.getChronology();
        org.joda.time.Period period60 = new org.joda.time.Period((long) 53, (long) (-1), periodType51, chronology59);
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType46.getField(chronology59);
        long long64 = dateTimeField61.add(0L, (long) 274);
        int int65 = dateTimeField61.getMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime32.setRounding(dateTimeField61, 37161044);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 37161044");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT0.099S" + "'", str17, "PT0.099S");
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(duration34);
        org.junit.Assert.assertNotNull(hours35);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 23 + "'", int38 == 23);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(durationFieldType43);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(durationFieldType54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "PeriodType[YearDayTime]" + "'", str55, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant58);
        org.junit.Assert.assertNotNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeField61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 16440000L + "'", long64 == 16440000L);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 1439 + "'", int65 == 1439);
    }

    @Test
    public void test05419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05419");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        long long3 = mutableDateTime0.getMillis();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.minuteOfDay();
        mutableDateTime0.addSeconds((int) (byte) 1);
        mutableDateTime0.addSeconds(26484);
        org.junit.Assert.assertNotNull(mutableDateTime0);
// flaky:         org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1645514543624L + "'", long3 == 1645514543624L);
        org.junit.Assert.assertNotNull(property4);
    }

    @Test
    public void test05420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05420");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        int int4 = localTime3.getMinuteOfHour();
        java.lang.String str6 = localTime3.toString("1");
        org.joda.time.LocalTime localTime8 = localTime3.minusMinutes(15);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 15);
        org.joda.time.DateTime.Property property15 = dateTime10.year();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime();
        org.joda.time.LocalTime localTime19 = dateTime16.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime3.withFields((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.ReadablePeriod readablePeriod21 = null;
        org.joda.time.LocalTime localTime22 = localTime19.minus(readablePeriod21);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str24 = dateTimeFieldType23.getName();
        int int25 = localTime22.get(dateTimeFieldType23);
        int int26 = localTime22.getMillisOfSecond();
        org.joda.time.Chronology chronology27 = localTime22.getChronology();
        org.joda.time.LocalTime localTime29 = localTime22.minusSeconds(27425221);
        org.junit.Assert.assertNotNull(localTime3);
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "1" + "'", str6, "1");
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 22 + "'", int11 == 22);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2022 + "'", int12 == 2022);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(localTime19);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "clockhourOfDay" + "'", str24, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 24 + "'", int25 == 24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localTime29);
    }

    @Test
    public void test05421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05421");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.now(dateTimeZone11);
        java.util.TimeZone timeZone16 = dateTimeZone11.toTimeZone();
        timeZone16.setRawOffset(26196);
        java.lang.String str19 = timeZone16.getID();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 53 + "'", int10 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateMidnight12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(timeZone16);
        org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "UTC" + "'", str19, "UTC");
    }

    @Test
    public void test05422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05422");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime.Property property2 = dateTime1.millisOfSecond();
        org.joda.time.DateTime dateTime3 = dateTime1.toDateTime();
        org.joda.time.DateTime.Property property4 = dateTime1.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale8 = java.util.Locale.GERMAN;
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = dateTimeZone6.getName(100L, locale8);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(948227L, dateTimeZone6);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.year();
        mutableDateTime11.addHours(16);
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime11.copy();
        org.joda.time.DateTimeField dateTimeField16 = mutableDateTime15.getRoundingField();
        int int17 = dateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime15);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setSecondOfMinute(572);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 572 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u5fb7\u6587" + "'", str9, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "+00:00" + "'", str10, "+00:00");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
    }

    @Test
    public void test05423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05423");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.DurationField durationField6 = chronology4.weeks();
        long long9 = durationField6.add((long) 51, 62167);
        long long12 = durationField6.add(1645514174548L, 436);
        int int14 = durationField6.getValue(3600000L);
        long long17 = durationField6.add((long) 26540764, 37127812);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 37598601600051L + "'", long9 == 37598601600051L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1909206974548L + "'", long12 == 1909206974548L);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 22454900724140764L + "'", long17 == 22454900724140764L);
    }

    @Test
    public void test05424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05424");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(963012L);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime4 = instant3.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime5.centuryOfEra();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getYearOfCentury();
        org.joda.time.DateTime dateTime24 = dateTime21.withSecondOfMinute(53);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration32 = duration29.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration33 = duration26.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant34, readableInstant35, periodType36);
        org.joda.time.DurationFieldType durationFieldType39 = periodType36.getFieldType((int) (short) 0);
        java.lang.String str40 = periodType36.toString();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration26, periodType36);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration26);
        mutableDateTime5.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime5.weekOfWeekyear();
        boolean boolean46 = instant3.isAfter((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj48 = mutableDateTime47.clone();
        mutableDateTime47.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime47.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime53 = property51.add(1L);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone55 = dateTimeZone54.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        long long58 = dateTimeZone54.getMillisKeepLocal(dateTimeZone56, (long) 44);
        org.joda.time.DateTime dateTime59 = org.joda.time.DateTime.now(dateTimeZone54);
        mutableDateTime53.setZoneRetainFields(dateTimeZone54);
        mutableDateTime53.addSeconds((int) (short) 10);
        java.lang.Object obj63 = mutableDateTime53.clone();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime53.era();
        boolean boolean65 = mutableDateTime5.isEqual((org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.Interval interval66 = duration1.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime53);
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime67.centuryOfEra();
        org.joda.time.MutableDateTime.Property property69 = mutableDateTime67.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = property69.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime71 = property69.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime71.hourOfDay();
        org.joda.time.MutableDateTime mutableDateTime74 = property72.addWrapField(55570);
        org.joda.time.Duration duration75 = org.joda.time.Duration.ZERO;
        long long76 = duration75.getStandardSeconds();
        org.joda.time.Duration duration77 = duration75.toDuration();
        org.joda.time.Period period78 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime74, (org.joda.time.ReadableDuration) duration77);
        mutableDateTime53.add((org.joda.time.ReadableDuration) duration77);
        mutableDateTime53.setTime((long) 43150228);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "PeriodType[YearDayTime]" + "'", str40, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(obj48);
// flaky:         org.junit.Assert.assertEquals(obj48.toString(), "2022-02-22T07:22:23.663Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj48), "2022-02-22T07:22:23.663Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj48), "2022-02-22T07:22:23.663Z");
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(timeZone55);
        org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 44L + "'", long58 == 44L);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(obj63);
        org.junit.Assert.assertEquals(obj63.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj63), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj63), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(interval66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(property72);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertNotNull(duration77);
    }

    @Test
    public void test05425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05425");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(161);
        org.joda.time.DurationFieldType[] durationFieldTypeArray2 = period1.getFieldTypes();
        org.joda.time.Period period3 = period1.toPeriod();
        org.joda.time.Period period5 = period3.plusDays((int) (short) 10);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        int int7 = localDate6.getDayOfMonth();
        org.joda.time.DateTime dateTime8 = localDate6.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate10 = localDate6.plusYears((int) (byte) 0);
        org.joda.time.LocalDate localDate12 = localDate10.plusDays(26150565);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate10.toDateTimeAtStartOfDay(dateTimeZone13);
        java.lang.String str15 = dateTime14.toString();
        org.joda.time.DateTime.Property property16 = dateTime14.hourOfDay();
        org.joda.time.Duration duration17 = period5.toDurationFrom((org.joda.time.ReadableInstant) dateTime14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime14.withDate(38, 26246362, 26441);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26246362 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(durationFieldTypeArray2);
        org.junit.Assert.assertNotNull(period3);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "2022-02-22T00:00:00.000Z" + "'", str15, "2022-02-22T00:00:00.000Z");
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(duration17);
    }

    @Test
    public void test05426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05426");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration5 = duration2.withDurationAdded((long) (short) 100, (int) ' ');
        long long6 = duration5.getMillis();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.months();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16, periodType17);
        boolean boolean19 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime14);
        int int20 = dateTime14.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.PeriodType periodType25 = periodType23.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime14, periodType23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime28.withChronology(chronology35);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.getMutableDateTime();
        boolean boolean44 = dateTime40.isBefore((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.eras();
        long long53 = chronology48.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField54 = chronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.minuteOfDay();
        mutableDateTime43.setChronology(chronology48);
        org.joda.time.DateTime dateTime57 = dateTime14.toDateTime(chronology48);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 99, chronology48);
        int int59 = localTime58.getSecondOfMinute();
        org.joda.time.LocalTime localTime61 = localTime58.plusMillis(953);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 86403200L + "'", long6 == 86403200L);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(durationField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(chronology48);
        org.junit.Assert.assertNotNull(durationField49);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 105144L + "'", long53 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(localTime61);
    }

    @Test
    public void test05427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05427");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(1645514195313L);
        org.joda.time.DateTime dateTime3 = dateTime1.withMillisOfDay(9);
        org.joda.time.DateTime dateTime5 = dateTime3.minusHours(38219999);
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.yearOfCentury();
        mutableDateTime6.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period(readableDuration14, readableInstant15);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period22 = period20.minusSeconds((-1));
        java.lang.String str23 = period20.toString();
        org.joda.time.Period period24 = period20.toPeriod();
        org.joda.time.PeriodType periodType25 = period20.getPeriodType();
        org.joda.time.Period period26 = period16.normalizedStandard(periodType25);
        org.joda.time.DurationFieldType durationFieldType27 = null;
        int int28 = periodType25.indexOf(durationFieldType27);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.eras();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.now(chronology32);
        org.joda.time.DurationField durationField35 = chronology32.eras();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType25, chronology32);
        org.joda.time.MutableDateTime mutableDateTime38 = mutableDateTime6.toMutableDateTime(chronology32);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours41 = duration40.toStandardHours();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.DateTime dateTime47 = dateTime43.plus(0L);
        mutableDateTime38.setMillis((org.joda.time.ReadableInstant) dateTime43);
        int int49 = dateTime43.getDayOfMonth();
        boolean boolean50 = dateTime5.isEqual((org.joda.time.ReadableInstant) dateTime43);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PT0.099S" + "'", str23, "PT0.099S");
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(periodType25);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + (-1) + "'", int28 == (-1));
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(mutableDateTime38);
        org.junit.Assert.assertNotNull(duration40);
        org.junit.Assert.assertNotNull(hours41);
// flaky:         org.junit.Assert.assertTrue("'" + int44 + "' != '" + 23 + "'", int44 == 23);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 22 + "'", int49 == 22);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test05428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05428");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1, chronology2);
        int int4 = dateTime3.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration6 = null;
        org.joda.time.ReadableInstant readableInstant7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period(readableDuration6, readableInstant7);
        org.joda.time.PeriodType periodType11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period((long) 100, 1L, periodType11);
        org.joda.time.Period period14 = period12.minusSeconds((-1));
        java.lang.String str15 = period12.toString();
        org.joda.time.Period period16 = period12.toPeriod();
        org.joda.time.PeriodType periodType17 = period12.getPeriodType();
        org.joda.time.Period period18 = period8.normalizedStandard(periodType17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        long long27 = chronology22.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology22.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(44L, periodType17, chronology22);
        org.joda.time.DateTimeField dateTimeField30 = chronology22.clockhourOfHalfday();
        org.joda.time.DateTime dateTime31 = dateTime3.toDateTime(chronology22);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean37 = localDate34.isSupported(dateTimeFieldType36);
        org.joda.time.Chronology chronology38 = localDate34.getChronology();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology38);
        org.joda.time.MutableDateTime mutableDateTime40 = dateTime31.toMutableDateTime(chronology38);
        org.joda.time.DateTimeField dateTimeField41 = chronology38.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.year();
        org.joda.time.DateTime dateTime43 = org.joda.time.DateTime.now(chronology38);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(1645514404004L, chronology38);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "PT0.099S" + "'", str15, "PT0.099S");
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(periodType17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 105144L + "'", long27 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
    }

    @Test
    public void test05429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05429");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        int int10 = dateTime8.getCenturyOfEra();
        org.joda.time.DateTime dateTime12 = dateTime8.withWeekyear(44);
        org.joda.time.DateTime.Property property13 = dateTime12.millisOfSecond();
        org.joda.time.Chronology chronology14 = dateTime12.getChronology();
        int int15 = dateTime12.getDayOfYear();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime19 = dateTime17.withZoneRetainFields(dateTimeZone18);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDate20.toDateTimeAtCurrentTime(dateTimeZone22);
        int int25 = dateTime19.compareTo((org.joda.time.ReadableInstant) dateTime24);
        int int26 = dateTime24.getDayOfYear();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime24.toMutableDateTimeISO();
        boolean boolean28 = dateTime12.isAfter((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.DateTime.Property property29 = dateTime24.yearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
        org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 20 + "'", int10 == 20);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 54 + "'", int15 == 54);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
        org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + (-1) + "'", int25 == (-1));
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 53 + "'", int26 == 53);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test05430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05430");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType4);
        org.joda.time.DurationFieldType durationFieldType7 = periodType4.getFieldType((int) (short) 0);
        java.lang.String str8 = periodType4.toString();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 53, (long) (-1), periodType4, chronology12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.LocalDate.Property property15 = localDate14.centuryOfEra();
        long long16 = property15.remainder();
        org.joda.time.LocalDate localDate17 = property15.roundHalfEvenCopy();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getYearOfCentury();
        int int21 = dateTime19.getWeekyear();
        org.joda.time.DateTime dateTime23 = dateTime19.plus((long) 15);
        org.joda.time.DateTime.Property property24 = dateTime19.year();
        org.joda.time.DateTime dateTime25 = property24.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property26 = dateTime25.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime25.toMutableDateTime();
        int int28 = dateTime25.getMillisOfSecond();
        int int29 = dateTime25.getMillisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeZone31.getName(100L, locale33);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(948227L, dateTimeZone31);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime36.year();
        org.joda.time.ReadableInstant readableInstant38 = null;
        mutableDateTime36.setMillis(readableInstant38);
        mutableDateTime36.addYears(36985848);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime36.era();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime36.yearOfCentury();
        int int44 = dateTime25.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        int int45 = mutableDateTime36.getWeekyear();
        int int46 = property15.getDifference((org.joda.time.ReadableInstant) mutableDateTime36);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime36.setSecondOfMinute(26186255);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26186255 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(periodType4);
        org.junit.Assert.assertNotNull(durationFieldType7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "PeriodType[YearDayTime]" + "'", str8, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1510272000000L) + "'", long16 == (-1510272000000L));
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 2022 + "'", int21 == 2022);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\u5fb7\u6587" + "'", str34, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 36987870 + "'", int45 == 36987870);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-369858) + "'", int46 == (-369858));
    }

    @Test
    public void test05431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05431");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(62244L);
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getYearOfCentury();
        org.joda.time.DateTime dateTime6 = dateTime3.minusHours(50);
        org.joda.time.DateTime.Property property7 = dateTime6.centuryOfEra();
        org.joda.time.PeriodType periodType8 = org.joda.time.PeriodType.time();
        org.joda.time.PeriodType periodType9 = periodType8.withMinutesRemoved();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) dateTime6, periodType8);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 22 + "'", int4 == 22);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(periodType8);
        org.junit.Assert.assertNotNull(periodType9);
    }

    @Test
    public void test05432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05432");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime(126267350209L, dateTimeZone1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusMonths(46);
        int int8 = localDateTime7.getWeekyear();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes(15);
        org.joda.time.DateTime dateTime22 = localDateTime15.toDateTime((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = localDateTime15.toDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = dateTime10.withZoneRetainFields(dateTimeZone23);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.add((long) 'a');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.yearOfCentury();
        mutableDateTime26.addSeconds(0);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours34 = duration33.toStandardHours();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.months();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime46, periodType47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime40, periodType47);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime26, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime51 = dateTime25.plus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str56 = duration55.toString();
        boolean boolean57 = duration53.isShorterThan((org.joda.time.ReadableDuration) duration55);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period60 = duration59.toPeriod();
        org.joda.time.Duration duration63 = duration59.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration68 = duration65.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean69 = duration63.isLongerThan((org.joda.time.ReadableDuration) duration65);
        boolean boolean70 = duration55.isEqual((org.joda.time.ReadableDuration) duration65);
        org.joda.time.Duration duration72 = duration65.withMillis((long) 22);
        org.joda.time.Duration duration74 = duration65.withMillis(3024000005L);
        org.joda.time.Duration duration75 = duration50.plus((org.joda.time.ReadableDuration) duration65);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime7.plus((org.joda.time.ReadableDuration) duration75);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime2.plus((org.joda.time.ReadableDuration) duration75);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1973 + "'", int8 == 1973);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime26);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(hours34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 24 + "'", int37 == 24);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "PT86400S" + "'", str56, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(duration59);
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
    }

    @Test
    public void test05433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05433");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime17.toString(dateTimeFormatter19);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime17);
        mutableDateTime15.addDays(22);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime15.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime25 = property24.roundFloor();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 22 + "'", int18 == 22);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "2022-02-22T07:22:24.376Z" + "'", str20, "2022-02-22T07:22:24.376Z");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
    }

    @Test
    public void test05434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05434");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime1.copy();
        java.lang.String str10 = mutableDateTime9.toString();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime9.setHourOfDay(26485);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26485 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-08T23:59:00.999Z" + "'", str10, "1970-01-08T23:59:00.999Z");
    }

    @Test
    public void test05435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05435");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.secondOfDay();
        int int4 = mutableDateTime0.getDayOfWeek();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = duration9.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration13 = duration6.minus((org.joda.time.ReadableDuration) duration12);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration6, 19045);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime0.toMutableDateTime();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration22 = duration18.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(15);
        org.joda.time.Interval interval27 = duration22.toIntervalTo((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTime dateTime28 = dateTime26.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMinutes(15);
        org.joda.time.Chronology chronology33 = dateTime30.getChronology();
        org.joda.time.DateTime dateTime35 = dateTime30.plusHours(19045);
        org.joda.time.DateTime dateTime36 = dateTime30.toDateTimeISO();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = duration38.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        mutableDateTime42.add((long) 'a');
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime42.yearOfCentury();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration53 = duration50.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration54 = duration47.minus((org.joda.time.ReadableDuration) duration53);
        mutableDateTime42.add((org.joda.time.ReadableDuration) duration47);
        boolean boolean56 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration58 = duration47.minus((long) (byte) 0);
        org.joda.time.DateTime dateTime59 = dateTime30.minus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.DateTime dateTime61 = dateTime28.withDurationAdded((org.joda.time.ReadableDuration) duration47, 29);
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime65 = dateTime63.withZoneRetainFields(dateTimeZone64);
        boolean boolean67 = dateTime65.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology68 = dateTime65.getChronology();
        org.joda.time.Instant instant69 = new org.joda.time.Instant();
        org.joda.time.Instant instant71 = instant69.withMillis(0L);
        org.joda.time.DateTime dateTime72 = instant71.toDateTime();
        org.joda.time.DateTime dateTime74 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType75 = org.joda.time.PeriodType.months();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime74, periodType75);
        org.joda.time.DateTime.Property property77 = dateTime74.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = property77.getFieldType();
        org.joda.time.DateTime.Property property79 = dateTime65.property(dateTimeFieldType78);
        boolean boolean80 = dateTime28.isSupported(dateTimeFieldType78);
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime0.property(dateTimeFieldType78);
        java.util.Locale locale83 = java.util.Locale.forLanguageTag("Property[monthOfYear]");
        java.lang.String str84 = locale83.toLanguageTag();
        java.util.Calendar calendar85 = mutableDateTime0.toCalendar(locale83);
        java.lang.String str86 = locale83.toLanguageTag();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2 + "'", int4 == 2);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(period7);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(period19);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(duration54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(duration58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(chronology68);
        org.junit.Assert.assertNotNull(instant71);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(periodType75);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(property79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "und" + "'", str84, "und");
        org.junit.Assert.assertNotNull(calendar85);
// flaky:         org.junit.Assert.assertEquals(calendar85.toString(), "java.util.GregorianCalendar[time=3291002544516,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2074,MONTH=3,WEEK_OF_YEAR=16,WEEK_OF_MONTH=3,DAY_OF_MONTH=15,DAY_OF_YEAR=105,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=3,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=24,MILLISECOND=516,ZONE_OFFSET=0,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "und" + "'", str86, "und");
    }

    @Test
    public void test05436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05436");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 26177);
    }

    @Test
    public void test05437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05437");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        mutableDateTime0.setWeekyear((int) 'u');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime0.dayOfMonth();
        int int9 = mutableDateTime0.getEra();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setWeekOfWeekyear(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
    }

    @Test
    public void test05438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05438");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(15);
        org.joda.time.DateTime dateTime19 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = localDateTime12.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime7.withZoneRetainFields(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.yearOfCentury();
        mutableDateTime23.addSeconds(0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours31 = duration30.toStandardHours();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.months();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime43, periodType44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime37, periodType44);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime48 = dateTime22.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str53 = duration52.toString();
        boolean boolean54 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration60 = duration56.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration65 = duration62.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean66 = duration60.isLongerThan((org.joda.time.ReadableDuration) duration62);
        boolean boolean67 = duration52.isEqual((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration69 = duration62.withMillis((long) 22);
        org.joda.time.Duration duration71 = duration62.withMillis(3024000005L);
        org.joda.time.Duration duration72 = duration47.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime4.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property75 = localDateTime73.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime77 = localDateTime73.withMillisOfSecond(26224);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26224 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1973 + "'", int5 == 1973);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(hours31);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 24 + "'", int34 == 24);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(periodType44);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "PT86400S" + "'", str53, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration72);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property74);
        org.junit.Assert.assertNotNull(property75);
    }

    @Test
    public void test05439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05439");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period10 = period8.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        mutableDateTime17.setRounding(dateTimeField33);
        org.joda.time.Duration duration38 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime17.centuryOfEra();
        int int40 = mutableDateTime17.getDayOfWeek();
        mutableDateTime17.addMonths(0);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertNotNull(period4);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(period10);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(durationFieldType26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "PeriodType[YearDayTime]" + "'", str27, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\u82f1\u6587" + "'", str35, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
    }

    @Test
    public void test05440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05440");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        mutableDateTime10.add(51L);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.dayOfWeek();
        mutableDateTime10.setSecondOfDay(20);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime10.millisOfSecond();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getSecondOfMinute();
        org.joda.time.DateTime dateTime22 = dateTime18.withDurationAdded(0L, (int) '4');
        org.joda.time.LocalDate localDate23 = dateTime22.toLocalDate();
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate((long) (byte) -1);
        int int26 = localDate25.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        long long31 = dateTimeZone27.getMillisKeepLocal(dateTimeZone29, (long) 44);
        org.joda.time.DateTime dateTime32 = localDate25.toDateTimeAtMidnight(dateTimeZone27);
        java.util.Locale locale34 = null;
        java.lang.String str35 = dateTimeZone27.getName(946000L, locale34);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(dateTimeZone27);
        long long39 = dateTimeZone27.nextTransition((long) 25);
        org.joda.time.DateMidnight dateMidnight40 = localDate23.toDateMidnight(dateTimeZone27);
        mutableDateTime10.setZone(dateTimeZone27);
        mutableDateTime10.addWeekyears(26211);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 24 + "'", int19 == 24);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1969 + "'", int26 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 44L + "'", long31 == 44L);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "+00:00" + "'", str35, "+00:00");
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 25L + "'", long39 == 25L);
        org.junit.Assert.assertNotNull(dateMidnight40);
    }

    @Test
    public void test05441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05441");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (short) 0);
        java.lang.Object obj9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(obj9);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField17 = localDateTime15.getField((int) (byte) 0);
        long long19 = dateTimeField17.roundHalfEven((long) 1);
        int int20 = dateTime10.get(dateTimeField17);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) 'a');
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = dateTimeField17.getAsText((org.joda.time.ReadablePartial) localDateTime25, 53, locale29);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration37 = duration33.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime25.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property42 = localDateTime39.hourOfDay();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusMillis((int) (byte) 0);
        int int45 = localDateTime25.compareTo((org.joda.time.ReadablePartial) localDateTime39);
        int int46 = localDateTime25.getMonthOfYear();
        int int47 = property5.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "53" + "'", str6, "53");
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2022 + "'", int20 == 2022);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\u5fb7\u6587" + "'", str30, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "53" + "'", str31, "53");
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 2 + "'", int46 == 2);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
    }

    @Test
    public void test05442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05442");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = dateTime26.toInstant();
        org.joda.time.DateTime dateTime37 = dateTime26.withDurationAdded((long) 3, 4);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getYearOfCentury();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute(53);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration51 = duration44.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType57 = periodType54.getFieldType((int) (short) 0);
        java.lang.String str58 = periodType54.toString();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration44, periodType54);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime37, periodType54);
        org.joda.time.DateTime dateTime62 = dateTime37.minusMonths(26177);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 24 + "'", int11 == 24);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(instant34);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 22 + "'", int40 == 22);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(period45);
        org.junit.Assert.assertNotNull(duration47);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(periodType54);
        org.junit.Assert.assertNotNull(durationFieldType57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "PeriodType[YearDayTime]" + "'", str58, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(dateTime62);
    }

    @Test
    public void test05443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05443");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        java.lang.String str17 = dateTimeZone14.toString();
        java.lang.String str18 = dateTimeZone14.getID();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.copy();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.yearOfCentury();
        mutableDateTime21.setHourOfDay(9);
        int int28 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) mutableDateTime21);
        int int29 = mutableDateTime21.getSecondOfDay();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes(15);
        org.joda.time.Chronology chronology35 = dateTime32.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.hours();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(1440L, chronology35);
        org.joda.time.DateTimeField dateTimeField38 = chronology35.hourOfDay();
        mutableDateTime21.setRounding(dateTimeField38);
        long long41 = dateTimeField38.roundCeiling((long) 37094831);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "UTC" + "'", str17, "UTC");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 33744 + "'", int29 == 33744);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 39600000L + "'", long41 == 39600000L);
    }

    @Test
    public void test05444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05444");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj2 = mutableDateTime1.clone();
        mutableDateTime1.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add(1L);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        long long12 = dateTimeZone8.getMillisKeepLocal(dateTimeZone10, (long) 44);
        org.joda.time.DateTime dateTime13 = org.joda.time.DateTime.now(dateTimeZone8);
        mutableDateTime7.setZoneRetainFields(dateTimeZone8);
        mutableDateTime7.addSeconds((int) (short) 10);
        java.lang.Object obj17 = mutableDateTime7.clone();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period24 = period22.normalizedStandard(periodType23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean27 = localDate25.isSupported(dateTimeFieldType26);
        org.joda.time.LocalDate.Property property28 = localDate25.yearOfEra();
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str34 = duration33.toString();
        org.joda.time.Instant instant35 = instant29.minus((org.joda.time.ReadableDuration) duration33);
        int int36 = property28.getDifference((org.joda.time.ReadableInstant) instant29);
        org.joda.time.Duration duration39 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant40 = instant29.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str43 = duration42.toString();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours46 = duration45.toStandardHours();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology47);
        int int49 = dateTime48.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration51 = duration42.plus((org.joda.time.ReadableDuration) duration45);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period54 = duration53.toPeriod();
        org.joda.time.Duration duration56 = duration53.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now();
        mutableDateTime57.add((long) 'a');
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime57.yearOfCentury();
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period63 = duration62.toPeriod();
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration68 = duration65.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration69 = duration62.minus((org.joda.time.ReadableDuration) duration68);
        mutableDateTime57.add((org.joda.time.ReadableDuration) duration62);
        boolean boolean71 = duration56.isShorterThan((org.joda.time.ReadableDuration) duration62);
        boolean boolean72 = duration45.isLongerThan((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Instant instant73 = instant40.minus((org.joda.time.ReadableDuration) duration56);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours76 = duration75.toStandardHours();
        org.joda.time.Chronology chronology77 = null;
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime(chronology77);
        int int79 = dateTime78.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration75, (org.joda.time.ReadableInstant) dateTime78);
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant83 = new org.joda.time.Instant();
        org.joda.time.Instant instant85 = instant83.withMillis(0L);
        org.joda.time.DateTime dateTime86 = instant85.toDateTime();
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType89 = org.joda.time.PeriodType.months();
        org.joda.time.Period period90 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime86, (org.joda.time.ReadableInstant) dateTime88, periodType89);
        org.joda.time.Period period91 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration75, (org.joda.time.ReadableInstant) dateTime82, periodType89);
        org.joda.time.Instant instant93 = instant40.withDurationAdded((org.joda.time.ReadableDuration) duration75, 113);
        org.joda.time.Chronology chronology94 = instant93.getChronology();
        org.joda.time.Chronology chronology95 = instant93.getChronology();
        org.joda.time.Period period96 = new org.joda.time.Period((long) 26186255, (long) 53, periodType23, chronology95);
        org.joda.time.Period period97 = new org.joda.time.Period(readableDuration0, (org.joda.time.ReadableInstant) mutableDateTime7, periodType23);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(obj2);
// flaky:         org.junit.Assert.assertEquals(obj2.toString(), "2022-02-22T07:22:24.628Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "2022-02-22T07:22:24.628Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "2022-02-22T07:22:24.628Z");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 44L + "'", long12 == 44L);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(obj17);
        org.junit.Assert.assertEquals(obj17.toString(), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj17), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj17), "2022-02-23T00:00:10.046Z");
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(periodType23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(instant31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT86400S" + "'", str34, "PT86400S");
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(instant40);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "PT86400S" + "'", str43, "PT86400S");
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(hours46);
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 24 + "'", int49 == 24);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(period54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(duration62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(duration65);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(instant73);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(hours76);
// flaky:         org.junit.Assert.assertTrue("'" + int79 + "' != '" + 24 + "'", int79 == 24);
        org.junit.Assert.assertNotNull(instant85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(periodType89);
        org.junit.Assert.assertNotNull(instant93);
        org.junit.Assert.assertNotNull(chronology94);
        org.junit.Assert.assertNotNull(chronology95);
    }

    @Test
    public void test05445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05445");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        long long19 = dateTimeField16.set((long) 5, (int) (short) 1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (short) 100, chronology21);
        int int23 = localTime22.getMillisOfDay();
        org.joda.time.LocalTime.Property property24 = localTime22.millisOfSecond();
        org.joda.time.LocalTime localTime26 = property24.addCopy(947880L);
        int int27 = dateTimeField16.getMinimumValue((org.joda.time.ReadablePartial) localTime26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.dayOfYear();
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType28.getDurationType();
        boolean boolean30 = localTime26.isSupported(durationFieldType29);
        org.joda.time.LocalTime.Property property31 = localTime26.minuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 100 + "'", int23 == 100);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test05446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05446");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("2022-02-22T07:17:38.454Z");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime1);
        org.joda.time.Chronology chronology4 = null;
        java.util.Locale locale5 = java.util.Locale.GERMAN;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale5.getDisplayVariant(locale6);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket8 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology4, locale6);
        java.lang.Object obj9 = dateTimeParserBucket8.saveState();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime((long) (short) 100, chronology11);
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str14 = durationFieldType13.getName();
        boolean boolean15 = localTime12.isSupported(durationFieldType13);
        boolean boolean16 = dateTimeParserBucket8.restoreState((java.lang.Object) boolean15);
        org.joda.time.Chronology chronology17 = dateTimeParserBucket8.getChronology();
        long long20 = dateTimeParserBucket8.computeMillis(true, "");
        int int21 = dateTimeParserBucket8.getOffset();
        java.lang.Object obj22 = dateTimeParserBucket8.saveState();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.weekyear();
        dateTimeParserBucket8.saveField(dateTimeFieldType23, 0);
        boolean boolean26 = mutableDateTime1.isSupported(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(obj9);
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "weeks" + "'", str14, "weeks");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 97L + "'", long20 == 97L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(obj22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
    }

    @Test
    public void test05447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05447");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(4801284961717L);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfMonth();
        org.joda.time.LocalDateTime.Property property8 = localDateTime6.weekyear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withMillisOfDay(58);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale15 = java.util.Locale.GERMAN;
        java.lang.String str16 = locale15.getDisplayName();
        java.lang.String str17 = dateTimeZone13.getName(100L, locale15);
        java.lang.String str18 = dateTimeZone13.toString();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) 1970, dateTimeZone13);
        java.lang.String str21 = dateTimeZone13.getShortName((long) 6);
        long long23 = dateTimeZone13.nextTransition(0L);
        org.joda.time.DateTime dateTime24 = localDateTime9.toDateTime(dateTimeZone13);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((java.lang.Object) 4801284961717L, dateTimeZone13);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((java.lang.Object) 4801284961717L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: java.lang.Long");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "de");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u5fb7\u6587" + "'", str16, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "+00:00" + "'", str17, "+00:00");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "UTC" + "'", str18, "UTC");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "+00:00" + "'", str21, "+00:00");
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test05448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05448");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone2 = mutableDateTime0.getZone();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        java.lang.String str18 = periodType16.getName();
        java.lang.String str19 = periodType16.toString();
        org.joda.time.PeriodType periodType20 = periodType16.withWeeksRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType22 = dateTimeFieldType21.getDurationType();
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant32 = instant25.plus((org.joda.time.ReadableDuration) duration31);
        long long33 = instant32.getMillis();
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.months();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType21.getField(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now(chronology34);
        org.joda.time.Period period39 = new org.joda.time.Period(1553014L, (long) 25, periodType16, chronology34);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((java.lang.Object) dateTimeZone2, periodType16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.tz.FixedDateTimeZone");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Standard" + "'", str18, "Standard");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PeriodType[Standard]" + "'", str19, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertNotNull(instant25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertNotNull(instant32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 86400000L + "'", long33 == 86400000L);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(localDateTime38);
    }

    @Test
    public void test05449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05449");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration9 = duration6.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean10 = duration4.isLongerThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration11 = duration1.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str17 = duration16.toString();
        org.joda.time.Instant instant18 = instant12.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime mutableDateTime19 = instant12.toMutableDateTime();
        mutableDateTime19.addDays(1424);
        int int22 = mutableDateTime19.getHourOfDay();
        org.joda.time.Chronology chronology23 = mutableDateTime19.getChronology();
        org.joda.time.Interval interval24 = duration11.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime32 = property30.addWrapFieldToCopy(8);
        org.joda.time.DateTimeField dateTimeField33 = property30.getField();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withYearOfCentury(58);
        int int42 = property30.compareTo((org.joda.time.ReadablePartial) localDateTime41);
        int int43 = localDateTime41.getYear();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        mutableDateTime44.add((long) 'a');
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.yearOfCentury();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration55 = duration52.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration56 = duration49.minus((org.joda.time.ReadableDuration) duration55);
        mutableDateTime44.add((org.joda.time.ReadableDuration) duration49);
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now();
        mutableDateTime58.add((long) 'a');
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime58.yearOfCentury();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period64 = duration63.toPeriod();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration69 = duration66.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration70 = duration63.minus((org.joda.time.ReadableDuration) duration69);
        mutableDateTime58.add((org.joda.time.ReadableDuration) duration63);
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime77 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property80 = localDateTime77.hourOfDay();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime77.plusMillis((int) (byte) 0);
        int int83 = localDateTime76.compareTo((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.Chronology chronology84 = localDateTime77.getChronology();
        boolean boolean85 = duration63.equals((java.lang.Object) chronology84);
        long long86 = duration63.getStandardHours();
        org.joda.time.Duration duration87 = duration49.plus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.LocalDateTime localDateTime89 = localDateTime41.withDurationAdded((org.joda.time.ReadableDuration) duration87, 47831274);
        org.joda.time.Duration duration90 = duration11.plus((org.joda.time.ReadableDuration) duration87);
        java.util.Locale.Builder builder91 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder92 = builder91.clear();
        java.util.Locale locale93 = java.util.Locale.GERMAN;
        java.lang.String str94 = locale93.getDisplayName();
        java.lang.String str95 = locale93.getISO3Language();
        java.util.Locale.Builder builder96 = builder92.setLocale(locale93);
        java.lang.String str97 = locale93.getVariant();
        java.util.Set<java.lang.Character> charSet98 = locale93.getExtensionKeys();
        boolean boolean99 = duration11.equals((java.lang.Object) locale93);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertNotNull(period2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertNotNull(duration9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(instant14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "PT86400S" + "'", str17, "PT86400S");
        org.junit.Assert.assertNotNull(instant18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 7 + "'", int22 == 7);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(interval24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 2058 + "'", int43 == 2058);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(duration55);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(mutableDateTime58);
        org.junit.Assert.assertNotNull(property61);
        org.junit.Assert.assertNotNull(duration63);
        org.junit.Assert.assertNotNull(period64);
        org.junit.Assert.assertNotNull(duration66);
        org.junit.Assert.assertNotNull(duration69);
        org.junit.Assert.assertNotNull(duration70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1 + "'", int83 == 1);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + false + "'", boolean85 == false);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 24L + "'", long86 == 24L);
        org.junit.Assert.assertNotNull(duration87);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(duration90);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "de");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "\u5fb7\u6587" + "'", str94, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "deu" + "'", str95, "deu");
        org.junit.Assert.assertNotNull(builder96);
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertNotNull(charSet98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test05450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05450");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        org.joda.time.DateTime dateTime6 = dateTime1.plusDays((int) '#');
        org.joda.time.DateTime.Property property7 = dateTime1.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(dateTimeZone8);
        org.joda.time.LocalTime localTime11 = localTime9.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology12 = localTime11.getChronology();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfCentury();
        int int16 = dateTime14.getWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime14.withEarlierOffsetAtOverlap();
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        mutableDateTime19.setZoneRetainFields(dateTimeZone20);
        org.joda.time.DateTime dateTime23 = localTime11.toDateTimeToday(dateTimeZone20);
        long long25 = dateTimeZone20.nextTransition((long) 161);
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(dateTimeZone20);
        org.joda.time.DateTime dateTime27 = dateTime1.withZoneRetainFields(dateTimeZone20);
        long long31 = dateTimeZone20.convertLocalToUTC(31535998031L, false, 1393053625278L);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 24 + "'", int2 == 24);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 53 + "'", int4 == 53);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2022 + "'", int16 == 2022);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2022-02-22T07:22:24.858Z" + "'", str18, "2022-02-22T07:22:24.858Z");
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 161L + "'", long25 == 161L);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 31535998031L + "'", long31 == 31535998031L);
    }

    @Test
    public void test05451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05451");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        mutableDateTime10.add(51L);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.add(4);
        org.joda.time.MutableDateTime mutableDateTime16 = property13.roundCeiling();
        org.joda.time.MutableDateTime mutableDateTime17 = property13.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = property13.roundFloor();
        mutableDateTime18.addMillis(480);
        mutableDateTime18.addMillis(26371489);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
        org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }

    @Test
    public void test05452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05452");
        org.joda.time.Chronology chronology1 = null;
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale2.getDisplayVariant(locale3);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket5 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology1, locale3);
        java.lang.Object obj6 = dateTimeParserBucket5.saveState();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime((long) (short) 100, chronology8);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str11 = durationFieldType10.getName();
        boolean boolean12 = localTime9.isSupported(durationFieldType10);
        boolean boolean13 = dateTimeParserBucket5.restoreState((java.lang.Object) boolean12);
        org.joda.time.Chronology chronology14 = dateTimeParserBucket5.getChronology();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime18 = dateTime16.withZoneRetainFields(dateTimeZone17);
        dateTimeParserBucket5.setZone(dateTimeZone17);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.yearOfEra();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder24.clear();
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str28 = locale26.getISO3Language();
        java.lang.String str29 = locale26.getISO3Country();
        java.util.Locale.Builder builder30 = builder25.setLocale(locale26);
        java.util.Locale locale31 = locale26.stripExtensions();
        dateTimeParserBucket5.saveField(dateTimeFieldType22, "1969-12-31", locale26);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.centuryOfEra();
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        dateTimeParserBucket5.saveField(dateTimeFieldType33, "", locale36);
        dateTimeParserBucket5.setPivotYear((java.lang.Integer) 575);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime46 = property44.set(45);
        org.joda.time.MutableDateTime mutableDateTime47 = property44.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime49 = property44.add(45);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        long long53 = dateTimeZone50.previousTransition(100L);
        int int55 = dateTimeZone50.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime56 = mutableDateTime49.toDateTime(dateTimeZone50);
        mutableDateTime42.setZoneRetainFields(dateTimeZone50);
        java.lang.String str59 = dateTimeZone50.getNameKey((long) 36950209);
        java.lang.String str60 = dateTimeZone50.getID();
        long long63 = dateTimeZone50.convertLocalToUTC(1645514162999L, true);
        dateTimeParserBucket5.setZone(dateTimeZone50);
        java.lang.Object obj65 = dateTimeParserBucket5.saveState();
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(obj6);
        org.junit.Assert.assertNotNull(durationFieldType10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weeks" + "'", str11, "weeks");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "de");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\u5fb7\u6587" + "'", str27, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "deu" + "'", str28, "deu");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "de");
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "de");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
        org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L + "'", long53 == 100L);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "UTC" + "'", str59, "UTC");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "UTC" + "'", str60, "UTC");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1645514162999L + "'", long63 == 1645514162999L);
        org.junit.Assert.assertNotNull(obj65);
    }

    @Test
    public void test05453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05453");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes(15);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withHourOfDay((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusMillis(299);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withMillisOfDay(26175904);
        int int18 = localDateTime15.getCenturyOfEra();
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException22 = new java.io.IOException("");
        java.io.IOException iOException23 = new java.io.IOException((java.lang.Throwable) iOException22);
        boolean boolean24 = mutableDateTime20.equals((java.lang.Object) iOException22);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean28 = localDate25.isSupported(dateTimeFieldType27);
        org.joda.time.DurationFieldType durationFieldType29 = dateTimeFieldType27.getRangeDurationType();
        mutableDateTime20.set(dateTimeFieldType27, 4);
        java.lang.String str32 = dateTimeFieldType27.getName();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime36 = dateTime34.withZoneRetainFields(dateTimeZone35);
        boolean boolean38 = dateTime36.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology39 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType27.getField(chronology39);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime42 = localDateTime15.withField(dateTimeFieldType27, 33471);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 33471 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 20 + "'", int18 == 20);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(durationFieldType29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "minuteOfDay" + "'", str32, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
    }

    @Test
    public void test05454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05454");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.monthOfYear();
        org.joda.time.ReadablePartial readablePartial8 = null;
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.lang.String str13 = locale12.getDisplayName();
        java.lang.String str14 = dateTimeZone10.getName(100L, locale12);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(948227L, dateTimeZone10);
        long long16 = mutableDateTime15.getMillis();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration23 = duration20.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean24 = duration18.isLongerThan((org.joda.time.ReadableDuration) duration23);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField33 = localDateTime31.getField((int) (byte) 0);
        long long35 = dateTimeField33.roundHalfEven((long) 1);
        int int36 = dateTime26.get(dateTimeField33);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) 'a');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime41, 53, locale45);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration53 = duration49.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime41.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.hourOfDay();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.plusMillis((int) (byte) 0);
        int int61 = localDateTime41.compareTo((org.joda.time.ReadablePartial) localDateTime55);
        boolean boolean62 = duration18.equals((java.lang.Object) int61);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        int int65 = dateTime64.getSecondOfMinute();
        int int66 = dateTime64.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.PeriodType periodType69 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod70 = new org.joda.time.MutablePeriod(readableInstant67, readableInstant68, periodType69);
        mutablePeriod70.setYears((int) '#');
        mutablePeriod70.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime75 = dateTime64.plus((org.joda.time.ReadablePeriod) mutablePeriod70);
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime64);
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableDuration) duration18);
        org.joda.time.Period period79 = period77.withMillis(26186255);
        int[] intArray80 = period79.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology4.validate(readablePartial8, intArray80);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(durationField5);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u5fb7\u6587" + "'", str13, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "+00:00" + "'", str14, "+00:00");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 948227L + "'", long16 == 948227L);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2022 + "'", int36 == 2022);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\u5fb7\u6587" + "'", str46, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "53" + "'", str47, "53");
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 1 + "'", int61 == 1);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 25 + "'", int65 == 25);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 2022 + "'", int66 == 2022);
        org.junit.Assert.assertNotNull(periodType69);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(period79);
        org.junit.Assert.assertNotNull(intArray80);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray80), "[0, 0, 0, 0, 0, 1, 40, 26186255]");
    }

    @Test
    public void test05455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05455");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addWeekyears((int) (byte) 1);
        mutableDateTime0.setDate((long) 26246362);
        mutableDateTime0.addMinutes(53);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.secondOfMinute();
        int int11 = mutableDateTime0.getCenturyOfEra();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 19 + "'", int11 == 19);
    }

    @Test
    public void test05456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05456");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.Chronology chronology2 = instant0.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = chronology2.getDateTimeMillis(0L, 26503844, 52681, 37260000, 621);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26503844 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(chronology2);
    }

    @Test
    public void test05457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05457");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone3.getName(946000L, locale10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone3);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(dateTimeZone3);
        long long15 = dateTimeZone3.nextTransition((long) 25);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime16.copy();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime23 = property20.add((long) (byte) 10);
        int int24 = mutableDateTime23.getCenturyOfEra();
        mutableDateTime23.setMinuteOfDay(1424);
        org.joda.time.DateTimeField dateTimeField27 = mutableDateTime23.getRoundingField();
        int int28 = dateTimeZone3.getOffset((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime23.minuteOfDay();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1969 + "'", int2 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
        org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 44L + "'", long7 == 44L);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "+00:00" + "'", str11, "+00:00");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 25L + "'", long15 == 25L);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 20 + "'", int24 == 20);
        org.junit.Assert.assertNull(dateTimeField27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(property29);
    }

    @Test
    public void test05458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05458");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.LocalDate localDate17 = localDate7.minus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.LocalDate.Property property18 = localDate7.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj20 = mutableDateTime19.clone();
        mutableDateTime19.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime19.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.add(1L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        long long30 = dateTimeZone26.getMillisKeepLocal(dateTimeZone28, (long) 44);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(dateTimeZone26);
        mutableDateTime25.setZoneRetainFields(dateTimeZone26);
        java.util.Locale.Builder builder34 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder34.clear();
        java.util.Locale locale36 = builder35.build();
        java.lang.String str37 = dateTimeZone26.getName(555370422L, locale36);
        org.joda.time.DateTime dateTime38 = localDate7.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetHours(23);
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.forTimeZone(timeZone41);
        org.joda.time.Interval interval43 = localDate7.toInterval(dateTimeZone42);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.eras();
        long long52 = chronology47.add(0L, (long) 2022, (int) '4');
        org.joda.time.ReadableDuration readableDuration53 = null;
        org.joda.time.ReadableInstant readableInstant54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period(readableDuration53, readableInstant54);
        int[] intArray58 = chronology47.get((org.joda.time.ReadablePeriod) period55, (long) 0, (long) 48);
        org.joda.time.Period period60 = period55.withDays((int) 'a');
        org.joda.time.LocalDate localDate62 = localDate7.withPeriodAdded((org.joda.time.ReadablePeriod) period60, 232294);
        int int63 = localDate62.getDayOfYear();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(obj20);
// flaky:         org.junit.Assert.assertEquals(obj20.toString(), "2022-02-22T07:22:25.275Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj20), "2022-02-22T07:22:25.275Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj20), "2022-02-22T07:22:25.275Z");
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
        org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 44L + "'", long30 == 44L);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "+00:00" + "'", str37, "+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
        org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+23:00");
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(interval43);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(chronology47);
        org.junit.Assert.assertNotNull(durationField48);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 105144L + "'", long52 == 105144L);
        org.junit.Assert.assertNotNull(intArray58);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray58), "[0, 0, 0, 0, 0, 0, 0, 48]");
        org.junit.Assert.assertNotNull(period60);
        org.junit.Assert.assertNotNull(localDate62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 297 + "'", int63 == 297);
    }

    @Test
    public void test05459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05459");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant17, readableInstant18, periodType19);
        org.joda.time.DurationFieldType durationFieldType22 = periodType19.getFieldType((int) (short) 0);
        java.lang.String str23 = periodType19.toString();
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 53, (long) (-1), periodType19, chronology27);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(chronology27);
        org.joda.time.Period period30 = new org.joda.time.Period((long) 0, periodType5, chronology27);
        org.joda.time.Period period32 = period30.minusMillis(26157);
        org.joda.time.PeriodType periodType33 = period30.getPeriodType();
        org.junit.Assert.assertNotNull(periodType5);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "PeriodType[YearDayTime]" + "'", str9, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(periodType19);
        org.junit.Assert.assertNotNull(durationFieldType22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "PeriodType[YearDayTime]" + "'", str23, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(localDate29);
        org.junit.Assert.assertNotNull(period32);
        org.junit.Assert.assertNotNull(periodType33);
    }

    @Test
    public void test05460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05460");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.millisOfDay();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property14 = localDate13.dayOfYear();
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.LocalDate localDate23 = localDate13.withPeriodAdded((org.joda.time.ReadablePeriod) period18, 3);
        org.joda.time.DateTime dateTime24 = localDate23.toDateTimeAtCurrentTime();
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime24);
        java.util.GregorianCalendar gregorianCalendar26 = mutableDateTime0.toGregorianCalendar();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime0.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime29 = property27.add(1645514229693L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Value cannot fit in an int: 1645514229693");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(duration6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "PT86400S" + "'", str7, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(hours9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(period20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "PT0.099S" + "'", str21, "PT0.099S");
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(gregorianCalendar26);
        org.junit.Assert.assertNotNull(property27);
    }

    @Test
    public void test05461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05461");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.set(44);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.dayOfWeek();
        mutableDateTime42.setDate((long) 26212118);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime48 = property46.set(26221);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26221 for dayOfYear must be in the range [1,365]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[YearDayTime]" + "'", str35, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property46);
    }

    @Test
    public void test05462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05462");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration4.plus((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = duration15.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.add((long) 'a');
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime19.yearOfCentury();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration30 = duration27.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration31 = duration24.minus((org.joda.time.ReadableDuration) duration30);
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration24);
        boolean boolean33 = duration18.isShorterThan((org.joda.time.ReadableDuration) duration24);
        boolean boolean34 = duration7.isLongerThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration42 = duration38.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime36, (org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration44 = duration18.plus((org.joda.time.ReadableDuration) duration42);
        mutablePeriod2.add((org.joda.time.ReadableDuration) duration42);
        int int46 = mutablePeriod2.getWeeks();
        mutablePeriod2.setPeriod(26429, 310, 2017, 26451, 26422, 62404, 9000, 299);
        mutablePeriod2.setMonths(50);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "PT86400S" + "'", str5, "PT86400S");
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 25 + "'", int11 == 25);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(period25);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(duration31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(duration42);
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 4 + "'", int46 == 4);
    }

    @Test
    public void test05463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05463");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime();
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getYearOfCentury();
        int int11 = dateTime9.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime9.plus((long) 15);
        org.joda.time.DateTime.Property property14 = dateTime13.millisOfSecond();
        org.joda.time.DateTime dateTime16 = dateTime13.withCenturyOfEra((int) '#');
        org.joda.time.DateTime dateTime18 = dateTime13.withYear((int) 'u');
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withHoursRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Chronology chronology30 = instant29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.eras();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) 44, chronology30);
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType25.getField(chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod((long) (-292275054), periodType22, chronology30);
        org.joda.time.PeriodType periodType38 = periodType22.withMonthsRemoved();
        java.lang.String str39 = periodType38.getName();
        java.lang.String str40 = periodType38.getName();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableInstant) dateTime13, periodType38);
        boolean boolean42 = dateTime13.isEqualNow();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 2022 + "'", int3 == 2022);
        org.junit.Assert.assertNotNull(dateTime4);
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "2022-02-22T07:22:25.436Z" + "'", str5, "2022-02-22T07:22:25.436Z");
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 22 + "'", int10 == 22);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2022 + "'", int11 == 2022);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(periodType24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(periodType38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "YearDayTime" + "'", str39, "YearDayTime");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "YearDayTime" + "'", str40, "YearDayTime");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test05464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05464");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours5 = duration4.toStandardHours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        long long11 = duration4.getStandardHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getSecondOfMinute();
        int int15 = dateTime13.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17, periodType18);
        mutablePeriod19.setYears((int) '#');
        mutablePeriod19.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime24 = dateTime13.plus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtCurrentTime(dateTimeZone27);
        org.joda.time.DateTime dateTime30 = dateTime13.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = dateTime13.minusYears(7);
        org.joda.time.YearMonthDay yearMonthDay33 = dateTime13.toYearMonthDay();
        org.joda.time.DateTime.Property property34 = dateTime13.era();
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        mutableDateTime35.add((long) 'a');
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime35.yearOfCentury();
        mutableDateTime35.addSeconds(0);
        mutableDateTime35.setWeekyear((int) 'u');
        java.lang.Object obj43 = null;
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        mutableDateTime44.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime44.copy();
        mutableDateTime44.setDate((long) '#');
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property51 = localDate50.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean53 = localDate50.isSupported(dateTimeFieldType52);
        int int54 = localDate50.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight56 = localDate50.toDateMidnight(dateTimeZone55);
        org.joda.time.DateTime dateTime57 = mutableDateTime44.toDateTime(dateTimeZone55);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime59 = new org.joda.time.MutableDateTime(obj43, dateTimeZone55);
        java.lang.String str61 = dateTimeZone55.getName(105144L);
        long long63 = dateTimeZone55.nextTransition(3155760000000L);
        mutableDateTime35.setZone(dateTimeZone55);
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now(dateTimeZone55);
        boolean boolean66 = dateTime13.isEqual((org.joda.time.ReadableInstant) mutableDateTime65);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime13);
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT86400S" + "'", str2, "PT86400S");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(hours5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 25 + "'", int8 == 25);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 25 + "'", int14 == 25);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2022 + "'", int15 == 2022);
        org.junit.Assert.assertNotNull(periodType18);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
        org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(yearMonthDay33);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime35);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 53 + "'", int54 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(dateMidnight56);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00" + "'", str61, "+00:00");
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 3155760000000L + "'", long63 == 3155760000000L);
        org.junit.Assert.assertNotNull(mutableDateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
    }

    @Test
    public void test05465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05465");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes(15);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = localDateTime4.toDateTime(dateTimeZone12);
        java.lang.String str14 = dateTimeZone12.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        int int16 = mutableDateTime15.getDayOfYear();
        mutableDateTime15.setWeekyear(2320);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "UTC" + "'", str14, "UTC");
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
    }

    @Test
    public void test05466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05466");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addHours((int) (byte) 10);
        int int27 = mutableDateTime10.getSecondOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        boolean boolean37 = localDate28.isSupported(durationFieldType36);
        mutableDateTime10.add(durationFieldType36, (-292275054));
        org.joda.time.LocalDate localDate41 = localDate7.withFieldAdded(durationFieldType36, 53);
        org.joda.time.LocalDate.Property property42 = localDate7.yearOfCentury();
        int int43 = property42.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.set(45);
        org.joda.time.MutableDateTime mutableDateTime48 = property45.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime50 = property45.add(45);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        long long54 = dateTimeZone51.previousTransition(100L);
        int int56 = dateTimeZone51.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime57 = mutableDateTime50.toDateTime(dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.withDurationAdded(readableDuration58, (int) (byte) -1);
        int int61 = property42.getDifference((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTimeField dateTimeField62 = property42.getField();
        org.joda.time.DurationField durationField63 = dateTimeField62.getRangeDurationField();
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(duration15);
        org.junit.Assert.assertNotNull(period16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(property24);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 62545 + "'", int27 == 62545);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(durationFieldType36);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(localDate41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 99 + "'", int43 == 99);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime47);
        org.junit.Assert.assertNotNull(mutableDateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
        org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L + "'", long54 == 100L);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + (-6977) + "'", int61 == (-6977));
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
    }

    @Test
    public void test05467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05467");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException4 = new java.io.IOException("");
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        boolean boolean6 = mutableDateTime2.equals((java.lang.Object) iOException4);
        org.joda.time.Duration duration9 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration9, 1424);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration19 = duration16.withDurationAdded((long) (short) 100, (int) ' ');
        long long20 = duration19.getMillis();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.months();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime30, periodType31);
        boolean boolean33 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        int int34 = dateTime28.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime28, periodType37);
        org.joda.time.Period period41 = new org.joda.time.Period(0L, 24L, periodType37);
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableInstant) mutableDateTime2, periodType37);
        org.joda.time.Period period43 = period42.toPeriod();
        int int45 = period43.getValue(0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(duration19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 86403200L + "'", long20 == 86403200L);
        org.junit.Assert.assertNotNull(instant23);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(instant27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(period43);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + (-52) + "'", int45 == (-52));
    }

    @Test
    public void test05468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05468");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.Instant instant6 = instant4.minus((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        long long19 = chronology14.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter10.withChronology(chronology14);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter21.withZoneUTC();
        boolean boolean23 = instant6.equals((java.lang.Object) dateTimeFormatter21);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration25, readableInstant26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.Period period33 = period31.minusSeconds((-1));
        java.lang.String str34 = period31.toString();
        org.joda.time.Period period35 = period31.toPeriod();
        org.joda.time.PeriodType periodType36 = period31.getPeriodType();
        org.joda.time.Period period37 = period27.normalizedStandard(periodType36);
        java.lang.String str38 = periodType36.getName();
        org.joda.time.PeriodType periodType39 = periodType36.withYearsRemoved();
        org.joda.time.PeriodType periodType40 = periodType39.withSecondsRemoved();
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.Chronology chronology44 = instant43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.eras();
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(chronology44);
        org.joda.time.DurationField durationField47 = chronology44.eras();
        org.joda.time.DateTimeField dateTimeField48 = chronology44.hourOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology44.clockhourOfHalfday();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.now(chronology44);
        org.joda.time.Period period51 = new org.joda.time.Period((long) 55, periodType39, chronology44);
        java.lang.String str52 = periodType39.toString();
        java.lang.String str53 = periodType39.getName();
        org.joda.time.PeriodType periodType54 = periodType39.withDaysRemoved();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((java.lang.Object) instant6, periodType54);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No period converter found for type: org.joda.time.Instant");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(instant4);
        org.junit.Assert.assertNotNull(instant6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(instant13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 105144L + "'", long19 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(period33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "PT0.099S" + "'", str34, "PT0.099S");
        org.junit.Assert.assertNotNull(period35);
        org.junit.Assert.assertNotNull(periodType36);
        org.junit.Assert.assertNotNull(period37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Standard" + "'", str38, "Standard");
        org.junit.Assert.assertNotNull(periodType39);
        org.junit.Assert.assertNotNull(periodType40);
        org.junit.Assert.assertNotNull(instant43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(localTime50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "PeriodType[StandardNoYears]" + "'", str52, "PeriodType[StandardNoYears]");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "StandardNoYears" + "'", str53, "StandardNoYears");
        org.junit.Assert.assertNotNull(periodType54);
    }

    @Test
    public void test05469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05469");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.set(45);
        org.joda.time.MutableDateTime mutableDateTime7 = property4.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime9 = property4.add(45);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        long long13 = dateTimeZone10.previousTransition(100L);
        int int15 = dateTimeZone10.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime16 = mutableDateTime9.toDateTime(dateTimeZone10);
        mutableDateTime2.setZoneRetainFields(dateTimeZone10);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((-29862722304000000L), dateTimeZone10);
        org.joda.time.LocalDate.Property property19 = localDate18.weekyear();
        org.joda.time.LocalDate.Property property20 = localDate18.weekyear();
        org.joda.time.LocalDate localDate22 = localDate18.plusMonths(707);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
        org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L + "'", long13 == 100L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate22);
    }

    @Test
    public void test05470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05470");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = property40.set(44);
        org.joda.time.MutableDateTime mutableDateTime44 = property40.addWrapField(1969);
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str50 = duration49.toString();
        org.joda.time.Instant instant51 = instant45.minus((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Instant instant52 = instant45.toInstant();
        org.joda.time.DateTime dateTime53 = instant45.toDateTime();
        mutableDateTime44.setMillis((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime56 = dateTime53.withMillis((long) 34);
        int int57 = dateTime56.getYear();
        org.joda.time.DateTime dateTime58 = dateTime56.withTimeAtStartOfDay();
        org.joda.time.LocalDate localDate59 = dateTime58.toLocalDate();
        org.joda.time.DateTime dateTime61 = dateTime58.minus((long) (byte) 1);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 22 + "'", int17 == 22);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(periodType31);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "PeriodType[YearDayTime]" + "'", str35, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(instant47);
        org.junit.Assert.assertNotNull(duration49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT86400S" + "'", str50, "PT86400S");
        org.junit.Assert.assertNotNull(instant51);
        org.junit.Assert.assertNotNull(instant52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1970 + "'", int57 == 1970);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(localDate59);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test05471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05471");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.setSecondOfDay(1973);
        org.joda.time.DateTime dateTime20 = mutableDateTime16.toDateTime();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 26245168);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean30 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Duration duration32 = duration24.minus(966164L);
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.dayTime();
        org.joda.time.Period period34 = duration24.toPeriod(periodType33);
        org.joda.time.DateTime dateTime35 = dateTime22.plus((org.joda.time.ReadableDuration) duration24);
        boolean boolean36 = dateTime20.isEqual((org.joda.time.ReadableInstant) dateTime22);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(periodType33);
        org.junit.Assert.assertNotNull(period34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
    }

    @Test
    public void test05472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05472");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.plusMillis(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.minusMonths(26148);
        int int15 = localDateTime10.size();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime10.minusHours(1439);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime10.minusDays(547820);
        int int20 = localDateTime10.getMonthOfYear();
        int int21 = localDateTime10.getYearOfCentury();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime10.withMillisOfDay(26246362);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        int int27 = dateTime25.getWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property29 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime30 = property29.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime31 = property29.roundHalfEvenCopy();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours34 = duration33.toStandardHours();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime36);
        mutablePeriod38.addSeconds(292278993);
        mutablePeriod38.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime44 = dateTime31.minus((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTime dateTime47 = dateTime31.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.DateTime.Property property48 = dateTime47.year();
        int int49 = dateTime47.getMillisOfSecond();
        org.joda.time.DateTime dateTime51 = dateTime47.minusMillis((-292275054));
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration60 = duration56.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant61 = instant54.plus((org.joda.time.ReadableDuration) duration60);
        long long62 = instant61.getMillis();
        long long63 = instant61.getMillis();
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str69 = duration68.toString();
        org.joda.time.Instant instant70 = instant64.minus((org.joda.time.ReadableDuration) duration68);
        org.joda.time.MutableDateTime mutableDateTime71 = instant64.toMutableDateTime();
        org.joda.time.LocalDateTime localDateTime72 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime72.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property75 = localDateTime72.hourOfDay();
        org.joda.time.LocalDateTime localDateTime77 = localDateTime72.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str79 = dateTimeFieldType78.getName();
        int int80 = localDateTime72.indexOf(dateTimeFieldType78);
        java.lang.String str81 = dateTimeFieldType78.getName();
        int int82 = mutableDateTime71.get(dateTimeFieldType78);
        int int83 = instant61.get(dateTimeFieldType78);
        java.lang.String str84 = dateTimeFieldType78.toString();
        int int85 = dateTime47.get(dateTimeFieldType78);
        org.joda.time.LocalDateTime.Property property86 = localDateTime10.property(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "clockhourOfDay" + "'", str7, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 4 + "'", int15 == 4);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 22 + "'", int21 == 22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 22 + "'", int26 == 22);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 2022 + "'", int27 == 2022);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(hours34);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 25 + "'", int37 == 25);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 31 + "'", int49 == 31);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(instant54);
        org.junit.Assert.assertNotNull(duration56);
        org.junit.Assert.assertNotNull(period57);
        org.junit.Assert.assertNotNull(duration60);
        org.junit.Assert.assertNotNull(instant61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 86400000L + "'", long62 == 86400000L);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 86400000L + "'", long63 == 86400000L);
        org.junit.Assert.assertNotNull(instant66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "PT86400S" + "'", str69, "PT86400S");
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "clockhourOfDay" + "'", str79, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int80 + "' != '" + (-1) + "'", int80 == (-1));
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "clockhourOfDay" + "'", str81, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 7 + "'", int82 == 7);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 24 + "'", int83 == 24);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "clockhourOfDay" + "'", str84, "clockhourOfDay");
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 23 + "'", int85 == 23);
        org.junit.Assert.assertNotNull(property86);
    }

    @Test
    public void test05473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05473");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        java.lang.String str8 = dateTimeZone1.getName(950707L);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.set(45);
        org.joda.time.MutableDateTime mutableDateTime16 = property13.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime18 = property13.add(45);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        long long22 = dateTimeZone19.previousTransition(100L);
        int int24 = dateTimeZone19.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime25 = mutableDateTime18.toDateTime(dateTimeZone19);
        mutableDateTime11.setZoneRetainFields(dateTimeZone19);
        java.lang.String str28 = dateTimeZone19.getNameKey(23L);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime(51L, dateTimeZone19);
        long long31 = dateTimeZone1.getMillisKeepLocal(dateTimeZone19, 458119L);
        long long34 = dateTimeZone19.convertLocalToUTC(90008354L, true);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "+00:00" + "'", str8, "+00:00");
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
        org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L + "'", long22 == 100L);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "UTC" + "'", str28, "UTC");
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 458119L + "'", long31 == 458119L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 90008354L + "'", long34 == 90008354L);
    }

    @Test
    public void test05474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05474");
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime6.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale14);
        java.util.Locale locale17 = dateTimeParserBucket16.getLocale();
        long long18 = dateTimeParserBucket16.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket16.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone19);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(36988464, 26351, 26510780, 62479, 26324566, dateTimeZone19);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62479 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 97L + "'", long18 == 97L);
        org.junit.Assert.assertNotNull(dateTimeZone19);
    }

    @Test
    public void test05475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05475");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.withMaximumValue();
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate.Property property5 = localDate3.dayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate3.withEra(0);
        org.joda.time.LocalDate localDate9 = localDate3.withCenturyOfEra(36);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = null;
        boolean boolean11 = localDate3.isSupported(dateTimeFieldType10);
        int int12 = localDate3.size();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime13.copy();
        mutableDateTime13.setDate((long) '#');
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean22 = localDate19.isSupported(dateTimeFieldType21);
        int int23 = localDate19.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight25 = localDate19.toDateMidnight(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = mutableDateTime13.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime28 = localDate3.toDateTimeAtStartOfDay(dateTimeZone24);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(date4);
        org.junit.Assert.assertEquals(date4.toString(), "Thu Dec 22 00:00:00 UTC 2022");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateMidnight25);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
    }

    @Test
    public void test05476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05476");
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableDuration1, readableInstant2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period9 = period7.minusSeconds((-1));
        java.lang.String str10 = period7.toString();
        org.joda.time.Period period11 = period7.toPeriod();
        org.joda.time.PeriodType periodType12 = period7.getPeriodType();
        org.joda.time.Period period13 = period3.normalizedStandard(periodType12);
        java.lang.String str14 = periodType12.getName();
        org.joda.time.PeriodType periodType15 = periodType12.withYearsRemoved();
        org.joda.time.PeriodType periodType16 = periodType15.withSecondsRemoved();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.eras();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTimeField dateTimeField24 = chronology20.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.clockhourOfHalfday();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now(chronology20);
        org.joda.time.Period period27 = new org.joda.time.Period((long) 55, periodType15, chronology20);
        org.joda.time.DateTimeField dateTimeField28 = chronology20.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj31 = mutableDateTime30.clone();
        mutableDateTime30.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime30.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.add(1L);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.UTC;
        long long41 = dateTimeZone37.getMillisKeepLocal(dateTimeZone39, (long) 44);
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(dateTimeZone37);
        mutableDateTime36.setZoneRetainFields(dateTimeZone37);
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale locale47 = builder46.build();
        java.lang.String str48 = dateTimeZone37.getName(555370422L, locale47);
        java.util.Locale.Builder builder49 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder50 = builder49.clear();
        java.util.Locale locale51 = builder50.build();
        java.util.Set<java.lang.String> strSet52 = locale51.getUnicodeLocaleKeys();
        java.lang.String str53 = locale47.getDisplayName(locale51);
        java.lang.String str54 = locale47.getDisplayScript();
        java.lang.String str55 = dateTimeField28.getAsText(26478, locale47);
        org.junit.Assert.assertNotNull(period9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "PT0.099S" + "'", str10, "PT0.099S");
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Standard" + "'", str14, "Standard");
        org.junit.Assert.assertNotNull(periodType15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(obj31);
// flaky:         org.junit.Assert.assertEquals(obj31.toString(), "2022-02-22T07:22:25.905Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj31), "2022-02-22T07:22:25.905Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj31), "2022-02-22T07:22:25.905Z");
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
        org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 44L + "'", long41 == 44L);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00" + "'", str48, "+00:00");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
        org.junit.Assert.assertNotNull(strSet52);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "26478" + "'", str55, "26478");
    }

    @Test
    public void test05477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05477");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale2.getISO3Language();
        java.util.Locale.Builder builder5 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType15 = periodType12.getFieldType((int) (short) 0);
        java.lang.String str16 = periodType12.toString();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 53, (long) (-1), periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType7.getField(chronology20);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = locale23.getDisplayLanguage();
        int int25 = dateTimeField22.getMaximumTextLength(locale23);
        java.lang.String str26 = locale23.getScript();
        java.util.Locale.Builder builder27 = builder1.setLocale(locale23);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        long long36 = chronology31.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField37 = chronology31.secondOfMinute();
        boolean boolean38 = dateTimeField37.isSupported();
        long long40 = dateTimeField37.roundHalfEven(946312L);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = dateTimeField37.getAsText(86400000L, locale43);
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder47 = builder27.setLocale(locale43);
        java.util.Locale.Builder builder48 = builder27.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder50 = builder48.setRegion("2022-02-22T07:19:52.246Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: 2022-02-22T07:19:52.246Z [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u5fb7\u6587" + "'", str3, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "deu" + "'", str4, "deu");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(periodType12);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "PeriodType[YearDayTime]" + "'", str16, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u82f1\u6587" + "'", str24, "\u82f1\u6587");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 4 + "'", int25 == 4);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(instant30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 105144L + "'", long36 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 946000L + "'", long40 == 946000L);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "de");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "0" + "'", str45, "0");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test05478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05478");
        org.joda.time.LocalDateTime localDateTime0 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime1 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusHours(0);
        org.joda.time.LocalDateTime.Property property14 = localDateTime11.era();
        int int15 = localDateTime0.compareTo((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.LocalDateTime.Property property16 = localDateTime11.dayOfWeek();
        int int17 = localDateTime11.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.minusMonths(38);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getYearOfCentury();
        int int23 = dateTime21.getWeekyear();
        org.joda.time.DateTime dateTime24 = dateTime21.withEarlierOffsetAtOverlap();
        java.lang.String str25 = dateTime24.toString();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getYearOfCentury();
        int int29 = dateTime27.getWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime27.withEarlierOffsetAtOverlap();
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime30.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean34 = dateTimeZone33.isFixed();
        mutableDateTime32.setZoneRetainFields(dateTimeZone33);
        org.joda.time.DateTime dateTime36 = dateTime24.toDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.Chronology chronology39 = null;
        java.util.Locale locale40 = java.util.Locale.GERMAN;
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.lang.String str42 = locale40.getDisplayVariant(locale41);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology39, locale41);
        java.lang.Object obj44 = dateTimeParserBucket43.saveState();
        org.joda.time.DateTimeZone dateTimeZone45 = dateTimeParserBucket43.getZone();
        org.joda.time.DateTime dateTime46 = localDateTime37.toDateTime(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = dateTime24.withZoneRetainFields(dateTimeZone45);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        long long51 = dateTimeZone48.previousTransition(100L);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMinutes(15);
        org.joda.time.Chronology chronology57 = dateTime54.getChronology();
        java.lang.String str58 = chronology57.toString();
        org.joda.time.DurationField durationField59 = chronology57.halfdays();
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.plusYears((int) (short) 100);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period69 = duration68.toPeriod();
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration74 = duration71.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration75 = duration68.minus((org.joda.time.ReadableDuration) duration74);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime66.plus((org.joda.time.ReadableDuration) duration68);
        long long78 = chronology57.set((org.joda.time.ReadablePartial) localDateTime76, 950105L);
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime(86400L, chronology57);
        boolean boolean80 = dateTimeZone48.isLocalDateTimeGap(localDateTime79);
        boolean boolean82 = dateTimeZone48.isStandardOffset((long) 56);
        long long86 = dateTimeZone48.convertLocalToUTC(0L, false, 0L);
        org.joda.time.DateTime dateTime87 = dateTime24.toDateTime(dateTimeZone48);
        org.joda.time.DateTime dateTime88 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) dateTime87);
        org.junit.Assert.assertNotNull(localDateTime1);
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-1) + "'", int15 == (-1));
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 21 + "'", int17 == 21);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 22 + "'", int22 == 22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 2022 + "'", int23 == 2022);
        org.junit.Assert.assertNotNull(dateTime24);
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "2022-02-22T07:22:26.159Z" + "'", str25, "2022-02-22T07:22:26.159Z");
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 22 + "'", int28 == 22);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 2022 + "'", int29 == 2022);
        org.junit.Assert.assertNotNull(dateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "2022-02-22T07:22:26.159Z" + "'", str31, "2022-02-22T07:22:26.159Z");
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "de");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(obj44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
        org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L + "'", long51 == 100L);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ISOChronology[UTC]" + "'", str58, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(duration68);
        org.junit.Assert.assertNotNull(period69);
        org.junit.Assert.assertNotNull(duration71);
        org.junit.Assert.assertNotNull(duration74);
        org.junit.Assert.assertNotNull(duration75);
        org.junit.Assert.assertNotNull(localDateTime76);
// flaky:         org.junit.Assert.assertTrue("'" + long78 + "' != '" + 4801285346159L + "'", long78 == 4801285346159L);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + true + "'", boolean82 == true);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertNotNull(dateTime88);
    }

    @Test
    public void test05479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05479");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.year();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateTime dateTime43 = dateTime42.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property44 = dateTime43.yearOfCentury();
        int int45 = dateTime43.getDayOfMonth();
        int int46 = dateTime43.getSecondOfDay();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 0 + "'", int3 == 0);
        org.junit.Assert.assertNotNull(period13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "PT0.099S" + "'", str14, "PT0.099S");
        org.junit.Assert.assertNotNull(period15);
        org.junit.Assert.assertNotNull(periodType16);
        org.junit.Assert.assertNotNull(period17);
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 105144L + "'", long26 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(mutableDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 22 + "'", int45 == 22);
// flaky:         org.junit.Assert.assertTrue("'" + int46 + "' != '" + 26546 + "'", int46 == 26546);
    }

    @Test
    public void test05480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05480");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.Chronology chronology13 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withDefaultYear(999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withDefaultYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withPivotYear(56);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = dateTimeFormatter2.getPrinter();
        org.joda.time.Instant instant21 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime22 = instant21.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime23 = instant21.toDateTime();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardHours((long) 36946953);
        org.joda.time.Instant instant26 = instant21.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate((long) (byte) -1);
        int int29 = localDate28.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        long long34 = dateTimeZone30.getMillisKeepLocal(dateTimeZone32, (long) 44);
        org.joda.time.DateTime dateTime35 = localDate28.toDateTimeAtMidnight(dateTimeZone30);
        org.joda.time.DateTime dateTime36 = localDate28.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        mutableDateTime37.add((long) 'a');
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.yearOfCentury();
        mutableDateTime37.addWeekyears((int) (byte) 1);
        int int43 = dateTime36.compareTo((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime37.centuryOfEra();
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) 100, 1L, periodType47);
        org.joda.time.Period period50 = period48.minusSeconds((-1));
        java.lang.String str51 = period48.toString();
        org.joda.time.Duration duration52 = period48.toStandardDuration();
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration52, 1200);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) mutableDateTime37);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str56 = dateTimeFormatter2.print((org.joda.time.ReadableInstant) mutableDateTime37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(instant5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 105144L + "'", long11 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNull(dateTimePrinter20);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1969 + "'", int29 == 1969);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
        org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 44L + "'", long34 == 44L);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + (-1) + "'", int43 == (-1));
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(period50);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "PT0.099S" + "'", str51, "PT0.099S");
        org.junit.Assert.assertNotNull(duration52);
    }

    @Test
    public void test05481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05481");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = property12.getField();
        org.joda.time.LocalDate localDate14 = property12.roundCeilingCopy();
        org.joda.time.LocalDate localDate16 = localDate14.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone17);
        org.joda.time.DateMidnight dateMidnight19 = localDate16.toDateMidnight(dateTimeZone17);
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) dateMidnight19);
        mutablePeriod20.addDays(2016);
        java.lang.String str23 = mutablePeriod20.toString();
        mutablePeriod20.setSeconds(62356);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(dateMidnight19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "P2016DT15M46.312S" + "'", str23, "P2016DT15M46.312S");
    }

    @Test
    public void test05482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05482");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes(15);
        org.joda.time.DateTime dateTime11 = localDateTime4.toDateTime((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTime dateTime14 = dateTime11.withZone(dateTimeZone12);
        int int15 = dateTime14.getWeekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime16.copy();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime24 = property20.set(1);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime25.yearOfCentury();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration36 = duration33.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration37 = duration30.minus((org.joda.time.ReadableDuration) duration36);
        mutableDateTime25.add((org.joda.time.ReadableDuration) duration30);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime25.centuryOfEra();
        mutableDateTime25.addYears(0);
        mutableDateTime25.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration52 = duration48.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant53 = instant46.plus((org.joda.time.ReadableDuration) duration52);
        long long54 = instant53.getMillis();
        org.joda.time.Duration duration55 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) instant53);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration55, 999);
        mutableDateTime24.setSecondOfMinute(24);
        java.lang.String str60 = mutableDateTime24.toString();
        org.joda.time.DateTimeZone dateTimeZone61 = mutableDateTime24.getZone();
        org.joda.time.LocalDateTime localDateTime62 = org.joda.time.LocalDateTime.now(dateTimeZone61);
        int int64 = dateTimeZone61.getOffset((long) 2037);
        org.joda.time.MutableDateTime mutableDateTime65 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime14, dateTimeZone61);
        java.lang.String str67 = dateTimeZone61.getName(1239166L);
        long long69 = dateTimeZone61.convertUTCToLocal((long) 26272);
        org.junit.Assert.assertNotNull(localDateTime0);
        org.junit.Assert.assertNotNull(localDateTime2);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
        org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "\u534f\u8c03\u4e16\u754c\u65f6\u95f4");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 8 + "'", int15 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(duration30);
        org.junit.Assert.assertNotNull(period31);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(duration36);
        org.junit.Assert.assertNotNull(duration37);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(instant46);
        org.junit.Assert.assertNotNull(duration48);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertNotNull(duration52);
        org.junit.Assert.assertNotNull(instant53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 86400000L + "'", long54 == 86400000L);
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "-50070-09-17T16:39:24.450Z" + "'", str60, "-50070-09-17T16:39:24.450Z");
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "+00:00" + "'", str67, "+00:00");
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 26272L + "'", long69 == 26272L);
    }

    @Test
    public void test05483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05483");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        java.lang.String str6 = dateTimeZone1.toString();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) 1970, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u5fb7\u6587" + "'", str4, "\u5fb7\u6587");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "+00:00" + "'", str5, "+00:00");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "UTC" + "'", str6, "UTC");
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test05484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05484");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration20, readableInstant21);
        org.joda.time.Period period24 = period22.withDays((int) (byte) 1);
        org.joda.time.Period period26 = period24.minusWeeks(100);
        org.joda.time.Period period28 = period24.plusWeeks((int) (short) -1);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) period28, 62166);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.Instant instant35 = instant33.toInstant();
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(964100L, (long) 26172069, chronology36);
        mutableDateTime0.add((org.joda.time.ReadablePeriod) mutablePeriod37, 0);
        mutableDateTime0.setDate((long) 20);
        mutableDateTime0.addMillis(19);
        int int44 = mutableDateTime0.getDayOfYear();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.roundCeiling();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(dateTimeField19);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(period26);
        org.junit.Assert.assertNotNull(period28);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(instant35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(mutableDateTime46);
    }

    @Test
    public void test05485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05485");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        int int36 = dateTime35.getSecondOfMinute();
        org.joda.time.Interval interval37 = duration32.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Duration duration38 = duration32.toDuration();
        org.joda.time.Period period39 = duration32.toPeriod();
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes(15);
        org.joda.time.DateTime dateTime53 = localDateTime46.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime55 = localDateTime46.toDateTime(dateTimeZone54);
        org.joda.time.DateTime dateTime56 = dateTime41.withZoneRetainFields(dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now();
        mutableDateTime57.add((long) 'a');
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime57.yearOfCentury();
        mutableDateTime57.addSeconds(0);
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours65 = duration64.toStandardHours();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        int int68 = dateTime67.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) dateTime67);
        org.joda.time.DateTime dateTime71 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant72 = new org.joda.time.Instant();
        org.joda.time.Instant instant74 = instant72.withMillis(0L);
        org.joda.time.DateTime dateTime75 = instant74.toDateTime();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.months();
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime77, periodType78);
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration64, (org.joda.time.ReadableInstant) dateTime71, periodType78);
        org.joda.time.Duration duration81 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime57, (org.joda.time.ReadableInstant) dateTime71);
        org.joda.time.DateTime dateTime82 = dateTime56.plus((org.joda.time.ReadableDuration) duration81);
        int int83 = dateTime82.getWeekyear();
        org.joda.time.Period period84 = duration32.toPeriodTo((org.joda.time.ReadableInstant) dateTime82);
        org.joda.time.Period period86 = period84.plusYears(52);
        org.joda.time.DateTime dateTime87 = dateTime14.minus((org.joda.time.ReadablePeriod) period84);
        int int88 = period84.getYears();
        int int89 = period84.getMonths();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration7);
        org.junit.Assert.assertNotNull(hours8);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 26 + "'", int11 == 26);
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(period29);
        org.junit.Assert.assertNotNull(duration32);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 26 + "'", int36 == 26);
        org.junit.Assert.assertNotNull(interval37);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(period39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(mutableDateTime57);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(duration64);
        org.junit.Assert.assertNotNull(hours65);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 26 + "'", int68 == 26);
        org.junit.Assert.assertNotNull(instant74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(dateTime82);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + 1970 + "'", int83 == 1970);
        org.junit.Assert.assertNotNull(period84);
        org.junit.Assert.assertNotNull(period86);
        org.junit.Assert.assertNotNull(dateTime87);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + 0 + "'", int88 == 0);
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 0 + "'", int89 == 0);
    }

    @Test
    public void test05486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05486");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        mutableDateTime1.addMonths(0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime8.plusMinutes(15);
        org.joda.time.Chronology chronology11 = dateTime8.getChronology();
        java.lang.String str12 = chronology11.toString();
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 0, chronology11);
        org.joda.time.DateTime dateTime14 = localDate13.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property15 = dateTime14.hourOfDay();
        org.joda.time.LocalDate localDate16 = dateTime14.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21, periodType22);
        org.joda.time.DurationFieldType durationFieldType25 = periodType22.getFieldType((int) (short) 0);
        java.lang.String str26 = periodType22.toString();
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Chronology chronology30 = instant29.getChronology();
        org.joda.time.Period period31 = new org.joda.time.Period((long) 53, (long) (-1), periodType22, chronology30);
        org.joda.time.DateTimeField dateTimeField32 = dateTimeFieldType17.getField(chronology30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        org.joda.time.DateTime dateTime36 = dateTime34.plusMinutes(15);
        org.joda.time.Chronology chronology37 = dateTime34.getChronology();
        java.lang.String str38 = chronology37.toString();
        org.joda.time.DateTimeField dateTimeField39 = dateTimeFieldType17.getField(chronology37);
        boolean boolean40 = localDate16.isSupported(dateTimeFieldType17);
        java.lang.String str41 = dateTimeFieldType17.getName();
        int int42 = mutableDateTime1.get(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ISOChronology[UTC]" + "'", str12, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(periodType22);
        org.junit.Assert.assertNotNull(durationFieldType25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "PeriodType[YearDayTime]" + "'", str26, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ISOChronology[UTC]" + "'", str38, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "minuteOfDay" + "'", str41, "minuteOfDay");
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1439 + "'", int42 == 1439);
    }

    @Test
    public void test05487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05487");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(15);
        org.joda.time.Chronology chronology6 = dateTime3.getChronology();
        java.lang.String str7 = chronology6.toString();
        org.joda.time.DurationField durationField8 = chronology6.halfdays();
        org.joda.time.LocalDateTime localDateTime9 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.plusYears((int) (short) 100);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration23 = duration20.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration24 = duration17.minus((org.joda.time.ReadableDuration) duration23);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime15.plus((org.joda.time.ReadableDuration) duration17);
        long long27 = chronology6.set((org.joda.time.ReadablePartial) localDateTime25, 950105L);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime(86400L, chronology6);
        org.joda.time.Period period29 = new org.joda.time.Period((long) 26177, chronology6);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now(chronology6);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ISOChronology[UTC]" + "'", str7, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(duration17);
        org.junit.Assert.assertNotNull(period18);
        org.junit.Assert.assertNotNull(duration20);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(duration24);
        org.junit.Assert.assertNotNull(localDateTime25);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 4801285346594L + "'", long27 == 4801285346594L);
        org.junit.Assert.assertNotNull(mutableDateTime30);
    }

    @Test
    public void test05488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05488");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period11 = duration8.toPeriod(periodType10);
        org.joda.time.Duration duration13 = duration8.withMillis(60000L);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        org.joda.time.Instant instant20 = instant14.minus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime21.yearOfCentury();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration32 = duration29.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration33 = duration26.minus((org.joda.time.ReadableDuration) duration32);
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration26);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime21.centuryOfEra();
        mutableDateTime21.addHours((int) (byte) 10);
        mutableDateTime21.addWeeks(100);
        boolean boolean40 = instant14.isAfter((org.joda.time.ReadableInstant) mutableDateTime21);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration41, readableInstant42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) 100, 1L, periodType46);
        org.joda.time.Period period49 = period47.minusSeconds((-1));
        java.lang.String str50 = period47.toString();
        org.joda.time.Period period51 = period47.toPeriod();
        org.joda.time.PeriodType periodType52 = period47.getPeriodType();
        org.joda.time.Period period53 = period43.normalizedStandard(periodType52);
        java.lang.String str54 = periodType52.getName();
        int int55 = periodType52.size();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration8, (org.joda.time.ReadableInstant) instant14, periodType52);
        org.joda.time.Period period58 = period56.minusHours(26170959);
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = period56.getFieldTypes();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(period5);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(instant9);
        org.junit.Assert.assertNotNull(periodType10);
        org.junit.Assert.assertNotNull(period11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(instant16);
        org.junit.Assert.assertNotNull(duration18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "PT86400S" + "'", str19, "PT86400S");
        org.junit.Assert.assertNotNull(instant20);
        org.junit.Assert.assertNotNull(mutableDateTime21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(duration26);
        org.junit.Assert.assertNotNull(period27);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(duration32);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(period49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PT0.099S" + "'", str50, "PT0.099S");
        org.junit.Assert.assertNotNull(period51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(period53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Standard" + "'", str54, "Standard");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 8 + "'", int55 == 8);
        org.junit.Assert.assertNotNull(period58);
        org.junit.Assert.assertNotNull(durationFieldTypeArray59);
    }

    @Test
    public void test05489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05489");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addYears(0);
        mutableDateTime0.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant28 = instant21.plus((org.joda.time.ReadableDuration) duration27);
        long long29 = instant28.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) instant28);
        mutableDateTime0.addHours(20);
        mutableDateTime0.setMillisOfSecond(57);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime0.yearOfCentury();
        int int36 = mutableDateTime0.getMillisOfDay();
        mutableDateTime0.addWeeks(470);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setMonthOfYear(442557);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 442557 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(period6);
        org.junit.Assert.assertNotNull(duration8);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(instant21);
        org.junit.Assert.assertNotNull(duration23);
        org.junit.Assert.assertNotNull(period24);
        org.junit.Assert.assertNotNull(duration27);
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 86400000L + "'", long29 == 86400000L);
        org.junit.Assert.assertNotNull(property35);
// flaky:         org.junit.Assert.assertTrue("'" + int36 + "' != '" + 72026057 + "'", int36 == 72026057);
    }

    @Test
    public void test05490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05490");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.DateTimeZone dateTimeZone5 = null;
        org.joda.time.LocalTime localTime6 = new org.joda.time.LocalTime(dateTimeZone5);
        org.joda.time.LocalTime localTime8 = localTime6.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology9 = localTime8.getChronology();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology9);
        int int11 = mutablePeriod10.getHours();
        org.joda.time.Period period12 = period2.minus((org.joda.time.ReadablePeriod) mutablePeriod10);
        mutablePeriod10.addMinutes(16);
        mutablePeriod10.addMinutes((-100));
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration28 = duration25.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration29 = duration22.minus((org.joda.time.ReadableDuration) duration28);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration22);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime17.centuryOfEra();
        mutableDateTime17.addHours((int) (byte) 10);
        mutableDateTime17.addWeeks(20);
        int int36 = mutableDateTime17.getYearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime17.copy();
        org.joda.time.Duration duration39 = new org.joda.time.Duration(0L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period44 = duration43.toPeriod();
        org.joda.time.Duration duration45 = duration41.minus((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = duration39.minus((org.joda.time.ReadableDuration) duration43);
        long long47 = duration43.getMillis();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime48.millisOfSecond();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str54 = duration53.toString();
        boolean boolean55 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardMinutes(1L);
        long long58 = duration57.getStandardMinutes();
        int int59 = duration51.compareTo((org.joda.time.ReadableDuration) duration57);
        long long60 = duration51.getStandardHours();
        mutableDateTime48.add((org.joda.time.ReadableDuration) duration51, 73619);
        org.joda.time.Duration duration63 = duration43.minus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime37, (org.joda.time.ReadableDuration) duration51);
        mutablePeriod10.add((org.joda.time.ReadableDuration) duration51);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(period12);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 22 + "'", int36 == 22);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertNotNull(duration43);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertNotNull(duration45);
        org.junit.Assert.assertNotNull(duration46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 60000L + "'", long47 == 60000L);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(duration51);
        org.junit.Assert.assertNotNull(duration53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "PT86400S" + "'", str54, "PT86400S");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(duration57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 1L + "'", long58 == 1L);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 24L + "'", long60 == 24L);
        org.junit.Assert.assertNotNull(duration63);
    }

    @Test
    public void test05491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05491");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        org.joda.time.DurationField durationField19 = dateTimeField18.getLeapDurationField();
        int int20 = mutableDateTime9.get(dateTimeField18);
        mutableDateTime9.setMillisOfDay(69);
        org.junit.Assert.assertNotNull(duration3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "PT86400S" + "'", str4, "PT86400S");
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 8 + "'", int20 == 8);
    }

    @Test
    public void test05492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05492");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str3 = duration2.toString();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours6 = duration5.toStandardHours();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.Duration duration11 = duration2.plus((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = duration13.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration28 = duration25.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration29 = duration22.minus((org.joda.time.ReadableDuration) duration28);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration22);
        boolean boolean31 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration22);
        boolean boolean32 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Duration duration33 = duration5.toDuration();
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDay();
        java.lang.String str38 = periodType37.getName();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(100L, periodType37);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str42 = duration41.toString();
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours45 = duration44.toStandardHours();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology46);
        int int48 = dateTime47.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration44, (org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.Duration duration50 = duration41.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(readableInstant55, readableInstant56, periodType57);
        org.joda.time.DurationFieldType durationFieldType60 = periodType57.getFieldType((int) (short) 0);
        java.lang.String str61 = periodType57.toString();
        org.joda.time.Instant instant62 = new org.joda.time.Instant();
        org.joda.time.Instant instant64 = instant62.withMillis(0L);
        org.joda.time.Chronology chronology65 = instant64.getChronology();
        org.joda.time.Period period66 = new org.joda.time.Period((long) 53, (long) (-1), periodType57, chronology65);
        org.joda.time.Period period67 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType57);
        org.joda.time.Instant instant68 = new org.joda.time.Instant();
        org.joda.time.Instant instant70 = instant68.withMillis(0L);
        org.joda.time.Chronology chronology71 = instant70.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.eras();
        org.joda.time.LocalTime localTime73 = org.joda.time.LocalTime.now(chronology71);
        org.joda.time.DurationField durationField74 = chronology71.eras();
        org.joda.time.LocalTime localTime75 = org.joda.time.LocalTime.now(chronology71);
        org.joda.time.Period period76 = duration41.toPeriod(periodType57, chronology71);
        org.joda.time.Period period77 = new org.joda.time.Period(1671667200000L, 946312L, periodType37, chronology71);
        org.joda.time.PeriodType periodType78 = periodType37.withMinutesRemoved();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalTime localTime80 = new org.joda.time.LocalTime(chronology79);
        org.joda.time.LocalTime localTime82 = localTime80.plusMinutes(26);
        org.joda.time.Chronology chronology83 = localTime82.getChronology();
        org.joda.time.DateTimeField dateTimeField84 = chronology83.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField85 = chronology83.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField86 = chronology83.yearOfCentury();
        org.joda.time.Period period87 = duration33.toPeriod(periodType37, chronology83);
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod(1645514179482L, chronology83);
        org.junit.Assert.assertNotNull(duration2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "PT86400S" + "'", str3, "PT86400S");
        org.junit.Assert.assertNotNull(duration5);
        org.junit.Assert.assertNotNull(hours6);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 26 + "'", int9 == 26);
        org.junit.Assert.assertNotNull(duration11);
        org.junit.Assert.assertNotNull(duration13);
        org.junit.Assert.assertNotNull(period14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(duration22);
        org.junit.Assert.assertNotNull(period23);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(duration28);
        org.junit.Assert.assertNotNull(duration29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(duration33);
        org.junit.Assert.assertNotNull(periodType37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "YearDay" + "'", str38, "YearDay");
        org.junit.Assert.assertNotNull(duration41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "PT86400S" + "'", str42, "PT86400S");
        org.junit.Assert.assertNotNull(duration44);
        org.junit.Assert.assertNotNull(hours45);
// flaky:         org.junit.Assert.assertTrue("'" + int48 + "' != '" + 26 + "'", int48 == 26);
        org.junit.Assert.assertNotNull(duration50);
        org.junit.Assert.assertNotNull(periodType57);
        org.junit.Assert.assertNotNull(durationFieldType60);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "PeriodType[YearDayTime]" + "'", str61, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(instant70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(localTime73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(localTime75);
        org.junit.Assert.assertNotNull(period76);
        org.junit.Assert.assertNotNull(periodType78);
        org.junit.Assert.assertNotNull(localTime82);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(period87);
    }

    @Test
    public void test05493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05493");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours5 = duration4.toStandardHours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays(555370422L);
        int int13 = duration1.compareTo((org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException17 = new java.io.IOException("");
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        boolean boolean19 = mutableDateTime15.equals((java.lang.Object) iOException17);
        org.joda.time.Duration duration22 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration22, 1424);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        org.joda.time.LocalDate localDate28 = property26.roundCeilingCopy();
        org.joda.time.LocalDate localDate30 = localDate28.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = localDate30.toDateMidnight(dateTimeZone31);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Duration duration35 = duration1.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableDuration36, readableInstant37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) 100, 1L, periodType41);
        org.joda.time.Period period44 = period42.minusSeconds((-1));
        java.lang.String str45 = period42.toString();
        org.joda.time.Period period46 = period42.toPeriod();
        org.joda.time.PeriodType periodType47 = period42.getPeriodType();
        org.joda.time.Period period48 = period38.normalizedStandard(periodType47);
        java.lang.String str49 = periodType47.getName();
        java.lang.String str50 = periodType47.toString();
        org.joda.time.PeriodType periodType51 = periodType47.withDaysRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withYearsRemoved();
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.eras();
        long long61 = chronology56.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField62 = chronology56.secondOfMinute();
        org.joda.time.Period period63 = duration35.toPeriod(periodType51, chronology56);
        org.joda.time.DateTimeField dateTimeField64 = chronology56.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField65 = chronology56.secondOfDay();
        org.junit.Assert.assertNotNull(duration1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "PT86400S" + "'", str2, "PT86400S");
        org.junit.Assert.assertNotNull(duration4);
        org.junit.Assert.assertNotNull(hours5);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 26 + "'", int8 == 26);
        org.junit.Assert.assertNotNull(duration10);
        org.junit.Assert.assertNotNull(duration12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(dateMidnight33);
        org.junit.Assert.assertNotNull(duration35);
        org.junit.Assert.assertNotNull(period44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "PT0.099S" + "'", str45, "PT0.099S");
        org.junit.Assert.assertNotNull(period46);
        org.junit.Assert.assertNotNull(periodType47);
        org.junit.Assert.assertNotNull(period48);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Standard" + "'", str49, "Standard");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "PeriodType[Standard]" + "'", str50, "PeriodType[Standard]");
        org.junit.Assert.assertNotNull(periodType51);
        org.junit.Assert.assertNotNull(periodType52);
        org.junit.Assert.assertNotNull(instant55);
        org.junit.Assert.assertNotNull(chronology56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 105144L + "'", long61 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(period63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test05494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05494");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        long long8 = chronology3.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = chronology3.secondOfMinute();
        boolean boolean10 = dateTimeField9.isSupported();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        int int13 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate localDate15 = localDate11.withYearOfCentury(46);
        org.joda.time.LocalDate.Property property16 = localDate11.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate11.getChronology();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(chronology17);
        java.lang.Object obj19 = mutableDateTime18.clone();
        org.junit.Assert.assertNotNull(instant2);
        org.junit.Assert.assertNotNull(chronology3);
        org.junit.Assert.assertNotNull(durationField4);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 105144L + "'", long8 == 105144L);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(obj19);
// flaky:         org.junit.Assert.assertEquals(obj19.toString(), "2022-02-22T07:22:26.969Z");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "2022-02-22T07:22:26.969Z");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "2022-02-22T07:22:26.969Z");
    }

    @Test
    public void test05495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05495");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("2022-02-22T10:15:47.721");
        java.util.TimeZone timeZone2 = java.util.TimeZone.getDefault();
        boolean boolean3 = timeZone2.observesDaylightTime();
        java.lang.String str4 = timeZone2.getID();
        boolean boolean5 = timeZone1.hasSameRules(timeZone2);
        java.util.TimeZone timeZone6 = java.util.TimeZone.getDefault();
        java.time.ZoneId zoneId7 = timeZone6.toZoneId();
        java.util.TimeZone timeZone8 = java.util.TimeZone.getTimeZone(zoneId7);
        timeZone8.setRawOffset((int) (short) 1);
        timeZone8.setRawOffset(122);
        boolean boolean13 = timeZone1.hasSameRules(timeZone8);
        timeZone1.setID("2022-02-22T07:19:03.124Z");
        boolean boolean16 = timeZone1.observesDaylightTime();
        boolean boolean17 = timeZone1.useDaylightTime();
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "GMT" + "'", str4, "GMT");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(zoneId7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test05496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05496");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime11.toMutableDateTime();
        int int13 = mutableDateTime12.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime12.millisOfSecond();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime12.era();
        int int19 = property1.getDifference((org.joda.time.ReadableInstant) mutableDateTime12);
        int int20 = mutableDateTime12.getWeekyear();
        mutableDateTime12.add((long) 62244);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 26547 + "'", int13 == 26547);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(duration16);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + (-596) + "'", int19 == (-596));
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 64173 + "'", int20 == 64173);
    }

    @Test
    public void test05497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05497");
        org.joda.time.Period period1 = org.joda.time.Period.months(53);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.months();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime10, periodType11);
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property13.getFieldType();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.property(dateTimeFieldType14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = duration21.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant26 = instant19.plus((org.joda.time.ReadableDuration) duration25);
        long long27 = instant26.getMillis();
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.months();
        org.joda.time.Period period30 = new org.joda.time.Period((-205878993L), chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology28.getZone();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime2, chronology28);
        mutableDateTime2.addSeconds(152);
        mutableDateTime2.addDays(57);
        org.joda.time.Duration duration38 = period1.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime2);
        mutableDateTime2.addWeekyears(435);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime2.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.add((long) 26221);
        mutableDateTime43.addMonths(0);
        mutableDateTime43.addWeekyears(26280146);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime43.setDate(51, 39112437, 274);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 39112437 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(period1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(instant7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(periodType11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(instant19);
        org.junit.Assert.assertNotNull(duration21);
        org.junit.Assert.assertNotNull(period22);
        org.junit.Assert.assertNotNull(duration25);
        org.junit.Assert.assertNotNull(instant26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 86400000L + "'", long27 == 86400000L);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(duration38);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
    }

    @Test
    public void test05498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05498");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfCentury();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getSecondOfMinute();
        boolean boolean8 = dateTime6.isEqualNow();
        int int9 = dateTime6.getDayOfYear();
        int int10 = dateTime6.getHourOfDay();
        org.joda.time.DateTime dateTime12 = dateTime6.plus(960800L);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str14 = dateTimeFieldType13.getName();
        int int15 = dateTime6.get(dateTimeFieldType13);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant19, readableInstant20, periodType21);
        org.joda.time.DurationFieldType durationFieldType24 = periodType21.getFieldType((int) (short) 0);
        java.lang.String str25 = periodType21.toString();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.Period period30 = new org.joda.time.Period((long) 53, (long) (-1), periodType21, chronology29);
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType16.getField(chronology29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(15);
        org.joda.time.Chronology chronology36 = dateTime33.getChronology();
        java.lang.String str37 = chronology36.toString();
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType16.getField(chronology36);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime6, chronology36);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate((java.lang.Object) mutableDateTime0, chronology36);
        java.util.Locale locale41 = null;
        java.util.Calendar calendar42 = mutableDateTime0.toCalendar(locale41);
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 27 + "'", int7 == 27);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 53 + "'", int9 == 53);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 7 + "'", int10 == 7);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "secondOfDay" + "'", str14, "secondOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 26547 + "'", int15 == 26547);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertNotNull(periodType21);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "PeriodType[YearDayTime]" + "'", str25, "PeriodType[YearDayTime]");
        org.junit.Assert.assertNotNull(instant28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[UTC]" + "'", str37, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(calendar42);
// flaky:         org.junit.Assert.assertEquals(calendar42.toString(), "java.util.GregorianCalendar[time=1645514547114,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=UTC,offset=0,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=22,SECOND=27,MILLISECOND=114,ZONE_OFFSET=0,DST_OFFSET=0]");
    }

    @Test
    public void test05499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05499");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        boolean boolean13 = dateTimeZone12.isFixed();
        mutableDateTime11.setZoneRetainFields(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = localTime3.toDateTimeToday(dateTimeZone12);
        org.joda.time.DateTime dateTime17 = dateTime15.plusYears(24);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime22 = dateTime15.withTime(62266, 26397298, 26455, 26286);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 62266 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(chronology4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 22 + "'", int7 == 22);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 2022 + "'", int8 == 2022);
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "2022-02-22T07:22:27.040Z" + "'", str10, "2022-02-22T07:22:27.040Z");
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test05500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest10.test05500");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add(45);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        long long10 = dateTimeZone7.previousTransition(100L);
        int int12 = dateTimeZone7.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime13 = mutableDateTime6.toDateTime(dateTimeZone7);
        mutableDateTime6.setWeekyear(26202);
        int int16 = mutableDateTime6.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime6.year();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundHalfCeiling();
        org.junit.Assert.assertNotNull(mutableDateTime0);
        org.junit.Assert.assertNotNull(property1);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "Coordinated Universal Time");
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L + "'", long10 == 100L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
    }
}

import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class ErrorTest0 {

    public static boolean debug = false;

    @Test
    public void test001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test001");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 22, dateTimeZone3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime4", (dateTime2.compareTo(dateTime4) == 0) == dateTime2.equals(dateTime4));
    }

    @Test
    public void test002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test002");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        mutableDateTime0.setZoneRetainFields(dateTimeZone3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime4", (dateTime2.compareTo(dateTime4) == 0) == dateTime2.equals(dateTime4));
    }

    @Test
    public void test003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test003");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        long long8 = chronology3.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.minuteOfDay();
        org.joda.time.DurationField durationField11 = chronology3.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField4, durationField11, and durationField4", !(durationField4.compareTo(durationField11) == 0) || (Math.signum(durationField4.compareTo(durationField4)) == Math.signum(durationField11.compareTo(durationField4))));
    }

    @Test
    public void test004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test004");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.dayOfWeek();
        org.joda.time.DurationField durationField34 = chronology26.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField34, and durationField27", !(durationField27.compareTo(durationField34) == 0) || (Math.signum(durationField27.compareTo(durationField27)) == Math.signum(durationField34.compareTo(durationField27))));
    }

    @Test
    public void test005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test005");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.dayOfWeek();
        boolean boolean34 = dateTimeField33.isSupported();
        org.joda.time.DurationField durationField35 = dateTimeField33.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField35, and durationField27", !(durationField27.compareTo(durationField35) == 0) || (Math.signum(durationField27.compareTo(durationField27)) == Math.signum(durationField35.compareTo(durationField27))));
    }

    @Test
    public void test006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test006");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime13.toString(dateTimeFormatter15);
        org.joda.time.DateTime dateTime18 = dateTime13.minusMonths(22);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.joda.time.DateTime dateTime24 = dateTime13.withChronology(chronology22);
        org.joda.time.Period period25 = duration4.toPeriod(chronology22);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableDuration28, readableInstant29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 1L, periodType33);
        org.joda.time.Period period36 = period34.minusSeconds((-1));
        java.lang.String str37 = period34.toString();
        org.joda.time.Period period38 = period34.toPeriod();
        org.joda.time.PeriodType periodType39 = period34.getPeriodType();
        org.joda.time.Period period40 = period30.normalizedStandard(periodType39);
        java.lang.String str41 = periodType39.getName();
        java.lang.String str42 = periodType39.toString();
        org.joda.time.PeriodType periodType43 = periodType39.withDaysRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType44);
        int[] intArray47 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod45, 1L);
        org.joda.time.DurationField durationField48 = chronology22.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField48, and durationField23", !(durationField23.compareTo(durationField48) == 0) || (Math.signum(durationField23.compareTo(durationField23)) == Math.signum(durationField48.compareTo(durationField23))));
    }

    @Test
    public void test007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test007");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getYearOfCentury();
        int int6 = dateTime4.getWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime4.plus((long) 15);
        org.joda.time.DateTime.Property property9 = dateTime4.year();
        org.joda.time.DateTime dateTime10 = property9.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property11 = dateTime10.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime10.toMutableDateTime();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        int int22 = dateTime16.compareTo((org.joda.time.ReadableInstant) dateTime21);
        int int23 = dateTime21.getCenturyOfEra();
        org.joda.time.DateTime dateTime25 = dateTime21.withWeekyear(44);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant28, readableInstant29, periodType30);
        org.joda.time.DurationFieldType durationFieldType33 = periodType30.getFieldType((int) (short) 0);
        java.lang.String str34 = periodType30.toString();
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 53, (long) (-1), periodType30, chronology38);
        org.joda.time.PeriodType periodType40 = periodType30.withMonthsRemoved();
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime10, (org.joda.time.ReadableInstant) dateTime21, periodType30);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.eras();
        long long50 = chronology45.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField51 = chronology45.secondOfMinute();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology45);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.Period period54 = new org.joda.time.Period((long) 3, periodType30, chronology45);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMinutes(15);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        java.lang.String str60 = chronology59.toString();
        org.joda.time.DurationField durationField61 = chronology59.halfdays();
        long long67 = chronology59.getDateTimeMillis((long) 26175904, 0, 25, 53, 14);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((-31535999982L), (-205878993L), periodType30, chronology59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField46 and durationField61", Math.signum(durationField46.compareTo(durationField61)) == -Math.signum(durationField61.compareTo(durationField46)));
    }

    @Test
    public void test008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test008");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 44, chronology4);
        int int9 = dateTime8.getSecondOfMinute();
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime12 = instant10.toDateTime();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) 36946953);
        org.joda.time.Instant instant15 = instant10.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime16 = dateTime8.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime18 = dateTime8.withWeekyear(10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusWeeks((-198));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(15);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.hours();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.minuteOfHour();
        org.joda.time.DateTime dateTime28 = dateTime18.toDateTime(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField26", Math.signum(durationField5.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField5)));
    }

    @Test
    public void test009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test009");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException8 = new java.io.IOException("");
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException8);
        boolean boolean10 = mutableDateTime6.equals((java.lang.Object) iOException8);
        org.joda.time.Duration duration13 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration13, 1424);
        org.joda.time.Days days16 = duration13.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod19.clear();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration26 = duration22.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Interval interval31 = duration26.toIntervalTo((org.joda.time.ReadableInstant) dateTime30);
        mutablePeriod19.setPeriod((org.joda.time.ReadableInterval) interval31);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant33, readableInstant34, periodType35);
        org.joda.time.DurationFieldType durationFieldType38 = periodType35.getFieldType((int) (short) 0);
        int int39 = mutablePeriod19.get(durationFieldType38);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        mutableDateTime42.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime42.copy();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.eras();
        org.joda.time.LocalTime localTime53 = org.joda.time.LocalTime.now(chronology51);
        org.joda.time.DurationField durationField54 = chronology51.eras();
        mutablePeriod19.setPeriod((org.joda.time.ReadableDuration) duration41, chronology51);
        org.joda.time.Duration duration57 = duration13.withDurationAdded((org.joda.time.ReadableDuration) duration41, 26148950);
        org.joda.time.DateTime dateTime59 = dateTime2.withDurationAdded((org.joda.time.ReadableDuration) duration13, 122);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(chronology60);
        org.joda.time.DateTime dateTime63 = dateTime61.plusMinutes(15);
        org.joda.time.Chronology chronology64 = dateTime61.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.hours();
        org.joda.time.DurationField durationField66 = chronology64.years();
        org.joda.time.DateTimeField dateTimeField67 = chronology64.dayOfYear();
        org.joda.time.DateTime dateTime68 = dateTime2.toDateTime(chronology64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField52 and durationField65", Math.signum(durationField52.compareTo(durationField65)) == -Math.signum(durationField65.compareTo(durationField52)));
    }

    @Test
    public void test010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test010");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        mutableDateTime16.addHours(26150565);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.eras();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.secondOfMinute();
        mutableDateTime16.setRounding(dateTimeField30);
        org.joda.time.DurationField durationField32 = dateTimeField30.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField32, and durationField9", !(durationField9.compareTo(durationField32) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField32.compareTo(durationField9))));
    }

    @Test
    public void test011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test011");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField6 = localDateTime4.getField((int) (byte) 0);
        java.lang.String str7 = dateTimeField6.toString();
        org.joda.time.DurationField durationField8 = dateTimeField6.getDurationField();
        boolean boolean9 = durationField8.isPrecise();
        java.lang.String str10 = durationField8.getName();
        long long13 = durationField8.subtract(0L, 946312L);
        int int16 = durationField8.getValue(953941L, (long) 152);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str24 = duration23.toString();
        boolean boolean25 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Hours hours26 = duration21.toStandardHours();
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration21, 20);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime30.toString(dateTimeFormatter32);
        org.joda.time.DateTime dateTime35 = dateTime30.minusMonths(22);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Chronology chronology39 = instant38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.eras();
        org.joda.time.DateTime dateTime41 = dateTime30.withChronology(chronology39);
        org.joda.time.Period period42 = duration21.toPeriod(chronology39);
        org.joda.time.DurationField durationField43 = chronology39.eras();
        int int44 = durationField8.compareTo(durationField43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField43, durationField8, and durationField43", !(durationField43.compareTo(durationField8) == 0) || (Math.signum(durationField43.compareTo(durationField43)) == Math.signum(durationField8.compareTo(durationField43))));
    }

    @Test
    public void test012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test012");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration5 = duration2.withDurationAdded((long) (short) 100, (int) ' ');
        long long6 = duration5.getMillis();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.months();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16, periodType17);
        boolean boolean19 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime14);
        int int20 = dateTime14.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.PeriodType periodType25 = periodType23.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime14, periodType23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime28.withChronology(chronology35);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.getMutableDateTime();
        boolean boolean44 = dateTime40.isBefore((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.eras();
        long long53 = chronology48.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField54 = chronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.minuteOfDay();
        mutableDateTime43.setChronology(chronology48);
        org.joda.time.DateTime dateTime57 = dateTime14.toDateTime(chronology48);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 99, chronology48);
        org.joda.time.DurationField durationField59 = chronology48.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField36, durationField59, and durationField36", !(durationField36.compareTo(durationField59) == 0) || (Math.signum(durationField36.compareTo(durationField36)) == Math.signum(durationField59.compareTo(durationField36))));
    }

    @Test
    public void test013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test013");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        mutableDateTime16.addHours(26150565);
        mutableDateTime16.addYears(54);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes(15);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.hours();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1440L, chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.hourOfDay();
        mutableDateTime16.setChronology(chronology29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField30", Math.signum(durationField9.compareTo(durationField30)) == -Math.signum(durationField30.compareTo(durationField9)));
    }

    @Test
    public void test014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test014");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        org.joda.time.Period period23 = period19.toPeriod();
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.Period period25 = period15.normalizedStandard(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = periodType24.indexOf(durationFieldType26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType24, chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime5.toMutableDateTime(chronology31);
        mutablePeriod2.setPeriod((long) 36946953, 960000L, chronology31);
        mutablePeriod2.addMonths(69);
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.MIDNIGHT;
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMinutes(15);
        org.joda.time.Chronology chronology46 = dateTime43.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.hours();
        boolean boolean48 = localTime41.equals((java.lang.Object) durationField47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((long) (short) 100, chronology50);
        int int52 = localTime51.getMillisOfDay();
        org.joda.time.LocalTime.Property property53 = localTime51.millisOfSecond();
        org.joda.time.DurationField durationField54 = property53.getLeapDurationField();
        java.lang.String str55 = property53.getName();
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale59.getDisplayName();
        java.lang.String str61 = dateTimeZone57.getName(100L, locale59);
        org.joda.time.LocalTime localTime62 = property53.setCopy("615", locale59);
        java.lang.String str63 = property53.getName();
        org.joda.time.LocalTime localTime64 = property53.roundHalfCeilingCopy();
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType66 = org.joda.time.DurationFieldType.millis();
        boolean boolean67 = periodType65.isSupported(durationFieldType66);
        org.joda.time.LocalTime localTime69 = localTime64.withFieldAdded(durationFieldType66, 274);
        boolean boolean70 = localTime41.isSupported(durationFieldType66);
        boolean boolean71 = mutablePeriod2.isSupported(durationFieldType66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField32 and durationField47", Math.signum(durationField32.compareTo(durationField47)) == -Math.signum(durationField47.compareTo(durationField32)));
    }

    @Test
    public void test015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test015");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17, periodType18);
        org.joda.time.DurationFieldType durationFieldType21 = periodType18.getFieldType((int) (short) 0);
        int int22 = mutablePeriod2.get(durationFieldType21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime25.copy();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration24, chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.weekyearOfCentury();
        org.joda.time.DurationField durationField41 = chronology34.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField41, and durationField35", !(durationField35.compareTo(durationField41) == 0) || (Math.signum(durationField35.compareTo(durationField35)) == Math.signum(durationField41.compareTo(durationField35))));
    }

    @Test
    public void test016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test016");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.months();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField14 = chronology11.yearOfCentury();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(15);
        org.joda.time.Chronology chronology19 = dateTime16.getChronology();
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.eras();
        org.joda.time.DateTimeField dateTimeField27 = chronology23.hourOfDay();
        org.joda.time.DateTime dateTime28 = dateTime16.withChronology(chronology23);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime31 = property30.getMutableDateTime();
        boolean boolean32 = dateTime28.isBefore((org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        long long41 = chronology36.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField42 = chronology36.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology36.minuteOfDay();
        mutableDateTime31.setChronology(chronology36);
        mutableDateTime31.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(readableInstant47, readableInstant48, periodType49);
        mutablePeriod50.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod53 = mutablePeriod50.toMutablePeriod();
        mutableDateTime31.add((org.joda.time.ReadablePeriod) mutablePeriod53, 1439);
        long long58 = chronology11.add((org.joda.time.ReadablePeriod) mutablePeriod53, (-83734L), 26182);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField12 and durationField24", Math.signum(durationField12.compareTo(durationField24)) == -Math.signum(durationField24.compareTo(durationField12)));
    }

    @Test
    public void test017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test017");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.eras();
        mutablePeriod4.setPeriod((long) 999, chronology9);
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod18.addDays((int) (byte) 10);
        mutablePeriod18.addMillis((int) '4');
        mutablePeriod18.setSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(dateTimeZone25);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalTime localTime28 = localTime26.plus(readablePeriod27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        boolean boolean35 = localTime26.isSupported(durationFieldType34);
        mutablePeriod18.add(durationFieldType34, 8);
        boolean boolean38 = mutablePeriod4.isSupported(durationFieldType34);
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType40 = dateTimeFieldType39.getDurationType();
        int int41 = mutablePeriod4.get(durationFieldType40);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        mutableDateTime43.add((long) 'a');
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str50 = duration49.toString();
        boolean boolean51 = duration47.isShorterThan((org.joda.time.ReadableDuration) duration49);
        org.joda.time.Hours hours52 = duration47.toStandardHours();
        mutableDateTime43.add((org.joda.time.ReadableDuration) duration47, 20);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        int int57 = dateTime56.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = null;
        java.lang.String str59 = dateTime56.toString(dateTimeFormatter58);
        org.joda.time.DateTime dateTime61 = dateTime56.minusMonths(22);
        org.joda.time.Instant instant62 = new org.joda.time.Instant();
        org.joda.time.Instant instant64 = instant62.withMillis(0L);
        org.joda.time.Chronology chronology65 = instant64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.eras();
        org.joda.time.DateTime dateTime67 = dateTime56.withChronology(chronology65);
        org.joda.time.Period period68 = duration47.toPeriod(chronology65);
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period(readableDuration71, readableInstant72);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) 100, 1L, periodType76);
        org.joda.time.Period period79 = period77.minusSeconds((-1));
        java.lang.String str80 = period77.toString();
        org.joda.time.Period period81 = period77.toPeriod();
        org.joda.time.PeriodType periodType82 = period77.getPeriodType();
        org.joda.time.Period period83 = period73.normalizedStandard(periodType82);
        java.lang.String str84 = periodType82.getName();
        java.lang.String str85 = periodType82.toString();
        org.joda.time.PeriodType periodType86 = periodType82.withDaysRemoved();
        org.joda.time.PeriodType periodType87 = periodType86.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod88 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType87);
        int[] intArray90 = chronology65.get((org.joda.time.ReadablePeriod) mutablePeriod88, 1L);
        org.joda.time.DateTimeField dateTimeField91 = chronology65.clockhourOfHalfday();
        org.joda.time.LocalTime localTime92 = org.joda.time.LocalTime.fromMillisOfDay(25L, chronology65);
        org.joda.time.DurationField durationField93 = durationFieldType40.getField(chronology65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField93, and durationField10", !(durationField10.compareTo(durationField93) == 0) || (Math.signum(durationField10.compareTo(durationField10)) == Math.signum(durationField93.compareTo(durationField10))));
    }

    @Test
    public void test018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test018");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = duration3.withDurationAdded((long) (short) 100, (int) ' ');
        long long7 = duration6.getMillis();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.months();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17, periodType18);
        boolean boolean20 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime15);
        int int21 = dateTime15.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime15, periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.Chronology chronology32 = dateTime29.getChronology();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime29.withChronology(chronology36);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.getMutableDateTime();
        boolean boolean45 = dateTime41.isBefore((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField55 = chronology49.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology49.minuteOfDay();
        mutableDateTime44.setChronology(chronology49);
        org.joda.time.DateTime dateTime58 = dateTime15.toDateTime(chronology49);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period(readableDuration59, readableInstant60);
        org.joda.time.Period period63 = period61.withDays((int) (byte) 1);
        org.joda.time.Period period65 = period63.minusWeeks(100);
        org.joda.time.Period period67 = period63.plusWeeks((int) (short) -1);
        long long70 = chronology49.add((org.joda.time.ReadablePeriod) period67, 86403200L, 443);
        boolean boolean71 = dateTimeFieldType0.isSupported(chronology49);
        org.joda.time.DurationField durationField72 = chronology49.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField37, durationField72, and durationField37", !(durationField37.compareTo(durationField72) == 0) || (Math.signum(durationField37.compareTo(durationField37)) == Math.signum(durationField72.compareTo(durationField37))));
    }

    @Test
    public void test019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test019");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime13.toString(dateTimeFormatter15);
        org.joda.time.DateTime dateTime18 = dateTime13.minusMonths(22);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.joda.time.DateTime dateTime24 = dateTime13.withChronology(chronology22);
        org.joda.time.Period period25 = duration4.toPeriod(chronology22);
        org.joda.time.DurationField durationField26 = chronology22.eras();
        org.joda.time.DurationField durationField27 = chronology22.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField27, and durationField23", !(durationField23.compareTo(durationField27) == 0) || (Math.signum(durationField23.compareTo(durationField23)) == Math.signum(durationField27.compareTo(durationField23))));
    }

    @Test
    public void test020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test020");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = property8.addToCopy(953979L);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear(3);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration19 = duration16.withDurationAdded((long) (short) 100, (int) ' ');
        long long20 = duration19.getMillis();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.months();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime30, periodType31);
        boolean boolean33 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        int int34 = dateTime28.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime28, periodType37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes(15);
        org.joda.time.Chronology chronology45 = dateTime42.getChronology();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.hourOfDay();
        org.joda.time.DateTime dateTime54 = dateTime42.withChronology(chronology49);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime57 = property56.getMutableDateTime();
        boolean boolean58 = dateTime54.isBefore((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.Chronology chronology62 = instant61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.eras();
        long long67 = chronology62.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField68 = chronology62.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.minuteOfDay();
        mutableDateTime57.setChronology(chronology62);
        org.joda.time.DateTime dateTime71 = dateTime28.toDateTime(chronology62);
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((long) 99, chronology62);
        boolean boolean73 = dateTime13.equals((java.lang.Object) chronology62);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.DurationField durationField75 = chronology62.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField50, durationField75, and durationField50", !(durationField50.compareTo(durationField75) == 0) || (Math.signum(durationField50.compareTo(durationField50)) == Math.signum(durationField75.compareTo(durationField50))));
    }

    @Test
    public void test021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test021");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        mutablePeriod2.setMillis((int) ' ');
        mutablePeriod2.setPeriod((long) 2);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = duration21.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.Interval interval30 = duration25.toIntervalTo((org.joda.time.ReadableInstant) dateTime29);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getYearOfCentury();
        org.joda.time.DateTime dateTime36 = dateTime33.withSecondOfMinute(53);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration45 = duration38.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(readableInstant46, readableInstant47, periodType48);
        org.joda.time.DurationFieldType durationFieldType51 = periodType48.getFieldType((int) (short) 0);
        java.lang.String str52 = periodType48.toString();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration38, periodType48);
        long long54 = duration38.getStandardHours();
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMinutes(15);
        org.joda.time.Chronology chronology60 = dateTime57.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.hours();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1440L, chronology60);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration38, chronology60);
        org.joda.time.Minutes minutes64 = duration38.toStandardMinutes();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(chronology65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusMinutes(15);
        org.joda.time.Chronology chronology69 = dateTime66.getChronology();
        org.joda.time.Instant instant70 = new org.joda.time.Instant();
        org.joda.time.Instant instant72 = instant70.withMillis(0L);
        org.joda.time.Chronology chronology73 = instant72.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.eras();
        org.joda.time.LocalTime localTime75 = org.joda.time.LocalTime.now(chronology73);
        org.joda.time.DurationField durationField76 = chronology73.eras();
        org.joda.time.DateTimeField dateTimeField77 = chronology73.hourOfDay();
        org.joda.time.DateTime dateTime78 = dateTime66.withChronology(chronology73);
        org.joda.time.MutableDateTime mutableDateTime79 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime79.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime81 = property80.getMutableDateTime();
        boolean boolean82 = dateTime78.isBefore((org.joda.time.ReadableInstant) mutableDateTime81);
        org.joda.time.Instant instant83 = new org.joda.time.Instant();
        org.joda.time.Instant instant85 = instant83.withMillis(0L);
        org.joda.time.Chronology chronology86 = instant85.getChronology();
        org.joda.time.DurationField durationField87 = chronology86.eras();
        long long91 = chronology86.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField92 = chronology86.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField93 = chronology86.minuteOfDay();
        mutableDateTime81.setChronology(chronology86);
        org.joda.time.DateTime dateTime95 = org.joda.time.DateTime.now(chronology86);
        boolean boolean96 = duration38.equals((java.lang.Object) chronology86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField61 and durationField74", Math.signum(durationField61.compareTo(durationField74)) == -Math.signum(durationField74.compareTo(durationField61)));
    }

    @Test
    public void test022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test022");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        java.lang.String str6 = chronology5.toString();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0, chronology5);
        org.joda.time.DateTime dateTime8 = localDate7.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property9 = localDate7.year();
        int int10 = localDate7.getWeekOfWeekyear();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology13 = localTime12.getChronology();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.add((long) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.yearOfCentury();
        mutableDateTime14.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period(readableDuration22, readableInstant23);
        org.joda.time.PeriodType periodType27 = null;
        org.joda.time.Period period28 = new org.joda.time.Period((long) 100, 1L, periodType27);
        org.joda.time.Period period30 = period28.minusSeconds((-1));
        java.lang.String str31 = period28.toString();
        org.joda.time.Period period32 = period28.toPeriod();
        org.joda.time.PeriodType periodType33 = period28.getPeriodType();
        org.joda.time.Period period34 = period24.normalizedStandard(periodType33);
        org.joda.time.DurationFieldType durationFieldType35 = null;
        int int36 = periodType33.indexOf(durationFieldType35);
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Chronology chronology40 = instant39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.eras();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.DurationField durationField43 = chronology40.eras();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType33, chronology40);
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime14.toMutableDateTime(chronology40);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours49 = duration48.toStandardHours();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology50);
        int int52 = dateTime51.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration48, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime55 = dateTime51.plus(0L);
        mutableDateTime46.setMillis((org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime46.add(durationFieldType57, 99);
        org.joda.time.LocalTime localTime61 = localTime12.withFieldAdded(durationFieldType57, 26175904);
        org.joda.time.Instant instant63 = new org.joda.time.Instant();
        org.joda.time.Instant instant65 = instant63.withMillis(0L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period68 = duration67.toPeriod();
        org.joda.time.Duration duration71 = duration67.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant72 = instant65.plus((org.joda.time.ReadableDuration) duration71);
        long long73 = instant72.getMillis();
        org.joda.time.Chronology chronology74 = instant72.getChronology();
        org.joda.time.DurationField durationField75 = chronology74.months();
        org.joda.time.Period period76 = new org.joda.time.Period((-205878993L), chronology74);
        org.joda.time.DateTimeField dateTimeField77 = chronology74.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone78 = chronology74.getZone();
        java.lang.String str80 = dateTimeZone78.getShortName((long) 52);
        org.joda.time.DateTime dateTime81 = localDate7.toDateTime(localTime61, dateTimeZone78);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField41 and durationField75", Math.signum(durationField41.compareTo(durationField75)) == -Math.signum(durationField75.compareTo(durationField41)));
    }

    @Test
    public void test023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test023");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        boolean boolean20 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Hours hours21 = duration16.toStandardHours();
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration16, 20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime25.toString(dateTimeFormatter27);
        org.joda.time.DateTime dateTime30 = dateTime25.minusMonths(22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.DateTime dateTime36 = dateTime25.withChronology(chronology34);
        org.joda.time.Period period37 = duration16.toPeriod(chronology34);
        org.joda.time.Instant instant39 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration16, 16);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean41 = instant39.isSupported(dateTimeFieldType40);
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant42, readableInstant43, periodType44);
        mutablePeriod45.setYears((int) '#');
        org.joda.time.Chronology chronology49 = null;
        mutablePeriod45.add((long) 1, chronology49);
        org.joda.time.ReadableInterval readableInterval51 = null;
        mutablePeriod45.setPeriod(readableInterval51);
        org.joda.time.DurationFieldType durationFieldType53 = org.joda.time.DurationFieldType.millis();
        int int54 = mutablePeriod45.indexOf(durationFieldType53);
        org.joda.time.MutablePeriod mutablePeriod55 = mutablePeriod45.toMutablePeriod();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusMinutes(15);
        org.joda.time.Chronology chronology63 = dateTime60.getChronology();
        java.lang.String str64 = chronology63.toString();
        org.joda.time.LocalTime localTime65 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology63);
        org.joda.time.DurationField durationField66 = chronology63.minutes();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(0L, chronology63);
        mutablePeriod45.setPeriod((long) 59, chronology63);
        org.joda.time.DurationField durationField69 = chronology63.weekyears();
        boolean boolean70 = dateTimeFieldType40.isSupported(chronology63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField35 and durationField66", Math.signum(durationField35.compareTo(durationField66)) == -Math.signum(durationField66.compareTo(durationField35)));
    }

    @Test
    public void test024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test024");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        long long8 = chronology3.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = chronology3.secondOfMinute();
        boolean boolean10 = dateTimeField9.isSupported();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        int int13 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate localDate15 = localDate11.withYearOfCentury(46);
        org.joda.time.LocalDate.Property property16 = localDate11.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        mutableDateTime20.add((long) 'a');
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.DateTime dateTime26 = instant25.toDateTime();
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.months();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableInstant) dateTime28, periodType29);
        org.joda.time.DateTime.Property property31 = dateTime28.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = property31.getFieldType();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime20.property(dateTimeFieldType32);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration43 = duration39.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant44 = instant37.plus((org.joda.time.ReadableDuration) duration43);
        long long45 = instant44.getMillis();
        org.joda.time.Chronology chronology46 = instant44.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.months();
        org.joda.time.Period period48 = new org.joda.time.Period((-205878993L), chronology46);
        org.joda.time.DateTimeField dateTimeField49 = chronology46.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone50 = chronology46.getZone();
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime20, chronology46);
        org.joda.time.LocalTime localTime53 = localTime51.withMillisOfDay((int) (short) 100);
        org.joda.time.Chronology chronology55 = null;
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.lang.String str58 = locale56.getDisplayVariant(locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology55, locale57);
        java.lang.Object obj60 = dateTimeParserBucket59.saveState();
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime((long) (short) 100, chronology62);
        org.joda.time.DurationFieldType durationFieldType64 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str65 = durationFieldType64.getName();
        boolean boolean66 = localTime63.isSupported(durationFieldType64);
        boolean boolean67 = dateTimeParserBucket59.restoreState((java.lang.Object) boolean66);
        org.joda.time.Chronology chronology68 = dateTimeParserBucket59.getChronology();
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime72 = dateTime70.withZoneRetainFields(dateTimeZone71);
        dateTimeParserBucket59.setZone(dateTimeZone71);
        long long74 = dateTimeParserBucket59.computeMillis();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.dayOfWeek();
        dateTimeParserBucket59.saveField(dateTimeFieldType75, (int) (short) -1);
        dateTimeParserBucket59.setPivotYear((java.lang.Integer) 26177);
        org.joda.time.DateTimeFieldType dateTimeFieldType80 = org.joda.time.DateTimeFieldType.hourOfHalfday();
        java.util.Locale locale82 = null;
        dateTimeParserBucket59.saveField(dateTimeFieldType80, "PT0S", locale82);
        org.joda.time.LocalTime.Property property84 = localTime51.property(dateTimeFieldType80);
        boolean boolean85 = dateTimeZone18.equals((java.lang.Object) localTime51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField47", Math.signum(durationField4.compareTo(durationField47)) == -Math.signum(durationField47.compareTo(durationField4)));
    }

    @Test
    public void test025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test025");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.clockhourOfDay();
        org.joda.time.DurationField durationField35 = chronology26.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField35, and durationField27", !(durationField27.compareTo(durationField35) == 0) || (Math.signum(durationField27.compareTo(durationField27)) == Math.signum(durationField35.compareTo(durationField27))));
    }

    @Test
    public void test026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test026");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(50, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(1645514174548L, dateTimeZone3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes(15);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.halfdays();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears((int) (short) 100);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration30 = duration23.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.plus((org.joda.time.ReadableDuration) duration23);
        long long33 = chronology12.set((org.joda.time.ReadablePartial) localDateTime31, 950105L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(86400L, chronology12);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundHalfFloorCopy();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale42.getDisplayName();
        java.lang.String str44 = locale42.getISO3Language();
        java.lang.String str45 = locale42.getISO3Country();
        java.lang.String str46 = property40.getAsShortText(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale42, (java.lang.Integer) 26175904);
        org.joda.time.DurationField durationField49 = chronology12.months();
        org.joda.time.DateTime dateTime50 = mutableDateTime5.toDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField51 = chronology12.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and dateTime50", (mutableDateTime5.compareTo(dateTime50) == 0) == mutableDateTime5.equals(dateTime50));
    }

    @Test
    public void test027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test027");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withZoneUTC();
        boolean boolean14 = dateTimeFormatter2.isPrinter();
        org.joda.time.Chronology chronology15 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant17, readableInstant18, periodType19);
        mutablePeriod20.setYears((int) '#');
        org.joda.time.Chronology chronology24 = null;
        mutablePeriod20.add((long) 1, chronology24);
        org.joda.time.ReadableInterval readableInterval26 = null;
        mutablePeriod20.setPeriod(readableInterval26);
        org.joda.time.DurationFieldType durationFieldType28 = org.joda.time.DurationFieldType.millis();
        int int29 = mutablePeriod20.indexOf(durationFieldType28);
        org.joda.time.MutablePeriod mutablePeriod30 = mutablePeriod20.toMutablePeriod();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(15);
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology38);
        org.joda.time.DurationField durationField41 = chronology38.minutes();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(0L, chronology38);
        mutablePeriod20.setPeriod((long) 59, chronology38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter2.withChronology(chronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField41", Math.signum(durationField7.compareTo(durationField41)) == -Math.signum(durationField41.compareTo(durationField7)));
    }

    @Test
    public void test028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test028");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addMonths(0);
        java.lang.String str17 = mutableDateTime0.toString();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1, chronology19);
        int int21 = dateTime20.getMinuteOfDay();
        org.joda.time.Instant instant22 = dateTime20.toInstant();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getYearOfCentury();
        int int26 = dateTime24.getWeekyear();
        org.joda.time.DateTime dateTime27 = dateTime24.withEarlierOffsetAtOverlap();
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime27.toMutableDateTime();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant22, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((long) (short) 100, chronology32);
        org.joda.time.DurationFieldType durationFieldType34 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str35 = durationFieldType34.getName();
        boolean boolean36 = localTime33.isSupported(durationFieldType34);
        boolean boolean37 = period30.isSupported(durationFieldType34);
        mutableDateTime0.add(durationFieldType34, 1260);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableInstant40, readableInstant41, periodType42);
        mutablePeriod43.setYears((int) '#');
        org.joda.time.Chronology chronology47 = null;
        mutablePeriod43.add((long) 1, chronology47);
        org.joda.time.ReadableInterval readableInterval49 = null;
        mutablePeriod43.setPeriod(readableInterval49);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod55.addDays((int) (byte) 10);
        mutablePeriod55.addMillis((int) '4');
        mutablePeriod55.setSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone62 = null;
        org.joda.time.LocalTime localTime63 = new org.joda.time.LocalTime(dateTimeZone62);
        org.joda.time.ReadablePeriod readablePeriod64 = null;
        org.joda.time.LocalTime localTime65 = localTime63.plus(readablePeriod64);
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.ReadableInstant readableInstant67 = null;
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(readableInstant66, readableInstant67, periodType68);
        org.joda.time.DurationFieldType durationFieldType71 = periodType68.getFieldType((int) (short) 0);
        boolean boolean72 = localTime63.isSupported(durationFieldType71);
        mutablePeriod55.add(durationFieldType71, 8);
        mutablePeriod43.add(durationFieldType71, 53);
        org.joda.time.Instant instant80 = new org.joda.time.Instant();
        org.joda.time.Instant instant82 = instant80.withMillis(0L);
        org.joda.time.Chronology chronology83 = instant82.getChronology();
        org.joda.time.DurationField durationField84 = chronology83.eras();
        org.joda.time.LocalTime localTime85 = org.joda.time.LocalTime.now(chronology83);
        org.joda.time.DurationField durationField86 = chronology83.eras();
        org.joda.time.DateTimeField dateTimeField87 = chronology83.minuteOfHour();
        org.joda.time.LocalTime localTime88 = new org.joda.time.LocalTime((long) 36950209, chronology83);
        mutablePeriod43.setPeriod(436258L, (long) 1, chronology83);
        org.joda.time.DurationField durationField90 = durationFieldType34.getField(chronology83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField84, durationField90, and durationField84", !(durationField84.compareTo(durationField90) == 0) || (Math.signum(durationField84.compareTo(durationField84)) == Math.signum(durationField90.compareTo(durationField84))));
    }

    @Test
    public void test029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test029");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (short) 100, chronology19);
        int int21 = localTime20.getMillisOfDay();
        org.joda.time.LocalTime.Property property22 = localTime20.millisOfSecond();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.joda.time.LocalTime localTime24 = property22.roundHalfEvenCopy();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration33 = duration29.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant34 = instant27.plus((org.joda.time.ReadableDuration) duration33);
        long long35 = instant34.getMillis();
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        mutableDateTime37.add((long) 'a');
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str44 = duration43.toString();
        boolean boolean45 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Hours hours46 = duration41.toStandardHours();
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration41, 20);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = dateTime50.toString(dateTimeFormatter52);
        org.joda.time.DateTime dateTime55 = dateTime50.minusMonths(22);
        org.joda.time.Instant instant56 = new org.joda.time.Instant();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Chronology chronology59 = instant58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.eras();
        org.joda.time.DateTime dateTime61 = dateTime50.withChronology(chronology59);
        org.joda.time.Period period62 = duration41.toPeriod(chronology59);
        org.joda.time.Instant instant64 = instant34.withDurationAdded((org.joda.time.ReadableDuration) duration41, 16);
        boolean boolean65 = localTime24.equals((java.lang.Object) instant34);
        org.joda.time.Instant instant68 = instant34.withDurationAdded(3155695200000L, 44);
        org.joda.time.DateTimeZone dateTimeZone69 = instant34.getZone();
        java.lang.String str70 = dateTimeZone69.toString();
        org.joda.time.Chronology chronology71 = chronology13.withZone(dateTimeZone69);
        org.joda.time.DurationField durationField72 = chronology13.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField60, durationField72, and durationField60", !(durationField60.compareTo(durationField72) == 0) || (Math.signum(durationField60.compareTo(durationField60)) == Math.signum(durationField72.compareTo(durationField60))));
    }

    @Test
    public void test030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test030");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime9 = dateTime7.minus((long) 26176);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Period period14 = period12.minusYears((-1));
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.years();
        org.joda.time.Period period17 = new org.joda.time.Period(60000L, periodType16);
        org.joda.time.Period period18 = period14.withFields((org.joda.time.ReadablePeriod) period17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.DateTime dateTime30 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTime dateTime33 = dateTime30.withZone(dateTimeZone31);
        int int34 = dateTime33.getWeekOfWeekyear();
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        int int38 = dateTime33.compareTo((org.joda.time.ReadableInstant) instant37);
        org.joda.time.DateTime dateTime40 = dateTime33.withMillisOfDay(161);
        org.joda.time.Duration duration41 = period18.toDurationFrom((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTime dateTime42 = dateTime7.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.forOffsetMillis(335);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(dateTimeZone44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime7.toMutableDateTime(dateTimeZone44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and mutableDateTime45", (dateTime1.compareTo(mutableDateTime45) == 0) == dateTime1.equals(mutableDateTime45));
    }

    @Test
    public void test031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test031");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime1.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime1.minusMonths(22);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DateTime dateTime12 = dateTime1.withChronology(chronology10);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.centuryOfEra();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime13.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        boolean boolean17 = dateTime1.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        int int19 = localDate18.getDayOfMonth();
        org.joda.time.Chronology chronology20 = localDate18.getChronology();
        boolean boolean21 = dateTimeFieldType16.isSupported(chronology20);
        org.joda.time.DurationField durationField22 = chronology20.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField11, durationField22, and durationField11", !(durationField11.compareTo(durationField22) == 0) || (Math.signum(durationField11.compareTo(durationField11)) == Math.signum(durationField22.compareTo(durationField11))));
    }

    @Test
    public void test032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test032");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.set(45);
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime8 = property3.add(45);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        long long12 = dateTimeZone9.previousTransition(100L);
        int int14 = dateTimeZone9.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime15 = mutableDateTime8.toDateTime(dateTimeZone9);
        mutableDateTime1.setZoneRetainFields(dateTimeZone9);
        java.lang.String str18 = dateTimeZone9.getNameKey((long) 36950209);
        long long20 = dateTimeZone9.previousTransition(959393L);
        int int22 = dateTimeZone9.getOffset(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and dateTime15", (mutableDateTime2.compareTo(dateTime15) == 0) == mutableDateTime2.equals(dateTime15));
    }

    @Test
    public void test033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test033");
        org.joda.time.Period period1 = org.joda.time.Period.months(53);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.months();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime10, periodType11);
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property13.getFieldType();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.property(dateTimeFieldType14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = duration21.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant26 = instant19.plus((org.joda.time.ReadableDuration) duration25);
        long long27 = instant26.getMillis();
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.months();
        org.joda.time.Period period30 = new org.joda.time.Period((-205878993L), chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology28.getZone();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime2, chronology28);
        mutableDateTime2.addSeconds(152);
        mutableDateTime2.addDays(57);
        org.joda.time.Duration duration38 = period1.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime2);
        java.util.Date date39 = mutableDateTime2.toDate();
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.fromDateFields(date39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime8", (instant7.compareTo(dateTime8) == 0) == instant7.equals(dateTime8));
    }

    @Test
    public void test034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test034");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.DateTime dateTime20 = org.joda.time.DateTime.now(dateTimeZone16);
        long long23 = dateTimeZone16.convertLocalToUTC(2100L, true);
        org.joda.time.LocalDate localDate24 = org.joda.time.LocalDate.now(dateTimeZone16);
        int int25 = localDate24.getMonthOfYear();
        org.joda.time.LocalDate.Property property26 = localDate24.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and mutableDateTime19", (mutableDateTime0.compareTo(mutableDateTime19) == 0) == mutableDateTime0.equals(mutableDateTime19));
    }

    @Test
    public void test035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test035");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.minusMillis((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.plusHours(51);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.minusMillis(36946953);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.yearOfCentury();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration24 = duration21.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration25 = duration18.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration18);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime13.centuryOfEra();
        mutableDateTime13.addHours((int) (byte) 10);
        mutableDateTime13.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField32 = mutableDateTime13.getRoundingField();
        int int33 = mutableDateTime13.getWeekyear();
        org.joda.time.DateTime dateTime34 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) mutableDateTime13);
        java.lang.Object obj35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(obj35);
        boolean boolean38 = dateTime36.isBefore((long) 7);
        java.lang.String str39 = dateTime36.toString();
        org.joda.time.DateTime dateTime41 = dateTime36.minus((long) 7);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.DateTime dateTime46 = dateTime36.toDateTime(chronology45);
        org.joda.time.DurationField durationField47 = chronology45.days();
        long long50 = durationField47.getMillis((long) 50, 1143849662172L);
        org.joda.time.DurationFieldType durationFieldType51 = durationField47.getType();
        java.lang.String str52 = durationFieldType51.getName();
        mutableDateTime13.add(durationFieldType51, 26164766);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and instant42", (dateTime36.compareTo(instant42) == 0) == dateTime36.equals(instant42));
    }

    @Test
    public void test036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test036");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant24 = instant17.plus((org.joda.time.ReadableDuration) duration23);
        long long25 = instant24.getMillis();
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.months();
        org.joda.time.Period period28 = new org.joda.time.Period((-205878993L), chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology26.getZone();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime0, chronology26);
        mutableDateTime0.addSeconds(152);
        mutableDateTime0.setSecondOfDay(28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime6", (instant5.compareTo(dateTime6) == 0) == instant5.equals(dateTime6));
    }

    @Test
    public void test037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test037");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        mutablePeriod35.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod35.toMutablePeriod();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod38, 1439);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration41, readableInstant42);
        org.joda.time.Period period45 = period43.withDays((int) (byte) 1);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours48 = duration47.toStandardHours();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = period43.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        int int54 = period43.getDays();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period43);
        org.joda.time.Period period57 = period43.plusSeconds(26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant5", (dateTime1.compareTo(instant5) == 0) == dateTime1.equals(instant5));
    }

    @Test
    public void test038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test038");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours5 = duration4.toStandardHours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration11 = duration1.toDuration();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.dayOfYear();
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 1L, periodType16);
        org.joda.time.Period period19 = period17.minusSeconds((-1));
        java.lang.String str20 = period17.toString();
        org.joda.time.LocalDate localDate22 = localDate12.withPeriodAdded((org.joda.time.ReadablePeriod) period17, 3);
        org.joda.time.DateTime dateTime23 = localDate22.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology25 = null;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.lang.String str28 = locale26.getDisplayVariant(locale27);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology25, locale27);
        java.lang.Object obj30 = dateTimeParserBucket29.saveState();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTimeParserBucket29.getZone();
        org.joda.time.DateTime dateTime32 = localDate22.toDateTimeAtStartOfDay(dateTimeZone31);
        org.joda.time.DateTime.Property property33 = dateTime32.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        mutableDateTime34.add((long) 'a');
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.yearOfCentury();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration45 = duration42.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration46 = duration39.minus((org.joda.time.ReadableDuration) duration45);
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime34.centuryOfEra();
        mutableDateTime34.addYears(0);
        mutableDateTime34.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Duration duration61 = duration57.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant62 = instant55.plus((org.joda.time.ReadableDuration) duration61);
        long long63 = instant62.getMillis();
        org.joda.time.Duration duration64 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime34, (org.joda.time.ReadableInstant) instant62);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime34.millisOfSecond();
        org.joda.time.Instant instant66 = new org.joda.time.Instant((java.lang.Object) mutableDateTime34);
        int int67 = property33.compareTo((org.joda.time.ReadableInstant) instant66);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) instant66);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime7 and instant53", (dateTime7.compareTo(instant53) == 0) == dateTime7.equals(instant53));
    }

    @Test
    public void test039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test039");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        mutableDateTime16.addHours(26150565);
        mutableDateTime16.addWeekyears(438);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant5", (dateTime1.compareTo(instant5) == 0) == dateTime1.equals(instant5));
    }

    @Test
    public void test040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test040");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        mutableDateTime6.setDate((long) '#');
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime6.toDateTime(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) periodType25);
        mutableDateTime0.setZoneRetainFields(dateTimeZone17);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate.Property property30 = localDate28.weekOfWeekyear();
        org.joda.time.LocalDate localDate31 = property30.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate33 = localDate31.plusMonths((-292275054));
        java.lang.String str34 = localDate33.toString();
        org.joda.time.DateMidnight dateMidnight35 = localDate33.toDateMidnight();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and dateTime19", (mutableDateTime6.compareTo(dateTime19) == 0) == mutableDateTime6.equals(dateTime19));
    }

    @Test
    public void test041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test041");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        long long18 = chronology13.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfMinute();
        boolean boolean20 = dateTimeField19.isSupported();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        int int23 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate25 = localDate21.withYearOfCentury(46);
        boolean boolean26 = property8.equals((java.lang.Object) localDate25);
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(chronology27);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.dayOfYear();
        java.lang.String str30 = mutableDateTime28.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime3", (instant2.compareTo(dateTime3) == 0) == instant2.equals(dateTime3));
    }

    @Test
    public void test042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test042");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime12.withChronology(chronology19);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.getMutableDateTime();
        boolean boolean28 = dateTime24.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.setHourOfDay(0);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime10.setTime((long) 62176);
        mutableDateTime10.setMinuteOfDay(56);
        mutableDateTime10.addWeekyears(26180329);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant16", (dateTime12.compareTo(instant16) == 0) == dateTime12.equals(instant16));
    }

    @Test
    public void test043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test043");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.months();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.DateTime.Property property22 = dateTime19.minuteOfDay();
        org.joda.time.DateTime dateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime25 = property22.addToCopy(953979L);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear(3);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) (short) 100, (int) ' ');
        long long34 = duration33.getMillis();
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.DateTime dateTime38 = instant37.toDateTime();
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.months();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime44, periodType45);
        boolean boolean47 = dateTime38.isBefore((org.joda.time.ReadableInstant) dateTime42);
        int int48 = dateTime42.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(readableInstant49, readableInstant50, periodType51);
        org.joda.time.PeriodType periodType53 = periodType51.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime42, periodType51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMinutes(15);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        org.joda.time.Instant instant60 = new org.joda.time.Instant();
        org.joda.time.Instant instant62 = instant60.withMillis(0L);
        org.joda.time.Chronology chronology63 = instant62.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.eras();
        org.joda.time.LocalTime localTime65 = org.joda.time.LocalTime.now(chronology63);
        org.joda.time.DurationField durationField66 = chronology63.eras();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.hourOfDay();
        org.joda.time.DateTime dateTime68 = dateTime56.withChronology(chronology63);
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime69.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime71 = property70.getMutableDateTime();
        boolean boolean72 = dateTime68.isBefore((org.joda.time.ReadableInstant) mutableDateTime71);
        org.joda.time.Instant instant73 = new org.joda.time.Instant();
        org.joda.time.Instant instant75 = instant73.withMillis(0L);
        org.joda.time.Chronology chronology76 = instant75.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.eras();
        long long81 = chronology76.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField82 = chronology76.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField83 = chronology76.minuteOfDay();
        mutableDateTime71.setChronology(chronology76);
        org.joda.time.DateTime dateTime85 = dateTime42.toDateTime(chronology76);
        org.joda.time.LocalTime localTime86 = new org.joda.time.LocalTime((long) 99, chronology76);
        boolean boolean87 = dateTime27.equals((java.lang.Object) chronology76);
        org.joda.time.DateTimeZone dateTimeZone88 = chronology76.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter13.withZone(dateTimeZone88);
        boolean boolean90 = dateTimeFormatter89.isParser();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime56", (instant3.compareTo(dateTime56) == 0) == instant3.equals(dateTime56));
    }

    @Test
    public void test044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test044");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant10 = instant3.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period12 = duration9.toPeriod(periodType11);
        org.joda.time.Duration duration14 = duration9.withMillis(60000L);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Instant instant16 = instant0.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours22 = duration21.toStandardHours();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration27 = duration18.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays(555370422L);
        int int30 = duration18.compareTo((org.joda.time.ReadableDuration) duration29);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException34 = new java.io.IOException("");
        java.io.IOException iOException35 = new java.io.IOException((java.lang.Throwable) iOException34);
        boolean boolean36 = mutableDateTime32.equals((java.lang.Object) iOException34);
        org.joda.time.Duration duration39 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration39, 1424);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.monthOfYear();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        org.joda.time.LocalDate localDate45 = property43.roundCeilingCopy();
        org.joda.time.LocalDate localDate47 = localDate45.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone48);
        org.joda.time.DateMidnight dateMidnight50 = localDate47.toDateMidnight(dateTimeZone48);
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateMidnight50);
        org.joda.time.Duration duration52 = duration18.plus((org.joda.time.ReadableDuration) duration39);
        boolean boolean53 = duration14.isLongerThan((org.joda.time.ReadableDuration) duration52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime24", (instant0.compareTo(dateTime24) == 0) == instant0.equals(dateTime24));
    }

    @Test
    public void test045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test045");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration5 = duration2.withDurationAdded((long) (short) 100, (int) ' ');
        long long6 = duration5.getMillis();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.months();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16, periodType17);
        boolean boolean19 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime14);
        int int20 = dateTime14.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.PeriodType periodType25 = periodType23.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime14, periodType23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime28.withChronology(chronology35);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.getMutableDateTime();
        boolean boolean44 = dateTime40.isBefore((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.eras();
        long long53 = chronology48.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField54 = chronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.minuteOfDay();
        mutableDateTime43.setChronology(chronology48);
        org.joda.time.DateTime dateTime57 = dateTime14.toDateTime(chronology48);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 99, chronology48);
        org.joda.time.Chronology chronology60 = null;
        org.joda.time.LocalTime localTime61 = new org.joda.time.LocalTime((long) (short) 100, chronology60);
        int int62 = localTime61.getMillisOfDay();
        org.joda.time.LocalTime.Property property63 = localTime61.millisOfSecond();
        org.joda.time.DurationField durationField64 = property63.getDurationField();
        org.joda.time.LocalTime localTime65 = property63.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property66 = localTime65.millisOfSecond();
        org.joda.time.LocalTime localTime67 = property66.roundHalfCeilingCopy();
        int int68 = localTime58.compareTo((org.joda.time.ReadablePartial) localTime67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField36 and durationField64", Math.signum(durationField36.compareTo(durationField64)) == -Math.signum(durationField64.compareTo(durationField36)));
    }

    @Test
    public void test046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test046");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology37);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundFloor();
        org.joda.time.DurationField durationField43 = property41.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField43, and durationField22", !(durationField22.compareTo(durationField43) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField43.compareTo(durationField22))));
    }

    @Test
    public void test047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test047");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(chronology7);
        org.joda.time.DurationField durationField10 = chronology7.eras();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 44, chronology7);
        org.joda.time.DateTimeField dateTimeField12 = dateTimeFieldType2.getField(chronology7);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period18 = period16.minusSeconds((-1));
        java.lang.String str19 = period16.toString();
        long long22 = chronology7.add((org.joda.time.ReadablePeriod) period16, (long) ' ', (int) 'a');
        org.joda.time.Period period24 = period16.minusHours((-292275054));
        org.joda.time.Period period26 = period24.minusHours(2000);
        int int27 = period24.getMinutes();
        org.joda.time.Period period28 = period24.toPeriod();
        org.joda.time.Period period30 = period24.withYears(54);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration31, readableInstant32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.Period period39 = period37.minusSeconds((-1));
        java.lang.String str40 = period37.toString();
        org.joda.time.Period period41 = period37.toPeriod();
        org.joda.time.PeriodType periodType42 = period37.getPeriodType();
        org.joda.time.Period period43 = period33.normalizedStandard(periodType42);
        org.joda.time.Period period45 = period43.withSeconds(10);
        org.joda.time.PeriodType periodType46 = period45.getPeriodType();
        org.joda.time.Period period47 = period24.normalizedStandard(periodType46);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Chronology chronology57 = instant56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.eras();
        org.joda.time.LocalTime localTime59 = org.joda.time.LocalTime.now(chronology57);
        org.joda.time.DurationField durationField60 = chronology57.eras();
        mutablePeriod52.setPeriod((long) 999, chronology57);
        org.joda.time.Chronology chronology62 = chronology57.withUTC();
        org.joda.time.DateTimeField dateTimeField63 = chronology62.centuryOfEra();
        org.joda.time.Period period64 = new org.joda.time.Period((-420198L), (long) 436, periodType46, chronology62);
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime(chronology62);
        org.joda.time.DurationField durationField66 = chronology62.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField66, and durationField8", !(durationField8.compareTo(durationField66) == 0) || (Math.signum(durationField8.compareTo(durationField8)) == Math.signum(durationField66.compareTo(durationField8))));
    }

    @Test
    public void test048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test048");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours5 = duration4.toStandardHours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays(555370422L);
        int int13 = duration1.compareTo((org.joda.time.ReadableDuration) duration12);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException17 = new java.io.IOException("");
        java.io.IOException iOException18 = new java.io.IOException((java.lang.Throwable) iOException17);
        boolean boolean19 = mutableDateTime15.equals((java.lang.Object) iOException17);
        org.joda.time.Duration duration22 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration22, 1424);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField27 = property26.getField();
        org.joda.time.LocalDate localDate28 = property26.roundCeilingCopy();
        org.joda.time.LocalDate localDate30 = localDate28.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone31);
        org.joda.time.DateMidnight dateMidnight33 = localDate30.toDateMidnight(dateTimeZone31);
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration22, (org.joda.time.ReadableInstant) dateMidnight33);
        org.joda.time.Duration duration35 = duration1.plus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.ReadableDuration readableDuration36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period(readableDuration36, readableInstant37);
        org.joda.time.PeriodType periodType41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period((long) 100, 1L, periodType41);
        org.joda.time.Period period44 = period42.minusSeconds((-1));
        java.lang.String str45 = period42.toString();
        org.joda.time.Period period46 = period42.toPeriod();
        org.joda.time.PeriodType periodType47 = period42.getPeriodType();
        org.joda.time.Period period48 = period38.normalizedStandard(periodType47);
        java.lang.String str49 = periodType47.getName();
        java.lang.String str50 = periodType47.toString();
        org.joda.time.PeriodType periodType51 = periodType47.withDaysRemoved();
        org.joda.time.PeriodType periodType52 = periodType51.withYearsRemoved();
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.eras();
        long long61 = chronology56.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField62 = chronology56.secondOfMinute();
        org.joda.time.Period period63 = duration35.toPeriod(periodType51, chronology56);
        org.joda.time.DurationField durationField64 = chronology56.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField57, durationField64, and durationField57", !(durationField57.compareTo(durationField64) == 0) || (Math.signum(durationField57.compareTo(durationField57)) == Math.signum(durationField64.compareTo(durationField57))));
    }

    @Test
    public void test049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test049");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        mutableDateTime1.addMonths(36956320);
        mutableDateTime1.setDayOfYear(49);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration16, readableInstant17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.Period period24 = period22.minusSeconds((-1));
        java.lang.String str25 = period22.toString();
        org.joda.time.Period period26 = period22.toPeriod();
        org.joda.time.PeriodType periodType27 = period22.getPeriodType();
        org.joda.time.Period period28 = period18.normalizedStandard(periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = null;
        int int30 = periodType27.indexOf(durationFieldType29);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType27, chronology34);
        org.joda.time.DateTimeField dateTimeField40 = chronology34.hourOfDay();
        mutableDateTime1.setChronology(chronology34);
        org.joda.time.DurationField durationField42 = chronology34.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField42, and durationField35", !(durationField35.compareTo(durationField42) == 0) || (Math.signum(durationField35.compareTo(durationField35)) == Math.signum(durationField42.compareTo(durationField35))));
    }

    @Test
    public void test050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test050");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology37);
        org.joda.time.DurationField durationField41 = chronology37.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField41, and durationField22", !(durationField22.compareTo(durationField41) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField41.compareTo(durationField22))));
    }

    @Test
    public void test051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test051");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.secondOfDay();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration47 = duration44.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean48 = duration42.isLongerThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableDuration51, readableInstant52);
        org.joda.time.PeriodType periodType56 = null;
        org.joda.time.Period period57 = new org.joda.time.Period((long) 100, 1L, periodType56);
        org.joda.time.Period period59 = period57.minusSeconds((-1));
        java.lang.String str60 = period57.toString();
        org.joda.time.Period period61 = period57.toPeriod();
        org.joda.time.PeriodType periodType62 = period57.getPeriodType();
        org.joda.time.Period period63 = period53.normalizedStandard(periodType62);
        java.lang.String str64 = periodType62.getName();
        java.lang.String str65 = periodType62.toString();
        org.joda.time.PeriodType periodType66 = periodType62.withWeeksRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType67.getDurationType();
        org.joda.time.Instant instant69 = new org.joda.time.Instant();
        org.joda.time.Instant instant71 = instant69.withMillis(0L);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period74 = duration73.toPeriod();
        org.joda.time.Duration duration77 = duration73.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant78 = instant71.plus((org.joda.time.ReadableDuration) duration77);
        long long79 = instant78.getMillis();
        org.joda.time.Chronology chronology80 = instant78.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.months();
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType67.getField(chronology80);
        org.joda.time.DateTimeField dateTimeField83 = chronology80.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime84 = org.joda.time.LocalDateTime.now(chronology80);
        org.joda.time.Period period85 = new org.joda.time.Period(1553014L, (long) 25, periodType62, chronology80);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime39, (org.joda.time.ReadableDuration) duration47, periodType62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField81", Math.signum(durationField22.compareTo(durationField81)) == -Math.signum(durationField81.compareTo(durationField22)));
    }

    @Test
    public void test052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test052");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 44, chronology4);
        int int9 = dateTime8.getSecondOfMinute();
        int int10 = dateTime8.getWeekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        java.util.Locale locale13 = java.util.Locale.GERMAN;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getDisplayVariant(locale14);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology12, locale14);
        java.lang.Object obj17 = dateTimeParserBucket16.saveState();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (short) 100, chronology19);
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str22 = durationFieldType21.getName();
        boolean boolean23 = localTime20.isSupported(durationFieldType21);
        boolean boolean24 = dateTimeParserBucket16.restoreState((java.lang.Object) boolean23);
        java.lang.Integer int25 = dateTimeParserBucket16.getOffsetInteger();
        org.joda.time.Chronology chronology26 = dateTimeParserBucket16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime27 = dateTime8.toMutableDateTime(chronology26);
        mutableDateTime27.addWeeks(57);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime27.copy();
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.dayOfYear();
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) 100, 1L, periodType35);
        org.joda.time.Period period38 = period36.minusSeconds((-1));
        java.lang.String str39 = period36.toString();
        org.joda.time.LocalDate localDate41 = localDate31.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 3);
        org.joda.time.DateTime dateTime42 = localDate41.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology44 = null;
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = locale45.getDisplayVariant(locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology44, locale46);
        java.lang.Object obj49 = dateTimeParserBucket48.saveState();
        org.joda.time.DateTimeZone dateTimeZone50 = dateTimeParserBucket48.getZone();
        org.joda.time.DateTime dateTime51 = localDate41.toDateTimeAtStartOfDay(dateTimeZone50);
        org.joda.time.PeriodType periodType54 = null;
        org.joda.time.Period period55 = new org.joda.time.Period((long) 100, 1L, periodType54);
        org.joda.time.Period period57 = period55.minusSeconds((-1));
        org.joda.time.Period period59 = period57.multipliedBy((int) '#');
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.centuries();
        int int61 = period59.get(durationFieldType60);
        boolean boolean62 = localDate41.isSupported(durationFieldType60);
        java.lang.String str63 = durationFieldType60.toString();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(chronology64);
        org.joda.time.DateTime dateTime67 = dateTime65.plusMinutes(15);
        org.joda.time.Chronology chronology68 = dateTime65.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.hours();
        org.joda.time.DateTimeField dateTimeField70 = chronology68.minuteOfHour();
        boolean boolean71 = durationFieldType60.isSupported(chronology68);
        org.joda.time.DateTimeField dateTimeField72 = chronology68.hourOfHalfday();
        mutableDateTime30.setChronology(chronology68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField69", Math.signum(durationField5.compareTo(durationField69)) == -Math.signum(durationField69.compareTo(durationField5)));
    }

    @Test
    public void test053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test053");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.DateTime dateTime11 = dateTime1.withDurationAdded((long) 62170, 26175904);
        int int12 = dateTime11.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(50, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime(1645514174548L, dateTimeZone16);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(15);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        java.lang.String str26 = chronology25.toString();
        org.joda.time.DurationField durationField27 = chronology25.halfdays();
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.plusYears((int) (short) 100);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration43 = duration36.minus((org.joda.time.ReadableDuration) duration42);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime34.plus((org.joda.time.ReadableDuration) duration36);
        long long46 = chronology25.set((org.joda.time.ReadablePartial) localDateTime44, 950105L);
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime(86400L, chronology25);
        org.joda.time.LocalDateTime localDateTime48 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime54 = property53.roundHalfFloorCopy();
        java.util.Locale locale55 = java.util.Locale.GERMAN;
        java.lang.String str56 = locale55.getDisplayName();
        java.lang.String str57 = locale55.getISO3Language();
        java.lang.String str58 = locale55.getISO3Country();
        java.lang.String str59 = property53.getAsShortText(locale55);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket(0L, chronology25, locale55, (java.lang.Integer) 26175904);
        org.joda.time.DurationField durationField62 = chronology25.months();
        org.joda.time.DateTime dateTime63 = mutableDateTime18.toDateTime(chronology25);
        org.joda.time.DateTime dateTime64 = dateTime11.toDateTime(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and dateTime63", (mutableDateTime18.compareTo(dateTime63) == 0) == mutableDateTime18.equals(dateTime63));
    }

    @Test
    public void test054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test054");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.eras();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 44, chronology10);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType5.getField(chronology10);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        long long25 = chronology10.add((org.joda.time.ReadablePeriod) period19, (long) ' ', (int) 'a');
        org.joda.time.Period period27 = period19.minusHours((-292275054));
        org.joda.time.Period period29 = period27.minusHours(2000);
        int int30 = period27.getMinutes();
        org.joda.time.Period period31 = period27.toPeriod();
        mutableDateTime4.add((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale36);
        java.util.Locale locale39 = dateTimeParserBucket38.getLocale();
        long long40 = dateTimeParserBucket38.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket38.getZone();
        mutableDateTime4.setZone(dateTimeZone41);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.eras();
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.now(chronology47);
        org.joda.time.DurationField durationField50 = chronology47.eras();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 44, chronology47);
        int int52 = dateTime51.getSecondOfMinute();
        org.joda.time.Instant instant53 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime54 = instant53.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime55 = instant53.toDateTime();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) 36946953);
        org.joda.time.Instant instant58 = instant53.plus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.DateTime dateTime59 = dateTime51.plus((org.joda.time.ReadableDuration) duration57);
        mutableDateTime4.setDate((org.joda.time.ReadableInstant) dateTime59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and mutableDateTime54", (instant7.compareTo(mutableDateTime54) == 0) == instant7.equals(mutableDateTime54));
    }

    @Test
    public void test055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test055");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours35 = duration34.toStandardHours();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        int int38 = dateTime37.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime41 = dateTime37.plus(0L);
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime32.add(durationFieldType43, 99);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = dateTime48.withYearOfCentury(20);
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now();
        mutableDateTime52.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime52.copy();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime52.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime57 = property56.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime59 = property56.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone61 = dateTimeZone60.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime62 = mutableDateTime59.toMutableDateTime(dateTimeZone60);
        mutableDateTime62.add(51L);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime62.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime67 = property65.add(458119L);
        boolean boolean68 = mutableDateTime32.isEqual((org.joda.time.ReadableInstant) mutableDateTime67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and dateTime37", (instant23.compareTo(dateTime37) == 0) == instant23.equals(dateTime37));
    }

    @Test
    public void test056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test056");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillisOfSecond((int) '4');
        mutableDateTime16.addWeeks((int) (short) -1);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration34, readableInstant35);
        org.joda.time.PeriodType periodType39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period((long) 100, 1L, periodType39);
        org.joda.time.Period period42 = period40.minusSeconds((-1));
        java.lang.String str43 = period40.toString();
        org.joda.time.Period period44 = period40.toPeriod();
        org.joda.time.PeriodType periodType45 = period40.getPeriodType();
        org.joda.time.Period period46 = period36.normalizedStandard(periodType45);
        org.joda.time.Period period48 = period46.withSeconds(10);
        org.joda.time.Period period49 = org.joda.time.Period.ZERO;
        org.joda.time.Period period50 = period46.minus((org.joda.time.ReadablePeriod) period49);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableInstant51, readableInstant52, periodType53);
        mutablePeriod54.setYears((int) '#');
        org.joda.time.Chronology chronology58 = null;
        mutablePeriod54.add((long) 1, chronology58);
        org.joda.time.ReadableInterval readableInterval60 = null;
        mutablePeriod54.setPeriod(readableInterval60);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.millis();
        int int63 = mutablePeriod54.indexOf(durationFieldType62);
        org.joda.time.MutablePeriod mutablePeriod64 = mutablePeriod54.toMutablePeriod();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusMinutes(15);
        org.joda.time.Chronology chronology72 = dateTime69.getChronology();
        java.lang.String str73 = chronology72.toString();
        org.joda.time.LocalTime localTime74 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology72);
        org.joda.time.DurationField durationField75 = chronology72.minutes();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(0L, chronology72);
        mutablePeriod54.setPeriod((long) 59, chronology72);
        int int78 = mutablePeriod54.getSeconds();
        org.joda.time.PeriodType periodType81 = null;
        org.joda.time.Period period82 = new org.joda.time.Period((long) 100, 1L, periodType81);
        org.joda.time.Period period84 = period82.minusSeconds((-1));
        org.joda.time.Period period86 = period84.multipliedBy((int) '#');
        org.joda.time.Minutes minutes87 = period86.toStandardMinutes();
        int int88 = period86.getYears();
        mutablePeriod54.setPeriod((org.joda.time.ReadablePeriod) period86);
        org.joda.time.Period period90 = period46.plus((org.joda.time.ReadablePeriod) mutablePeriod54);
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period46, 26177);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField75", Math.signum(durationField9.compareTo(durationField75)) == -Math.signum(durationField75.compareTo(durationField9)));
    }

    @Test
    public void test057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test057");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.dayOfMonth();
        int int36 = dateTimeField34.getMaximumValue((long) 'u');
        org.joda.time.DurationField durationField37 = dateTimeField34.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField37, and durationField27", !(durationField27.compareTo(durationField37) == 0) || (Math.signum(durationField27.compareTo(durationField27)) == Math.signum(durationField37.compareTo(durationField27))));
    }

    @Test
    public void test058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test058");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone2);
        int int6 = mutableDateTime5.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(50, (int) (byte) 0);
        long long12 = dateTimeZone9.adjustOffset((long) (short) 100, true);
        mutableDateTime5.setZone(dateTimeZone9);
        long long16 = dateTimeZone9.adjustOffset(1142027L, false);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime5", (dateTime4.compareTo(mutableDateTime5) == 0) == dateTime4.equals(mutableDateTime5));
    }

    @Test
    public void test059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test059");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.withMaximumValue();
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = localDate3.minusMonths((int) ' ');
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean8 = localDate6.isSupported(dateTimeFieldType7);
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType7.getDurationType();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1, chronology11);
        int int13 = dateTime12.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration15, readableInstant16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period23 = period21.minusSeconds((-1));
        java.lang.String str24 = period21.toString();
        org.joda.time.Period period25 = period21.toPeriod();
        org.joda.time.PeriodType periodType26 = period21.getPeriodType();
        org.joda.time.Period period27 = period17.normalizedStandard(periodType26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        long long36 = chronology31.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField37 = chronology31.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(44L, periodType26, chronology31);
        org.joda.time.DateTimeField dateTimeField39 = chronology31.clockhourOfHalfday();
        org.joda.time.DateTime dateTime40 = dateTime12.toDateTime(chronology31);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property44 = localDate43.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean46 = localDate43.isSupported(dateTimeFieldType45);
        org.joda.time.Chronology chronology47 = localDate43.getChronology();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology47);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime40.toMutableDateTime(chronology47);
        org.joda.time.DateTimeField dateTimeField50 = chronology47.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField51 = chronology47.year();
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology47);
        org.joda.time.DateTimeField dateTimeField53 = chronology47.minuteOfHour();
        org.joda.time.DurationField durationField54 = durationFieldType9.getField(chronology47);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField32, durationField54, and durationField32", !(durationField32.compareTo(durationField54) == 0) || (Math.signum(durationField32.compareTo(durationField32)) == Math.signum(durationField54.compareTo(durationField32))));
    }

    @Test
    public void test060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test060");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.year();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.DateTimeField dateTimeField11 = chronology3.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField12 = chronology3.dayOfWeek();
        int int13 = dateTimeField12.getMaximumValue();
        org.joda.time.DurationField durationField14 = dateTimeField12.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField4, durationField14, and durationField4", !(durationField4.compareTo(durationField14) == 0) || (Math.signum(durationField4.compareTo(durationField4)) == Math.signum(durationField14.compareTo(durationField4))));
    }

    @Test
    public void test061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test061");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration5 = duration2.withDurationAdded((long) (short) 100, (int) ' ');
        long long6 = duration5.getMillis();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.months();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16, periodType17);
        boolean boolean19 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime14);
        int int20 = dateTime14.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.PeriodType periodType25 = periodType23.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime14, periodType23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime28.withChronology(chronology35);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.getMutableDateTime();
        boolean boolean44 = dateTime40.isBefore((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.eras();
        long long53 = chronology48.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField54 = chronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.minuteOfDay();
        mutableDateTime43.setChronology(chronology48);
        org.joda.time.DateTime dateTime57 = dateTime14.toDateTime(chronology48);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 99, chronology48);
        org.joda.time.DateTimeField dateTimeField59 = chronology48.secondOfDay();
        org.joda.time.DurationField durationField60 = dateTimeField59.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField36, durationField60, and durationField36", !(durationField36.compareTo(durationField60) == 0) || (Math.signum(durationField36.compareTo(durationField36)) == Math.signum(durationField60.compareTo(durationField36))));
    }

    @Test
    public void test062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test062");
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration7 = duration4.withDurationAdded((long) (short) 100, (int) ' ');
        long long8 = duration7.getMillis();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.months();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime18, periodType19);
        boolean boolean21 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime16);
        int int22 = dateTime16.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        org.joda.time.PeriodType periodType27 = periodType25.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime16, periodType25);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMinutes(15);
        org.joda.time.Chronology chronology33 = dateTime30.getChronology();
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.eras();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.hourOfDay();
        org.joda.time.DateTime dateTime42 = dateTime30.withChronology(chronology37);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime45 = property44.getMutableDateTime();
        boolean boolean46 = dateTime42.isBefore((org.joda.time.ReadableInstant) mutableDateTime45);
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Chronology chronology50 = instant49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.eras();
        long long55 = chronology50.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField56 = chronology50.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField57 = chronology50.minuteOfDay();
        mutableDateTime45.setChronology(chronology50);
        org.joda.time.DateTime dateTime59 = dateTime16.toDateTime(chronology50);
        org.joda.time.LocalTime localTime60 = new org.joda.time.LocalTime((long) 99, chronology50);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) 62166, chronology50);
        org.joda.time.Period period62 = new org.joda.time.Period((long) 52, chronology50);
        org.joda.time.DurationField durationField63 = chronology50.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField38, durationField63, and durationField38", !(durationField38.compareTo(durationField63) == 0) || (Math.signum(durationField38.compareTo(durationField38)) == Math.signum(durationField63.compareTo(durationField38))));
    }

    @Test
    public void test063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test063");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = property8.addToCopy(953979L);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear(3);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration19 = duration16.withDurationAdded((long) (short) 100, (int) ' ');
        long long20 = duration19.getMillis();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.months();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime30, periodType31);
        boolean boolean33 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        int int34 = dateTime28.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime28, periodType37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes(15);
        org.joda.time.Chronology chronology45 = dateTime42.getChronology();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.hourOfDay();
        org.joda.time.DateTime dateTime54 = dateTime42.withChronology(chronology49);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime57 = property56.getMutableDateTime();
        boolean boolean58 = dateTime54.isBefore((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.Chronology chronology62 = instant61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.eras();
        long long67 = chronology62.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField68 = chronology62.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.minuteOfDay();
        mutableDateTime57.setChronology(chronology62);
        org.joda.time.DateTime dateTime71 = dateTime28.toDateTime(chronology62);
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((long) 99, chronology62);
        boolean boolean73 = dateTime13.equals((java.lang.Object) chronology62);
        org.joda.time.DateTimeZone dateTimeZone74 = chronology62.getZone();
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType76 = dateTimeFieldType75.getDurationType();
        org.joda.time.Instant instant77 = new org.joda.time.Instant();
        org.joda.time.Instant instant79 = instant77.withMillis(0L);
        org.joda.time.Duration duration81 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period82 = duration81.toPeriod();
        org.joda.time.Duration duration85 = duration81.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant86 = instant79.plus((org.joda.time.ReadableDuration) duration85);
        long long87 = instant86.getMillis();
        org.joda.time.Chronology chronology88 = instant86.getChronology();
        org.joda.time.DurationField durationField89 = chronology88.months();
        org.joda.time.DateTimeField dateTimeField90 = dateTimeFieldType75.getField(chronology88);
        org.joda.time.DateTimeField dateTimeField91 = chronology88.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime92 = org.joda.time.LocalDateTime.now(chronology88);
        boolean boolean93 = dateTimeZone74.isLocalDateTimeGap(localDateTime92);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField50 and durationField89", Math.signum(durationField50.compareTo(durationField89)) == -Math.signum(durationField89.compareTo(durationField50)));
    }

    @Test
    public void test064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test064");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableDuration2, readableInstant3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.Period period10 = period8.minusSeconds((-1));
        java.lang.String str11 = period8.toString();
        org.joda.time.Period period12 = period8.toPeriod();
        org.joda.time.PeriodType periodType13 = period8.getPeriodType();
        org.joda.time.Period period14 = period4.normalizedStandard(periodType13);
        java.lang.String str15 = periodType13.getName();
        org.joda.time.PeriodType periodType16 = periodType13.withYearsRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withSecondsRemoved();
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.eras();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.clockhourOfHalfday();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.Period period28 = new org.joda.time.Period((long) 55, periodType16, chronology21);
        java.lang.String str29 = periodType16.toString();
        org.joda.time.PeriodType periodType30 = periodType16.withMillisRemoved();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getDisplayName();
        java.lang.String str37 = dateTimeZone33.getName(100L, locale35);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(948227L, dateTimeZone33);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.year();
        mutableDateTime38.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(readableInstant45, readableInstant46, periodType47);
        org.joda.time.DurationFieldType durationFieldType50 = periodType47.getFieldType((int) (short) 0);
        java.lang.String str51 = periodType47.toString();
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.Chronology chronology55 = instant54.getChronology();
        org.joda.time.Period period56 = new org.joda.time.Period((long) 53, (long) (-1), periodType47, chronology55);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType42.getField(chronology55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusMinutes(15);
        org.joda.time.Chronology chronology62 = dateTime59.getChronology();
        java.lang.String str63 = chronology62.toString();
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType42.getField(chronology62);
        org.joda.time.DurationField durationField65 = chronology62.centuries();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.millisOfDay();
        mutableDateTime38.setChronology(chronology62);
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((long) 46, chronology62);
        org.joda.time.MutablePeriod mutablePeriod69 = new org.joda.time.MutablePeriod(1645516797426L, periodType16, chronology62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField65", Math.signum(durationField22.compareTo(durationField65)) == -Math.signum(durationField65.compareTo(durationField22)));
    }

    @Test
    public void test065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test065");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime4.plus(0L);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTime(dateTimeZone11);
        long long15 = dateTimeZone11.adjustOffset((-25199008L), true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test066");
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period11 = period9.minusSeconds((-1));
        java.lang.String str12 = period9.toString();
        org.joda.time.Period period13 = period9.toPeriod();
        org.joda.time.PeriodType periodType14 = period9.getPeriodType();
        org.joda.time.Period period15 = period5.normalizedStandard(periodType14);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        long long24 = chronology19.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField25 = chronology19.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(44L, periodType14, chronology19);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod(950105L, 949680L, periodType14);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes(15);
        org.joda.time.Chronology chronology34 = dateTime31.getChronology();
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.eras();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.DurationField durationField41 = chronology38.eras();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.hourOfDay();
        org.joda.time.DateTime dateTime43 = dateTime31.withChronology(chronology38);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime46 = property45.getMutableDateTime();
        boolean boolean47 = dateTime43.isBefore((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.eras();
        long long56 = chronology51.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField57 = chronology51.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField58 = chronology51.minuteOfDay();
        mutableDateTime46.setChronology(chronology51);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology51);
        mutablePeriod27.setPeriod(1645516800000L, (long) 489, chronology51);
        org.joda.time.DurationField durationField62 = chronology51.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField20, durationField62, and durationField20", !(durationField20.compareTo(durationField62) == 0) || (Math.signum(durationField20.compareTo(durationField20)) == Math.signum(durationField62.compareTo(durationField20))));
    }

    @Test
    public void test067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test067");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration5 = duration2.withDurationAdded((long) (short) 100, (int) ' ');
        long long6 = duration5.getMillis();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.months();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16, periodType17);
        boolean boolean19 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime14);
        int int20 = dateTime14.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.PeriodType periodType25 = periodType23.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime14, periodType23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime28.withChronology(chronology35);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.getMutableDateTime();
        boolean boolean44 = dateTime40.isBefore((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.eras();
        long long53 = chronology48.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField54 = chronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.minuteOfDay();
        mutableDateTime43.setChronology(chronology48);
        org.joda.time.DateTime dateTime57 = dateTime14.toDateTime(chronology48);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 99, chronology48);
        org.joda.time.DateTimeField dateTimeField59 = chronology48.secondOfDay();
        org.joda.time.DurationField durationField60 = chronology48.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField36, durationField60, and durationField36", !(durationField36.compareTo(durationField60) == 0) || (Math.signum(durationField36.compareTo(durationField36)) == Math.signum(durationField60.compareTo(durationField36))));
    }

    @Test
    public void test068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test068");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime11 = property8.addToCopy(953979L);
        org.joda.time.DateTime dateTime13 = dateTime11.withDayOfYear(3);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration19 = duration16.withDurationAdded((long) (short) 100, (int) ' ');
        long long20 = duration19.getMillis();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.months();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime30, periodType31);
        boolean boolean33 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        int int34 = dateTime28.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime28, periodType37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes(15);
        org.joda.time.Chronology chronology45 = dateTime42.getChronology();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.hourOfDay();
        org.joda.time.DateTime dateTime54 = dateTime42.withChronology(chronology49);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime57 = property56.getMutableDateTime();
        boolean boolean58 = dateTime54.isBefore((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.Chronology chronology62 = instant61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.eras();
        long long67 = chronology62.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField68 = chronology62.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.minuteOfDay();
        mutableDateTime57.setChronology(chronology62);
        org.joda.time.DateTime dateTime71 = dateTime28.toDateTime(chronology62);
        org.joda.time.LocalTime localTime72 = new org.joda.time.LocalTime((long) 99, chronology62);
        boolean boolean73 = dateTime13.equals((java.lang.Object) chronology62);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.DurationField durationField75 = chronology62.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField50, durationField75, and durationField50", !(durationField50.compareTo(durationField75) == 0) || (Math.signum(durationField50.compareTo(durationField50)) == Math.signum(durationField75.compareTo(durationField50))));
    }

    @Test
    public void test069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test069");
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        long long13 = chronology8.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter4.withChronology(chronology8);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant15, readableInstant16, periodType17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        boolean boolean24 = mutablePeriod18.equals((java.lang.Object) dateTimeField23);
        java.lang.Object obj26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(obj26);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField34 = localDateTime32.getField((int) (byte) 0);
        long long36 = dateTimeField34.roundHalfEven((long) 1);
        int int37 = dateTime27.get(dateTimeField34);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withCenturyOfEra((int) 'a');
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getDisplayName();
        java.lang.String str48 = dateTimeField34.getAsText((org.joda.time.ReadablePartial) localDateTime42, 53, locale46);
        java.lang.String str50 = locale46.getExtension('a');
        java.lang.String str51 = dateTimeField23.getAsText((long) 36950209, locale46);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket54 = new org.joda.time.format.DateTimeParserBucket(97L, chronology8, locale46, (java.lang.Integer) 36950209, 443);
        org.joda.time.MutableDateTime mutableDateTime55 = new org.joda.time.MutableDateTime(chronology8);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType58 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withFieldAdded(durationFieldType58, (int) (short) -1);
        int int61 = localDateTime60.getEra();
        java.io.IOException iOException64 = new java.io.IOException("");
        java.io.IOException iOException65 = new java.io.IOException("2022-02-22T10:15:44.882", (java.lang.Throwable) iOException64);
        boolean boolean66 = localDateTime60.equals((java.lang.Object) iOException65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime60.withMillisOfDay(26150);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone70 = dateTimeZone69.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        long long73 = dateTimeZone69.getMillisKeepLocal(dateTimeZone71, (long) 44);
        java.lang.String str75 = dateTimeZone71.getName(0L);
        org.joda.time.DateTime dateTime76 = localDateTime60.toDateTime(dateTimeZone71);
        org.joda.time.Chronology chronology77 = chronology8.withZone(dateTimeZone71);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((long) 36946953, chronology77);
        org.joda.time.DurationField durationField79 = chronology77.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField79, and durationField9", !(durationField9.compareTo(durationField79) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField79.compareTo(durationField9))));
    }

    @Test
    public void test070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test070");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        boolean boolean23 = mutablePeriod17.equals((java.lang.Object) dateTimeField22);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField33 = localDateTime31.getField((int) (byte) 0);
        long long35 = dateTimeField33.roundHalfEven((long) 1);
        int int36 = dateTime26.get(dateTimeField33);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) 'a');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime41, 53, locale45);
        java.lang.String str49 = locale45.getExtension('a');
        java.lang.String str50 = dateTimeField22.getAsText((long) 36950209, locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(97L, chronology7, locale45, (java.lang.Integer) 36950209, 443);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withFieldAdded(durationFieldType57, (int) (short) -1);
        int int60 = localDateTime59.getEra();
        java.io.IOException iOException63 = new java.io.IOException("");
        java.io.IOException iOException64 = new java.io.IOException("2022-02-22T10:15:44.882", (java.lang.Throwable) iOException63);
        boolean boolean65 = localDateTime59.equals((java.lang.Object) iOException64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime59.withMillisOfDay(26150);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        long long72 = dateTimeZone68.getMillisKeepLocal(dateTimeZone70, (long) 44);
        java.lang.String str74 = dateTimeZone70.getName(0L);
        org.joda.time.DateTime dateTime75 = localDateTime59.toDateTime(dateTimeZone70);
        org.joda.time.Chronology chronology76 = chronology7.withZone(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField77 = chronology76.dayOfYear();
        org.joda.time.DurationField durationField78 = chronology76.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField78, and durationField8", !(durationField8.compareTo(durationField78) == 0) || (Math.signum(durationField8.compareTo(durationField8)) == Math.signum(durationField78.compareTo(durationField8))));
    }

    @Test
    public void test071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test071");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = dateTime26.toInstant();
        org.joda.time.DateTime dateTime37 = dateTime26.withDurationAdded((long) 3, 4);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getYearOfCentury();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute(53);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration51 = duration44.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType57 = periodType54.getFieldType((int) (short) 0);
        java.lang.String str58 = periodType54.toString();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration44, periodType54);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime37, periodType54);
        boolean boolean61 = dateTime37.isEqualNow();
        org.joda.time.DateTime dateTime63 = dateTime37.minusMonths(26342193);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant15", (dateTime10.compareTo(instant15) == 0) == dateTime10.equals(instant15));
    }

    @Test
    public void test072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test072");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant11 = instant4.plus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period13 = duration10.toPeriod(periodType12);
        org.joda.time.Duration duration15 = duration10.withMillis(60000L);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str21 = duration20.toString();
        org.joda.time.Instant instant22 = instant16.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.yearOfCentury();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration34 = duration31.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration35 = duration28.minus((org.joda.time.ReadableDuration) duration34);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime23.centuryOfEra();
        mutableDateTime23.addHours((int) (byte) 10);
        mutableDateTime23.addWeeks(100);
        boolean boolean42 = instant16.isAfter((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration43, readableInstant44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period51 = period49.minusSeconds((-1));
        java.lang.String str52 = period49.toString();
        org.joda.time.Period period53 = period49.toPeriod();
        org.joda.time.PeriodType periodType54 = period49.getPeriodType();
        org.joda.time.Period period55 = period45.normalizedStandard(periodType54);
        java.lang.String str56 = periodType54.getName();
        int int57 = periodType54.size();
        org.joda.time.Period period58 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) instant16, periodType54);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusMinutes(15);
        org.joda.time.Chronology chronology63 = dateTime60.getChronology();
        org.joda.time.DateTime dateTime65 = dateTime60.minusDays(46);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period(readableDuration67, readableInstant68);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((long) 100, 1L, periodType72);
        org.joda.time.Period period75 = period73.minusSeconds((-1));
        java.lang.String str76 = period73.toString();
        org.joda.time.Period period77 = period73.toPeriod();
        org.joda.time.PeriodType periodType78 = period73.getPeriodType();
        org.joda.time.Period period79 = period69.normalizedStandard(periodType78);
        org.joda.time.Instant instant80 = new org.joda.time.Instant();
        org.joda.time.Instant instant82 = instant80.withMillis(0L);
        org.joda.time.Chronology chronology83 = instant82.getChronology();
        org.joda.time.DurationField durationField84 = chronology83.eras();
        long long88 = chronology83.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField89 = chronology83.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod90 = new org.joda.time.MutablePeriod(44L, periodType78, chronology83);
        org.joda.time.Period period91 = duration10.toPeriodTo((org.joda.time.ReadableInstant) dateTime65, periodType78);
        org.joda.time.Minutes minutes92 = duration10.toStandardMinutes();
        org.joda.time.PeriodType periodType93 = minutes92.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((long) 62215, 4801285051956L, periodType93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime60", (instant2.compareTo(dateTime60) == 0) == instant2.equals(dateTime60));
    }

    @Test
    public void test073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test073");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        boolean boolean17 = instant0.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj19 = mutableDateTime18.clone();
        mutableDateTime18.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.dayOfWeek();
        mutableDateTime18.setMillisOfDay(2);
        int int25 = instant0.compareTo((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime18.era();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        mutableDateTime27.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime27.copy();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime27.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime32 = property31.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime34 = property31.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime34.toMutableDateTime(dateTimeZone35);
        int int39 = dateTimeZone35.getStandardOffset(60000L);
        mutableDateTime18.setZoneRetainFields(dateTimeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test074");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.Interval interval12 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration7.toDuration();
        org.joda.time.Period period14 = duration7.toPeriod();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(15);
        org.joda.time.DateTime dateTime28 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = dateTime16.withZoneRetainFields(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        mutableDateTime32.addSeconds(0);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours40 = duration39.toStandardHours();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        int int43 = dateTime42.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.months();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime52, periodType53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime46, periodType53);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime32, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime57 = dateTime31.plus((org.joda.time.ReadableDuration) duration56);
        int int58 = dateTime57.getWeekyear();
        org.joda.time.Period period59 = duration7.toPeriodTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period61 = period59.plusYears(52);
        org.joda.time.Period period62 = period61.toPeriod();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant15", (dateTime10.compareTo(instant15) == 0) == dateTime10.equals(instant15));
    }

    @Test
    public void test075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test075");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        mutableDateTime1.setDate((long) '#');
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean10 = localDate7.isSupported(dateTimeFieldType9);
        int int11 = localDate7.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime(dateTimeZone12);
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(dateTimeZone12);
        org.joda.time.LocalDate localDate16 = org.joda.time.LocalDate.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.copy();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime23 = property21.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime25 = property21.set(1);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getYearOfCentury();
        int int29 = dateTime27.getWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime27.withEarlierOffsetAtOverlap();
        java.lang.String str31 = dateTime30.toString();
        org.joda.time.MutableDateTime mutableDateTime32 = dateTime30.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean34 = dateTimeZone33.isFixed();
        mutableDateTime32.setZoneRetainFields(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime25.toMutableDateTime(dateTimeZone33);
        org.joda.time.Interval interval37 = localDate16.toInterval(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) 58, dateTimeZone33);
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str42 = locale40.getExtension('a');
        java.lang.String str43 = dateTimeZone33.getShortName(1645516800000L, locale40);
        int int45 = dateTimeZone33.getOffsetFromLocal(1645514174548L);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now(dateTimeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test076");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime4.copy();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property8.set(1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfCentury();
        int int16 = dateTime14.getWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime14.withEarlierOffsetAtOverlap();
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        mutableDateTime19.setZoneRetainFields(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime12.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone20);
        long long27 = dateTimeZone20.convertLocalToUTC(2100L, true);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) instant2, dateTimeZone20);
        org.joda.time.Instant instant30 = instant2.minus((long) 26209742);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean34 = localDate31.isSupported(dateTimeFieldType33);
        int int35 = localDate31.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight37 = localDate31.toDateMidnight(dateTimeZone36);
        org.joda.time.LocalDate.Property property38 = localDate31.year();
        java.util.Date date39 = localDate31.toDate();
        org.joda.time.LocalDate localDate41 = localDate31.withDayOfYear(13);
        org.joda.time.LocalDate localDate43 = new org.joda.time.LocalDate((long) (byte) -1);
        int int44 = localDate43.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        long long49 = dateTimeZone45.getMillisKeepLocal(dateTimeZone47, (long) 44);
        org.joda.time.DateTime dateTime50 = localDate43.toDateTimeAtMidnight(dateTimeZone45);
        java.util.Locale locale52 = null;
        java.lang.String str53 = dateTimeZone45.getName(946000L, locale52);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.add((long) 'a');
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime54.yearOfCentury();
        mutableDateTime54.addSeconds(0);
        mutableDateTime54.add((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone62 = mutableDateTime54.getZone();
        long long64 = dateTimeZone45.getMillisKeepLocal(dateTimeZone62, 1645516797426L);
        org.joda.time.DateTime dateTime65 = localDate31.toDateTimeAtCurrentTime(dateTimeZone62);
        org.joda.time.DateTime dateTime66 = instant30.toDateTime(dateTimeZone62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime14", (instant0.compareTo(dateTime14) == 0) == instant0.equals(dateTime14));
    }

    @Test
    public void test077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test077");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.DateTime dateTime9 = localDate1.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        mutableDateTime10.addWeekyears((int) (byte) 1);
        int int16 = dateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime10.add(985937L);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        org.joda.time.DurationFieldType durationFieldType28 = periodType25.getFieldType((int) (short) 0);
        java.lang.String str29 = periodType25.toString();
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 53, (long) (-1), periodType25, chronology33);
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType20.getField(chronology33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        org.joda.time.DateTime dateTime39 = dateTime37.plusMinutes(15);
        org.joda.time.Chronology chronology40 = dateTime37.getChronology();
        java.lang.String str41 = chronology40.toString();
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType20.getField(chronology40);
        org.joda.time.DateTimeField dateTimeField43 = chronology40.dayOfYear();
        java.util.Locale locale44 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket46 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology40, locale44, (java.lang.Integer) 5);
        org.joda.time.DateTimeField dateTimeField47 = chronology40.dayOfYear();
        org.joda.time.DateTimeField dateTimeField48 = chronology40.weekyear();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime10, chronology40);
        org.joda.time.DateTime dateTime51 = dateTime49.withCenturyOfEra(0);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableDuration52, readableInstant53);
        org.joda.time.Period period56 = period54.withDays((int) (byte) 1);
        org.joda.time.Period period58 = period56.minusWeeks(100);
        org.joda.time.Period period59 = period58.negated();
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean62 = localDate60.isSupported(dateTimeFieldType61);
        org.joda.time.LocalDate.Property property63 = localDate60.yearOfEra();
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str69 = duration68.toString();
        org.joda.time.Instant instant70 = instant64.minus((org.joda.time.ReadableDuration) duration68);
        int int71 = property63.getDifference((org.joda.time.ReadableInstant) instant64);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period74 = duration73.toPeriod();
        org.joda.time.Duration duration76 = duration73.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime77 = org.joda.time.MutableDateTime.now();
        mutableDateTime77.add((long) 'a');
        org.joda.time.MutableDateTime.Property property80 = mutableDateTime77.yearOfCentury();
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period83 = duration82.toPeriod();
        org.joda.time.Duration duration85 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration88 = duration85.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration89 = duration82.minus((org.joda.time.ReadableDuration) duration88);
        mutableDateTime77.add((org.joda.time.ReadableDuration) duration82);
        boolean boolean91 = duration76.isShorterThan((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Instant instant92 = instant64.plus((org.joda.time.ReadableDuration) duration76);
        org.joda.time.Duration duration93 = period59.toDurationFrom((org.joda.time.ReadableInstant) instant64);
        org.joda.time.DateTime dateTime95 = dateTime51.withPeriodAdded((org.joda.time.ReadablePeriod) period59, 33484);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and dateTime37", (instant30.compareTo(dateTime37) == 0) == instant30.equals(dateTime37));
    }

    @Test
    public void test078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test078");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 44);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        mutableDateTime6.addSeconds((int) (short) 10);
        java.lang.Object obj16 = mutableDateTime6.clone();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime6.era();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes(15);
        org.joda.time.DateTime dateTime29 = localDateTime22.toDateTime((org.joda.time.ReadableInstant) dateTime26);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime31 = localDateTime22.toDateTime(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = dateTime31.withMinuteOfHour(46);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        java.lang.String str36 = dateTimeZone34.getShortName((long) ' ');
        mutableDateTime6.setZoneRetainFields(dateTimeZone34);
        java.lang.Object obj38 = null;
        boolean boolean39 = dateTimeZone34.equals(obj38);
        boolean boolean41 = dateTimeZone34.isStandardOffset((-29912203583046059L));
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        mutableDateTime42.add((long) 'a');
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime42.yearOfCentury();
        mutableDateTime42.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.Period period52 = new org.joda.time.Period(readableDuration50, readableInstant51);
        org.joda.time.PeriodType periodType55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period((long) 100, 1L, periodType55);
        org.joda.time.Period period58 = period56.minusSeconds((-1));
        java.lang.String str59 = period56.toString();
        org.joda.time.Period period60 = period56.toPeriod();
        org.joda.time.PeriodType periodType61 = period56.getPeriodType();
        org.joda.time.Period period62 = period52.normalizedStandard(periodType61);
        org.joda.time.DurationFieldType durationFieldType63 = null;
        int int64 = periodType61.indexOf(durationFieldType63);
        org.joda.time.Instant instant65 = new org.joda.time.Instant();
        org.joda.time.Instant instant67 = instant65.withMillis(0L);
        org.joda.time.Chronology chronology68 = instant67.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.eras();
        org.joda.time.LocalTime localTime70 = org.joda.time.LocalTime.now(chronology68);
        org.joda.time.DurationField durationField71 = chronology68.eras();
        org.joda.time.DateTimeField dateTimeField72 = chronology68.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType61, chronology68);
        org.joda.time.MutableDateTime mutableDateTime74 = mutableDateTime42.toMutableDateTime(chronology68);
        mutableDateTime74.setDate((long) (-292275054));
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime((long) (short) 100, chronology78);
        int int80 = localTime79.getMillisOfDay();
        org.joda.time.LocalTime.Property property81 = localTime79.millisOfSecond();
        org.joda.time.DurationField durationField82 = property81.getLeapDurationField();
        java.lang.String str83 = property81.getName();
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale87 = java.util.Locale.GERMAN;
        java.lang.String str88 = locale87.getDisplayName();
        java.lang.String str89 = dateTimeZone85.getName(100L, locale87);
        org.joda.time.LocalTime localTime90 = property81.setCopy("615", locale87);
        org.joda.time.LocalTime localTime92 = property81.addWrapFieldToCopy(4);
        org.joda.time.LocalTime localTime94 = property81.setCopy("641");
        org.joda.time.LocalTime localTime95 = property81.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType96 = property81.getFieldType();
        org.joda.time.MutableDateTime.Property property97 = mutableDateTime74.property(dateTimeFieldType96);
        boolean boolean98 = dateTimeZone34.equals((java.lang.Object) property97);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime26", (dateTime12.compareTo(dateTime26) == 0) == dateTime12.equals(dateTime26));
    }

    @Test
    public void test079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test079");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = null;
        java.lang.String str6 = dateTime3.toString(dateTimeFormatter5);
        org.joda.time.DateTime dateTime8 = dateTime3.minusMonths(22);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        org.joda.time.DateTime dateTime14 = dateTime3.withChronology(chronology12);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfMinute();
        org.joda.time.Chronology chronology17 = chronology12.withUTC();
        org.joda.time.Period period18 = new org.joda.time.Period(4492800000L, 27921282L, chronology17);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant9", (dateTime3.compareTo(instant9) == 0) == dateTime3.equals(instant9));
    }

    @Test
    public void test080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test080");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean7 = localDate4.isSupported(dateTimeFieldType6);
        org.joda.time.LocalDate.Property property8 = localDate4.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        mutableDateTime9.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime9.copy();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime9.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime15.copy();
        mutableDateTime15.setDate((long) '#');
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean24 = localDate21.isSupported(dateTimeFieldType23);
        int int25 = localDate21.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight27 = localDate21.toDateMidnight(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = mutableDateTime15.toDateTime(dateTimeZone26);
        org.joda.time.LocalDate localDate29 = org.joda.time.LocalDate.now(dateTimeZone26);
        org.joda.time.PeriodType periodType32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period((long) 100, 1L, periodType32);
        org.joda.time.PeriodType periodType34 = period33.getPeriodType();
        boolean boolean35 = dateTimeZone26.equals((java.lang.Object) periodType34);
        mutableDateTime9.setZoneRetainFields(dateTimeZone26);
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.DateTime dateTime38 = localDate4.toDateTimeAtStartOfDay(dateTimeZone26);
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(86400000L, dateTimeZone26);
        int int40 = dateTime39.getMillisOfSecond();
        boolean boolean41 = localDate1.equals((java.lang.Object) dateTime39);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(readableInstant47, readableInstant48, periodType49);
        org.joda.time.DurationFieldType durationFieldType52 = periodType49.getFieldType((int) (short) 0);
        java.lang.String str53 = periodType49.toString();
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Chronology chronology57 = instant56.getChronology();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 53, (long) (-1), periodType49, chronology57);
        org.joda.time.PeriodType periodType59 = periodType49.withHoursRemoved();
        org.joda.time.PeriodType periodType60 = periodType49.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((-133009030799979L), 43088125133009682L, periodType49);
        org.joda.time.PeriodType periodType62 = periodType49.withDaysRemoved();
        org.joda.time.Period period63 = new org.joda.time.Period(1973L, periodType62);
        org.joda.time.Period period64 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableInstant) dateTime39, periodType62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime15 and dateTime28", (mutableDateTime15.compareTo(dateTime28) == 0) == mutableDateTime15.equals(dateTime28));
    }

    @Test
    public void test081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test081");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getYearOfCentury();
        int int4 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime6 = dateTime2.plus((long) 15);
        org.joda.time.DateTime.Property property7 = dateTime2.year();
        org.joda.time.DateTime dateTime8 = property7.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property9 = dateTime8.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime();
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime14 = dateTime12.withZoneRetainFields(dateTimeZone13);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone17);
        int int20 = dateTime14.compareTo((org.joda.time.ReadableInstant) dateTime19);
        int int21 = dateTime19.getCenturyOfEra();
        org.joda.time.DateTime dateTime23 = dateTime19.withWeekyear(44);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant26, readableInstant27, periodType28);
        org.joda.time.DurationFieldType durationFieldType31 = periodType28.getFieldType((int) (short) 0);
        java.lang.String str32 = periodType28.toString();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 53, (long) (-1), periodType28, chronology36);
        org.joda.time.PeriodType periodType38 = periodType28.withMonthsRemoved();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime19, periodType28);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.eras();
        long long48 = chronology43.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField49 = chronology43.secondOfMinute();
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.Period period52 = new org.joda.time.Period((long) 3, periodType28, chronology43);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(chronology43);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant33", (dateTime2.compareTo(instant33) == 0) == dateTime2.equals(instant33));
    }

    @Test
    public void test082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test082");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addYears(12);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = localDateTime25.toDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime20.withZoneRetainFields(dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.toString();
        java.lang.String str37 = dateTimeZone33.getID();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone33);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime38);
        mutableDateTime0.addWeeks(45);
        org.joda.time.Instant instant42 = mutableDateTime0.toInstant();
        org.joda.time.MutableDateTime mutableDateTime43 = instant42.toMutableDateTime();
        mutableDateTime43.addDays(14);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and instant42", (mutableDateTime0.compareTo(instant42) == 0) == mutableDateTime0.equals(instant42));
    }

    @Test
    public void test083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test083");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours21 = duration20.toStandardHours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration17.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean47 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant48 = instant15.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime mutableDateTime49 = instant48.toMutableDateTime();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str54 = duration53.toString();
        boolean boolean55 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Duration duration61 = duration57.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration66 = duration63.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean67 = duration61.isLongerThan((org.joda.time.ReadableDuration) duration63);
        boolean boolean68 = duration53.isEqual((org.joda.time.ReadableDuration) duration63);
        long long69 = duration53.getStandardDays();
        org.joda.time.Instant instant70 = instant48.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTime dateTime71 = instant70.toDateTime();
        org.joda.time.DateTime.Property property72 = dateTime71.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime23", (instant4.compareTo(dateTime23) == 0) == instant4.equals(dateTime23));
    }

    @Test
    public void test084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test084");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        mutableDateTime6.setDate((long) '#');
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime6.toDateTime(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) periodType25);
        mutableDateTime0.setZoneRetainFields(dateTimeZone17);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate.Property property30 = localDate28.weekOfWeekyear();
        org.joda.time.LocalDate localDate31 = property30.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate33 = localDate31.plusMonths((-292275054));
        org.joda.time.DateTime dateTime34 = localDate31.toDateTimeAtCurrentTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and dateTime19", (mutableDateTime6.compareTo(dateTime19) == 0) == mutableDateTime6.equals(dateTime19));
    }

    @Test
    public void test085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test085");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.Instant instant6 = instant4.minus((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime7 = instant6.toMutableDateTimeISO();
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType10 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withFieldAdded(durationFieldType10, (int) (short) -1);
        int int13 = localDateTime12.getEra();
        java.io.IOException iOException16 = new java.io.IOException("");
        java.io.IOException iOException17 = new java.io.IOException("2022-02-22T10:15:44.882", (java.lang.Throwable) iOException16);
        boolean boolean18 = localDateTime12.equals((java.lang.Object) iOException17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime12.withMillisOfDay(26150);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        long long25 = dateTimeZone21.getMillisKeepLocal(dateTimeZone23, (long) 44);
        java.lang.String str27 = dateTimeZone23.getName(0L);
        org.joda.time.DateTime dateTime28 = localDateTime12.toDateTime(dateTimeZone23);
        java.lang.String str29 = dateTimeZone23.getID();
        org.joda.time.DateTime dateTime30 = mutableDateTime7.toDateTime(dateTimeZone23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant4", (dateTime2.compareTo(instant4) == 0) == dateTime2.equals(instant4));
    }

    @Test
    public void test086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test086");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutableDateTime mutableDateTime7 = instant0.toMutableDateTime();
        mutableDateTime7.addDays(1424);
        int int10 = mutableDateTime7.getHourOfDay();
        org.joda.time.Chronology chronology11 = mutableDateTime7.getChronology();
        org.joda.time.DateTimeZone dateTimeZone12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime(dateTimeZone12);
        org.joda.time.LocalTime localTime15 = localTime13.minusHours((int) (byte) 100);
        int int16 = localTime15.getMinuteOfHour();
        java.lang.String str18 = localTime15.toString("1");
        org.joda.time.LocalTime localTime20 = localTime15.minusMinutes(15);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        int int23 = dateTime22.getYearOfCentury();
        int int24 = dateTime22.getWeekyear();
        org.joda.time.DateTime dateTime26 = dateTime22.plus((long) 15);
        org.joda.time.DateTime.Property property27 = dateTime22.year();
        org.joda.time.DateTime dateTime28 = property27.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime30 = dateTime28.toMutableDateTime();
        org.joda.time.LocalTime localTime31 = dateTime28.toLocalTime();
        org.joda.time.LocalTime localTime32 = localTime15.withFields((org.joda.time.ReadablePartial) localTime31);
        org.joda.time.LocalTime localTime34 = localTime32.minusMinutes(26197957);
        org.joda.time.LocalTime localTime36 = localTime32.plusHours(99);
        long long38 = chronology11.set((org.joda.time.ReadablePartial) localTime32, 1645514301678L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime22", (instant0.compareTo(dateTime22) == 0) == instant0.equals(dateTime22));
    }

    @Test
    public void test087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test087");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        boolean boolean23 = mutablePeriod17.equals((java.lang.Object) dateTimeField22);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField33 = localDateTime31.getField((int) (byte) 0);
        long long35 = dateTimeField33.roundHalfEven((long) 1);
        int int36 = dateTime26.get(dateTimeField33);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) 'a');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime41, 53, locale45);
        java.lang.String str49 = locale45.getExtension('a');
        java.lang.String str50 = dateTimeField22.getAsText((long) 36950209, locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(97L, chronology7, locale45, (java.lang.Integer) 36950209, 443);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withFieldAdded(durationFieldType57, (int) (short) -1);
        int int60 = localDateTime59.getEra();
        java.io.IOException iOException63 = new java.io.IOException("");
        java.io.IOException iOException64 = new java.io.IOException("2022-02-22T10:15:44.882", (java.lang.Throwable) iOException63);
        boolean boolean65 = localDateTime59.equals((java.lang.Object) iOException64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime59.withMillisOfDay(26150);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        long long72 = dateTimeZone68.getMillisKeepLocal(dateTimeZone70, (long) 44);
        java.lang.String str74 = dateTimeZone70.getName(0L);
        org.joda.time.DateTime dateTime75 = localDateTime59.toDateTime(dateTimeZone70);
        org.joda.time.Chronology chronology76 = chronology7.withZone(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField77 = chronology76.dayOfYear();
        boolean boolean78 = dateTimeField77.isLenient();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime26", (instant4.compareTo(dateTime26) == 0) == instant4.equals(dateTime26));
    }

    @Test
    public void test088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test088");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) 152, 0L);
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getYearOfCentury();
        int int7 = dateTime5.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime5.plus((long) 15);
        org.joda.time.DateTime.Property property10 = dateTime5.year();
        org.joda.time.DateTime dateTime12 = property10.addToCopy((long) 25);
        mutablePeriod2.setPeriod(readableInstant3, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime14.copy();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime14.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.add((long) (byte) 10);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.secondOfMinute();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getYearOfCentury();
        int int26 = dateTime24.getWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime24.plus((long) 15);
        org.joda.time.DateTime.Property property29 = dateTime28.millisOfSecond();
        int int30 = dateTime28.getWeekOfWeekyear();
        java.lang.String str31 = dateTime28.toString();
        org.joda.time.DateTime dateTime33 = dateTime28.withWeekyear((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration35, readableInstant36);
        org.joda.time.PeriodType periodType40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period((long) 100, 1L, periodType40);
        org.joda.time.Period period43 = period41.minusSeconds((-1));
        java.lang.String str44 = period41.toString();
        org.joda.time.Period period45 = period41.toPeriod();
        org.joda.time.PeriodType periodType46 = period41.getPeriodType();
        org.joda.time.Period period47 = period37.normalizedStandard(periodType46);
        java.lang.String str48 = periodType46.getName();
        org.joda.time.PeriodType periodType49 = periodType46.withYearsRemoved();
        org.joda.time.PeriodType periodType50 = periodType49.withSecondsRemoved();
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Chronology chronology54 = instant53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.eras();
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.now(chronology54);
        org.joda.time.DurationField durationField57 = chronology54.eras();
        org.joda.time.DateTimeField dateTimeField58 = chronology54.hourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology54.clockhourOfHalfday();
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.now(chronology54);
        org.joda.time.Period period61 = new org.joda.time.Period((long) 55, periodType49, chronology54);
        java.lang.String str62 = periodType49.toString();
        org.joda.time.PeriodType periodType63 = periodType49.withMillisRemoved();
        org.joda.time.Period period64 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime21, (org.joda.time.ReadableInstant) dateTime28, periodType63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(readableInstant65, readableInstant66, periodType67);
        org.joda.time.PeriodType periodType69 = periodType67.withHoursRemoved();
        org.joda.time.PeriodType periodType70 = periodType69.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(readableInstant3, (org.joda.time.ReadableInstant) mutableDateTime21, periodType69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant51", (dateTime5.compareTo(instant51) == 0) == dateTime5.equals(instant51));
    }

    @Test
    public void test089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test089");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        mutableDateTime16.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.toPeriod();
        org.joda.time.PeriodType periodType35 = period30.getPeriodType();
        org.joda.time.Period period36 = period26.normalizedStandard(periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        int int38 = periodType35.indexOf(durationFieldType37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.eras();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.DurationField durationField45 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType35, chronology42);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime16.toMutableDateTime(chronology42);
        mutableDateTime16.setDayOfYear(44);
        int int51 = mutableDateTime16.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addMillis(365);
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTime dateTime56 = mutableDateTime2.toDateTime();
        org.joda.time.Chronology chronology57 = null;
        mutableDateTime2.setChronology(chronology57);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime2.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test090");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        int int8 = mutableDateTime7.getCenturyOfEra();
        mutableDateTime7.setMinuteOfDay(1424);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType16);
        org.joda.time.DurationFieldType durationFieldType19 = periodType16.getFieldType((int) (short) 0);
        java.lang.String str20 = periodType16.toString();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.Period period25 = new org.joda.time.Period((long) 53, (long) (-1), periodType16, chronology24);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType11.getField(chronology24);
        java.util.Locale locale27 = java.util.Locale.UK;
        java.lang.String str28 = locale27.getDisplayLanguage();
        int int29 = dateTimeField26.getMaximumTextLength(locale27);
        long long31 = dateTimeField26.roundCeiling(949680L);
        mutableDateTime7.setRounding(dateTimeField26);
        int int34 = dateTimeField26.getMinimumValue(0L);
        org.joda.time.DurationField durationField35 = dateTimeField26.getDurationField();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration43 = duration39.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Instant instant45 = dateTime37.toInstant();
        org.joda.time.DateTime dateTime48 = dateTime37.withDurationAdded((long) 3, 4);
        org.joda.time.DateTime.Property property49 = dateTime37.millisOfDay();
        org.joda.time.DurationField durationField50 = property49.getRangeDurationField();
        int int51 = durationField35.compareTo(durationField50);
        boolean boolean52 = durationField35.isPrecise();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime37 and instant45", (dateTime37.compareTo(instant45) == 0) == dateTime37.equals(instant45));
    }

    @Test
    public void test091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test091");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = duration3.withDurationAdded((long) (short) 100, (int) ' ');
        long long7 = duration6.getMillis();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.months();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17, periodType18);
        boolean boolean20 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime15);
        int int21 = dateTime15.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime15, periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.Chronology chronology32 = dateTime29.getChronology();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime29.withChronology(chronology36);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.getMutableDateTime();
        boolean boolean45 = dateTime41.isBefore((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField55 = chronology49.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology49.minuteOfDay();
        mutableDateTime44.setChronology(chronology49);
        org.joda.time.DateTime dateTime58 = dateTime15.toDateTime(chronology49);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 99, chronology49);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 62166, chronology49);
        mutableDateTime60.add(0L);
        mutableDateTime60.addWeeks(26340);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime29", (instant8.compareTo(dateTime29) == 0) == instant8.equals(dateTime29));
    }

    @Test
    public void test092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test092");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        long long16 = dateTimeZone11.previousTransition(950707L);
        java.util.TimeZone timeZone17 = dateTimeZone11.toTimeZone();
        java.util.TimeZone.setDefault(timeZone17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology20);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int25 = localDateTime23.get(dateTimeFieldType24);
        java.util.Locale locale26 = java.util.Locale.TRADITIONAL_CHINESE;
        boolean boolean27 = localDateTime23.equals((java.lang.Object) locale26);
        java.lang.String str28 = locale26.getScript();
        java.util.Locale locale29 = java.util.Locale.GERMAN;
        java.lang.String str30 = locale29.getDisplayName();
        java.lang.String str31 = locale29.getISO3Language();
        java.lang.String str32 = locale26.getDisplayName(locale29);
        java.lang.String str33 = timeZone17.getDisplayName(locale29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime13", (mutableDateTime0.compareTo(dateTime13) == 0) == mutableDateTime0.equals(dateTime13));
    }

    @Test
    public void test093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test093");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks(44);
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded((-1L), 36946953);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        org.joda.time.Period period22 = period18.withWeeks((int) (byte) 0);
        org.joda.time.Period period24 = period22.withHours(2000);
        org.joda.time.DateTime dateTime25 = dateTime14.minus((org.joda.time.ReadablePeriod) period22);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime((long) 1, chronology27);
        int int29 = dateTime28.getMinuteOfDay();
        org.joda.time.Instant instant30 = dateTime28.toInstant();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getYearOfCentury();
        int int34 = dateTime32.getWeekyear();
        org.joda.time.DateTime dateTime35 = dateTime32.withEarlierOffsetAtOverlap();
        java.lang.String str36 = dateTime35.toString();
        org.joda.time.MutableDateTime mutableDateTime37 = dateTime35.toMutableDateTime();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant30, (org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Period period39 = period22.minus((org.joda.time.ReadablePeriod) period38);
        org.joda.time.Period period41 = period39.plusDays(26268751);
        org.joda.time.DurationFieldType[] durationFieldTypeArray42 = period41.getFieldTypes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant30", (dateTime1.compareTo(instant30) == 0) == dateTime1.equals(instant30));
    }

    @Test
    public void test094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test094");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.yearOfEra();
        org.joda.time.Chronology chronology34 = chronology26.withUTC();
        org.joda.time.DurationField durationField35 = chronology34.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField35, and durationField27", !(durationField27.compareTo(durationField35) == 0) || (Math.signum(durationField27.compareTo(durationField27)) == Math.signum(durationField35.compareTo(durationField27))));
    }

    @Test
    public void test095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test095");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1440L, chronology5);
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.DurationField durationField9 = chronology5.weekyears();
        org.joda.time.DurationField durationField10 = chronology5.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField6, and durationField9", !(durationField10.compareTo(durationField6) == 0) || (Math.signum(durationField10.compareTo(durationField9)) == Math.signum(durationField6.compareTo(durationField9))));
    }

    @Test
    public void test096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test096");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.yearOfEra();
        org.joda.time.Chronology chronology34 = chronology26.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology26.hourOfHalfday();
        org.joda.time.DurationField durationField36 = chronology26.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField36, and durationField27", !(durationField27.compareTo(durationField36) == 0) || (Math.signum(durationField27.compareTo(durationField27)) == Math.signum(durationField36.compareTo(durationField27))));
    }

    @Test
    public void test097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test097");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime7.secondOfMinute();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 15);
        org.joda.time.DateTime.Property property15 = dateTime14.millisOfSecond();
        int int16 = dateTime14.getWeekOfWeekyear();
        java.lang.String str17 = dateTime14.toString();
        org.joda.time.DateTime dateTime19 = dateTime14.withWeekyear((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period29 = period27.minusSeconds((-1));
        java.lang.String str30 = period27.toString();
        org.joda.time.Period period31 = period27.toPeriod();
        org.joda.time.PeriodType periodType32 = period27.getPeriodType();
        org.joda.time.Period period33 = period23.normalizedStandard(periodType32);
        java.lang.String str34 = periodType32.getName();
        org.joda.time.PeriodType periodType35 = periodType32.withYearsRemoved();
        org.joda.time.PeriodType periodType36 = periodType35.withSecondsRemoved();
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Chronology chronology40 = instant39.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.eras();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.DurationField durationField43 = chronology40.eras();
        org.joda.time.DateTimeField dateTimeField44 = chronology40.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = chronology40.clockhourOfHalfday();
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(chronology40);
        org.joda.time.Period period47 = new org.joda.time.Period((long) 55, periodType35, chronology40);
        java.lang.String str48 = periodType35.toString();
        org.joda.time.PeriodType periodType49 = periodType35.withMillisRemoved();
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableInstant) dateTime14, periodType49);
        org.joda.time.DateTime dateTime51 = mutableDateTime7.toDateTime();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(999, 12, 8, (int) (byte) 10, 5, (-292275054), 15, 50);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(readableInstant65, readableInstant66, periodType67);
        org.joda.time.DurationFieldType durationFieldType70 = periodType67.getFieldType((int) (short) 0);
        java.lang.String str71 = periodType67.toString();
        org.joda.time.Instant instant72 = new org.joda.time.Instant();
        org.joda.time.Instant instant74 = instant72.withMillis(0L);
        org.joda.time.Chronology chronology75 = instant74.getChronology();
        org.joda.time.Period period76 = new org.joda.time.Period((long) 53, (long) (-1), periodType67, chronology75);
        org.joda.time.DateTimeField dateTimeField77 = dateTimeFieldType62.getField(chronology75);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime(chronology78);
        org.joda.time.DateTime dateTime81 = dateTime79.plusMinutes(15);
        org.joda.time.Chronology chronology82 = dateTime79.getChronology();
        java.lang.String str83 = chronology82.toString();
        org.joda.time.DateTimeField dateTimeField84 = dateTimeFieldType62.getField(chronology82);
        org.joda.time.DurationField durationField85 = chronology82.centuries();
        mutablePeriod60.setPeriod(60000L, chronology82);
        org.joda.time.DateTime dateTime87 = dateTime51.withChronology(chronology82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant37", (dateTime10.compareTo(instant37) == 0) == dateTime10.equals(instant37));
    }

    @Test
    public void test098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test098");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        mutableDateTime6.addHours(16);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime6.copy();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        boolean boolean14 = dateTime12.isEqualNow();
        int int15 = dateTime12.getDayOfYear();
        int int16 = dateTime12.getHourOfDay();
        org.joda.time.DateTime dateTime18 = dateTime12.plus(960800L);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.Instant instant21 = instant19.toInstant();
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField28 = localDateTime26.getField((int) (byte) 0);
        java.lang.String str29 = localDateTime26.toString();
        org.joda.time.LocalDateTime.Property property30 = localDateTime26.weekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = property30.roundHalfEvenCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray32 = localDateTime31.getFieldTypes();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType33.getField(chronology34);
        int int36 = localDateTime31.get(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.withDayOfWeek(3);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = dateTime40.withZoneRetainFields(dateTimeZone41);
        boolean boolean44 = dateTime42.equals((java.lang.Object) (-1L));
        java.util.GregorianCalendar gregorianCalendar45 = dateTime42.toGregorianCalendar();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.DateTime dateTime48 = dateTime42.withField(dateTimeFieldType46, 22);
        int int49 = localDateTime38.indexOf(dateTimeFieldType46);
        boolean boolean50 = instant19.isSupported(dateTimeFieldType46);
        int int51 = dateTime12.get(dateTimeFieldType46);
        boolean boolean52 = mutableDateTime6.equals((java.lang.Object) dateTimeFieldType46);
        int int53 = mutableDateTime6.getMinuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant19", (dateTime12.compareTo(instant19) == 0) == dateTime12.equals(instant19));
    }

    @Test
    public void test099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test099");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        mutableDateTime6.setYear(3);
        mutableDateTime6.addHours(15);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime12.withChronology(chronology19);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.getMutableDateTime();
        boolean boolean28 = dateTime24.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.eras();
        long long37 = chronology32.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField38 = chronology32.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology32.minuteOfDay();
        mutableDateTime27.setChronology(chronology32);
        mutableDateTime27.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(readableInstant43, readableInstant44, periodType45);
        mutablePeriod46.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod49 = mutablePeriod46.toMutablePeriod();
        mutableDateTime27.add((org.joda.time.ReadablePeriod) mutablePeriod49, 1439);
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period(readableDuration52, readableInstant53);
        org.joda.time.Period period56 = period54.withDays((int) (byte) 1);
        org.joda.time.Period period58 = period54.withMonths(26148);
        mutableDateTime27.add((org.joda.time.ReadablePeriod) period54, 53);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and mutableDateTime27", (mutableDateTime6.compareTo(mutableDateTime27) == 0) == mutableDateTime6.equals(mutableDateTime27));
    }

    @Test
    public void test100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test100");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.DateTime dateTime17 = dateTime5.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear(26148950);
        int int20 = dateTime17.getWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.copy();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property25.add((long) (byte) 10);
        int int29 = mutableDateTime28.getCenturyOfEra();
        int int30 = dateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.DateTime dateTime32 = dateTime17.plusMillis((int) (short) 100);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant33, readableInstant34, periodType35);
        mutablePeriod36.setYears((int) '#');
        org.joda.time.Chronology chronology40 = null;
        mutablePeriod36.add((long) 1, chronology40);
        org.joda.time.ReadableInterval readableInterval42 = null;
        mutablePeriod36.setPeriod(readableInterval42);
        int int44 = mutablePeriod36.getDays();
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.monthOfYear();
        org.joda.time.DateTimeField dateTimeField49 = property48.getField();
        org.joda.time.LocalDate localDate50 = property48.roundCeilingCopy();
        org.joda.time.Chronology chronology51 = localDate50.getChronology();
        mutablePeriod36.setPeriod((long) 36946953, (-205878993L), chronology51);
        org.joda.time.DurationFieldType durationFieldType54 = mutablePeriod36.getFieldType(0);
        org.joda.time.DateTime dateTime55 = dateTime32.minus((org.joda.time.ReadablePeriod) mutablePeriod36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime3", (instant2.compareTo(dateTime3) == 0) == instant2.equals(dateTime3));
    }

    @Test
    public void test101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test101");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        mutableDateTime6.setDate((long) '#');
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime6.toDateTime(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) periodType25);
        mutableDateTime0.setZoneRetainFields(dateTimeZone17);
        long long29 = dateTimeZone17.nextTransition(100L);
        java.lang.String str31 = dateTimeZone17.getNameKey(0L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and dateTime19", (mutableDateTime6.compareTo(dateTime19) == 0) == mutableDateTime6.equals(dateTime19));
    }

    @Test
    public void test102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test102");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant4, readableInstant5, periodType6);
        org.joda.time.DurationFieldType durationFieldType9 = periodType6.getFieldType((int) (short) 0);
        java.lang.String str10 = periodType6.toString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 53, (long) (-1), periodType6, chronology14);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant18, readableInstant19, periodType20);
        org.joda.time.DurationFieldType durationFieldType23 = periodType20.getFieldType((int) (short) 0);
        java.lang.String str24 = periodType20.toString();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.Period period29 = new org.joda.time.Period((long) 53, (long) (-1), periodType20, chronology28);
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) (short) 10, periodType6, chronology28);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) (byte) 1, chronology28);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant36, readableInstant37, periodType38);
        org.joda.time.DurationFieldType durationFieldType41 = periodType38.getFieldType((int) (short) 0);
        java.lang.String str42 = periodType38.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 53, (long) (-1), periodType38, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType33.getField(chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes(15);
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        java.lang.String str54 = chronology53.toString();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType33.getField(chronology53);
        org.joda.time.DateTimeField dateTimeField56 = chronology53.dayOfYear();
        java.util.Locale locale57 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology53, locale57, (java.lang.Integer) 5);
        org.joda.time.DateTimeField dateTimeField60 = chronology53.dayOfYear();
        org.joda.time.DurationField durationField61 = chronology53.days();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate(chronology53);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology53);
        org.joda.time.DateTime dateTime64 = dateTime31.toDateTime(chronology53);
        org.joda.time.DateTimeZone dateTimeZone65 = chronology53.getZone();
        org.joda.time.MutableDateTime mutableDateTime66 = org.joda.time.MutableDateTime.now(dateTimeZone65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime50", (instant11.compareTo(dateTime50) == 0) == instant11.equals(dateTime50));
    }

    @Test
    public void test103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test103");
        org.joda.time.Chronology chronology2 = null;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale3.getDisplayVariant(locale4);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket6 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology2, locale4);
        java.lang.Object obj7 = dateTimeParserBucket6.saveState();
        org.joda.time.DateTimeZone dateTimeZone8 = dateTimeParserBucket6.getZone();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime((long) 55, dateTimeZone8);
        mutableDateTime9.setWeekyear(26164766);
        mutableDateTime9.addMinutes(36950209);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime14.copy();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime14.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime19 = property18.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime21 = property18.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.toMutableDateTime(dateTimeZone22);
        int int25 = mutableDateTime24.getDayOfYear();
        boolean boolean26 = mutableDateTime9.equals((java.lang.Object) int25);
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime9.copy();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime14 and mutableDateTime24", (mutableDateTime14.compareTo(mutableDateTime24) == 0) == mutableDateTime14.equals(mutableDateTime24));
    }

    @Test
    public void test104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test104");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.months();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21, periodType22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(15);
        org.joda.time.Interval interval36 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Instant instant37 = instant9.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.DateTime dateTime38 = instant9.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj40 = mutableDateTime39.clone();
        mutableDateTime39.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime39.dayOfWeek();
        mutableDateTime39.setMillisOfDay(2);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime39.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime47 = property46.roundCeiling();
        mutableDateTime47.setMillisOfDay(49);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) mutableDateTime47);
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1969, 49, 3, 50);
        mutableDateTime47.add((org.joda.time.ReadablePeriod) mutablePeriod55, 557);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime33", (instant0.compareTo(dateTime33) == 0) == instant0.equals(dateTime33));
    }

    @Test
    public void test105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test105");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        mutablePeriod2.setMillis((int) ' ');
        mutablePeriod2.setPeriod((long) 2);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        org.joda.time.LocalDate localDate23 = property21.roundCeilingCopy();
        org.joda.time.LocalDate localDate25 = localDate23.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate27 = localDate23.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate29 = localDate27.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        mutableDateTime30.add((long) 'a');
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.yearOfCentury();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration41 = duration38.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration42 = duration35.minus((org.joda.time.ReadableDuration) duration41);
        mutableDateTime30.add((org.joda.time.ReadableDuration) duration35);
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime30.centuryOfEra();
        mutableDateTime30.addHours((int) (byte) 10);
        int int47 = mutableDateTime30.getSecondOfDay();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property49 = localDate48.monthOfYear();
        org.joda.time.LocalDate.Property property50 = localDate48.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableInstant51, readableInstant52, periodType53);
        org.joda.time.DurationFieldType durationFieldType56 = periodType53.getFieldType((int) (short) 0);
        boolean boolean57 = localDate48.isSupported(durationFieldType56);
        mutableDateTime30.add(durationFieldType56, (-292275054));
        org.joda.time.LocalDate localDate61 = localDate27.withFieldAdded(durationFieldType56, 53);
        boolean boolean62 = mutablePeriod2.isSupported(durationFieldType56);
        mutablePeriod2.addHours(152);
        mutablePeriod2.addMonths(22);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology67);
        int int69 = dateTime68.getYearOfCentury();
        int int70 = dateTime68.getWeekyear();
        org.joda.time.DateTime dateTime71 = dateTime68.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property72 = dateTime68.yearOfEra();
        org.joda.time.DateTimeField dateTimeField73 = property72.getField();
        org.joda.time.DateTime dateTime74 = property72.getDateTime();
        org.joda.time.DateTime dateTime75 = property72.roundFloorCopy();
        java.lang.String str76 = property72.toString();
        org.joda.time.DurationField durationField77 = property72.getRangeDurationField();
        org.joda.time.DateTime dateTime79 = property72.addToCopy(26180329);
        org.joda.time.DateTime dateTime80 = property72.roundHalfFloorCopy();
        org.joda.time.Duration duration82 = org.joda.time.Duration.standardDays(1028704L);
        org.joda.time.DateTime dateTime83 = dateTime80.minus((org.joda.time.ReadableDuration) duration82);
        org.joda.time.Instant instant84 = new org.joda.time.Instant();
        org.joda.time.Instant instant86 = instant84.withMillis(0L);
        org.joda.time.Chronology chronology87 = instant86.getChronology();
        org.joda.time.DurationField durationField88 = chronology87.eras();
        long long92 = chronology87.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField93 = chronology87.secondOfMinute();
        java.lang.String str94 = chronology87.toString();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration82, chronology87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant84", (dateTime11.compareTo(instant84) == 0) == dateTime11.equals(instant84));
    }

    @Test
    public void test106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test106");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        java.lang.String str17 = dateTimeZone14.toString();
        java.lang.String str18 = dateTimeZone14.getID();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone14);
        int int21 = mutableDateTime20.getYearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test107");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.addWeekyears((int) '4');
        mutableDateTime1.add((long) 'a');
        mutableDateTime1.addMonths((int) (byte) 100);
        boolean boolean9 = mutableDateTime1.isBefore((long) 3);
        mutableDateTime1.addYears(48);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime12.copy();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime18 = property16.roundHalfCeiling();
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime18.getRoundingField();
        mutableDateTime18.setSecondOfMinute(0);
        mutableDateTime18.addSeconds((int) (short) 1);
        java.util.Date date24 = mutableDateTime18.toDate();
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj26 = mutableDateTime25.clone();
        mutableDateTime25.setDate(0L);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getYearOfCentury();
        int int32 = dateTime30.getWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime30.plus((long) 15);
        org.joda.time.DateTime.Property property35 = dateTime34.millisOfSecond();
        org.joda.time.DateTime dateTime37 = dateTime34.withCenturyOfEra((int) '#');
        org.joda.time.DateTime dateTime39 = dateTime34.withYear((int) 'u');
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.eras();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.now(chronology45);
        org.joda.time.DurationField durationField48 = chronology45.eras();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 44, chronology45);
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType40.getField(chronology45);
        org.joda.time.PeriodType periodType53 = null;
        org.joda.time.Period period54 = new org.joda.time.Period((long) 100, 1L, periodType53);
        org.joda.time.Period period56 = period54.minusSeconds((-1));
        java.lang.String str57 = period54.toString();
        long long60 = chronology45.add((org.joda.time.ReadablePeriod) period54, (long) ' ', (int) 'a');
        org.joda.time.Period period62 = period54.minusHours((-292275054));
        org.joda.time.Period period64 = period62.minusHours(2000);
        int int65 = period62.getMinutes();
        org.joda.time.Period period66 = period62.toPeriod();
        org.joda.time.Period period68 = period62.withYears(54);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period(readableDuration69, readableInstant70);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = new org.joda.time.Period((long) 100, 1L, periodType74);
        org.joda.time.Period period77 = period75.minusSeconds((-1));
        java.lang.String str78 = period75.toString();
        org.joda.time.Period period79 = period75.toPeriod();
        org.joda.time.PeriodType periodType80 = period75.getPeriodType();
        org.joda.time.Period period81 = period71.normalizedStandard(periodType80);
        org.joda.time.Period period83 = period81.withSeconds(10);
        org.joda.time.PeriodType periodType84 = period83.getPeriodType();
        org.joda.time.Period period85 = period62.normalizedStandard(periodType84);
        org.joda.time.MutablePeriod mutablePeriod86 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime25, (org.joda.time.ReadableInstant) dateTime39, periodType84);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime1, (org.joda.time.ReadableInstant) mutableDateTime18, periodType84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and instant42", (dateTime30.compareTo(instant42) == 0) == dateTime30.equals(instant42));
    }

    @Test
    public void test108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test108");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime8 = property5.addToCopy(48);
        org.joda.time.DateTime dateTime10 = dateTime8.plus((long) 2100);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.yearOfCentury();
        mutableDateTime11.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration19, readableInstant20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.Period period27 = period25.minusSeconds((-1));
        java.lang.String str28 = period25.toString();
        org.joda.time.Period period29 = period25.toPeriod();
        org.joda.time.PeriodType periodType30 = period25.getPeriodType();
        org.joda.time.Period period31 = period21.normalizedStandard(periodType30);
        org.joda.time.DurationFieldType durationFieldType32 = null;
        int int33 = periodType30.indexOf(durationFieldType32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.eras();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType30, chronology37);
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime11.toMutableDateTime(chronology37);
        mutableDateTime11.setDayOfYear(44);
        mutableDateTime11.setTime((long) (short) -1);
        org.joda.time.DateTime dateTime48 = mutableDateTime11.toDateTime();
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType50 = periodType49.withMinutesRemoved();
        java.lang.String str51 = periodType49.toString();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) mutableDateTime11, periodType49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant34", (dateTime1.compareTo(instant34) == 0) == dateTime1.equals(instant34));
    }

    @Test
    public void test109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test109");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime13.toString(dateTimeFormatter15);
        org.joda.time.DateTime dateTime18 = dateTime13.minusMonths(22);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.joda.time.DateTime dateTime24 = dateTime13.withChronology(chronology22);
        org.joda.time.Period period25 = duration4.toPeriod(chronology22);
        org.joda.time.Seconds seconds26 = duration4.toStandardSeconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant19", (dateTime13.compareTo(instant19) == 0) == dateTime13.equals(instant19));
    }

    @Test
    public void test110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test110");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getLeapDurationField();
        org.joda.time.LocalTime localTime6 = property4.roundHalfCeilingCopy();
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = property4.getAsText(locale8);
        org.joda.time.LocalTime localTime11 = property4.addWrapFieldToCopy(4);
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period(readableDuration15, readableInstant16);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.Period period23 = period21.minusSeconds((-1));
        java.lang.String str24 = period21.toString();
        org.joda.time.Period period25 = period21.toPeriod();
        org.joda.time.PeriodType periodType26 = period21.getPeriodType();
        org.joda.time.Period period27 = period17.normalizedStandard(periodType26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        long long36 = chronology31.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField37 = chronology31.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(44L, periodType26, chronology31);
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(950105L, 949680L, periodType26);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMinutes(15);
        org.joda.time.Chronology chronology46 = dateTime43.getChronology();
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Chronology chronology50 = instant49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.eras();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(chronology50);
        org.joda.time.DurationField durationField53 = chronology50.eras();
        org.joda.time.DateTimeField dateTimeField54 = chronology50.hourOfDay();
        org.joda.time.DateTime dateTime55 = dateTime43.withChronology(chronology50);
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime56.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.getMutableDateTime();
        boolean boolean59 = dateTime55.isBefore((org.joda.time.ReadableInstant) mutableDateTime58);
        org.joda.time.Instant instant60 = new org.joda.time.Instant();
        org.joda.time.Instant instant62 = instant60.withMillis(0L);
        org.joda.time.Chronology chronology63 = instant62.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.eras();
        long long68 = chronology63.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField69 = chronology63.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField70 = chronology63.minuteOfDay();
        mutableDateTime58.setChronology(chronology63);
        org.joda.time.DateTime dateTime72 = org.joda.time.DateTime.now(chronology63);
        mutablePeriod39.setPeriod(1645516800000L, (long) 489, chronology63);
        org.joda.time.LocalTime localTime75 = localTime11.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod39, 533);
        org.joda.time.LocalTime localTime77 = localTime75.minusMinutes(123);
        org.joda.time.Instant instant79 = new org.joda.time.Instant();
        org.joda.time.Instant instant81 = instant79.withMillis(0L);
        org.joda.time.Chronology chronology82 = instant81.getChronology();
        org.joda.time.DurationField durationField83 = chronology82.eras();
        org.joda.time.LocalTime localTime84 = org.joda.time.LocalTime.now(chronology82);
        org.joda.time.DurationField durationField85 = chronology82.eras();
        org.joda.time.DateTime dateTime86 = new org.joda.time.DateTime((long) 44, chronology82);
        org.joda.time.DateTime.Property property87 = dateTime86.hourOfDay();
        java.lang.String[] strArray89 = java.util.TimeZone.getAvailableIDs((int) '#');
        boolean boolean90 = dateTime86.equals((java.lang.Object) strArray89);
        org.joda.time.DateMidnight dateMidnight91 = dateTime86.toDateMidnight();
        org.joda.time.DateTime dateTime92 = localTime75.toDateTime((org.joda.time.ReadableInstant) dateTime86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and dateTime43", (instant28.compareTo(dateTime43) == 0) == instant28.equals(dateTime43));
    }

    @Test
    public void test111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test111");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str5 = duration4.toString();
        org.joda.time.Instant instant6 = instant0.minus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.MutableDateTime mutableDateTime7 = instant0.toMutableDateTime();
        mutableDateTime7.addDays(1424);
        int int10 = mutableDateTime7.getHourOfDay();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str13 = duration12.toString();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours16 = duration15.toStandardHours();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.Duration duration21 = duration12.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant26, readableInstant27, periodType28);
        org.joda.time.DurationFieldType durationFieldType31 = periodType28.getFieldType((int) (short) 0);
        java.lang.String str32 = periodType28.toString();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 53, (long) (-1), periodType28, chronology36);
        org.joda.time.Period period38 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType28);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.eras();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.DurationField durationField45 = chronology42.eras();
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.Period period47 = duration12.toPeriod(periodType28, chronology42);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration12);
        mutableDateTime7.setMillisOfDay(26234);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Chronology chronology54 = instant53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.eras();
        long long59 = chronology54.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField60 = chronology54.secondOfMinute();
        org.joda.time.format.DateTimePrinter dateTimePrinter61 = null;
        org.joda.time.format.DateTimeParser dateTimeParser62 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter61, dateTimeParser62);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Chronology chronology67 = instant66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.eras();
        long long72 = chronology67.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter63.withChronology(chronology67);
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime(chronology67);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.minusYears(26148950);
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.lang.String str78 = dateTimeField60.getAsShortText((org.joda.time.ReadablePartial) localDateTime76, locale77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime76.withCenturyOfEra((int) ' ');
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.minusYears((int) (short) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType84 = localDateTime80.getFieldType((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime7.property(dateTimeFieldType84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime18", (instant0.compareTo(dateTime18) == 0) == instant0.equals(dateTime18));
    }

    @Test
    public void test112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test112");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours21 = duration20.toStandardHours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration17.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean47 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant48 = instant15.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours51 = duration50.toStandardHours();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        int int54 = dateTime53.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime57 = dateTime53.plus(0L);
        org.joda.time.Instant instant58 = dateTime57.toInstant();
        boolean boolean59 = instant15.isAfter((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Instant instant60 = instant58.toInstant();
        org.joda.time.Instant instant61 = instant58.toInstant();
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 1L, periodType64);
        org.joda.time.Period period67 = period65.minusSeconds((-1));
        org.joda.time.Period period69 = period67.multipliedBy((int) '#');
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.centuries();
        int int71 = period69.get(durationFieldType70);
        org.joda.time.Period period73 = period69.plusMinutes(44);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str78 = duration77.toString();
        boolean boolean79 = duration75.isShorterThan((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Hours hours80 = duration75.toStandardHours();
        boolean boolean81 = period73.equals((java.lang.Object) duration75);
        org.joda.time.Instant instant82 = instant58.minus((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Chronology chronology83 = instant82.getChronology();
        org.joda.time.DurationField durationField84 = chronology83.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant58", (dateTime23.compareTo(instant58) == 0) == dateTime23.equals(instant58));
    }

    @Test
    public void test113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test113");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 44, chronology4);
        int int9 = dateTime8.getSecondOfMinute();
        org.joda.time.Instant instant10 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime12 = instant10.toDateTime();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardHours((long) 36946953);
        org.joda.time.Instant instant15 = instant10.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime16 = dateTime8.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.DateTime dateTime18 = dateTime8.withWeekyear(10);
        org.joda.time.DateTime dateTime20 = dateTime18.plusWeeks((-198));
        org.joda.time.DateTime dateTime22 = dateTime18.minusWeeks(39);
        int int23 = dateTime18.getCenturyOfEra();
        java.lang.String str25 = dateTime18.toString("\uadf8\ub9ac\ub2c8\uce58\ud45c\uc900\uc2dc");
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime11", (instant1.compareTo(mutableDateTime11) == 0) == instant1.equals(mutableDateTime11));
    }

    @Test
    public void test114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test114");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillisOfSecond((int) '4');
        mutableDateTime16.addWeeks((int) (short) -1);
        int int34 = mutableDateTime16.getCenturyOfEra();
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration52 = duration49.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean53 = duration47.isLongerThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Minutes minutes54 = duration47.toStandardMinutes();
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.PeriodType periodType59 = period58.getPeriodType();
        org.joda.time.Period period60 = period55.withPeriodType(periodType59);
        org.joda.time.Instant instant62 = new org.joda.time.Instant();
        org.joda.time.Instant instant64 = instant62.withMillis(0L);
        org.joda.time.Chronology chronology65 = instant64.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.eras();
        org.joda.time.LocalTime localTime67 = org.joda.time.LocalTime.now(chronology65);
        org.joda.time.DurationField durationField68 = chronology65.eras();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 44, chronology65);
        org.joda.time.DateTimeField dateTimeField70 = chronology65.clockhourOfDay();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(0L, 0L, periodType59, chronology65);
        int int72 = mutablePeriod71.getMonths();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant5", (dateTime1.compareTo(instant5) == 0) == dateTime1.equals(instant5));
    }

    @Test
    public void test115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test115");
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        mutableDateTime3.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime6 = mutableDateTime3.copy();
        mutableDateTime3.setDate((long) '#');
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean12 = localDate9.isSupported(dateTimeFieldType11);
        int int13 = localDate9.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight15 = localDate9.toDateMidnight(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = mutableDateTime3.toDateTime(dateTimeZone14);
        org.joda.time.LocalDate localDate17 = org.joda.time.LocalDate.now(dateTimeZone14);
        org.joda.time.PeriodType periodType20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period((long) 100, 1L, periodType20);
        org.joda.time.PeriodType periodType22 = period21.getPeriodType();
        boolean boolean23 = dateTimeZone14.equals((java.lang.Object) periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withHoursRemoved();
        org.joda.time.PeriodType periodType25 = periodType22.withMinutesRemoved();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.hours();
        org.joda.time.DurationField durationField32 = chronology30.years();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.dayOfYear();
        org.joda.time.Period period34 = new org.joda.time.Period((long) (byte) 100, 133009030800000L, periodType22, chronology30);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (-164), chronology30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime16", (mutableDateTime3.compareTo(dateTime16) == 0) == mutableDateTime3.equals(dateTime16));
    }

    @Test
    public void test116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test116");
        org.joda.time.Duration duration2 = new org.joda.time.Duration(947880L, (-229564796800L));
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        mutableDateTime16.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.toPeriod();
        org.joda.time.PeriodType periodType35 = period30.getPeriodType();
        org.joda.time.Period period36 = period26.normalizedStandard(periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        int int38 = periodType35.indexOf(durationFieldType37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.eras();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.DurationField durationField45 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType35, chronology42);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime16.toMutableDateTime(chronology42);
        mutableDateTime16.setDayOfYear(44);
        int int51 = mutableDateTime16.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime16.dayOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.secondOfDay();
        java.lang.String str56 = dateTimeFieldType55.getName();
        int int57 = mutableDateTime16.get(dateTimeFieldType55);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime16.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test117");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.addSeconds(0);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours25 = duration24.toStandardHours();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.months();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime31, periodType38);
        org.joda.time.Duration duration41 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime17, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTime dateTime42 = dateTime16.plus((org.joda.time.ReadableDuration) duration41);
        org.joda.time.DateTime dateTime44 = dateTime16.minusYears(29);
        org.joda.time.DateTime.Property property45 = dateTime16.minuteOfDay();
        org.joda.time.DateTime.Property property46 = dateTime16.millisOfDay();
        org.joda.time.DateTime dateTime48 = property46.setCopy(62213);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test118");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.addWeekyears((int) '4');
        mutableDateTime1.add((long) 'a');
        mutableDateTime1.addMonths((int) (byte) 100);
        boolean boolean9 = mutableDateTime1.isBefore((long) 3);
        java.util.Date date10 = mutableDateTime1.toDate();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        boolean boolean20 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Hours hours21 = duration16.toStandardHours();
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration16, 20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime25.toString(dateTimeFormatter27);
        org.joda.time.DateTime dateTime30 = dateTime25.minusMonths(22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.DateTime dateTime36 = dateTime25.withChronology(chronology34);
        org.joda.time.Period period37 = duration16.toPeriod(chronology34);
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.Period period42 = new org.joda.time.Period(readableDuration40, readableInstant41);
        org.joda.time.PeriodType periodType45 = null;
        org.joda.time.Period period46 = new org.joda.time.Period((long) 100, 1L, periodType45);
        org.joda.time.Period period48 = period46.minusSeconds((-1));
        java.lang.String str49 = period46.toString();
        org.joda.time.Period period50 = period46.toPeriod();
        org.joda.time.PeriodType periodType51 = period46.getPeriodType();
        org.joda.time.Period period52 = period42.normalizedStandard(periodType51);
        java.lang.String str53 = periodType51.getName();
        java.lang.String str54 = periodType51.toString();
        org.joda.time.PeriodType periodType55 = periodType51.withDaysRemoved();
        org.joda.time.PeriodType periodType56 = periodType55.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType56);
        int[] intArray59 = chronology34.get((org.joda.time.ReadablePeriod) mutablePeriod57, 1L);
        org.joda.time.DateTimeField dateTimeField60 = chronology34.clockhourOfHalfday();
        org.joda.time.LocalTime localTime61 = org.joda.time.LocalTime.fromMillisOfDay(25L, chronology34);
        org.joda.time.DateTimeField dateTimeField62 = chronology34.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField63 = chronology34.secondOfDay();
        mutableDateTime1.setChronology(chronology34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and instant31", (dateTime25.compareTo(instant31) == 0) == dateTime25.equals(instant31));
    }

    @Test
    public void test119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test119");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period10 = period8.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        mutableDateTime17.setRounding(dateTimeField33);
        org.joda.time.Duration duration38 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.centuryOfEra();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime39.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, 1L, periodType50);
        org.joda.time.Period period53 = period51.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.minus((org.joda.time.ReadablePeriod) period51);
        mutableDateTime39.add((org.joda.time.ReadablePeriod) period51, 0);
        org.joda.time.PeriodType periodType57 = period51.getPeriodType();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(readableInstant61, readableInstant62, periodType63);
        org.joda.time.DurationFieldType durationFieldType66 = periodType63.getFieldType((int) (short) 0);
        java.lang.String str67 = periodType63.toString();
        org.joda.time.Instant instant68 = new org.joda.time.Instant();
        org.joda.time.Instant instant70 = instant68.withMillis(0L);
        org.joda.time.Chronology chronology71 = instant70.getChronology();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 53, (long) (-1), periodType63, chronology71);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(readableInstant75, readableInstant76, periodType77);
        org.joda.time.DurationFieldType durationFieldType80 = periodType77.getFieldType((int) (short) 0);
        java.lang.String str81 = periodType77.toString();
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.Instant instant84 = instant82.withMillis(0L);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.joda.time.Period period86 = new org.joda.time.Period((long) 53, (long) (-1), periodType77, chronology85);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) (short) 10, periodType63, chronology85);
        org.joda.time.DateTimeField dateTimeField88 = chronology85.weekOfWeekyear();
        org.joda.time.Period period89 = duration38.toPeriod(periodType57, chronology85);
        org.joda.time.Duration duration91 = duration38.minus((long) 62151);
        org.joda.time.Minutes minutes92 = duration91.toStandardMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and mutableDateTime39", (instant28.compareTo(mutableDateTime39) == 0) == instant28.equals(mutableDateTime39));
    }

    @Test
    public void test120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test120");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime18 = dateTime16.minusMonths(0);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.DateTime dateTime30 = localDateTime23.toDateTime((org.joda.time.ReadableInstant) dateTime27);
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime32 = localDateTime23.toDateTime(dateTimeZone31);
        org.joda.time.DateTime.Property property33 = dateTime32.minuteOfHour();
        org.joda.time.DateTime dateTime34 = property33.roundFloorCopy();
        org.joda.time.DateTime dateTime35 = property33.roundHalfEvenCopy();
        boolean boolean36 = dateTime16.equals((java.lang.Object) property33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test121");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTime();
        int int10 = dateTime7.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime12 = dateTime7.withMillisOfSecond(16);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration21 = duration17.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant22 = instant15.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean30 = duration24.isLongerThan((org.joda.time.ReadableDuration) duration29);
        java.lang.Object obj31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(obj31);
        org.joda.time.LocalDateTime localDateTime33 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField39 = localDateTime37.getField((int) (byte) 0);
        long long41 = dateTimeField39.roundHalfEven((long) 1);
        int int42 = dateTime32.get(dateTimeField39);
        org.joda.time.LocalDateTime localDateTime43 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.withCenturyOfEra((int) 'a');
        java.util.Locale locale51 = java.util.Locale.GERMAN;
        java.lang.String str52 = locale51.getDisplayName();
        java.lang.String str53 = dateTimeField39.getAsText((org.joda.time.ReadablePartial) localDateTime47, 53, locale51);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period56 = duration55.toPeriod();
        org.joda.time.Duration duration59 = duration55.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime47.minus((org.joda.time.ReadableDuration) duration55);
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property64 = localDateTime61.hourOfDay();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime61.plusMillis((int) (byte) 0);
        int int67 = localDateTime47.compareTo((org.joda.time.ReadablePartial) localDateTime61);
        boolean boolean68 = duration24.equals((java.lang.Object) int67);
        org.joda.time.Instant instant69 = instant15.plus((org.joda.time.ReadableDuration) duration24);
        long long70 = duration24.getMillis();
        org.joda.time.DateTime dateTime71 = dateTime12.plus((org.joda.time.ReadableDuration) duration24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant13", (dateTime1.compareTo(instant13) == 0) == dateTime1.equals(instant13));
    }

    @Test
    public void test122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test122");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField7 = chronology4.monthOfYear();
        org.joda.time.DurationField durationField8 = chronology4.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField8, and durationField5", !(durationField5.compareTo(durationField8) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField8.compareTo(durationField5))));
    }

    @Test
    public void test123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test123");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration17, readableInstant18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period25 = period23.minusSeconds((-1));
        java.lang.String str26 = period23.toString();
        org.joda.time.Period period27 = period23.toPeriod();
        org.joda.time.PeriodType periodType28 = period23.getPeriodType();
        org.joda.time.Period period29 = period19.normalizedStandard(periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = null;
        int int31 = periodType28.indexOf(durationFieldType30);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType28, chronology35);
        org.joda.time.DateTimeField dateTimeField41 = chronology35.hourOfDay();
        org.joda.time.Chronology chronology42 = chronology35.withUTC();
        org.joda.time.DateTime dateTime43 = mutableDateTime0.toDateTime(chronology35);
        org.joda.time.DurationField durationField44 = chronology35.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField36, durationField44, and durationField36", !(durationField36.compareTo(durationField44) == 0) || (Math.signum(durationField36.compareTo(durationField36)) == Math.signum(durationField44.compareTo(durationField36))));
    }

    @Test
    public void test124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test124");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatter13.withZoneUTC();
        org.joda.time.Chronology chronology15 = dateTimeFormatter14.getChronology();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str20 = duration19.toString();
        boolean boolean21 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration31 = duration28.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean32 = duration26.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration33 = duration23.minus((org.joda.time.ReadableDuration) duration26);
        boolean boolean34 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period(readableDuration35, readableInstant36);
        org.joda.time.Period period39 = period37.withDays((int) (byte) 1);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours42 = duration41.toStandardHours();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        int int45 = dateTime44.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration41, (org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration47 = period37.toDurationFrom((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.Duration duration49 = duration33.withDurationAdded((org.joda.time.ReadableDuration) duration47, (int) ' ');
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 1, chronology51);
        int int53 = dateTime52.getMinuteOfDay();
        org.joda.time.DateTime.Property property54 = dateTime52.weekyear();
        org.joda.time.DateTime dateTime56 = property54.addWrapFieldToCopy(51);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration49, (org.joda.time.ReadableInstant) dateTime56, periodType57);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(15);
        org.joda.time.Chronology chronology65 = dateTime62.getChronology();
        org.joda.time.DurationField durationField66 = chronology65.hours();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod(1440L, chronology65);
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime(chronology65);
        org.joda.time.Chronology chronology69 = chronology65.withUTC();
        mutablePeriod58.add((-826273409031807808L), chronology69);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter14.withChronology(chronology69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField66", Math.signum(durationField7.compareTo(durationField66)) == -Math.signum(durationField66.compareTo(durationField7)));
    }

    @Test
    public void test125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test125");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        int int4 = localDate0.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight6 = localDate0.toDateMidnight(dateTimeZone5);
        org.joda.time.LocalDate.Property property7 = localDate0.year();
        org.joda.time.LocalDate localDate8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfMonth();
        org.joda.time.LocalDate localDate11 = localDate8.minusMonths(36956320);
        org.joda.time.LocalDate localDate13 = localDate8.withYearOfCentury(50);
        org.joda.time.LocalDate localDate15 = localDate8.minusMonths(37033255);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getYearOfCentury();
        int int19 = dateTime17.getWeekyear();
        org.joda.time.DateTime dateTime20 = dateTime17.withEarlierOffsetAtOverlap();
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getYearOfCentury();
        int int25 = dateTime23.getWeekyear();
        org.joda.time.DateTime dateTime26 = dateTime23.withEarlierOffsetAtOverlap();
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.MutableDateTime mutableDateTime28 = dateTime26.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        boolean boolean30 = dateTimeZone29.isFixed();
        mutableDateTime28.setZoneRetainFields(dateTimeZone29);
        org.joda.time.DateTime dateTime32 = dateTime20.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime34 = dateTime32.minusMinutes(1973);
        org.joda.time.DateTime dateTime35 = localDate8.toDateTime((org.joda.time.ReadableInstant) dateTime34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and dateTime32", (dateTime17.compareTo(dateTime32) == 0) == dateTime17.equals(dateTime32));
    }

    @Test
    public void test126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test126");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        mutableDateTime27.add((long) 'a');
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.yearOfCentury();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration38 = duration35.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration39 = duration32.minus((org.joda.time.ReadableDuration) duration38);
        mutableDateTime27.add((org.joda.time.ReadableDuration) duration32);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime27.centuryOfEra();
        mutableDateTime27.addYears(0);
        mutableDateTime27.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.Duration duration54 = duration50.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant55 = instant48.plus((org.joda.time.ReadableDuration) duration54);
        long long56 = instant55.getMillis();
        org.joda.time.Duration duration57 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime27, (org.joda.time.ReadableInstant) instant55);
        org.joda.time.MutableDateTime mutableDateTime58 = instant55.toMutableDateTime();
        boolean boolean59 = dateTime26.equals((java.lang.Object) mutableDateTime58);
        org.joda.time.Period period60 = duration24.toPeriodTo((org.joda.time.ReadableInstant) dateTime26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant15", (dateTime10.compareTo(instant15) == 0) == dateTime10.equals(instant15));
    }

    @Test
    public void test127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test127");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.Instant instant5 = instant3.toInstant();
        long long6 = instant5.getMillis();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) 100);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Instant instant25 = instant5.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) -1);
        org.joda.time.Duration duration26 = duration1.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.set(45);
        org.joda.time.MutableDateTime mutableDateTime31 = property28.roundFloor();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(15);
        org.joda.time.DateTime dateTime43 = localDateTime36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = localDateTime36.toDateTime(dateTimeZone44);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        mutableDateTime31.setRounding(dateTimeField47);
        java.lang.Object obj49 = mutableDateTime31.clone();
        java.lang.String str50 = mutableDateTime31.toString();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration55 = duration52.withDurationAdded((long) (short) 100, (int) ' ');
        long long56 = duration55.getMillis();
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.months();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime66, periodType67);
        boolean boolean69 = dateTime60.isBefore((org.joda.time.ReadableInstant) dateTime64);
        int int70 = dateTime64.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(readableInstant71, readableInstant72, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime64, periodType73);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(periodType73);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) mutableDateTime31, periodType73);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime31.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime80 = property79.roundHalfCeiling();
        mutableDateTime80.setMinuteOfDay(3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test128");
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(readableInstant2, readableInstant3, periodType4);
        org.joda.time.DurationFieldType durationFieldType7 = periodType4.getFieldType((int) (short) 0);
        java.lang.String str8 = periodType4.toString();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.Period period13 = new org.joda.time.Period((long) 53, (long) (-1), periodType4, chronology12);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(chronology12);
        org.joda.time.LocalDate.Property property15 = localDate14.centuryOfEra();
        org.joda.time.LocalDate localDate16 = property15.roundCeilingCopy();
        java.util.Date date17 = localDate16.toDate();
        org.joda.time.DateMidnight dateMidnight18 = localDate16.toDateMidnight();
        org.joda.time.DateMidnight dateMidnight19 = localDate16.toDateMidnight();
        int int20 = dateMidnight19.getYearOfEra();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj22 = mutableDateTime21.clone();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.millisOfDay();
        org.joda.time.DateTime dateTime24 = mutableDateTime21.toDateTime();
        org.joda.time.DateTime dateTime26 = dateTime24.minusMonths((int) (short) 10);
        org.joda.time.DateTime dateTime28 = dateTime26.plusSeconds(26158);
        boolean boolean29 = dateMidnight19.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime21", (instant9.compareTo(mutableDateTime21) == 0) == instant9.equals(mutableDateTime21));
    }

    @Test
    public void test129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test129");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(0L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration7 = duration3.minus((org.joda.time.ReadableDuration) duration5);
        org.joda.time.Duration duration8 = duration1.minus((org.joda.time.ReadableDuration) duration5);
        java.lang.String str9 = duration1.toString();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration14 = duration11.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        mutableDateTime15.add((long) 'a');
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime15.yearOfCentury();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration26 = duration23.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration27 = duration20.minus((org.joda.time.ReadableDuration) duration26);
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration20);
        boolean boolean29 = duration14.isShorterThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration31 = duration20.minus((long) (byte) 0);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration32, readableInstant33);
        org.joda.time.Period period36 = period34.withDays((int) (byte) 1);
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours39 = duration38.toStandardHours();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        int int42 = dateTime41.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration38, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.Duration duration44 = period34.toDurationFrom((org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime46 = dateTime41.minusHours(16);
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime52 = dateTime50.withZoneRetainFields(dateTimeZone51);
        org.joda.time.LocalDate localDate53 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property54 = localDate53.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone56 = dateTimeZone55.toTimeZone();
        org.joda.time.DateTime dateTime57 = localDate53.toDateTimeAtCurrentTime(dateTimeZone55);
        int int58 = dateTime52.compareTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.DateTime dateTime60 = dateTime57.minusWeeks(44);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(15);
        org.joda.time.Chronology chronology65 = dateTime62.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.DateTimeField dateTimeField67 = chronology65.dayOfYear();
        org.joda.time.DateTime dateTime68 = dateTime57.withChronology(chronology65);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(readableInstant70, readableInstant71, periodType72);
        org.joda.time.DurationFieldType durationFieldType75 = periodType72.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType76 = periodType72.withMillisRemoved();
        org.joda.time.Period period77 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime68, readableDuration69, periodType76);
        org.joda.time.Period period78 = new org.joda.time.Period(0L, periodType76);
        org.joda.time.format.DateTimePrinter dateTimePrinter79 = null;
        org.joda.time.format.DateTimeParser dateTimeParser80 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter81 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter79, dateTimeParser80);
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.Instant instant84 = instant82.withMillis(0L);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.joda.time.DurationField durationField86 = chronology85.eras();
        long long90 = chronology85.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = dateTimeFormatter81.withChronology(chronology85);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod(3600000L, periodType76, chronology85);
        org.joda.time.Period period93 = duration31.toPeriodFrom((org.joda.time.ReadableInstant) dateTime46, periodType76);
        org.joda.time.PeriodType periodType94 = periodType76.withDaysRemoved();
        org.joda.time.Period period95 = duration1.toPeriod(periodType76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime41 and instant82", (dateTime41.compareTo(instant82) == 0) == dateTime41.equals(instant82));
    }

    @Test
    public void test130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test130");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration9);
        org.joda.time.Period period12 = period10.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime13.copy();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime13.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime18 = property17.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        org.joda.time.DurationFieldType durationFieldType28 = periodType25.getFieldType((int) (short) 0);
        java.lang.String str29 = periodType25.toString();
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.Period period34 = new org.joda.time.Period((long) 53, (long) (-1), periodType25, chronology33);
        org.joda.time.DateTimeField dateTimeField35 = dateTimeFieldType20.getField(chronology33);
        java.util.Locale locale36 = java.util.Locale.UK;
        java.lang.String str37 = locale36.getDisplayLanguage();
        int int38 = dateTimeField35.getMaximumTextLength(locale36);
        mutableDateTime19.setRounding(dateTimeField35);
        org.joda.time.Duration duration40 = period10.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime19);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.centuryOfEra();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime41.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime44.hourOfDay();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime44.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period((long) 100, 1L, periodType52);
        org.joda.time.Period period55 = period53.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime56 = localDateTime49.minus((org.joda.time.ReadablePeriod) period53);
        mutableDateTime41.add((org.joda.time.ReadablePeriod) period53, 0);
        org.joda.time.PeriodType periodType59 = period53.getPeriodType();
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(readableInstant63, readableInstant64, periodType65);
        org.joda.time.DurationFieldType durationFieldType68 = periodType65.getFieldType((int) (short) 0);
        java.lang.String str69 = periodType65.toString();
        org.joda.time.Instant instant70 = new org.joda.time.Instant();
        org.joda.time.Instant instant72 = instant70.withMillis(0L);
        org.joda.time.Chronology chronology73 = instant72.getChronology();
        org.joda.time.Period period74 = new org.joda.time.Period((long) 53, (long) (-1), periodType65, chronology73);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(readableInstant77, readableInstant78, periodType79);
        org.joda.time.DurationFieldType durationFieldType82 = periodType79.getFieldType((int) (short) 0);
        java.lang.String str83 = periodType79.toString();
        org.joda.time.Instant instant84 = new org.joda.time.Instant();
        org.joda.time.Instant instant86 = instant84.withMillis(0L);
        org.joda.time.Chronology chronology87 = instant86.getChronology();
        org.joda.time.Period period88 = new org.joda.time.Period((long) 53, (long) (-1), periodType79, chronology87);
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod((long) (short) 10, periodType65, chronology87);
        org.joda.time.DateTimeField dateTimeField90 = chronology87.weekOfWeekyear();
        org.joda.time.Period period91 = duration40.toPeriod(periodType59, chronology87);
        org.joda.time.DateTimeField dateTimeField92 = chronology87.weekyear();
        org.joda.time.DurationField durationField93 = chronology87.hours();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((long) 26237, (long) 3622, chronology87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and mutableDateTime41", (instant30.compareTo(mutableDateTime41) == 0) == instant30.equals(mutableDateTime41));
    }

    @Test
    public void test131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test131");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant16 = dateTime15.toInstant();
        boolean boolean17 = instant0.isBefore((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.MutableDateTime mutableDateTime18 = instant0.toMutableDateTimeISO();
        org.joda.time.Instant instant20 = instant0.withMillis((long) 37166968);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant12", (dateTime4.compareTo(instant12) == 0) == dateTime4.equals(instant12));
    }

    @Test
    public void test132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test132");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfYear();
        org.joda.time.DateTime dateTime5 = property4.withMinimumValue();
        org.joda.time.DateTime dateTime6 = dateTime5.withEarlierOffsetAtOverlap();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime12.yearOfCentury();
        mutableDateTime12.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period(readableDuration20, readableInstant21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) 100, 1L, periodType25);
        org.joda.time.Period period28 = period26.minusSeconds((-1));
        java.lang.String str29 = period26.toString();
        org.joda.time.Period period30 = period26.toPeriod();
        org.joda.time.PeriodType periodType31 = period26.getPeriodType();
        org.joda.time.Period period32 = period22.normalizedStandard(periodType31);
        org.joda.time.DurationFieldType durationFieldType33 = null;
        int int34 = periodType31.indexOf(durationFieldType33);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.eras();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.DurationField durationField41 = chronology38.eras();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType31, chronology38);
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime12.toMutableDateTime(chronology38);
        mutablePeriod9.setPeriod((long) 36946953, 960000L, chronology38);
        org.joda.time.MutableDateTime mutableDateTime46 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime46.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime49 = property47.set(45);
        org.joda.time.MutableDateTime mutableDateTime50 = property47.roundFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.eras();
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.now(chronology56);
        org.joda.time.DurationField durationField59 = chronology56.eras();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 44, chronology56);
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType51.getField(chronology56);
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 1L, periodType64);
        org.joda.time.Period period67 = period65.minusSeconds((-1));
        java.lang.String str68 = period65.toString();
        long long71 = chronology56.add((org.joda.time.ReadablePeriod) period65, (long) ' ', (int) 'a');
        org.joda.time.Period period73 = period65.minusHours((-292275054));
        org.joda.time.Period period75 = period73.minusHours(2000);
        int int76 = period73.getMinutes();
        org.joda.time.Period period77 = period73.toPeriod();
        mutableDateTime50.add((org.joda.time.ReadablePeriod) period77);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime50.minuteOfHour();
        org.joda.time.Duration duration80 = mutablePeriod9.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime50);
        int int81 = mutableDateTime50.getYearOfCentury();
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.Instant instant84 = instant82.withMillis(0L);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.joda.time.DurationField durationField86 = chronology85.eras();
        org.joda.time.LocalTime localTime87 = org.joda.time.LocalTime.now(chronology85);
        org.joda.time.DurationField durationField88 = chronology85.eras();
        org.joda.time.DateTimeField dateTimeField89 = chronology85.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField90 = chronology85.secondOfMinute();
        mutableDateTime50.setChronology(chronology85);
        org.joda.time.DateTime dateTime92 = dateTime5.withChronology(chronology85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant35", (dateTime1.compareTo(instant35) == 0) == dateTime1.equals(instant35));
    }

    @Test
    public void test133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test133");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant9 = dateTime1.toInstant();
        org.joda.time.DateTime dateTime12 = dateTime1.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.yearOfCentury();
        mutableDateTime13.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period29 = period27.minusSeconds((-1));
        java.lang.String str30 = period27.toString();
        org.joda.time.Period period31 = period27.toPeriod();
        org.joda.time.PeriodType periodType32 = period27.getPeriodType();
        org.joda.time.Period period33 = period23.normalizedStandard(periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = null;
        int int35 = periodType32.indexOf(durationFieldType34);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Chronology chronology39 = instant38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.eras();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology39);
        org.joda.time.DurationField durationField42 = chronology39.eras();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType32, chronology39);
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime13.toMutableDateTime(chronology39);
        mutableDateTime13.setDayOfYear(44);
        int int48 = mutableDateTime13.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) mutableDateTime13);
        mutablePeriod49.clear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant9", (dateTime1.compareTo(instant9) == 0) == dateTime1.equals(instant9));
    }

    @Test
    public void test134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test134");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        boolean boolean23 = mutablePeriod17.equals((java.lang.Object) dateTimeField22);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField33 = localDateTime31.getField((int) (byte) 0);
        long long35 = dateTimeField33.roundHalfEven((long) 1);
        int int36 = dateTime26.get(dateTimeField33);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) 'a');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime41, 53, locale45);
        java.lang.String str49 = locale45.getExtension('a');
        java.lang.String str50 = dateTimeField22.getAsText((long) 36950209, locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(97L, chronology7, locale45, (java.lang.Integer) 36950209, 443);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withFieldAdded(durationFieldType57, (int) (short) -1);
        int int60 = localDateTime59.getEra();
        java.io.IOException iOException63 = new java.io.IOException("");
        java.io.IOException iOException64 = new java.io.IOException("2022-02-22T10:15:44.882", (java.lang.Throwable) iOException63);
        boolean boolean65 = localDateTime59.equals((java.lang.Object) iOException64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime59.withMillisOfDay(26150);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        long long72 = dateTimeZone68.getMillisKeepLocal(dateTimeZone70, (long) 44);
        java.lang.String str74 = dateTimeZone70.getName(0L);
        org.joda.time.DateTime dateTime75 = localDateTime59.toDateTime(dateTimeZone70);
        org.joda.time.Chronology chronology76 = chronology7.withZone(dateTimeZone70);
        org.joda.time.DurationField durationField77 = chronology7.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField77, and durationField8", !(durationField8.compareTo(durationField77) == 0) || (Math.signum(durationField8.compareTo(durationField8)) == Math.signum(durationField77.compareTo(durationField8))));
    }

    @Test
    public void test135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test135");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.dayOfMonth();
        org.joda.time.LocalTime localTime35 = new org.joda.time.LocalTime(chronology26);
        org.joda.time.Chronology chronology37 = null;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.lang.String str40 = locale38.getDisplayVariant(locale39);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology37, locale39, (java.lang.Integer) 10);
        long long45 = dateTimeParserBucket42.computeMillis(true, "deu");
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType47 = dateTimeFieldType46.getDurationType();
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period53 = duration52.toPeriod();
        org.joda.time.Duration duration56 = duration52.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant57 = instant50.plus((org.joda.time.ReadableDuration) duration56);
        long long58 = instant57.getMillis();
        org.joda.time.Chronology chronology59 = instant57.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.months();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType46.getField(chronology59);
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.lang.String str65 = locale63.getExtension('a');
        dateTimeParserBucket42.saveField(dateTimeFieldType46, "2022-02-22T07:16:08.541Z", locale63);
        org.joda.time.LocalTime.Property property67 = localTime35.property(dateTimeFieldType46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField27 and durationField60", Math.signum(durationField27.compareTo(durationField60)) == -Math.signum(durationField60.compareTo(durationField27)));
    }

    @Test
    public void test136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test136");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int6 = localDateTime4.get(dateTimeFieldType5);
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField13 = localDateTime11.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray14 = localDateTime11.getFields();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime11.withDayOfWeek(1);
        boolean boolean17 = localDateTime4.isEqual((org.joda.time.ReadablePartial) localDateTime11);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.plus(readablePeriod18);
        int int20 = localDateTime11.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property24 = localDateTime21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField25 = property24.getField();
        boolean boolean27 = property24.equals((java.lang.Object) 10L);
        long long28 = property24.remainder();
        java.lang.String str29 = property24.getAsText();
        java.util.Locale locale33 = new java.util.Locale("2022-02-22T10:15:47.721", "53", "2022-02-22T07:15:46.416Z");
        int int34 = property24.getMaximumShortTextLength(locale33);
        org.joda.time.LocalDateTime localDateTime35 = property24.roundFloorCopy();
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime11, (org.joda.time.ReadablePartial) localDateTime35, periodType36);
        org.joda.time.Chronology chronology38 = localDateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField39 = chronology38.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime43.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime46 = property44.set(45);
        org.joda.time.MutableDateTime mutableDateTime47 = property44.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime49 = property44.add(45);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        long long53 = dateTimeZone50.previousTransition(100L);
        int int55 = dateTimeZone50.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime56 = mutableDateTime49.toDateTime(dateTimeZone50);
        mutableDateTime42.setZoneRetainFields(dateTimeZone50);
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime60.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField64 = property63.getField();
        mutableDateTime42.setRounding(dateTimeField64);
        org.joda.time.Instant instant66 = new org.joda.time.Instant();
        org.joda.time.Instant instant68 = instant66.withMillis(0L);
        org.joda.time.Chronology chronology69 = instant68.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.eras();
        long long74 = chronology69.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField75 = chronology69.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime76 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime78 = localDateTime76.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property79 = localDateTime76.hourOfDay();
        org.joda.time.DateTimeField dateTimeField80 = property79.getField();
        java.lang.String str81 = property79.toString();
        org.joda.time.LocalDateTime localDateTime83 = property79.addToCopy(100L);
        org.joda.time.LocalDateTime localDateTime85 = localDateTime83.minusMinutes(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType86 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType87 = dateTimeFieldType86.getDurationType();
        org.joda.time.LocalDateTime.Property property88 = localDateTime85.property(dateTimeFieldType86);
        java.util.Locale.Category category89 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale90 = java.util.Locale.getDefault(category89);
        java.util.Locale locale91 = java.util.Locale.getDefault(category89);
        java.util.Locale locale92 = java.util.Locale.KOREAN;
        java.lang.String str93 = locale91.getDisplayScript(locale92);
        int int94 = property88.getMaximumShortTextLength(locale91);
        int int95 = dateTimeField75.getMaximumTextLength(locale91);
        int int96 = dateTimeField64.getMaximumShortTextLength(locale91);
        java.util.Locale locale97 = locale91.stripExtensions();
        java.lang.String str98 = dateTimeField39.getAsShortText(1755265111796250L, locale91);
        org.joda.time.DurationField durationField99 = dateTimeField39.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField70, durationField99, and durationField70", !(durationField70.compareTo(durationField99) == 0) || (Math.signum(durationField70.compareTo(durationField70)) == Math.signum(durationField99.compareTo(durationField70))));
    }

    @Test
    public void test137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test137");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        long long9 = chronology4.add(0L, (long) 2022, (int) '4');
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration10, readableInstant11);
        int[] intArray15 = chronology4.get((org.joda.time.ReadablePeriod) period12, (long) 0, (long) 48);
        org.joda.time.Period period17 = period12.withDays((int) 'a');
        org.joda.time.Hours hours18 = period17.toStandardHours();
        org.joda.time.PeriodType periodType19 = period17.getPeriodType();
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = dateTime23.withZoneRetainFields(dateTimeZone24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTime dateTime30 = localDate26.toDateTimeAtCurrentTime(dateTimeZone28);
        int int31 = dateTime25.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime dateTime33 = dateTime30.withDayOfMonth(20);
        org.joda.time.DateTime.Property property34 = dateTime33.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale38 = java.util.Locale.GERMAN;
        java.lang.String str39 = locale38.getDisplayName();
        java.lang.String str40 = dateTimeZone36.getName(100L, locale38);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(948227L, dateTimeZone36);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.year();
        mutableDateTime41.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(readableInstant48, readableInstant49, periodType50);
        org.joda.time.DurationFieldType durationFieldType53 = periodType50.getFieldType((int) (short) 0);
        java.lang.String str54 = periodType50.toString();
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Chronology chronology58 = instant57.getChronology();
        org.joda.time.Period period59 = new org.joda.time.Period((long) 53, (long) (-1), periodType50, chronology58);
        org.joda.time.DateTimeField dateTimeField60 = dateTimeFieldType45.getField(chronology58);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology61);
        org.joda.time.DateTime dateTime64 = dateTime62.plusMinutes(15);
        org.joda.time.Chronology chronology65 = dateTime62.getChronology();
        java.lang.String str66 = chronology65.toString();
        org.joda.time.DateTimeField dateTimeField67 = dateTimeFieldType45.getField(chronology65);
        org.joda.time.DurationField durationField68 = chronology65.centuries();
        org.joda.time.DateTimeField dateTimeField69 = chronology65.millisOfDay();
        mutableDateTime41.setChronology(chronology65);
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime33.toMutableDateTime(chronology65);
        org.joda.time.DurationField durationField72 = chronology65.months();
        org.joda.time.Period period73 = new org.joda.time.Period((long) 274, 1645514162999L, chronology65);
        org.joda.time.DateTimeField dateTimeField74 = chronology65.yearOfCentury();
        org.joda.time.Period period75 = new org.joda.time.Period(11850087L, periodType19, chronology65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField68", Math.signum(durationField5.compareTo(durationField68)) == -Math.signum(durationField68.compareTo(durationField5)));
    }

    @Test
    public void test138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test138");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField9 = chronology3.year();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology3);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.yearOfCentury();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1, chronology13);
        int int15 = dateTime14.getMinuteOfDay();
        int int16 = dateTime14.getEra();
        int int17 = dateTime14.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology20, locale22);
        java.lang.Object obj25 = dateTimeParserBucket24.saveState();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalTime localTime28 = new org.joda.time.LocalTime((long) (short) 100, chronology27);
        org.joda.time.DurationFieldType durationFieldType29 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str30 = durationFieldType29.getName();
        boolean boolean31 = localTime28.isSupported(durationFieldType29);
        boolean boolean32 = dateTimeParserBucket24.restoreState((java.lang.Object) boolean31);
        java.lang.Integer int33 = dateTimeParserBucket24.getOffsetInteger();
        org.joda.time.Chronology chronology34 = dateTimeParserBucket24.getChronology();
        dateTimeParserBucket24.setOffset((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str38 = dateTimeFieldType37.getName();
        org.joda.time.DurationFieldType durationFieldType39 = dateTimeFieldType37.getRangeDurationType();
        dateTimeParserBucket24.saveField(dateTimeFieldType37, 20);
        int int42 = dateTime14.get(dateTimeFieldType37);
        mutableDateTime10.set(dateTimeFieldType37, 97);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale48);
        java.lang.Object obj51 = dateTimeParserBucket50.saveState();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((long) (short) 100, chronology53);
        org.joda.time.DurationFieldType durationFieldType55 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str56 = durationFieldType55.getName();
        boolean boolean57 = localTime54.isSupported(durationFieldType55);
        boolean boolean58 = dateTimeParserBucket50.restoreState((java.lang.Object) boolean57);
        org.joda.time.Chronology chronology59 = dateTimeParserBucket50.getChronology();
        long long62 = dateTimeParserBucket50.computeMillis(true, "");
        int int63 = dateTimeParserBucket50.getOffset();
        java.lang.Object obj64 = dateTimeParserBucket50.saveState();
        java.lang.Integer int65 = dateTimeParserBucket50.getPivotYear();
        long long67 = dateTimeParserBucket50.computeMillis(false);
        java.lang.Integer int68 = dateTimeParserBucket50.getPivotYear();
        org.joda.time.Chronology chronology69 = dateTimeParserBucket50.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.hours();
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType37.getField(chronology69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField70", Math.signum(durationField4.compareTo(durationField70)) == -Math.signum(durationField70.compareTo(durationField4)));
    }

    @Test
    public void test139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test139");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property6.addToCopy((long) 61);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((-229564796800L));
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.DateTime dateTime14 = dateTime9.withWeekyear(0);
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtCurrentTime(dateTimeZone17);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone17);
        org.joda.time.DateTime dateTime21 = dateTime9.withZoneRetainFields(dateTimeZone17);
        org.joda.time.DateTime dateTime22 = org.joda.time.DateTime.now(dateTimeZone17);
        org.joda.time.DateTime.Property property23 = dateTime22.millisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime19", (dateTime1.compareTo(dateTime19) == 0) == dateTime1.equals(dateTime19));
    }

    @Test
    public void test140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test140");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        long long7 = mutableDateTime6.getMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean15 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration14);
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (byte) 0);
        long long26 = dateTimeField24.roundHalfEven((long) 1);
        int int27 = dateTime17.get(dateTimeField24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) 'a');
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getDisplayName();
        java.lang.String str38 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime32, 53, locale36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusMillis((int) (byte) 0);
        int int52 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        boolean boolean53 = duration9.equals((java.lang.Object) int52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        int int56 = dateTime55.getSecondOfMinute();
        int int57 = dateTime55.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant58, readableInstant59, periodType60);
        mutablePeriod61.setYears((int) '#');
        mutablePeriod61.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime66 = dateTime55.plus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration9);
        java.lang.Object obj69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(obj69);
        boolean boolean72 = dateTime70.isBefore((long) 7);
        java.lang.String str73 = dateTime70.toString();
        org.joda.time.DateTime dateTime75 = dateTime70.minus((long) 7);
        org.joda.time.Instant instant76 = new org.joda.time.Instant();
        org.joda.time.Instant instant78 = instant76.withMillis(0L);
        org.joda.time.Chronology chronology79 = instant78.getChronology();
        org.joda.time.DateTime dateTime80 = dateTime70.toDateTime(chronology79);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTime dateTime83 = dateTime81.minusDays(2100);
        int int84 = mutableDateTime6.compareTo((org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.MutableDateTime.Property property85 = mutableDateTime6.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant76", (dateTime17.compareTo(instant76) == 0) == dateTime17.equals(instant76));
    }

    @Test
    public void test141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test141");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours21 = duration20.toStandardHours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration17.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean47 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant48 = instant15.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.MutableDateTime mutableDateTime52 = org.joda.time.MutableDateTime.now();
        mutableDateTime52.add((long) 'a');
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime52.yearOfCentury();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration63 = duration60.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration64 = duration57.minus((org.joda.time.ReadableDuration) duration63);
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration57);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime52.centuryOfEra();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology67);
        int int69 = dateTime68.getYearOfCentury();
        org.joda.time.DateTime dateTime71 = dateTime68.withSecondOfMinute(53);
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period74 = duration73.toPeriod();
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration79 = duration76.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration80 = duration73.minus((org.joda.time.ReadableDuration) duration79);
        org.joda.time.ReadableInstant readableInstant81 = null;
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(readableInstant81, readableInstant82, periodType83);
        org.joda.time.DurationFieldType durationFieldType86 = periodType83.getFieldType((int) (short) 0);
        java.lang.String str87 = periodType83.toString();
        org.joda.time.Period period88 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime68, (org.joda.time.ReadableDuration) duration73, periodType83);
        mutableDateTime52.add((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration91 = duration50.withDurationAdded((org.joda.time.ReadableDuration) duration73, 0);
        org.joda.time.Instant instant92 = instant48.minus((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Duration duration95 = new org.joda.time.Duration((long) 99, (long) 26180329);
        org.joda.time.Instant instant97 = instant48.withDurationAdded((org.joda.time.ReadableDuration) duration95, 62289);
        org.joda.time.Seconds seconds98 = duration95.toStandardSeconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime23", (instant4.compareTo(dateTime23) == 0) == instant4.equals(dateTime23));
    }

    @Test
    public void test142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test142");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.TimeOfDay timeOfDay14 = dateTime13.toTimeOfDay();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property17 = localDate16.monthOfYear();
        java.util.Date date18 = localDate16.toDate();
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.Period period24 = period22.minusSeconds((-1));
        java.lang.String str25 = period22.toString();
        org.joda.time.Period period27 = period22.plusMillis(15);
        org.joda.time.LocalDate localDate28 = localDate16.plus((org.joda.time.ReadablePeriod) period27);
        org.joda.time.Period period30 = period27.minusWeeks(26197957);
        org.joda.time.Weeks weeks31 = period30.toStandardWeeks();
        java.lang.Object obj32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(obj32);
        boolean boolean35 = dateTime33.isBefore((long) 7);
        java.lang.String str36 = dateTime33.toString();
        org.joda.time.DateTime dateTime38 = dateTime33.minus((long) 7);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.DateTime dateTime43 = dateTime33.toDateTime(chronology42);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTimeField dateTimeField45 = chronology42.dayOfWeek();
        org.joda.time.Period period46 = new org.joda.time.Period((java.lang.Object) period30, chronology42);
        org.joda.time.DateTime dateTime47 = dateTime13.withChronology(chronology42);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant5", (dateTime1.compareTo(instant5) == 0) == dateTime1.equals(instant5));
    }

    @Test
    public void test143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test143");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate.Property property6 = localDate5.centuryOfEra();
        org.joda.time.Interval interval7 = localDate5.toInterval();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod10.clear();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration17 = duration13.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        org.joda.time.DateTime dateTime21 = dateTime19.plusMinutes(15);
        org.joda.time.Interval interval22 = duration17.toIntervalTo((org.joda.time.ReadableInstant) dateTime21);
        mutablePeriod10.setPeriod((org.joda.time.ReadableInterval) interval22);
        mutablePeriod10.setMillis((int) ' ');
        mutablePeriod10.setPeriod((long) 2);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.LocalDate localDate31 = property29.roundCeilingCopy();
        org.joda.time.LocalDate localDate33 = localDate31.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate35 = localDate31.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate37 = localDate35.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        mutableDateTime38.add((long) 'a');
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime38.yearOfCentury();
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period44 = duration43.toPeriod();
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration49 = duration46.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration50 = duration43.minus((org.joda.time.ReadableDuration) duration49);
        mutableDateTime38.add((org.joda.time.ReadableDuration) duration43);
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime38.centuryOfEra();
        mutableDateTime38.addHours((int) (byte) 10);
        int int55 = mutableDateTime38.getSecondOfDay();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property57 = localDate56.monthOfYear();
        org.joda.time.LocalDate.Property property58 = localDate56.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(readableInstant59, readableInstant60, periodType61);
        org.joda.time.DurationFieldType durationFieldType64 = periodType61.getFieldType((int) (short) 0);
        boolean boolean65 = localDate56.isSupported(durationFieldType64);
        mutableDateTime38.add(durationFieldType64, (-292275054));
        org.joda.time.LocalDate localDate69 = localDate35.withFieldAdded(durationFieldType64, 53);
        boolean boolean70 = mutablePeriod10.isSupported(durationFieldType64);
        boolean boolean71 = localDate5.isSupported(durationFieldType64);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(readableInstant75, readableInstant76, periodType77);
        org.joda.time.DurationFieldType durationFieldType80 = periodType77.getFieldType((int) (short) 0);
        java.lang.String str81 = periodType77.toString();
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.Instant instant84 = instant82.withMillis(0L);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.joda.time.Period period86 = new org.joda.time.Period((long) 53, (long) (-1), periodType77, chronology85);
        org.joda.time.DateTimeField dateTimeField87 = dateTimeFieldType72.getField(chronology85);
        org.joda.time.DateTimeField dateTimeField88 = chronology85.millisOfDay();
        org.joda.time.DateTimeZone dateTimeZone89 = chronology85.getZone();
        boolean boolean90 = durationFieldType64.isSupported(chronology85);
        org.joda.time.DateTimeField dateTimeField91 = chronology85.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime19 and instant82", (dateTime19.compareTo(instant82) == 0) == dateTime19.equals(instant82));
    }

    @Test
    public void test144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test144");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getLeapDurationField();
        org.joda.time.LocalTime localTime6 = property4.roundHalfEvenCopy();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant16 = instant9.plus((org.joda.time.ReadableDuration) duration15);
        long long17 = instant16.getMillis();
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.add((long) 'a');
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str26 = duration25.toString();
        boolean boolean27 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Hours hours28 = duration23.toStandardHours();
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration23, 20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime32.toString(dateTimeFormatter34);
        org.joda.time.DateTime dateTime37 = dateTime32.minusMonths(22);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        org.joda.time.DateTime dateTime43 = dateTime32.withChronology(chronology41);
        org.joda.time.Period period44 = duration23.toPeriod(chronology41);
        org.joda.time.Instant instant46 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration23, 16);
        boolean boolean47 = localTime6.equals((java.lang.Object) instant16);
        org.joda.time.MutableDateTime mutableDateTime48 = instant16.toMutableDateTime();
        boolean boolean50 = instant16.isAfter(94454244074519L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime32", (instant7.compareTo(dateTime32) == 0) == instant7.equals(dateTime32));
    }

    @Test
    public void test145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test145");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        long long16 = dateTimeZone11.previousTransition(1068279496L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime13", (mutableDateTime0.compareTo(dateTime13) == 0) == mutableDateTime0.equals(dateTime13));
    }

    @Test
    public void test146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test146");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        long long7 = mutableDateTime6.getMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean15 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration14);
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (byte) 0);
        long long26 = dateTimeField24.roundHalfEven((long) 1);
        int int27 = dateTime17.get(dateTimeField24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) 'a');
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getDisplayName();
        java.lang.String str38 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime32, 53, locale36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusMillis((int) (byte) 0);
        int int52 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        boolean boolean53 = duration9.equals((java.lang.Object) int52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        int int56 = dateTime55.getSecondOfMinute();
        int int57 = dateTime55.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant58, readableInstant59, periodType60);
        mutablePeriod61.setYears((int) '#');
        mutablePeriod61.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime66 = dateTime55.plus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration9);
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime.Property property71 = dateTime70.millisOfSecond();
        org.joda.time.DateTime dateTime72 = dateTime70.toDateTime();
        int int73 = dateTime70.getMinuteOfDay();
        org.joda.time.Interval interval74 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime70);
        org.joda.time.Minutes minutes75 = duration9.toStandardMinutes();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone78 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime79 = dateTime77.withZoneRetainFields(dateTimeZone78);
        boolean boolean81 = dateTime79.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology82 = dateTime79.getChronology();
        org.joda.time.Instant instant83 = new org.joda.time.Instant();
        org.joda.time.Instant instant85 = instant83.withMillis(0L);
        org.joda.time.Chronology chronology86 = instant85.getChronology();
        org.joda.time.DurationField durationField87 = chronology86.eras();
        org.joda.time.LocalTime localTime88 = org.joda.time.LocalTime.now(chronology86);
        org.joda.time.DateTime dateTime89 = dateTime79.toDateTime(chronology86);
        boolean boolean90 = duration9.equals((java.lang.Object) chronology86);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant83", (dateTime17.compareTo(instant83) == 0) == dateTime17.equals(instant83));
    }

    @Test
    public void test147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test147");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration5 = duration1.minus((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str10 = duration9.toString();
        boolean boolean11 = duration7.isShorterThan((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration17 = duration13.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration22 = duration19.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean23 = duration17.isLongerThan((org.joda.time.ReadableDuration) duration19);
        boolean boolean24 = duration9.isEqual((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration25 = duration1.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.add((long) 'a');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.yearOfCentury();
        mutableDateTime26.addSeconds(0);
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours34 = duration33.toStandardHours();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.DateTime dateTime44 = instant43.toDateTime();
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType47 = org.joda.time.PeriodType.months();
        org.joda.time.Period period48 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime44, (org.joda.time.ReadableInstant) dateTime46, periodType47);
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime40, periodType47);
        org.joda.time.Duration duration50 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime26, (org.joda.time.ReadableInstant) dateTime40);
        mutableDateTime26.addMinutes(28);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearWeekDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((-29912203583046059L), periodType54);
        org.joda.time.Period period56 = duration1.toPeriodFrom((org.joda.time.ReadableInstant) mutableDateTime26, periodType54);
        int int57 = mutableDateTime26.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and instant41", (dateTime36.compareTo(instant41) == 0) == dateTime36.equals(instant41));
    }

    @Test
    public void test148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test148");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant9 = dateTime1.toInstant();
        org.joda.time.DateTime dateTime12 = dateTime1.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.yearOfCentury();
        mutableDateTime13.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period(readableDuration21, readableInstant22);
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period29 = period27.minusSeconds((-1));
        java.lang.String str30 = period27.toString();
        org.joda.time.Period period31 = period27.toPeriod();
        org.joda.time.PeriodType periodType32 = period27.getPeriodType();
        org.joda.time.Period period33 = period23.normalizedStandard(periodType32);
        org.joda.time.DurationFieldType durationFieldType34 = null;
        int int35 = periodType32.indexOf(durationFieldType34);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Chronology chronology39 = instant38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.eras();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology39);
        org.joda.time.DurationField durationField42 = chronology39.eras();
        org.joda.time.DateTimeField dateTimeField43 = chronology39.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType32, chronology39);
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime13.toMutableDateTime(chronology39);
        mutableDateTime13.setDayOfYear(44);
        int int48 = mutableDateTime13.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime12, (org.joda.time.ReadableInstant) mutableDateTime13);
        org.joda.time.DateTime dateTime50 = dateTime12.toDateTimeISO();
        org.joda.time.DateTime.Property property51 = dateTime12.weekyear();
        org.joda.time.DateTime dateTime52 = property51.withMinimumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant9", (dateTime1.compareTo(instant9) == 0) == dateTime1.equals(instant9));
    }

    @Test
    public void test149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test149");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getLeapDurationField();
        java.lang.String str6 = property4.getName();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale10 = java.util.Locale.GERMAN;
        java.lang.String str11 = locale10.getDisplayName();
        java.lang.String str12 = dateTimeZone8.getName(100L, locale10);
        org.joda.time.LocalTime localTime13 = property4.setCopy("615", locale10);
        int int14 = property4.getMinimumValueOverall();
        org.joda.time.LocalTime localTime15 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime16 = property4.withMaximumValue();
        org.joda.time.LocalTime localTime18 = property4.addNoWrapToCopy(62277);
        org.joda.time.DurationField durationField19 = property4.getRangeDurationField();
        org.joda.time.LocalTime localTime20 = property4.roundHalfEvenCopy();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration26 = duration23.withDurationAdded((long) (short) 100, (int) ' ');
        long long27 = duration26.getMillis();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.months();
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableInstant) dateTime37, periodType38);
        boolean boolean40 = dateTime31.isBefore((org.joda.time.ReadableInstant) dateTime35);
        int int41 = dateTime35.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableInstant42, readableInstant43, periodType44);
        org.joda.time.PeriodType periodType46 = periodType44.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) dateTime35, periodType44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusMinutes(15);
        org.joda.time.Chronology chronology52 = dateTime49.getChronology();
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.eras();
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.now(chronology56);
        org.joda.time.DurationField durationField59 = chronology56.eras();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.hourOfDay();
        org.joda.time.DateTime dateTime61 = dateTime49.withChronology(chronology56);
        org.joda.time.MutableDateTime mutableDateTime62 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime64 = property63.getMutableDateTime();
        boolean boolean65 = dateTime61.isBefore((org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.Instant instant66 = new org.joda.time.Instant();
        org.joda.time.Instant instant68 = instant66.withMillis(0L);
        org.joda.time.Chronology chronology69 = instant68.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.eras();
        long long74 = chronology69.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField75 = chronology69.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField76 = chronology69.minuteOfDay();
        mutableDateTime64.setChronology(chronology69);
        org.joda.time.DateTime dateTime78 = dateTime35.toDateTime(chronology69);
        org.joda.time.ReadableDuration readableDuration79 = null;
        org.joda.time.ReadableInstant readableInstant80 = null;
        org.joda.time.Period period81 = new org.joda.time.Period(readableDuration79, readableInstant80);
        org.joda.time.Period period83 = period81.withDays((int) (byte) 1);
        org.joda.time.Period period85 = period83.minusWeeks(100);
        org.joda.time.Period period87 = period83.plusWeeks((int) (short) -1);
        long long90 = chronology69.add((org.joda.time.ReadablePeriod) period87, 86403200L, 443);
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((-3L), chronology69);
        boolean boolean92 = localTime20.equals((java.lang.Object) (-3L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField19 and durationField57", Math.signum(durationField19.compareTo(durationField57)) == -Math.signum(durationField57.compareTo(durationField19)));
    }

    @Test
    public void test150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test150");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(chronology37);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.yearOfCentury();
        mutableDateTime40.setMillisOfDay(26184);
        java.lang.Object obj44 = null;
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        mutableDateTime45.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime45.copy();
        mutableDateTime45.setDate((long) '#');
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean54 = localDate51.isSupported(dateTimeFieldType53);
        int int55 = localDate51.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight57 = localDate51.toDateMidnight(dateTimeZone56);
        org.joda.time.DateTime dateTime58 = mutableDateTime45.toDateTime(dateTimeZone56);
        org.joda.time.LocalDate localDate59 = org.joda.time.LocalDate.now(dateTimeZone56);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime(obj44, dateTimeZone56);
        java.lang.String str62 = dateTimeZone56.getName(105144L);
        java.lang.Object obj63 = null;
        boolean boolean64 = dateTimeZone56.equals(obj63);
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone56);
        org.joda.time.LocalDate localDate66 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property67 = localDate66.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean69 = localDate66.isSupported(dateTimeFieldType68);
        org.joda.time.Instant instant71 = new org.joda.time.Instant();
        org.joda.time.Instant instant73 = instant71.withMillis(0L);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period76 = duration75.toPeriod();
        org.joda.time.Duration duration79 = duration75.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant80 = instant73.plus((org.joda.time.ReadableDuration) duration79);
        long long81 = instant80.getMillis();
        org.joda.time.Chronology chronology82 = instant80.getChronology();
        org.joda.time.DurationField durationField83 = chronology82.months();
        org.joda.time.Period period84 = new org.joda.time.Period((-205878993L), chronology82);
        org.joda.time.DateTimeField dateTimeField85 = chronology82.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField86 = dateTimeFieldType68.getField(chronology82);
        org.joda.time.DateTimeField dateTimeField87 = chronology82.weekOfWeekyear();
        org.joda.time.DateTime dateTime88 = dateTime65.withChronology(chronology82);
        mutableDateTime40.setDate((org.joda.time.ReadableInstant) dateTime88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField83", Math.signum(durationField22.compareTo(durationField83)) == -Math.signum(durationField83.compareTo(durationField22)));
    }

    @Test
    public void test151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test151");
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableDuration1, readableInstant2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period9 = period7.minusSeconds((-1));
        java.lang.String str10 = period7.toString();
        org.joda.time.Period period11 = period7.toPeriod();
        org.joda.time.PeriodType periodType12 = period7.getPeriodType();
        org.joda.time.Period period13 = period3.normalizedStandard(periodType12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.eras();
        long long22 = chronology17.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField23 = chronology17.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(44L, periodType12, chronology17);
        org.joda.time.DateTimeField dateTimeField25 = chronology17.halfdayOfDay();
        int int27 = dateTimeField25.getMaximumValue((long) 33);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now();
        mutableDateTime28.add((long) 'a');
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime28.yearOfCentury();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration39 = duration36.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration40 = duration33.minus((org.joda.time.ReadableDuration) duration39);
        mutableDateTime28.add((org.joda.time.ReadableDuration) duration33);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime28.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime44 = property42.roundFloor();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMinutes(15);
        org.joda.time.Chronology chronology50 = dateTime47.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.hours();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(1440L, chronology50);
        org.joda.time.DateTimeField dateTimeField53 = chronology50.hourOfDay();
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime44, chronology50);
        org.joda.time.LocalDateTime localDateTime55 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property58 = localDateTime55.hourOfDay();
        org.joda.time.DateTimeField dateTimeField59 = property58.getField();
        int int60 = property58.get();
        java.util.Locale locale61 = java.util.Locale.getDefault();
        java.lang.String str62 = property58.getAsShortText(locale61);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.minuteOfDay();
        int int69 = localDateTime67.get(dateTimeFieldType68);
        java.util.Locale locale70 = java.util.Locale.TRADITIONAL_CHINESE;
        boolean boolean71 = localDateTime67.equals((java.lang.Object) locale70);
        java.lang.String str72 = locale61.getDisplayVariant(locale70);
        java.lang.String str73 = locale61.getScript();
        java.lang.String str74 = dateTimeField25.getAsShortText((org.joda.time.ReadablePartial) localTime54, locale61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField18 and durationField51", Math.signum(durationField18.compareTo(durationField51)) == -Math.signum(durationField51.compareTo(durationField18)));
    }

    @Test
    public void test152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test152");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime4.plus(0L);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTime(dateTimeZone11);
        int int14 = dateTimeZone11.getStandardOffset(955L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test153");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(15);
        org.joda.time.Chronology chronology6 = dateTime3.getChronology();
        java.lang.String str7 = chronology6.toString();
        org.joda.time.LocalTime localTime8 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology6);
        org.joda.time.DurationField durationField9 = chronology6.minutes();
        org.joda.time.MutablePeriod mutablePeriod10 = new org.joda.time.MutablePeriod(0L, chronology6);
        int int11 = mutablePeriod10.getYears();
        int int12 = mutablePeriod10.getSeconds();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration19 = duration16.withDurationAdded((long) (short) 100, (int) ' ');
        long long20 = duration19.getMillis();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.months();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime30, periodType31);
        boolean boolean33 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        int int34 = dateTime28.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime28, periodType37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes(15);
        org.joda.time.Chronology chronology45 = dateTime42.getChronology();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.hourOfDay();
        org.joda.time.DateTime dateTime54 = dateTime42.withChronology(chronology49);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime55.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime57 = property56.getMutableDateTime();
        boolean boolean58 = dateTime54.isBefore((org.joda.time.ReadableInstant) mutableDateTime57);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.Chronology chronology62 = instant61.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.eras();
        long long67 = chronology62.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField68 = chronology62.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.minuteOfDay();
        mutableDateTime57.setChronology(chronology62);
        org.joda.time.DateTime dateTime71 = dateTime28.toDateTime(chronology62);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.ReadableInstant readableInstant73 = null;
        org.joda.time.Period period74 = new org.joda.time.Period(readableDuration72, readableInstant73);
        org.joda.time.Period period76 = period74.withDays((int) (byte) 1);
        org.joda.time.Period period78 = period76.minusWeeks(100);
        org.joda.time.Period period80 = period76.plusWeeks((int) (short) -1);
        long long83 = chronology62.add((org.joda.time.ReadablePeriod) period80, 86403200L, 443);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((-3L), chronology62);
        mutablePeriod10.setPeriod(0L, chronology62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField50", Math.signum(durationField9.compareTo(durationField50)) == -Math.signum(durationField50.compareTo(durationField9)));
    }

    @Test
    public void test154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test154");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        org.joda.time.LocalTime localTime6 = property4.roundFloorCopy();
        org.joda.time.LocalTime localTime7 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime8 = property4.roundHalfFloorCopy();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.PeriodType periodType14 = periodType12.withHoursRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.DurationField durationField21 = chronology20.eras();
        org.joda.time.LocalTime localTime22 = org.joda.time.LocalTime.now(chronology20);
        org.joda.time.DurationField durationField23 = chronology20.eras();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 44, chronology20);
        org.joda.time.DateTimeField dateTimeField25 = dateTimeFieldType15.getField(chronology20);
        org.joda.time.DateTimeField dateTimeField26 = chronology20.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (-292275054), periodType12, chronology20);
        org.joda.time.PeriodType periodType28 = periodType12.withMonthsRemoved();
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        mutableDateTime29.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime29.copy();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime29.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime34 = property33.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime36 = property33.add((long) (byte) 10);
        int int37 = mutableDateTime36.getCenturyOfEra();
        mutableDateTime36.setMinuteOfDay(1424);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(readableInstant43, readableInstant44, periodType45);
        org.joda.time.DurationFieldType durationFieldType48 = periodType45.getFieldType((int) (short) 0);
        java.lang.String str49 = periodType45.toString();
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.Chronology chronology53 = instant52.getChronology();
        org.joda.time.Period period54 = new org.joda.time.Period((long) 53, (long) (-1), periodType45, chronology53);
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType40.getField(chronology53);
        java.util.Locale locale56 = java.util.Locale.UK;
        java.lang.String str57 = locale56.getDisplayLanguage();
        int int58 = dateTimeField55.getMaximumTextLength(locale56);
        long long60 = dateTimeField55.roundCeiling(949680L);
        mutableDateTime36.setRounding(dateTimeField55);
        boolean boolean62 = periodType12.equals((java.lang.Object) mutableDateTime36);
        org.joda.time.DateTimeField dateTimeField63 = mutableDateTime36.getRoundingField();
        int int64 = property4.compareTo((org.joda.time.ReadableInstant) mutableDateTime36);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField21", Math.signum(durationField5.compareTo(durationField21)) == -Math.signum(durationField21.compareTo(durationField5)));
    }

    @Test
    public void test155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test155");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime13 = property9.set(1);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        int int17 = dateTime15.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime15.withEarlierOffsetAtOverlap();
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.MutableDateTime mutableDateTime20 = dateTime18.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        boolean boolean22 = dateTimeZone21.isFixed();
        mutableDateTime20.setZoneRetainFields(dateTimeZone21);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime13.toMutableDateTime(dateTimeZone21);
        org.joda.time.LocalDate localDate25 = org.joda.time.LocalDate.now(dateTimeZone21);
        java.lang.Object obj27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(obj27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.LocalDate localDate32 = dateTime28.toLocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.dayOfMonth();
        java.util.Date date34 = localDate32.toDate();
        org.joda.time.LocalDate.Property property35 = localDate32.dayOfYear();
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = property35.getAsText(locale36);
        java.lang.String str38 = dateTimeZone21.getShortName(360000000L, locale36);
        java.lang.String str39 = property4.getAsText(locale36);
        org.joda.time.LocalDate localDate40 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property41 = localDate40.era();
        org.joda.time.LocalDate.Property property42 = localDate40.dayOfWeek();
        org.joda.time.LocalDate localDate44 = property42.addWrapFieldToCopy(26274169);
        org.joda.time.DurationField durationField45 = property42.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and mutableDateTime24", (mutableDateTime5.compareTo(mutableDateTime24) == 0) == mutableDateTime5.equals(mutableDateTime24));
    }

    @Test
    public void test156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test156");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        long long8 = chronology3.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = chronology3.secondOfMinute();
        boolean boolean10 = dateTimeField9.isSupported();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        int int13 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate11);
        org.joda.time.LocalDate localDate15 = localDate11.withYearOfCentury(46);
        org.joda.time.LocalDate.Property property16 = localDate11.dayOfMonth();
        org.joda.time.Chronology chronology17 = localDate11.getChronology();
        org.joda.time.DateTimeZone dateTimeZone18 = chronology17.getZone();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.DateTime dateTime31 = localDateTime24.toDateTime((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = dateTime31.withZone(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusMillis((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusHours(51);
        org.joda.time.DateTime dateTime46 = dateTime34.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.DateTime dateTime48 = dateTime46.withWeekyear(122);
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod((int) ' ', 16, 26202, 56);
        org.joda.time.DateTime dateTime55 = dateTime46.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod53, 29);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekOfWeekyear();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType56.getDurationType();
        mutablePeriod53.add(durationFieldType57, 12);
        mutableDateTime19.add(durationFieldType57, 30);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime28", (instant0.compareTo(dateTime28) == 0) == instant0.equals(dateTime28));
    }

    @Test
    public void test157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test157");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant24 = instant17.plus((org.joda.time.ReadableDuration) duration23);
        long long25 = instant24.getMillis();
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.months();
        org.joda.time.Period period28 = new org.joda.time.Period((-205878993L), chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology26.getZone();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime0, chronology26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getYearOfCentury();
        int int35 = dateTime33.getWeekyear();
        org.joda.time.DateTime dateTime36 = dateTime33.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property37 = dateTime33.yearOfEra();
        org.joda.time.DateTime dateTime38 = property37.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime39 = property37.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property40 = dateTime39.secondOfDay();
        java.util.Locale locale41 = java.util.Locale.FRANCE;
        java.lang.String str42 = property40.getAsText(locale41);
        org.joda.time.DateTime dateTime43 = property40.roundFloorCopy();
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        int int46 = dateTime45.getSecondOfMinute();
        int int47 = dateTime45.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(readableInstant48, readableInstant49, periodType50);
        mutablePeriod51.setYears((int) '#');
        mutablePeriod51.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime56 = dateTime45.plus((org.joda.time.ReadablePeriod) mutablePeriod51);
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property58 = localDate57.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone60 = dateTimeZone59.toTimeZone();
        org.joda.time.DateTime dateTime61 = localDate57.toDateTimeAtCurrentTime(dateTimeZone59);
        org.joda.time.DateTime dateTime62 = dateTime45.toDateTime(dateTimeZone59);
        boolean boolean64 = dateTimeZone59.equals((java.lang.Object) 122);
        org.joda.time.DateTime dateTime65 = dateTime43.toDateTime(dateTimeZone59);
        long long67 = dateTimeZone59.previousTransition((long) 26250);
        org.joda.time.DateTime dateTime68 = localTime31.toDateTimeToday(dateTimeZone59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime33", (instant3.compareTo(dateTime33) == 0) == instant3.equals(dateTime33));
    }

    @Test
    public void test158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test158");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = duration3.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean7 = duration1.isLongerThan((org.joda.time.ReadableDuration) duration6);
        java.lang.Object obj8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(obj8);
        org.joda.time.LocalDateTime localDateTime10 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField16 = localDateTime14.getField((int) (byte) 0);
        long long18 = dateTimeField16.roundHalfEven((long) 1);
        int int19 = dateTime9.get(dateTimeField16);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) 'a');
        java.util.Locale locale28 = java.util.Locale.GERMAN;
        java.lang.String str29 = locale28.getDisplayName();
        java.lang.String str30 = dateTimeField16.getAsText((org.joda.time.ReadablePartial) localDateTime24, 53, locale28);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration36 = duration32.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime24.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.LocalDateTime localDateTime38 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property41 = localDateTime38.hourOfDay();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime38.plusMillis((int) (byte) 0);
        int int44 = localDateTime24.compareTo((org.joda.time.ReadablePartial) localDateTime38);
        boolean boolean45 = duration1.equals((java.lang.Object) int44);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property47 = localDate46.monthOfYear();
        org.joda.time.LocalDate localDate48 = property47.roundFloorCopy();
        org.joda.time.DateTime dateTime49 = localDate48.toDateTimeAtMidnight();
        java.lang.String str50 = localDate48.toString();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 1);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        mutableDateTime53.add((long) 'a');
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime53.yearOfCentury();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period59 = duration58.toPeriod();
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration64 = duration61.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration65 = duration58.minus((org.joda.time.ReadableDuration) duration64);
        mutableDateTime53.add((org.joda.time.ReadableDuration) duration58);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime53.centuryOfEra();
        mutableDateTime53.addYears(0);
        mutableDateTime53.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant72 = new org.joda.time.Instant();
        org.joda.time.Instant instant74 = instant72.withMillis(0L);
        org.joda.time.Duration duration76 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period77 = duration76.toPeriod();
        org.joda.time.Duration duration80 = duration76.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant81 = instant74.plus((org.joda.time.ReadableDuration) duration80);
        long long82 = instant81.getMillis();
        org.joda.time.Duration duration83 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime53, (org.joda.time.ReadableInstant) instant81);
        org.joda.time.MutableDateTime mutableDateTime84 = instant81.toMutableDateTime();
        boolean boolean85 = dateTime52.equals((java.lang.Object) mutableDateTime84);
        org.joda.time.DateTime dateTime86 = localDate48.toDateTime((org.joda.time.ReadableInstant) mutableDateTime84);
        java.lang.Object obj87 = null;
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime(obj87);
        int int89 = dateTime88.getHourOfDay();
        boolean boolean90 = dateTime86.isEqual((org.joda.time.ReadableInstant) dateTime88);
        org.joda.time.DateTime dateTime91 = dateTime86.toDateTimeISO();
        org.joda.time.DateMidnight dateMidnight92 = dateTime91.toDateMidnight();
        org.joda.time.Interval interval93 = duration1.toIntervalFrom((org.joda.time.ReadableInstant) dateTime91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant72", (dateTime9.compareTo(instant72) == 0) == dateTime9.equals(instant72));
    }

    @Test
    public void test159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test159");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds((long) 26175498);
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableDuration2, readableInstant3);
        org.joda.time.Period period6 = period4.withDays((int) (byte) 1);
        org.joda.time.Period period8 = period6.minusWeeks(100);
        org.joda.time.Period period9 = period8.negated();
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean12 = localDate10.isSupported(dateTimeFieldType11);
        org.joda.time.LocalDate.Property property13 = localDate10.yearOfEra();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        org.joda.time.Instant instant20 = instant14.minus((org.joda.time.ReadableDuration) duration18);
        int int21 = property13.getDifference((org.joda.time.ReadableInstant) instant14);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = duration23.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        mutableDateTime27.add((long) 'a');
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.yearOfCentury();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration38 = duration35.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration39 = duration32.minus((org.joda.time.ReadableDuration) duration38);
        mutableDateTime27.add((org.joda.time.ReadableDuration) duration32);
        boolean boolean41 = duration26.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant42 = instant14.plus((org.joda.time.ReadableDuration) duration26);
        org.joda.time.Duration duration43 = period9.toDurationFrom((org.joda.time.ReadableInstant) instant14);
        org.joda.time.Duration duration45 = duration1.withDurationAdded((org.joda.time.ReadableDuration) duration43, 2026);
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology46);
        int int48 = dateTime47.getYearOfCentury();
        int int49 = dateTime47.getWeekyear();
        org.joda.time.DateTime dateTime50 = dateTime47.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property51 = dateTime47.yearOfEra();
        org.joda.time.DateTime dateTime52 = property51.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime53 = property51.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property54 = dateTime53.dayOfYear();
        org.joda.time.DateTime dateTime56 = dateTime53.withMillis((long) (short) 1);
        org.joda.time.DateTime dateTime58 = dateTime53.minusYears(26265573);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime58);
        int int60 = dateTime58.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and dateTime47", (instant14.compareTo(dateTime47) == 0) == instant14.equals(dateTime47));
    }

    @Test
    public void test160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test160");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.year();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateTime dateTime44 = dateTime42.plusDays(69);
        org.joda.time.DateTime.Property property45 = dateTime42.minuteOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime30", (dateTime2.compareTo(dateTime30) == 0) == dateTime2.equals(dateTime30));
    }

    @Test
    public void test161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test161");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        int int2 = localDate0.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period11 = period9.minusSeconds((-1));
        java.lang.String str12 = period9.toString();
        org.joda.time.Period period13 = period9.toPeriod();
        org.joda.time.PeriodType periodType14 = period9.getPeriodType();
        org.joda.time.Period period15 = period5.normalizedStandard(periodType14);
        java.lang.String str16 = periodType14.getName();
        java.lang.String str17 = periodType14.toString();
        org.joda.time.PeriodType periodType18 = periodType14.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod21.clear();
        mutablePeriod21.addMinutes(53);
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod27.clear();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration34 = duration30.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        org.joda.time.DateTime dateTime38 = dateTime36.plusMinutes(15);
        org.joda.time.Interval interval39 = duration34.toIntervalTo((org.joda.time.ReadableInstant) dateTime38);
        mutablePeriod27.setPeriod((org.joda.time.ReadableInterval) interval39);
        mutablePeriod21.setPeriod((org.joda.time.ReadableInterval) interval39);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime45 = property43.set(45);
        org.joda.time.MutableDateTime mutableDateTime46 = property43.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime48 = property43.add(45);
        java.lang.String str49 = mutableDateTime48.toString();
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now();
        mutableDateTime50.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime53 = mutableDateTime50.copy();
        org.joda.time.ReadableDuration readableDuration54 = null;
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.Period period56 = new org.joda.time.Period(readableDuration54, readableInstant55);
        org.joda.time.Period period58 = period56.withDays((int) (byte) 1);
        org.joda.time.Period period60 = period56.minusMillis(1424);
        mutableDateTime50.add((org.joda.time.ReadablePeriod) period56);
        mutableDateTime48.add((org.joda.time.ReadablePeriod) period56);
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime48.year();
        org.joda.time.MutableDateTime mutableDateTime64 = property63.roundCeiling();
        boolean boolean66 = mutableDateTime64.equals((java.lang.Object) 1973);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime64.centuryOfEra();
        org.joda.time.Duration duration68 = mutablePeriod21.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours71 = duration70.toStandardHours();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime(chronology72);
        int int74 = dateTime73.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod75 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime73);
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant78 = new org.joda.time.Instant();
        org.joda.time.Instant instant80 = instant78.withMillis(0L);
        org.joda.time.DateTime dateTime81 = instant80.toDateTime();
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.months();
        org.joda.time.Period period85 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime81, (org.joda.time.ReadableInstant) dateTime83, periodType84);
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration70, (org.joda.time.ReadableInstant) dateTime77, periodType84);
        org.joda.time.DateTimeFieldType dateTimeFieldType87 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str88 = dateTimeFieldType87.getName();
        org.joda.time.DurationFieldType durationFieldType89 = dateTimeFieldType87.getRangeDurationType();
        boolean boolean90 = period86.isSupported(durationFieldType89);
        boolean boolean91 = mutablePeriod21.isSupported(durationFieldType89);
        boolean boolean92 = periodType14.isSupported(durationFieldType89);
        boolean boolean93 = localDate0.isSupported(durationFieldType89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and instant78", (dateTime36.compareTo(instant78) == 0) == dateTime36.equals(instant78));
    }

    @Test
    public void test162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test162");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale2.getISO3Language();
        java.util.Locale.Builder builder5 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType15 = periodType12.getFieldType((int) (short) 0);
        java.lang.String str16 = periodType12.toString();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 53, (long) (-1), periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType7.getField(chronology20);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = locale23.getDisplayLanguage();
        int int25 = dateTimeField22.getMaximumTextLength(locale23);
        java.lang.String str26 = locale23.getScript();
        java.util.Locale.Builder builder27 = builder1.setLocale(locale23);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        long long36 = chronology31.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField37 = chronology31.secondOfMinute();
        boolean boolean38 = dateTimeField37.isSupported();
        long long40 = dateTimeField37.roundHalfEven(946312L);
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.lang.String str44 = locale42.getDisplayVariant(locale43);
        java.lang.String str45 = dateTimeField37.getAsText(86400000L, locale43);
        java.util.Set<java.lang.String> strSet46 = locale43.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder47 = builder27.setLocale(locale43);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now();
        mutableDateTime48.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime51 = mutableDateTime48.copy();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime48.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime53 = property52.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime55 = property52.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone57 = dateTimeZone56.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime55.toMutableDateTime(dateTimeZone56);
        int int60 = dateTimeZone56.getStandardOffset(60000L);
        java.util.Locale.Builder builder62 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder63 = builder62.clear();
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.lang.String str65 = locale64.getDisplayName();
        java.lang.String str66 = locale64.getISO3Language();
        java.util.Locale.Builder builder67 = builder63.setLocale(locale64);
        java.lang.String str68 = dateTimeZone56.getName(950707L, locale64);
        java.util.Set<java.lang.String> strSet69 = locale64.getUnicodeLocaleKeys();
        java.lang.String str70 = locale64.getDisplayVariant();
        java.lang.String str71 = locale43.getDisplayVariant(locale64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime48 and mutableDateTime58", (mutableDateTime48.compareTo(mutableDateTime58) == 0) == mutableDateTime48.equals(mutableDateTime58));
    }

    @Test
    public void test163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test163");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        mutableDateTime0.add(1645514161062L);
        int int16 = mutableDateTime0.getSecondOfMinute();
        mutableDateTime0.addHours(999);
        int int19 = mutableDateTime0.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime6", (instant5.compareTo(dateTime6) == 0) == instant5.equals(dateTime6));
    }

    @Test
    public void test164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test164");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime16.copy();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime22 = property20.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime24 = property20.set(1);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        int int27 = dateTime26.getYearOfCentury();
        int int28 = dateTime26.getWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime26.withEarlierOffsetAtOverlap();
        java.lang.String str30 = dateTime29.toString();
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime29.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        boolean boolean33 = dateTimeZone32.isFixed();
        mutableDateTime31.setZoneRetainFields(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime24.toMutableDateTime(dateTimeZone32);
        org.joda.time.Interval interval36 = localDate15.toInterval(dateTimeZone32);
        org.joda.time.LocalDate.Property property37 = localDate15.monthOfYear();
        java.lang.String str38 = property37.getAsString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime13", (mutableDateTime0.compareTo(dateTime13) == 0) == mutableDateTime0.equals(dateTime13));
    }

    @Test
    public void test165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test165");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        mutableDateTime6.setDate((long) '#');
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.DateTime dateTime19 = mutableDateTime6.toDateTime(dateTimeZone17);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone17);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.PeriodType periodType25 = period24.getPeriodType();
        boolean boolean26 = dateTimeZone17.equals((java.lang.Object) periodType25);
        mutableDateTime0.setZoneRetainFields(dateTimeZone17);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate(dateTimeZone17);
        org.joda.time.LocalDate.Property property29 = localDate28.yearOfCentury();
        org.joda.time.LocalDate.Property property30 = localDate28.weekOfWeekyear();
        org.joda.time.LocalDate localDate31 = property30.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate33 = localDate31.plusMonths((-292275054));
        org.joda.time.LocalDate localDate35 = localDate31.minusWeeks(62346);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and dateTime19", (mutableDateTime6.compareTo(dateTime19) == 0) == mutableDateTime6.equals(dateTime19));
    }

    @Test
    public void test166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test166");
        org.joda.time.ReadableDuration readableDuration0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Period period2 = new org.joda.time.Period(readableDuration0, readableInstant1);
        org.joda.time.Period period4 = period2.withDays((int) (byte) 1);
        org.joda.time.Period period6 = period2.minusMillis(1424);
        org.joda.time.Period period8 = period2.withDays(12);
        int int9 = period2.size();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime13 = dateTime11.withZoneRetainFields(dateTimeZone12);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = localDate14.toDateTimeAtCurrentTime(dateTimeZone16);
        int int19 = dateTime13.compareTo((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime21 = dateTime18.withDayOfMonth(20);
        org.joda.time.DateTime.Property property22 = dateTime21.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str28 = dateTimeZone24.getName(100L, locale26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(948227L, dateTimeZone24);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.year();
        mutableDateTime29.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant36, readableInstant37, periodType38);
        org.joda.time.DurationFieldType durationFieldType41 = periodType38.getFieldType((int) (short) 0);
        java.lang.String str42 = periodType38.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 53, (long) (-1), periodType38, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType33.getField(chronology46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes(15);
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        java.lang.String str54 = chronology53.toString();
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType33.getField(chronology53);
        org.joda.time.DurationField durationField56 = chronology53.centuries();
        org.joda.time.DateTimeField dateTimeField57 = chronology53.millisOfDay();
        mutableDateTime29.setChronology(chronology53);
        org.joda.time.MutableDateTime mutableDateTime59 = dateTime21.toMutableDateTime(chronology53);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period62 = duration61.toPeriod();
        org.joda.time.Duration duration64 = duration61.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now();
        mutableDateTime65.add((long) 'a');
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime65.yearOfCentury();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period71 = duration70.toPeriod();
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration76 = duration73.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration77 = duration70.minus((org.joda.time.ReadableDuration) duration76);
        mutableDateTime65.add((org.joda.time.ReadableDuration) duration70);
        boolean boolean79 = duration64.isShorterThan((org.joda.time.ReadableDuration) duration70);
        org.joda.time.PeriodType periodType81 = org.joda.time.PeriodType.years();
        org.joda.time.Period period82 = new org.joda.time.Period(60000L, periodType81);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration70, periodType81);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((java.lang.Object) period2, periodType81);
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(periodType81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and mutableDateTime59", (dateTime21.compareTo(mutableDateTime59) == 0) == dateTime21.equals(mutableDateTime59));
    }

    @Test
    public void test167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test167");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime17.toString(dateTimeFormatter19);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime17);
        mutableDateTime15.addDays(22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (short) 100, chronology25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str28 = durationFieldType27.getName();
        boolean boolean29 = localTime26.isSupported(durationFieldType27);
        mutableDateTime15.add(durationFieldType27, 3);
        int int32 = mutableDateTime15.getCenturyOfEra();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period(readableDuration33, readableInstant34);
        org.joda.time.PeriodType periodType38 = null;
        org.joda.time.Period period39 = new org.joda.time.Period((long) 100, 1L, periodType38);
        org.joda.time.Period period41 = period39.minusSeconds((-1));
        java.lang.String str42 = period39.toString();
        org.joda.time.Period period43 = period39.toPeriod();
        org.joda.time.PeriodType periodType44 = period39.getPeriodType();
        org.joda.time.Period period45 = period35.normalizedStandard(periodType44);
        org.joda.time.Period period47 = period45.withSeconds(10);
        org.joda.time.Period period48 = org.joda.time.Period.ZERO;
        org.joda.time.Period period49 = period45.minus((org.joda.time.ReadablePeriod) period48);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime50.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime53 = property51.set(45);
        org.joda.time.MutableDateTime mutableDateTime54 = property51.roundFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.Chronology chronology60 = instant59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.eras();
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.now(chronology60);
        org.joda.time.DurationField durationField63 = chronology60.eras();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 44, chronology60);
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType55.getField(chronology60);
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) 100, 1L, periodType68);
        org.joda.time.Period period71 = period69.minusSeconds((-1));
        java.lang.String str72 = period69.toString();
        long long75 = chronology60.add((org.joda.time.ReadablePeriod) period69, (long) ' ', (int) 'a');
        org.joda.time.Period period77 = period69.minusHours((-292275054));
        org.joda.time.Period period79 = period77.minusHours(2000);
        int int80 = period77.getMinutes();
        org.joda.time.Period period81 = period77.toPeriod();
        mutableDateTime54.add((org.joda.time.ReadablePeriod) period81);
        org.joda.time.Chronology chronology84 = null;
        java.util.Locale locale85 = java.util.Locale.GERMAN;
        java.util.Locale locale86 = java.util.Locale.CANADA;
        java.lang.String str87 = locale85.getDisplayVariant(locale86);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology84, locale86);
        java.util.Locale locale89 = dateTimeParserBucket88.getLocale();
        long long90 = dateTimeParserBucket88.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone91 = dateTimeParserBucket88.getZone();
        mutableDateTime54.setZone(dateTimeZone91);
        org.joda.time.Duration duration93 = period45.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime54);
        org.joda.time.Period period95 = period45.withYears(62151);
        mutableDateTime15.add((org.joda.time.ReadablePeriod) period45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant57", (dateTime17.compareTo(instant57) == 0) == dateTime17.equals(instant57));
    }

    @Test
    public void test168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test168");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime(dateTimeZone0);
        int int2 = localDateTime1.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime3 = localDateTime1.toDateTime();
        org.joda.time.DateTime.Property property4 = dateTime3.weekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException8 = new java.io.IOException("");
        java.io.IOException iOException9 = new java.io.IOException((java.lang.Throwable) iOException8);
        boolean boolean10 = mutableDateTime6.equals((java.lang.Object) iOException8);
        org.joda.time.Duration duration13 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration13, 1424);
        org.joda.time.MutableDateTime mutableDateTime16 = mutableDateTime6.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime17.centuryOfEra();
        mutableDateTime17.setDayOfMonth(3);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime24 = property21.add(62181);
        int int25 = mutableDateTime24.getHourOfDay();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration30 = duration27.withDurationAdded((long) (short) 100, (int) ' ');
        long long31 = duration30.getMillis();
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.DateTime dateTime35 = instant34.toDateTime();
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.DateTime dateTime39 = instant38.toDateTime();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.months();
        org.joda.time.Period period43 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableInstant) dateTime41, periodType42);
        boolean boolean44 = dateTime35.isBefore((org.joda.time.ReadableInstant) dateTime39);
        int int45 = dateTime39.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod49 = new org.joda.time.MutablePeriod(readableInstant46, readableInstant47, periodType48);
        org.joda.time.PeriodType periodType50 = periodType48.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime39, periodType48);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration30);
        mutableDateTime16.setDate((org.joda.time.ReadableInstant) mutableDateTime24);
        int int54 = mutableDateTime16.getMonthOfYear();
        int int55 = dateTime3.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant34 and dateTime35", (instant34.compareTo(dateTime35) == 0) == instant34.equals(dateTime35));
    }

    @Test
    public void test169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test169");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = duration3.withDurationAdded((long) (short) 100, (int) ' ');
        long long7 = duration6.getMillis();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.months();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17, periodType18);
        boolean boolean20 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime15);
        int int21 = dateTime15.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime15, periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.Chronology chronology32 = dateTime29.getChronology();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime29.withChronology(chronology36);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.getMutableDateTime();
        boolean boolean45 = dateTime41.isBefore((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField55 = chronology49.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology49.minuteOfDay();
        mutableDateTime44.setChronology(chronology49);
        org.joda.time.DateTime dateTime58 = dateTime15.toDateTime(chronology49);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period(readableDuration59, readableInstant60);
        org.joda.time.Period period63 = period61.withDays((int) (byte) 1);
        org.joda.time.Period period65 = period63.minusWeeks(100);
        org.joda.time.Period period67 = period63.plusWeeks((int) (short) -1);
        long long70 = chronology49.add((org.joda.time.ReadablePeriod) period67, 86403200L, 443);
        boolean boolean71 = dateTimeFieldType0.isSupported(chronology49);
        org.joda.time.DurationField durationField72 = chronology49.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField37, durationField72, and durationField37", !(durationField37.compareTo(durationField72) == 0) || (Math.signum(durationField37.compareTo(durationField37)) == Math.signum(durationField72.compareTo(durationField37))));
    }

    @Test
    public void test170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test170");
        org.joda.time.PeriodType periodType4 = org.joda.time.PeriodType.yearDay();
        java.lang.String str5 = periodType4.getName();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(100L, periodType4);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours12 = duration11.toStandardHours();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod16 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration11, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Duration duration17 = duration8.plus((org.joda.time.ReadableDuration) duration11);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.DurationFieldType durationFieldType27 = periodType24.getFieldType((int) (short) 0);
        java.lang.String str28 = periodType24.toString();
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        org.joda.time.Period period33 = new org.joda.time.Period((long) 53, (long) (-1), periodType24, chronology32);
        org.joda.time.Period period34 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType24);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.eras();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.DurationField durationField41 = chronology38.eras();
        org.joda.time.LocalTime localTime42 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.Period period43 = duration8.toPeriod(periodType24, chronology38);
        org.joda.time.Period period44 = new org.joda.time.Period(1671667200000L, 946312L, periodType4, chronology38);
        int int45 = periodType4.size();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 26249317, periodType4);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.centuries();
        org.joda.time.DateTimeZone dateTimeZone48 = null;
        org.joda.time.LocalTime localTime49 = new org.joda.time.LocalTime(dateTimeZone48);
        org.joda.time.LocalTime localTime51 = localTime49.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology52 = localTime51.getChronology();
        org.joda.time.MutableDateTime mutableDateTime53 = new org.joda.time.MutableDateTime(chronology52);
        org.joda.time.DurationField durationField54 = durationFieldType47.getField(chronology52);
        org.joda.time.DurationFieldType durationFieldType55 = durationField54.getType();
        int int56 = mutablePeriod46.indexOf(durationFieldType55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField39 and durationField54", Math.signum(durationField39.compareTo(durationField54)) == -Math.signum(durationField54.compareTo(durationField39)));
    }

    @Test
    public void test171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test171");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.hourOfDay();
        org.joda.time.DurationField durationField42 = chronology37.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField22, durationField42, and durationField22", !(durationField22.compareTo(durationField42) == 0) || (Math.signum(durationField22.compareTo(durationField22)) == Math.signum(durationField42.compareTo(durationField22))));
    }

    @Test
    public void test172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test172");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusYears(26148950);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period22 = period20.minusSeconds((-1));
        org.joda.time.Period period24 = period22.multipliedBy((int) '#');
        org.joda.time.Minutes minutes25 = period24.toStandardMinutes();
        int int26 = period24.getYears();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime13.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime31 = localTime29.plus(readablePeriod30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        org.joda.time.DurationFieldType durationFieldType37 = periodType34.getFieldType((int) (short) 0);
        boolean boolean38 = localTime29.isSupported(durationFieldType37);
        java.lang.String str39 = durationFieldType37.toString();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime(dateTimeZone40);
        org.joda.time.LocalTime localTime43 = localTime41.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology44 = localTime43.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(chronology44);
        org.joda.time.DurationField durationField47 = durationFieldType37.getField(chronology44);
        boolean boolean48 = period24.isSupported(durationFieldType37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField47", Math.signum(durationField7.compareTo(durationField47)) == -Math.signum(durationField47.compareTo(durationField7)));
    }

    @Test
    public void test173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test173");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardMinutes(1645514161062L);
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.add((long) 'a');
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime4.yearOfCentury();
        mutableDateTime4.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.Period period22 = period18.toPeriod();
        org.joda.time.PeriodType periodType23 = period18.getPeriodType();
        org.joda.time.Period period24 = period14.normalizedStandard(periodType23);
        org.joda.time.DurationFieldType durationFieldType25 = null;
        int int26 = periodType23.indexOf(durationFieldType25);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Chronology chronology30 = instant29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.eras();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType23, chronology30);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime4.toMutableDateTime(chronology30);
        mutableDateTime36.setDate((long) (-292275054));
        mutableDateTime36.addWeekyears(616);
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.months();
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration3, (org.joda.time.ReadableInstant) mutableDateTime36, periodType41);
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod((long) 26275855, periodType41);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration52 = duration48.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant53 = instant46.plus((org.joda.time.ReadableDuration) duration52);
        long long54 = instant53.getMillis();
        org.joda.time.Chronology chronology55 = instant53.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.months();
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now(chronology55);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField59 = chronology55.millisOfSecond();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod((long) 26176, periodType41, chronology55);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField31 and durationField56", Math.signum(durationField31.compareTo(durationField56)) == -Math.signum(durationField56.compareTo(durationField31)));
    }

    @Test
    public void test174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test174");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.dayOfMonth();
        org.joda.time.DurationField durationField35 = chronology26.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField35, and durationField27", !(durationField27.compareTo(durationField35) == 0) || (Math.signum(durationField27.compareTo(durationField27)) == Math.signum(durationField35.compareTo(durationField27))));
    }

    @Test
    public void test175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test175");
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime4 = dateTime2.withZoneRetainFields(dateTimeZone3);
        boolean boolean6 = dateTime4.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology7 = dateTime4.getChronology();
        java.util.Locale locale8 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket10 = new org.joda.time.format.DateTimeParserBucket((long) 1, chronology7, locale8, (java.lang.Integer) 50);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Chronology chronology15 = instant14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.eras();
        org.joda.time.LocalTime localTime17 = org.joda.time.LocalTime.now(chronology15);
        org.joda.time.DurationField durationField18 = chronology15.eras();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 44, chronology15);
        org.joda.time.DateTimeField dateTimeField20 = chronology15.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology15.millisOfSecond();
        long long24 = dateTimeField21.addWrapField((long) 36946953, 62215);
        dateTimeParserBucket10.saveField(dateTimeField21, 62194);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.DateTime dateTime30 = instant29.toDateTime();
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.months();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime36, periodType37);
        boolean boolean39 = dateTime30.isBefore((org.joda.time.ReadableInstant) dateTime34);
        int int40 = dateTime34.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.hourOfDay();
        org.joda.time.DateTimeField dateTimeField45 = property44.getField();
        boolean boolean47 = property44.equals((java.lang.Object) 10L);
        long long48 = property44.remainder();
        java.lang.String str49 = property44.getAsText();
        org.joda.time.LocalDateTime localDateTime50 = property44.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = property44.getFieldType();
        int int52 = dateTime34.get(dateTimeFieldType51);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTime dateTime57 = dateTime55.plusMinutes(15);
        org.joda.time.Chronology chronology58 = dateTime55.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.hours();
        org.joda.time.MutablePeriod mutablePeriod60 = new org.joda.time.MutablePeriod(1440L, chronology58);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(chronology58);
        org.joda.time.Chronology chronology62 = chronology58.withUTC();
        org.joda.time.DateTimeField dateTimeField63 = dateTimeFieldType51.getField(chronology62);
        java.lang.String str64 = dateTimeField63.toString();
        dateTimeParserBucket10.saveField(dateTimeField63, 26190);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField16 and durationField59", Math.signum(durationField16.compareTo(durationField59)) == -Math.signum(durationField59.compareTo(durationField16)));
    }

    @Test
    public void test176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test176");
        org.joda.time.Period period1 = org.joda.time.Period.months(53);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.DateTime dateTime8 = instant7.toDateTime();
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType11 = org.joda.time.PeriodType.months();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) dateTime10, periodType11);
        org.joda.time.DateTime.Property property13 = dateTime10.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property13.getFieldType();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime2.property(dateTimeFieldType14);
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = duration21.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant26 = instant19.plus((org.joda.time.ReadableDuration) duration25);
        long long27 = instant26.getMillis();
        org.joda.time.Chronology chronology28 = instant26.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.months();
        org.joda.time.Period period30 = new org.joda.time.Period((-205878993L), chronology28);
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone32 = chronology28.getZone();
        org.joda.time.LocalTime localTime33 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime2, chronology28);
        mutableDateTime2.addSeconds(152);
        mutableDateTime2.addDays(57);
        org.joda.time.Duration duration38 = period1.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime2);
        mutableDateTime2.addWeekyears(435);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime2.minuteOfDay();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        org.joda.time.LocalDate localDate47 = property45.roundCeilingCopy();
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.eras();
        org.joda.time.DateTimeField dateTimeField50 = chronology48.clockhourOfDay();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(163491308820000L, (long) 26208340, chronology48);
        org.joda.time.DateTime dateTime52 = org.joda.time.DateTime.now(chronology48);
        org.joda.time.DateTimeField dateTimeField53 = chronology48.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime2.toMutableDateTime(chronology48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField29 and durationField49", Math.signum(durationField29.compareTo(durationField49)) == -Math.signum(durationField49.compareTo(durationField29)));
    }

    @Test
    public void test177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test177");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        long long18 = chronology13.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfMinute();
        boolean boolean20 = dateTimeField19.isSupported();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        int int23 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate25 = localDate21.withYearOfCentury(46);
        boolean boolean26 = property8.equals((java.lang.Object) localDate25);
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology27.add(readablePeriod28, 555370422L, 1191);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        org.joda.time.DurationField durationField35 = chronology27.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField35, and durationField14", !(durationField14.compareTo(durationField35) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField35.compareTo(durationField14))));
    }

    @Test
    public void test178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test178");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.Instant instant5 = instant3.toInstant();
        long long6 = instant5.getMillis();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) 100);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Instant instant25 = instant5.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) -1);
        org.joda.time.Duration duration26 = duration1.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.set(45);
        org.joda.time.MutableDateTime mutableDateTime31 = property28.roundFloor();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(15);
        org.joda.time.DateTime dateTime43 = localDateTime36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = localDateTime36.toDateTime(dateTimeZone44);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        mutableDateTime31.setRounding(dateTimeField47);
        java.lang.Object obj49 = mutableDateTime31.clone();
        java.lang.String str50 = mutableDateTime31.toString();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration55 = duration52.withDurationAdded((long) (short) 100, (int) ' ');
        long long56 = duration55.getMillis();
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.months();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime66, periodType67);
        boolean boolean69 = dateTime60.isBefore((org.joda.time.ReadableInstant) dateTime64);
        int int70 = dateTime64.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(readableInstant71, readableInstant72, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime64, periodType73);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(periodType73);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) mutableDateTime31, periodType73);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime31.yearOfEra();
        mutableDateTime31.addMinutes(62342);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test179");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        int int3 = dateTime2.getYearOfCentury();
        int int4 = dateTime2.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime2.withEarlierOffsetAtOverlap();
        java.lang.String str6 = dateTime5.toString();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime(chronology7);
        int int9 = dateTime8.getYearOfCentury();
        int int10 = dateTime8.getWeekyear();
        org.joda.time.DateTime dateTime11 = dateTime8.withEarlierOffsetAtOverlap();
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.MutableDateTime mutableDateTime13 = dateTime11.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        boolean boolean15 = dateTimeZone14.isFixed();
        mutableDateTime13.setZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = dateTime5.toDateTime(dateTimeZone14);
        long long19 = dateTimeZone14.nextTransition((long) 21);
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(3155760000000L, dateTimeZone14);
        org.joda.time.TimeOfDay timeOfDay21 = dateTime20.toTimeOfDay();
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.LocalTime localTime23 = new org.joda.time.LocalTime((java.lang.Object) timeOfDay21, dateTimeZone22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime17", (dateTime2.compareTo(dateTime17) == 0) == dateTime2.equals(dateTime17));
    }

    @Test
    public void test180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test180");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addYears(12);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = localDateTime25.toDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime20.withZoneRetainFields(dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.toString();
        java.lang.String str37 = dateTimeZone33.getID();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone33);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        long long43 = dateTimeZone40.previousTransition(100L);
        java.util.TimeZone timeZone44 = dateTimeZone40.toTimeZone();
        mutableDateTime0.setZone(dateTimeZone40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and dateTime20", (instant19.compareTo(dateTime20) == 0) == instant19.equals(dateTime20));
    }

    @Test
    public void test181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test181");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.DateTime dateTime9 = dateTime1.toDateTimeISO();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime10.copy();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime10.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property14.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.toMutableDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(15);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.eras();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(chronology29);
        org.joda.time.DurationField durationField32 = chronology29.eras();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.hourOfDay();
        org.joda.time.DateTime dateTime34 = dateTime22.withChronology(chronology29);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.getMutableDateTime();
        boolean boolean38 = dateTime34.isBefore((org.joda.time.ReadableInstant) mutableDateTime37);
        mutableDateTime37.setHourOfDay(0);
        mutableDateTime20.setMillis((org.joda.time.ReadableInstant) mutableDateTime37);
        mutableDateTime37.setMillisOfDay(50);
        int int44 = dateTime9.compareTo((org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.DateTime dateTime45 = dateTime9.toDateTimeISO();
        org.joda.time.DateTime.Property property46 = dateTime45.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime22 and instant26", (dateTime22.compareTo(instant26) == 0) == dateTime22.equals(instant26));
    }

    @Test
    public void test182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test182");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(chronology0);
        org.joda.time.LocalTime localTime3 = localTime1.plusMinutes(26);
        org.joda.time.Chronology chronology4 = localTime3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.halfdayOfDay();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DateTimeField dateTimeField8 = chronology4.secondOfDay();
        org.joda.time.DateTimeField dateTimeField9 = chronology4.secondOfDay();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean21 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration17);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str27 = duration26.toString();
        org.joda.time.Instant instant28 = instant22.minus((org.joda.time.ReadableDuration) duration26);
        boolean boolean29 = duration15.isEqual((org.joda.time.ReadableDuration) duration26);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        mutableDateTime30.add((long) 'a');
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime30.yearOfCentury();
        mutableDateTime30.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration38 = null;
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.Period period40 = new org.joda.time.Period(readableDuration38, readableInstant39);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period((long) 100, 1L, periodType43);
        org.joda.time.Period period46 = period44.minusSeconds((-1));
        java.lang.String str47 = period44.toString();
        org.joda.time.Period period48 = period44.toPeriod();
        org.joda.time.PeriodType periodType49 = period44.getPeriodType();
        org.joda.time.Period period50 = period40.normalizedStandard(periodType49);
        org.joda.time.DurationFieldType durationFieldType51 = null;
        int int52 = periodType49.indexOf(durationFieldType51);
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.eras();
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.now(chronology56);
        org.joda.time.DurationField durationField59 = chronology56.eras();
        org.joda.time.DateTimeField dateTimeField60 = chronology56.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType49, chronology56);
        org.joda.time.MutableDateTime mutableDateTime62 = mutableDateTime30.toMutableDateTime(chronology56);
        org.joda.time.DateTimeField dateTimeField63 = chronology56.yearOfEra();
        org.joda.time.DateTimeField dateTimeField64 = chronology56.dayOfMonth();
        org.joda.time.LocalTime localTime65 = new org.joda.time.LocalTime(chronology56);
        org.joda.time.Period period66 = duration15.toPeriod(chronology56);
        int[] intArray69 = chronology4.get((org.joda.time.ReadablePeriod) period66, (long) 82800100, 435L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime30 and mutableDateTime62", (mutableDateTime30.compareTo(mutableDateTime62) == 0) == mutableDateTime30.equals(mutableDateTime62));
    }

    @Test
    public void test183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test183");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        org.joda.time.DateTime dateTime4 = dateTime1.withSecondOfMinute(53);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(15);
        org.joda.time.DateTime dateTime18 = localDateTime11.toDateTime((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = localDateTime11.toDateTime(dateTimeZone19);
        org.joda.time.DateTime dateTime21 = dateTime6.withZoneRetainFields(dateTimeZone19);
        java.lang.String str22 = dateTimeZone19.toString();
        java.lang.String str23 = dateTimeZone19.getID();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime29 = mutableDateTime26.copy();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime26.yearOfCentury();
        mutableDateTime26.setHourOfDay(9);
        int int33 = dateTimeZone19.getOffset((org.joda.time.ReadableInstant) mutableDateTime26);
        org.joda.time.DateTime dateTime34 = dateTime4.toDateTime(dateTimeZone19);
        int int35 = dateTime34.getMillisOfDay();
        int int36 = dateTime34.getHourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant5", (dateTime1.compareTo(instant5) == 0) == dateTime1.equals(instant5));
    }

    @Test
    public void test184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test184");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        mutableDateTime16.addHours(26150565);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.eras();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.secondOfMinute();
        mutableDateTime16.setRounding(dateTimeField30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime16.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.roundFloor();
        org.joda.time.Chronology chronology35 = mutableDateTime34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant5", (dateTime1.compareTo(instant5) == 0) == dateTime1.equals(instant5));
    }

    @Test
    public void test185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test185");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime12.withChronology(chronology19);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.getMutableDateTime();
        boolean boolean28 = dateTime24.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.setHourOfDay(0);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.weekyear();
        int int33 = mutableDateTime27.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime27.dayOfYear();
        boolean boolean35 = mutableDateTime27.isAfterNow();
        org.joda.time.Period period38 = new org.joda.time.Period(27425236L, 26171014L);
        mutableDateTime27.add((org.joda.time.ReadablePeriod) period38, (int) (byte) 10);
        long long41 = mutableDateTime27.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant16", (dateTime12.compareTo(instant16) == 0) == dateTime12.equals(instant16));
    }

    @Test
    public void test186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test186");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        int int15 = dateTime14.getSecondOfDay();
        org.joda.time.DateTime dateTime17 = dateTime14.minusDays(0);
        org.joda.time.DateTime dateTime20 = dateTime14.withDurationAdded(4801284983024L, 437);
        org.joda.time.DateTime dateTime21 = dateTime20.toDateTimeISO();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime13", (mutableDateTime0.compareTo(dateTime13) == 0) == mutableDateTime0.equals(dateTime13));
    }

    @Test
    public void test187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test187");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        boolean boolean23 = mutablePeriod17.equals((java.lang.Object) dateTimeField22);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField33 = localDateTime31.getField((int) (byte) 0);
        long long35 = dateTimeField33.roundHalfEven((long) 1);
        int int36 = dateTime26.get(dateTimeField33);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) 'a');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime41, 53, locale45);
        java.lang.String str49 = locale45.getExtension('a');
        java.lang.String str50 = dateTimeField22.getAsText((long) 36950209, locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(97L, chronology7, locale45, (java.lang.Integer) 36950209, 443);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField55 = chronology7.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime26", (instant4.compareTo(dateTime26) == 0) == instant4.equals(dateTime26));
    }

    @Test
    public void test188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test188");
        org.joda.time.ReadableDuration readableDuration4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.Period period6 = new org.joda.time.Period(readableDuration4, readableInstant5);
        org.joda.time.PeriodType periodType9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period((long) 100, 1L, periodType9);
        org.joda.time.Period period12 = period10.minusSeconds((-1));
        java.lang.String str13 = period10.toString();
        org.joda.time.Period period14 = period10.toPeriod();
        org.joda.time.PeriodType periodType15 = period10.getPeriodType();
        org.joda.time.Period period16 = period6.normalizedStandard(periodType15);
        java.lang.String str17 = periodType15.getName();
        java.lang.String str18 = periodType15.toString();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMinutes(15);
        org.joda.time.Chronology chronology24 = dateTime21.getChronology();
        java.lang.String str25 = chronology24.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Chronology chronology39 = instant38.getChronology();
        org.joda.time.Period period40 = new org.joda.time.Period((long) 53, (long) (-1), periodType31, chronology39);
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType26.getField(chronology39);
        java.util.Locale locale42 = java.util.Locale.UK;
        java.lang.String str43 = locale42.getDisplayLanguage();
        int int44 = dateTimeField41.getMaximumTextLength(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket45 = new org.joda.time.format.DateTimeParserBucket(3155695200000L, chronology24, locale42);
        org.joda.time.LocalDate localDate46 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 52, 946312L, periodType15, chronology24);
        org.joda.time.DateTimeField dateTimeField48 = chronology24.weekyearOfCentury();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate(chronology24);
        org.joda.time.LocalDate localDate50 = new org.joda.time.LocalDate((long) 117, chronology24);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) 26322781, chronology24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and instant36", (dateTime21.compareTo(instant36) == 0) == dateTime21.equals(instant36));
    }

    @Test
    public void test189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test189");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime2.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfMonth();
        org.joda.time.Period period16 = new org.joda.time.Period(950707L, chronology9);
        org.joda.time.Period period18 = period16.withWeeks(1969);
        java.lang.String str19 = period18.toString();
        org.joda.time.Period period21 = period18.minusHours(57);
        int int22 = period18.getDays();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime23.copy();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime23.weekOfWeekyear();
        org.joda.time.Duration duration28 = period18.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property30 = localDate29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField31 = property30.getField();
        org.joda.time.LocalDate localDate32 = property30.roundCeilingCopy();
        org.joda.time.LocalDate localDate34 = localDate32.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone35);
        org.joda.time.DateMidnight dateMidnight37 = localDate34.toDateMidnight(dateTimeZone35);
        java.lang.String str39 = dateTimeZone35.getNameKey(960000L);
        mutableDateTime23.setZone(dateTimeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant6", (dateTime2.compareTo(instant6) == 0) == dateTime2.equals(instant6));
    }

    @Test
    public void test190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test190");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod4.addDays((int) (byte) 10);
        mutablePeriod4.addMillis((int) '4');
        mutablePeriod4.setSeconds((int) (short) -1);
        int int11 = mutablePeriod4.getMonths();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.Period period16 = period14.withDays((int) (byte) 1);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime((long) (short) 100, chronology18);
        org.joda.time.DurationFieldType durationFieldType20 = org.joda.time.DurationFieldType.millis();
        java.lang.String str21 = durationFieldType20.getName();
        boolean boolean22 = localTime19.isSupported(durationFieldType20);
        int int23 = period14.get(durationFieldType20);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes(15);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.hours();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(1440L, chronology29);
        boolean boolean32 = durationFieldType20.isSupported(chronology29);
        int int33 = mutablePeriod4.get(durationFieldType20);
        org.joda.time.MutableDateTime mutableDateTime34 = org.joda.time.MutableDateTime.now();
        mutableDateTime34.add((long) 'a');
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.yearOfCentury();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration45 = duration42.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration46 = duration39.minus((org.joda.time.ReadableDuration) duration45);
        mutableDateTime34.add((org.joda.time.ReadableDuration) duration39);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime34.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime49 = property48.roundFloor();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.yearOfEra();
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Chronology chronology54 = instant53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.eras();
        long long59 = chronology54.add(0L, (long) 2022, (int) '4');
        mutableDateTime49.setChronology(chronology54);
        boolean boolean61 = durationFieldType20.isSupported(chronology54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField30 and durationField55", Math.signum(durationField30.compareTo(durationField55)) == -Math.signum(durationField55.compareTo(durationField30)));
    }

    @Test
    public void test191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test191");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime13.toString(dateTimeFormatter15);
        org.joda.time.DateTime dateTime18 = dateTime13.minusMonths(22);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.joda.time.DateTime dateTime24 = dateTime13.withChronology(chronology22);
        org.joda.time.Period period25 = duration4.toPeriod(chronology22);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableDuration28, readableInstant29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 1L, periodType33);
        org.joda.time.Period period36 = period34.minusSeconds((-1));
        java.lang.String str37 = period34.toString();
        org.joda.time.Period period38 = period34.toPeriod();
        org.joda.time.PeriodType periodType39 = period34.getPeriodType();
        org.joda.time.Period period40 = period30.normalizedStandard(periodType39);
        java.lang.String str41 = periodType39.getName();
        java.lang.String str42 = periodType39.toString();
        org.joda.time.PeriodType periodType43 = periodType39.withDaysRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType44);
        int[] intArray47 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod45, 1L);
        org.joda.time.Period period49 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period51 = period49.minusMillis(19045);
        org.joda.time.Period period53 = period49.minusYears(0);
        org.joda.time.DurationFieldType durationFieldType55 = period49.getFieldType(0);
        int int56 = mutablePeriod45.indexOf(durationFieldType55);
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(chronology58);
        org.joda.time.DateTime dateTime61 = dateTime59.plusMinutes(15);
        org.joda.time.Chronology chronology62 = dateTime59.getChronology();
        java.lang.String str63 = chronology62.toString();
        org.joda.time.LocalTime localTime64 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology62);
        org.joda.time.DateTimeField dateTimeField65 = chronology62.millisOfDay();
        org.joda.time.DateTimeField dateTimeField66 = chronology62.millisOfSecond();
        org.joda.time.DurationField durationField67 = chronology62.minutes();
        org.joda.time.DurationField durationField68 = durationFieldType55.getField(chronology62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField23 and durationField67", Math.signum(durationField23.compareTo(durationField67)) == -Math.signum(durationField67.compareTo(durationField23)));
    }

    @Test
    public void test192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test192");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.copy();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = property21.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime24.toMutableDateTime(dateTimeZone25);
        int int28 = mutableDateTime27.getDayOfYear();
        int int29 = mutableDateTime27.getWeekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.setTime((long) 36946953);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(15);
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.hours();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod(1440L, chronology38);
        org.joda.time.DurationField durationField41 = chronology38.weeks();
        boolean boolean42 = durationField41.isSupported();
        long long45 = durationField41.getValueAsLong((long) 36946953, (long) 62187);
        boolean boolean46 = mutableDateTime27.equals((java.lang.Object) long45);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.Chronology chronology53 = instant52.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.eras();
        org.joda.time.LocalTime localTime55 = org.joda.time.LocalTime.now(chronology53);
        org.joda.time.DurationField durationField56 = chronology53.eras();
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime((long) 44, chronology53);
        org.joda.time.DateTimeField dateTimeField58 = dateTimeFieldType48.getField(chronology53);
        org.joda.time.DateTimeField dateTimeField59 = chronology53.weekOfWeekyear();
        org.joda.time.LocalTime localTime60 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology53);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(readableInstant63, readableInstant64, periodType65);
        org.joda.time.DurationFieldType durationFieldType68 = periodType65.getFieldType((int) (short) 0);
        java.lang.String str69 = periodType65.toString();
        org.joda.time.Instant instant70 = new org.joda.time.Instant();
        org.joda.time.Instant instant72 = instant70.withMillis(0L);
        org.joda.time.Chronology chronology73 = instant72.getChronology();
        org.joda.time.Period period74 = new org.joda.time.Period((long) 53, (long) (-1), periodType65, chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.weekyearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = dateTimeField75.getType();
        boolean boolean77 = localTime60.isSupported(dateTimeFieldType76);
        int int78 = mutableDateTime27.get(dateTimeFieldType76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField39 and durationField54", Math.signum(durationField39.compareTo(durationField54)) == -Math.signum(durationField54.compareTo(durationField39)));
    }

    @Test
    public void test193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test193");
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology11);
        org.joda.time.DurationField durationField14 = chronology11.eras();
        mutablePeriod6.setPeriod((long) 999, chronology11);
        org.joda.time.Chronology chronology16 = chronology11.withUTC();
        org.joda.time.Period period17 = new org.joda.time.Period((long) 62172, 3155760000000L, chronology11);
        org.joda.time.DateTimeField dateTimeField18 = chronology11.weekyearOfCentury();
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        boolean boolean25 = property22.equals((java.lang.Object) 10L);
        long long26 = property22.remainder();
        java.lang.String str27 = property22.getAsText();
        org.joda.time.LocalDateTime localDateTime28 = property22.roundCeilingCopy();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes(15);
        org.joda.time.Chronology chronology34 = dateTime31.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.hours();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(1440L, chronology34);
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology34);
        org.joda.time.DurationField durationField38 = chronology34.weekyears();
        org.joda.time.ReadableInstant readableInstant39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.PeriodType periodType41 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(readableInstant39, readableInstant40, periodType41);
        mutablePeriod42.setYears((int) '#');
        org.joda.time.Chronology chronology46 = null;
        mutablePeriod42.add((long) 1, chronology46);
        org.joda.time.ReadableInterval readableInterval48 = null;
        mutablePeriod42.setPeriod(readableInterval48);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod54.addDays((int) (byte) 10);
        mutablePeriod54.addMillis((int) '4');
        mutablePeriod54.setSeconds((int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone61 = null;
        org.joda.time.LocalTime localTime62 = new org.joda.time.LocalTime(dateTimeZone61);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalTime localTime64 = localTime62.plus(readablePeriod63);
        org.joda.time.ReadableInstant readableInstant65 = null;
        org.joda.time.ReadableInstant readableInstant66 = null;
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod(readableInstant65, readableInstant66, periodType67);
        org.joda.time.DurationFieldType durationFieldType70 = periodType67.getFieldType((int) (short) 0);
        boolean boolean71 = localTime62.isSupported(durationFieldType70);
        mutablePeriod54.add(durationFieldType70, 8);
        mutablePeriod42.add(durationFieldType70, 53);
        mutablePeriod42.addSeconds((int) 'a');
        int[] intArray79 = chronology34.get((org.joda.time.ReadablePeriod) mutablePeriod42, (long) ' ');
        int int80 = dateTimeField18.getMaximumValue((org.joda.time.ReadablePartial) localDateTime28, intArray79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField12 and durationField35", Math.signum(durationField12.compareTo(durationField35)) == -Math.signum(durationField35.compareTo(durationField12)));
    }

    @Test
    public void test194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test194");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.eras();
        mutablePeriod4.setPeriod((long) 999, chronology9);
        org.joda.time.Chronology chronology14 = chronology9.withUTC();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = mutableDateTime15.toString(dateTimeFormatter16);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMinutes(15);
        org.joda.time.Chronology chronology24 = dateTime21.getChronology();
        java.lang.String str25 = chronology24.toString();
        org.joda.time.DurationField durationField26 = chronology24.halfdays();
        org.joda.time.Period period27 = new org.joda.time.Period((long) (byte) 1, (long) (-1), chronology24);
        org.joda.time.DateTimeField dateTimeField28 = chronology24.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = chronology24.monthOfYear();
        mutableDateTime15.setRounding(dateTimeField29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField26", Math.signum(durationField10.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField10)));
    }

    @Test
    public void test195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test195");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone3.getName(946000L, locale10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone3);
        mutableDateTime12.addMillis((-356));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getSecondOfMinute();
        boolean boolean18 = dateTime16.isEqualNow();
        int int19 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime16.plusDays((int) '#');
        org.joda.time.DateTime.Property property22 = dateTime16.centuryOfEra();
        org.joda.time.DateTime.Property property23 = dateTime16.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime16.toDateTime(dateTimeZone26);
        org.joda.time.DateTimeZone dateTimeZone30 = dateTime29.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime27", (dateTime16.compareTo(mutableDateTime27) == 0) == dateTime16.equals(mutableDateTime27));
    }

    @Test
    public void test196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test196");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod3.add((long) 1, chronology7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        mutablePeriod3.setPeriod(readableInterval9);
        int int11 = mutablePeriod3.getDays();
        int int12 = mutablePeriod3.getMinutes();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1, chronology15);
        int int17 = dateTime16.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration19, readableInstant20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.Period period27 = period25.minusSeconds((-1));
        java.lang.String str28 = period25.toString();
        org.joda.time.Period period29 = period25.toPeriod();
        org.joda.time.PeriodType periodType30 = period25.getPeriodType();
        org.joda.time.Period period31 = period21.normalizedStandard(periodType30);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        long long40 = chronology35.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField41 = chronology35.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(44L, periodType30, chronology35);
        org.joda.time.DateTimeField dateTimeField43 = chronology35.clockhourOfHalfday();
        org.joda.time.DateTime dateTime44 = dateTime16.toDateTime(chronology35);
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean50 = localDate47.isSupported(dateTimeFieldType49);
        org.joda.time.Chronology chronology51 = localDate47.getChronology();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology51);
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime44.toMutableDateTime(chronology51);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now(chronology51);
        mutablePeriod3.add(0L, chronology51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and dateTime44", (dateTime16.compareTo(dateTime44) == 0) == dateTime16.equals(dateTime44));
    }

    @Test
    public void test197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test197");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        boolean boolean20 = mutableDateTime19.isEqualNow();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant33 = dateTime25.toInstant();
        org.joda.time.DateTime dateTime36 = dateTime25.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant37 = dateTime36.toInstant();
        boolean boolean38 = instant21.isBefore((org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.DateTime dateTime39 = instant21.toDateTimeISO();
        org.joda.time.ReadableDuration readableDuration42 = null;
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.Period period44 = new org.joda.time.Period(readableDuration42, readableInstant43);
        org.joda.time.PeriodType periodType47 = null;
        org.joda.time.Period period48 = new org.joda.time.Period((long) 100, 1L, periodType47);
        org.joda.time.Period period50 = period48.minusSeconds((-1));
        java.lang.String str51 = period48.toString();
        org.joda.time.Period period52 = period48.toPeriod();
        org.joda.time.PeriodType periodType53 = period48.getPeriodType();
        org.joda.time.Period period54 = period44.normalizedStandard(periodType53);
        org.joda.time.DurationFieldType durationFieldType55 = null;
        int int56 = periodType53.indexOf(durationFieldType55);
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.Chronology chronology60 = instant59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.eras();
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.now(chronology60);
        org.joda.time.DurationField durationField63 = chronology60.eras();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType53, chronology60);
        int int66 = periodType53.size();
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime19, (org.joda.time.ReadableInstant) instant21, periodType53);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period70 = duration69.toPeriod();
        org.joda.time.Duration duration72 = duration69.minus((long) 292278993);
        org.joda.time.Period period73 = new org.joda.time.Period((java.lang.Object) duration72);
        org.joda.time.Duration duration74 = duration72.toDuration();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period79 = duration78.toPeriod();
        org.joda.time.Duration duration82 = duration78.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime76, (org.joda.time.ReadableDuration) duration82);
        org.joda.time.Duration duration84 = duration74.plus((org.joda.time.ReadableDuration) duration82);
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant21", (dateTime10.compareTo(instant21) == 0) == dateTime10.equals(instant21));
    }

    @Test
    public void test198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test198");
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder1.clear();
        java.util.Locale locale3 = builder2.build();
        boolean boolean4 = locale3.hasExtensions();
        java.lang.String str6 = locale3.getExtension('x');
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        mutableDateTime7.addSeconds(0);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours15 = duration14.toStandardHours();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.DateTime dateTime25 = instant24.toDateTime();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.months();
        org.joda.time.Period period29 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime25, (org.joda.time.ReadableInstant) dateTime27, periodType28);
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime21, periodType28);
        org.joda.time.Duration duration31 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration39 = duration35.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration39);
        org.joda.time.Instant instant41 = dateTime33.toInstant();
        org.joda.time.DateTime dateTime44 = dateTime33.withDurationAdded((long) 3, 4);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        int int47 = dateTime46.getYearOfCentury();
        org.joda.time.DateTime dateTime49 = dateTime46.withSecondOfMinute(53);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period52 = duration51.toPeriod();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration57 = duration54.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration58 = duration51.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(readableInstant59, readableInstant60, periodType61);
        org.joda.time.DurationFieldType durationFieldType64 = periodType61.getFieldType((int) (short) 0);
        java.lang.String str65 = periodType61.toString();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime46, (org.joda.time.ReadableDuration) duration51, periodType61);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableInstant) dateTime44, periodType61);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.hourOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType75 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str76 = dateTimeFieldType75.getName();
        int int77 = localDateTime69.indexOf(dateTimeFieldType75);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime69.minusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.plusMillis(10);
        org.joda.time.LocalDateTime localDateTime83 = localDateTime79.minusWeeks(21);
        org.joda.time.LocalDateTime.Property property84 = localDateTime79.millisOfDay();
        org.joda.time.Chronology chronology85 = localDateTime79.getChronology();
        org.joda.time.DurationField durationField86 = chronology85.seconds();
        java.util.Locale locale89 = new java.util.Locale("hourOfDay", "2022-02-22T07:16:18.034Z");
        java.util.Set<java.lang.String> strSet90 = locale89.getUnicodeLocaleAttributes();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket91 = new org.joda.time.format.DateTimeParserBucket(86400000L, chronology85, locale89);
        org.joda.time.DurationField durationField92 = chronology85.weekyears();
        org.joda.time.Period period93 = new org.joda.time.Period((java.lang.Object) str6, periodType61, chronology85);
        org.joda.time.LocalTime localTime94 = org.joda.time.LocalTime.fromMillisOfDay(26360L, chronology85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant22", (dateTime17.compareTo(instant22) == 0) == dateTime17.equals(instant22));
    }

    @Test
    public void test199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test199");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = duration9.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration13 = duration6.minus((org.joda.time.ReadableDuration) duration12);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration6);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.centuryOfEra();
        mutableDateTime1.addHours((int) (byte) 10);
        mutableDateTime1.setMillisOfSecond(32);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = null;
        java.lang.String str24 = dateTime21.toString(dateTimeFormatter23);
        org.joda.time.DateTime dateTime26 = dateTime21.minusMonths(22);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Chronology chronology30 = instant29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.eras();
        org.joda.time.DateTime dateTime32 = dateTime21.withChronology(chronology30);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.centuryOfEra();
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime33.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = property35.getFieldType();
        boolean boolean37 = dateTime21.isSupported(dateTimeFieldType36);
        org.joda.time.LocalDate localDate38 = dateTime21.toLocalDate();
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj40 = mutableDateTime39.clone();
        mutableDateTime39.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime39.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime45 = property43.add(1L);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        long long50 = dateTimeZone46.getMillisKeepLocal(dateTimeZone48, (long) 44);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone46);
        mutableDateTime45.setZoneRetainFields(dateTimeZone46);
        java.util.Locale.Builder builder54 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder55 = builder54.clear();
        java.util.Locale locale56 = builder55.build();
        java.lang.String str57 = dateTimeZone46.getName(555370422L, locale56);
        java.lang.String str59 = dateTimeZone46.getShortName(962578L);
        int int61 = dateTimeZone46.getOffset(1645514174548L);
        org.joda.time.DateTime dateTime62 = localDate38.toDateTimeAtStartOfDay(dateTimeZone46);
        mutableDateTime1.setZone(dateTimeZone46);
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(dateTimeZone46);
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) 26298778, dateTimeZone46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and instant27", (dateTime21.compareTo(instant27) == 0) == dateTime21.equals(instant27));
    }

    @Test
    public void test200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test200");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime4.plus(0L);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTime(dateTimeZone11);
        org.joda.time.Duration duration14 = new org.joda.time.Duration(0L);
        org.joda.time.Duration duration16 = duration14.minus((long) 40);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableDuration) duration16);
        mutableDateTime12.setYear(3);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant9", (dateTime4.compareTo(instant9) == 0) == dateTime4.equals(instant9));
    }

    @Test
    public void test201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test201");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        mutablePeriod35.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod35.toMutablePeriod();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod38, 1439);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration41, readableInstant42);
        org.joda.time.Period period45 = period43.withDays((int) (byte) 1);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours48 = duration47.toStandardHours();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = period43.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        int int54 = period43.getDays();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period43);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime16.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField57 = property56.getField();
        long long59 = dateTimeField57.roundHalfEven(1101312L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime13", (dateTime1.compareTo(dateTime13) == 0) == dateTime1.equals(dateTime13));
    }

    @Test
    public void test202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test202");
        java.lang.Object obj0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        mutableDateTime1.setDate((long) '#');
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean10 = localDate7.isSupported(dateTimeFieldType9);
        int int11 = localDate7.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(obj0, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getName(105144L);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval21 = localDate19.toInterval();
        org.joda.time.LocalDate.Property property22 = localDate19.monthOfYear();
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDate localDate24 = localDate19.plus(readablePeriod23);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test203");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(21, (-198), 62172, 55);
        mutablePeriod4.setPeriod(1645514244758L);
        mutablePeriod4.addWeeks(26382443);
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.centuryOfEra();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.DurationFieldType durationFieldType13 = dateTimeFieldType12.getRangeDurationType();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.eras();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 44, chronology21);
        org.joda.time.DateTimeField dateTimeField26 = dateTimeFieldType16.getField(chronology21);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        long long36 = chronology21.add((org.joda.time.ReadablePeriod) period30, (long) ' ', (int) 'a');
        org.joda.time.Period period38 = period30.minusHours((-292275054));
        org.joda.time.Period period40 = period38.minusHours(2000);
        int int41 = period38.getMinutes();
        org.joda.time.Period period42 = period38.toPeriod();
        org.joda.time.Period period44 = period38.withYears(54);
        org.joda.time.ReadableDuration readableDuration45 = null;
        org.joda.time.ReadableInstant readableInstant46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period(readableDuration45, readableInstant46);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, 1L, periodType50);
        org.joda.time.Period period53 = period51.minusSeconds((-1));
        java.lang.String str54 = period51.toString();
        org.joda.time.Period period55 = period51.toPeriod();
        org.joda.time.PeriodType periodType56 = period51.getPeriodType();
        org.joda.time.Period period57 = period47.normalizedStandard(periodType56);
        org.joda.time.Period period59 = period57.withSeconds(10);
        org.joda.time.PeriodType periodType60 = period59.getPeriodType();
        org.joda.time.Period period61 = period38.normalizedStandard(periodType60);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant68 = new org.joda.time.Instant();
        org.joda.time.Instant instant70 = instant68.withMillis(0L);
        org.joda.time.Chronology chronology71 = instant70.getChronology();
        org.joda.time.DurationField durationField72 = chronology71.eras();
        org.joda.time.LocalTime localTime73 = org.joda.time.LocalTime.now(chronology71);
        org.joda.time.DurationField durationField74 = chronology71.eras();
        mutablePeriod66.setPeriod((long) 999, chronology71);
        org.joda.time.Chronology chronology76 = chronology71.withUTC();
        org.joda.time.DateTimeField dateTimeField77 = chronology76.centuryOfEra();
        org.joda.time.Period period78 = new org.joda.time.Period((-420198L), (long) 436, periodType60, chronology76);
        org.joda.time.LocalTime localTime79 = new org.joda.time.LocalTime(chronology76);
        boolean boolean80 = durationFieldType13.isSupported(chronology76);
        mutablePeriod4.set(durationFieldType13, 26190);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime9 and instant18", (mutableDateTime9.compareTo(instant18) == 0) == mutableDateTime9.equals(instant18));
    }

    @Test
    public void test204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test204");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        org.joda.time.Period period23 = period19.toPeriod();
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.Period period25 = period15.normalizedStandard(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = periodType24.indexOf(durationFieldType26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType24, chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime5.toMutableDateTime(chronology31);
        mutablePeriod2.setPeriod((long) 36946953, 960000L, chronology31);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        mutablePeriod44.setPeriod((long) 999, chronology49);
        mutablePeriod2.add(949680L, chronology49);
        org.joda.time.DateTimeField dateTimeField55 = chronology49.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField56 = chronology49.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and mutableDateTime37", (mutableDateTime5.compareTo(mutableDateTime37) == 0) == mutableDateTime5.equals(mutableDateTime37));
    }

    @Test
    public void test205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test205");
        org.joda.time.Period period1 = org.joda.time.Period.years(26298778);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        int int11 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks(44);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((-1L), 36946953);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period22 = period20.minusSeconds((-1));
        org.joda.time.Period period24 = period20.withWeeks((int) (byte) 0);
        org.joda.time.Period period26 = period24.withHours(2000);
        org.joda.time.DateTime dateTime27 = dateTime16.minus((org.joda.time.ReadablePeriod) period24);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1, chronology29);
        int int31 = dateTime30.getMinuteOfDay();
        org.joda.time.Instant instant32 = dateTime30.toInstant();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        int int35 = dateTime34.getYearOfCentury();
        int int36 = dateTime34.getWeekyear();
        org.joda.time.DateTime dateTime37 = dateTime34.withEarlierOffsetAtOverlap();
        java.lang.String str38 = dateTime37.toString();
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime37.toMutableDateTime();
        org.joda.time.Period period40 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant32, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.Period period41 = period24.minus((org.joda.time.ReadablePeriod) period40);
        org.joda.time.Period period43 = period41.plusDays(26268751);
        int int44 = period43.getMinutes();
        org.joda.time.Period period45 = period1.minus((org.joda.time.ReadablePeriod) period43);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant32", (dateTime3.compareTo(instant32) == 0) == dateTime3.equals(instant32));
    }

    @Test
    public void test206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test206");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTimeField dateTimeField3 = property1.getField();
        int int4 = property1.getLeapAmount();
        org.joda.time.MutableDateTime mutableDateTime6 = property1.add((int) (byte) 1);
        org.joda.time.MutableDateTime mutableDateTime8 = property1.add((int) (short) 1);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod(readableInstant12, readableInstant13, periodType14);
        org.joda.time.DurationFieldType durationFieldType17 = periodType14.getFieldType((int) (short) 0);
        java.lang.String str18 = periodType14.toString();
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.Period period23 = new org.joda.time.Period((long) 53, (long) (-1), periodType14, chronology22);
        org.joda.time.DateTimeField dateTimeField24 = dateTimeFieldType9.getField(chronology22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes(15);
        org.joda.time.Chronology chronology29 = dateTime26.getChronology();
        java.lang.String str30 = chronology29.toString();
        org.joda.time.DateTimeField dateTimeField31 = dateTimeFieldType9.getField(chronology29);
        java.lang.String str32 = dateTimeFieldType9.toString();
        boolean boolean33 = mutableDateTime8.isSupported(dateTimeFieldType9);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration40 = duration37.withDurationAdded((long) (short) 100, (int) ' ');
        long long41 = duration40.getMillis();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.DateTime dateTime45 = instant44.toDateTime();
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.DateTime dateTime49 = instant48.toDateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.months();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime51, periodType52);
        boolean boolean54 = dateTime45.isBefore((org.joda.time.ReadableInstant) dateTime49);
        int int55 = dateTime49.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(readableInstant56, readableInstant57, periodType58);
        org.joda.time.PeriodType periodType60 = periodType58.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime49, periodType58);
        org.joda.time.Period period62 = new org.joda.time.Period(0L, 24L, periodType58);
        mutableDateTime8.add((org.joda.time.ReadablePeriod) period62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and dateTime26", (instant19.compareTo(dateTime26) == 0) == instant19.equals(dateTime26));
    }

    @Test
    public void test207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test207");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        org.joda.time.Days days11 = duration8.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod14.clear();
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration21 = duration17.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes(15);
        org.joda.time.Interval interval26 = duration21.toIntervalTo((org.joda.time.ReadableInstant) dateTime25);
        mutablePeriod14.setPeriod((org.joda.time.ReadableInterval) interval26);
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant28, readableInstant29, periodType30);
        org.joda.time.DurationFieldType durationFieldType33 = periodType30.getFieldType((int) (short) 0);
        int int34 = mutablePeriod14.get(durationFieldType33);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        mutableDateTime37.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime37.copy();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime37.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.eras();
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.DurationField durationField49 = chronology46.eras();
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration36, chronology46);
        org.joda.time.Duration duration52 = duration8.withDurationAdded((org.joda.time.ReadableDuration) duration36, 26148950);
        org.joda.time.Period period53 = duration52.toPeriod();
        org.joda.time.DurationFieldType[] durationFieldTypeArray54 = period53.getFieldTypes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant43", (dateTime23.compareTo(instant43) == 0) == dateTime23.equals(instant43));
    }

    @Test
    public void test208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test208");
        org.joda.time.Period period1 = org.joda.time.Period.days(62176);
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = dateTime13.withZone(dateTimeZone14);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDay();
        java.lang.String str19 = periodType18.getName();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(100L, periodType18);
        org.joda.time.DateTime dateTime21 = dateTime16.plus((org.joda.time.ReadablePeriod) mutablePeriod20);
        org.joda.time.Duration duration22 = period1.toDurationTo((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Chronology chronology23 = dateTime21.getChronology();
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now(chronology23);
        org.joda.time.Chronology chronology25 = chronology23.withUTC();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and mutableDateTime24", (dateTime10.compareTo(mutableDateTime24) == 0) == dateTime10.equals(mutableDateTime24));
    }

    @Test
    public void test209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test209");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.set(45);
        org.joda.time.MutableDateTime mutableDateTime7 = property4.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime9 = property4.add(45);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        long long13 = dateTimeZone10.previousTransition(100L);
        int int15 = dateTimeZone10.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime16 = mutableDateTime9.toDateTime(dateTimeZone10);
        mutableDateTime2.setZoneRetainFields(dateTimeZone10);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((-29862722304000000L), dateTimeZone10);
        org.joda.time.LocalDate.Property property19 = localDate18.weekyear();
        org.joda.time.LocalDate localDate21 = property19.addWrapFieldToCopy(7);
        int int22 = property19.getLeapAmount();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime16", (mutableDateTime3.compareTo(dateTime16) == 0) == mutableDateTime3.equals(dateTime16));
    }

    @Test
    public void test210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test210");
        org.joda.time.PeriodType periodType1 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMinutes(15);
        org.joda.time.Chronology chronology8 = dateTime5.getChronology();
        java.lang.String str9 = chronology8.toString();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.millisOfDay();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((long) 26228, chronology8);
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod((-62135596800000L), periodType1, chronology8);
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration25, readableInstant26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.Period period33 = period31.minusSeconds((-1));
        java.lang.String str34 = period31.toString();
        org.joda.time.Period period35 = period31.toPeriod();
        org.joda.time.PeriodType periodType36 = period31.getPeriodType();
        org.joda.time.Period period37 = period27.normalizedStandard(periodType36);
        org.joda.time.DurationFieldType durationFieldType38 = null;
        int int39 = periodType36.indexOf(durationFieldType38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.eras();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now(chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType36, chronology43);
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime17.toMutableDateTime(chronology43);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours52 = duration51.toStandardHours();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        int int55 = dateTime54.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = dateTime54.plus(0L);
        mutableDateTime49.setMillis((org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DurationFieldType durationFieldType60 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime49.add(durationFieldType60, 99);
        org.joda.time.LocalTime localTime64 = localTime15.withFieldAdded(durationFieldType60, 26175904);
        org.joda.time.Instant instant66 = new org.joda.time.Instant();
        org.joda.time.Instant instant68 = instant66.withMillis(0L);
        org.joda.time.Chronology chronology69 = instant68.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.eras();
        org.joda.time.LocalTime localTime71 = org.joda.time.LocalTime.now(chronology69);
        org.joda.time.DurationField durationField72 = chronology69.eras();
        org.joda.time.DateTime dateTime73 = new org.joda.time.DateTime((long) 44, chronology69);
        org.joda.time.DateTimeField dateTimeField74 = chronology69.dayOfWeek();
        boolean boolean75 = durationFieldType60.isSupported(chronology69);
        int int76 = mutablePeriod13.indexOf(durationFieldType60);
        mutablePeriod13.add((long) (byte) 100);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant40", (dateTime5.compareTo(instant40) == 0) == dateTime5.equals(instant40));
    }

    @Test
    public void test211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test211");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        boolean boolean37 = dateTimeFormatter36.isOffsetParsed();
        org.joda.time.format.DateTimeParser dateTimeParser38 = dateTimeFormatter36.getParser();
        java.util.Locale.Builder builder39 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder40 = builder39.clear();
        java.util.Locale locale41 = java.util.Locale.GERMAN;
        java.lang.String str42 = locale41.getDisplayName();
        java.lang.String str43 = locale41.getISO3Language();
        java.util.Locale.Builder builder44 = builder40.setLocale(locale41);
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale48);
        java.util.Locale locale51 = dateTimeParserBucket50.getLocale();
        java.util.Locale.Builder builder52 = builder44.setLocale(locale51);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter36.withLocale(locale51);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime54.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime57 = property55.set(45);
        org.joda.time.MutableDateTime mutableDateTime58 = property55.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime60 = property55.add(45);
        mutableDateTime60.addWeeks(10);
        org.joda.time.LocalDateTime localDateTime63 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property66 = localDateTime63.hourOfDay();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime63.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str70 = dateTimeFieldType69.getName();
        int int71 = localDateTime63.indexOf(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime63.minusSeconds((int) (short) 0);
        org.joda.time.Instant instant74 = new org.joda.time.Instant();
        org.joda.time.Instant instant76 = instant74.minus((long) 0);
        org.joda.time.DateTime dateTime77 = localDateTime63.toDateTime((org.joda.time.ReadableInstant) instant76);
        boolean boolean78 = mutableDateTime60.isBefore((org.joda.time.ReadableInstant) dateTime77);
        int int79 = mutableDateTime60.getMinuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone80 = mutableDateTime60.getZone();
        int int82 = dateTimeZone80.getOffsetFromLocal((long) 30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter53.withZone(dateTimeZone80);
        java.lang.String str85 = dateTimeZone80.getShortName(1056868L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime14", (instant3.compareTo(dateTime14) == 0) == instant3.equals(dateTime14));
    }

    @Test
    public void test212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test212");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardMinutes((long) (byte) -1);
        org.joda.time.Instant instant7 = instant2.withDurationAdded((org.joda.time.ReadableDuration) duration5, 0);
        org.joda.time.Instant instant10 = instant7.withDurationAdded(25L, 26158);
        org.joda.time.MutableDateTime mutableDateTime11 = instant10.toMutableDateTime();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = property13.getField();
        org.joda.time.LocalDate localDate15 = property13.roundCeilingCopy();
        org.joda.time.Chronology chronology16 = localDate15.getChronology();
        org.joda.time.DurationField durationField17 = chronology16.eras();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        mutableDateTime11.setRounding(dateTimeField18);
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod22.clear();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration29 = duration25.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        org.joda.time.DateTime dateTime33 = dateTime31.plusMinutes(15);
        org.joda.time.Interval interval34 = duration29.toIntervalTo((org.joda.time.ReadableInstant) dateTime33);
        mutablePeriod22.setPeriod((org.joda.time.ReadableInterval) interval34);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant36, readableInstant37, periodType38);
        org.joda.time.DurationFieldType durationFieldType41 = periodType38.getFieldType((int) (short) 0);
        int int42 = mutablePeriod22.get(durationFieldType41);
        mutableDateTime11.add(durationFieldType41, 26311);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(readableInstant47, readableInstant48, periodType49);
        org.joda.time.DurationFieldType durationFieldType52 = periodType49.getFieldType((int) (short) 0);
        java.lang.String str53 = periodType49.toString();
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Chronology chronology57 = instant56.getChronology();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 53, (long) (-1), periodType49, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.weekyearOfCentury();
        int int61 = dateTimeField59.get((long) 1898);
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property63 = localDate62.monthOfYear();
        org.joda.time.LocalDate localDate64 = property63.roundFloorCopy();
        org.joda.time.DateTime dateTime65 = localDate64.toDateTimeAtMidnight();
        org.joda.time.Chronology chronology68 = null;
        java.util.Locale locale69 = java.util.Locale.GERMAN;
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale69.getDisplayVariant(locale70);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket72 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology68, locale70);
        java.lang.String str73 = locale70.getDisplayScript();
        java.util.Locale locale74 = locale70.stripExtensions();
        java.lang.String str75 = locale74.getDisplayVariant();
        java.lang.String str76 = dateTimeField59.getAsShortText((org.joda.time.ReadablePartial) localDate64, 62262, locale74);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = dateTimeField59.getType();
        org.joda.time.MutableDateTime.Property property78 = mutableDateTime11.property(dateTimeFieldType77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime31", (instant0.compareTo(dateTime31) == 0) == instant0.equals(dateTime31));
    }

    @Test
    public void test213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test213");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatter2.getPrinter();
        boolean boolean38 = dateTimeFormatter2.isParser();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime42 = dateTime40.withZoneRetainFields(dateTimeZone41);
        boolean boolean44 = dateTime42.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology45 = dateTime42.getChronology();
        org.joda.time.DateTimeField dateTimeField46 = chronology45.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter2.withChronology(chronology45);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(chronology45);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.centuryOfEra();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime49.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime52 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property55 = localDateTime52.hourOfDay();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime52.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) 100, 1L, periodType60);
        org.joda.time.Period period63 = period61.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime64 = localDateTime57.minus((org.joda.time.ReadablePeriod) period61);
        mutableDateTime49.add((org.joda.time.ReadablePeriod) period61, 0);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime49.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime68 = property67.roundHalfFloor();
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        mutableDateTime68.add(readablePeriod69, 1345);
        int int72 = mutableDateTime68.getCenturyOfEra();
        boolean boolean73 = dateTime48.isBefore((org.joda.time.ReadableInstant) mutableDateTime68);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime14", (instant3.compareTo(dateTime14) == 0) == instant3.equals(dateTime14));
    }

    @Test
    public void test214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test214");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(chronology13);
        org.joda.time.LocalDate.Property property16 = localDate15.centuryOfEra();
        org.joda.time.LocalDate localDate17 = property16.roundCeilingCopy();
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        org.joda.time.Chronology chronology20 = null;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket24 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology20, locale22);
        java.lang.Object obj25 = dateTimeParserBucket24.saveState();
        org.joda.time.DateTimeZone dateTimeZone26 = dateTimeParserBucket24.getZone();
        org.joda.time.DateTime dateTime27 = localDate17.toDateTimeAtCurrentTime(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime((-205878993L), dateTimeZone26);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getYearOfCentury();
        int int32 = dateTime30.getWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime30.plus((long) 15);
        org.joda.time.DateTime.Property property35 = dateTime30.year();
        org.joda.time.DateTime dateTime36 = property35.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime38 = property35.addToCopy((long) 61);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((-229564796800L));
        org.joda.time.Period period41 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration40);
        org.joda.time.DateTime dateTime43 = dateTime38.withWeekyear(0);
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        org.joda.time.DateTime dateTime48 = localDate44.toDateTimeAtCurrentTime(dateTimeZone46);
        org.joda.time.MutableDateTime mutableDateTime49 = org.joda.time.MutableDateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = dateTime38.withZoneRetainFields(dateTimeZone46);
        org.joda.time.DateTime dateTime51 = org.joda.time.DateTime.now(dateTimeZone46);
        mutableDateTime28.setZone(dateTimeZone46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime30", (instant10.compareTo(dateTime30) == 0) == instant10.equals(dateTime30));
    }

    @Test
    public void test215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test215");
        java.lang.Object obj0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        mutableDateTime1.setDate((long) '#');
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean10 = localDate7.isSupported(dateTimeFieldType9);
        int int11 = localDate7.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(obj0, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getName(105144L);
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate(dateTimeZone12);
        org.joda.time.DateTime dateTime20 = localDate19.toDateTimeAtStartOfDay();
        org.joda.time.Interval interval21 = localDate19.toInterval();
        org.joda.time.LocalDate.Property property22 = localDate19.monthOfYear();
        org.joda.time.LocalDate.Property property23 = localDate19.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test216");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfMonth();
        org.joda.time.MutableDateTime mutableDateTime4 = property3.roundHalfEven();
        int int5 = mutableDateTime4.getWeekOfWeekyear();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1, chronology7);
        int int9 = dateTime8.getMinuteOfDay();
        org.joda.time.Instant instant10 = dateTime8.toInstant();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.centuryOfEra();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime11.dayOfWeek();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes(15);
        org.joda.time.DateTime dateTime26 = localDateTime19.toDateTime((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime28 = localDateTime19.toDateTime(dateTimeZone27);
        org.joda.time.DateTime.Property property29 = dateTime28.minuteOfHour();
        org.joda.time.DateTime dateTime30 = property29.roundFloorCopy();
        org.joda.time.DateTime dateTime32 = dateTime30.withDayOfYear(46);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        boolean boolean34 = dateTimeZone33.isFixed();
        org.joda.time.DateTime dateTime35 = dateTime30.withZone(dateTimeZone33);
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime11.toMutableDateTime(dateTimeZone33);
        java.lang.String str38 = dateTimeZone33.getName(0L);
        boolean boolean39 = dateTimeZone33.isFixed();
        org.joda.time.DateTime dateTime40 = dateTime8.toDateTime(dateTimeZone33);
        mutableDateTime4.setZone(dateTimeZone33);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and instant10", (dateTime8.compareTo(instant10) == 0) == dateTime8.equals(instant10));
    }

    @Test
    public void test217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test217");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(dateTimeZone11);
        int int15 = dateTime14.getSecondOfDay();
        org.joda.time.YearMonthDay yearMonthDay16 = dateTime14.toYearMonthDay();
        org.joda.time.DateTime dateTime18 = dateTime14.plusMinutes(2);
        org.joda.time.Period period20 = org.joda.time.Period.weeks(20);
        org.joda.time.Period period22 = period20.minusMillis(3);
        org.joda.time.Period period24 = period20.minusWeeks(766);
        org.joda.time.DateTime dateTime25 = dateTime18.minus((org.joda.time.ReadablePeriod) period20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime13", (mutableDateTime0.compareTo(dateTime13) == 0) == mutableDateTime0.equals(dateTime13));
    }

    @Test
    public void test218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test218");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField19 = mutableDateTime0.getRoundingField();
        int int20 = mutableDateTime0.getRoundingMode();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration29 = duration25.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant30 = instant23.plus((org.joda.time.ReadableDuration) duration29);
        long long31 = instant30.getMillis();
        org.joda.time.Chronology chronology32 = instant30.getChronology();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.DateTime dateTime36 = instant35.toDateTime();
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.DateTime dateTime40 = instant39.toDateTime();
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType43 = org.joda.time.PeriodType.months();
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime40, (org.joda.time.ReadableInstant) dateTime42, periodType43);
        boolean boolean45 = dateTime36.isBefore((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant30, (org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration52 = duration48.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMinutes(15);
        org.joda.time.Interval interval57 = duration52.toIntervalTo((org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Instant instant58 = instant30.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Instant instant61 = instant58.withDurationAdded(1645514161062L, (int) (short) -1);
        org.joda.time.Chronology chronology62 = null;
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime(chronology62);
        org.joda.time.DateTime dateTime65 = dateTime63.plusMinutes(15);
        org.joda.time.Chronology chronology66 = dateTime63.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.hours();
        org.joda.time.DurationField durationField68 = chronology66.years();
        org.joda.time.DateTimeField dateTimeField69 = chronology66.dayOfYear();
        org.joda.time.DateTimeField dateTimeField70 = chronology66.halfdayOfDay();
        org.joda.time.DateTime dateTime71 = instant58.toDateTime(chronology66);
        mutableDateTime0.setChronology(chronology66);
        org.joda.time.DateTimeField dateTimeField73 = chronology66.millisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and dateTime54", (instant21.compareTo(dateTime54) == 0) == instant21.equals(dateTime54));
    }

    @Test
    public void test219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test219");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks(44);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime8.withChronology(chronology16);
        org.joda.time.DateTime.Property property20 = dateTime8.secondOfMinute();
        org.joda.time.DateTime dateTime22 = dateTime8.withWeekyear(1200);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.DateTime dateTime24 = dateTime22.withLaterOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test220");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime4.plus(0L);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.DateTime.Property property10 = dateTime8.weekOfWeekyear();
        int int11 = dateTime8.getMillisOfDay();
        org.joda.time.Instant instant12 = dateTime8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        long long17 = dateTimeZone13.getMillisKeepLocal(dateTimeZone15, (long) 44);
        boolean boolean19 = dateTimeZone15.isStandardOffset((long) (-1));
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((java.lang.Object) instant12, dateTimeZone15);
        org.joda.time.DateMidnight dateMidnight21 = dateTime20.toDateMidnight();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        long long30 = chronology25.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology25);
        org.joda.time.MutableDateTime mutableDateTime32 = dateMidnight21.toMutableDateTime(chronology25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant9", (dateTime4.compareTo(instant9) == 0) == dateTime4.equals(instant9));
    }

    @Test
    public void test221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test221");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property10 = localDate9.dayOfYear();
        int int11 = localDate9.getCenturyOfEra();
        boolean boolean12 = localDate1.isBefore((org.joda.time.ReadablePartial) localDate9);
        org.joda.time.LocalDate localDate14 = localDate1.plusWeeks(26246362);
        org.joda.time.LocalDate localDate16 = localDate1.minusWeeks(15485854);
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDate17.toDateTimeAtCurrentTime(dateTimeZone19);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        int int23 = mutableDateTime22.getDayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(50, (int) (byte) 0);
        long long29 = dateTimeZone26.adjustOffset((long) (short) 100, true);
        mutableDateTime22.setZone(dateTimeZone26);
        org.joda.time.DateMidnight dateMidnight31 = localDate1.toDateMidnight(dateTimeZone26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime21 and mutableDateTime22", (dateTime21.compareTo(mutableDateTime22) == 0) == dateTime21.equals(mutableDateTime22));
    }

    @Test
    public void test222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test222");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.Instant instant4 = dateTime2.toInstant();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.MutableDateTime mutableDateTime11 = dateTime9.toMutableDateTime();
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant4, (org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalTime localTime13 = dateTime9.toLocalTime();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod(readableInstant17, readableInstant18, periodType19);
        org.joda.time.DurationFieldType durationFieldType22 = periodType19.getFieldType((int) (short) 0);
        java.lang.String str23 = periodType19.toString();
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.Period period28 = new org.joda.time.Period((long) 53, (long) (-1), periodType19, chronology27);
        org.joda.time.DateTimeField dateTimeField29 = dateTimeFieldType14.getField(chronology27);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant33, readableInstant34, periodType35);
        org.joda.time.DurationFieldType durationFieldType38 = periodType35.getFieldType((int) (short) 0);
        java.lang.String str39 = periodType35.toString();
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 53, (long) (-1), periodType35, chronology43);
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(readableInstant47, readableInstant48, periodType49);
        org.joda.time.DurationFieldType durationFieldType52 = periodType49.getFieldType((int) (short) 0);
        java.lang.String str53 = periodType49.toString();
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Chronology chronology57 = instant56.getChronology();
        org.joda.time.Period period58 = new org.joda.time.Period((long) 53, (long) (-1), periodType49, chronology57);
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((long) (short) 10, periodType35, chronology57);
        org.joda.time.DateTimeField dateTimeField60 = chronology57.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField61 = dateTimeFieldType14.getField(chronology57);
        boolean boolean62 = localTime13.isSupported(dateTimeFieldType14);
        java.lang.String str63 = dateTimeFieldType14.getName();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant4", (dateTime2.compareTo(instant4) == 0) == dateTime2.equals(instant4));
    }

    @Test
    public void test223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test223");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone14);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.lang.String str22 = locale21.getDisplayName();
        java.lang.String str23 = dateTimeZone19.getName(100L, locale21);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(948227L, dateTimeZone19);
        long long25 = mutableDateTime24.getMillis();
        mutableDateTime24.setWeekyear(1439);
        org.joda.time.DateTime dateTime28 = mutableDateTime24.toDateTime();
        boolean boolean29 = dateTimeZone14.equals((java.lang.Object) dateTime28);
        java.util.Locale locale32 = new java.util.Locale("1970", "millis");
        java.lang.String str33 = locale32.getDisplayVariant();
        java.util.Calendar calendar34 = dateTime28.toCalendar(locale32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test224");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.Instant instant2 = instant0.toInstant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.Instant instant6 = instant4.toInstant();
        long long7 = instant6.getMillis();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getSecondOfMinute();
        boolean boolean11 = dateTime9.isEqualNow();
        int int12 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime14 = dateTime9.plusDays((int) '#');
        boolean boolean15 = instant6.isBefore((org.joda.time.ReadableInstant) dateTime9);
        boolean boolean16 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDate localDate17 = dateTime9.toLocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(9);
        java.util.Date date20 = localDate19.toDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test225");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        org.joda.time.LocalDate.Property property2 = localDate1.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime4.copy();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime11 = property8.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.toMutableDateTime(dateTimeZone12);
        mutableDateTime14.add(51L);
        int int17 = mutableDateTime14.getHourOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = org.joda.time.MutableDateTime.now();
        mutableDateTime18.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime18.copy();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime18.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime26 = property22.set(1);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getYearOfCentury();
        int int30 = dateTime28.getWeekyear();
        org.joda.time.DateTime dateTime31 = dateTime28.withEarlierOffsetAtOverlap();
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.MutableDateTime mutableDateTime33 = dateTime31.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        boolean boolean35 = dateTimeZone34.isFixed();
        mutableDateTime33.setZoneRetainFields(dateTimeZone34);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime26.toMutableDateTime(dateTimeZone34);
        mutableDateTime14.setZone(dateTimeZone34);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime44 = dateTime42.withZoneRetainFields(dateTimeZone43);
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTime dateTime49 = localDate45.toDateTimeAtCurrentTime(dateTimeZone47);
        int int50 = dateTime44.compareTo((org.joda.time.ReadableInstant) dateTime49);
        org.joda.time.DateTime dateTime52 = dateTime49.minusWeeks(44);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMinutes(15);
        org.joda.time.Chronology chronology57 = dateTime54.getChronology();
        java.lang.String str58 = chronology57.toString();
        org.joda.time.DateTimeField dateTimeField59 = chronology57.dayOfYear();
        org.joda.time.DateTime dateTime60 = dateTime49.withChronology(chronology57);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(readableInstant62, readableInstant63, periodType64);
        org.joda.time.DurationFieldType durationFieldType67 = periodType64.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType68 = periodType64.withMillisRemoved();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime60, readableDuration61, periodType68);
        org.joda.time.Period period70 = new org.joda.time.Period(0L, periodType68);
        org.joda.time.format.DateTimePrinter dateTimePrinter71 = null;
        org.joda.time.format.DateTimeParser dateTimeParser72 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter71, dateTimeParser72);
        org.joda.time.Instant instant74 = new org.joda.time.Instant();
        org.joda.time.Instant instant76 = instant74.withMillis(0L);
        org.joda.time.Chronology chronology77 = instant76.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.eras();
        long long82 = chronology77.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter83 = dateTimeFormatter73.withChronology(chronology77);
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(3600000L, periodType68, chronology77);
        org.joda.time.DateTimeZone dateTimeZone85 = chronology77.getZone();
        boolean boolean86 = dateTimeZone34.equals((java.lang.Object) chronology77);
        org.joda.time.MutableDateTime mutableDateTime87 = new org.joda.time.MutableDateTime((long) 26252, dateTimeZone34);
        org.joda.time.DateTime dateTime88 = localDate1.toDateTimeAtStartOfDay(dateTimeZone34);
        org.joda.time.DateTime dateTime90 = dateTime88.withCenturyOfEra(47);
        org.joda.time.DateTime dateTime92 = dateTime90.minusDays(1191);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime18 and mutableDateTime37", (mutableDateTime18.compareTo(mutableDateTime37) == 0) == mutableDateTime18.equals(mutableDateTime37));
    }

    @Test
    public void test226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test226");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.year();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateTime dateTime43 = dateTime42.withLaterOffsetAtOverlap();
        java.lang.Object obj44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(obj44);
        boolean boolean47 = dateTime45.isBefore((long) 7);
        java.lang.String str48 = dateTime45.toString();
        org.joda.time.DateTime dateTime50 = dateTime45.minus((long) 7);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Chronology chronology54 = instant53.getChronology();
        org.joda.time.DateTime dateTime55 = dateTime45.toDateTime(chronology54);
        org.joda.time.DurationField durationField56 = chronology54.days();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.weekyear();
        org.joda.time.DateTimeField dateTimeField58 = chronology54.secondOfMinute();
        org.joda.time.DurationField durationField59 = chronology54.hours();
        org.joda.time.DateTime dateTime60 = dateTime43.withChronology(chronology54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField56", Math.signum(durationField22.compareTo(durationField56)) == -Math.signum(durationField56.compareTo(durationField22)));
    }

    @Test
    public void test227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test227");
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period11 = period9.minusSeconds((-1));
        java.lang.String str12 = period9.toString();
        org.joda.time.Period period13 = period9.toPeriod();
        org.joda.time.PeriodType periodType14 = period9.getPeriodType();
        org.joda.time.Period period15 = period5.normalizedStandard(periodType14);
        org.joda.time.Period period17 = period15.withSeconds(10);
        org.joda.time.PeriodType periodType18 = period17.getPeriodType();
        org.joda.time.PeriodType periodType19 = periodType18.withMillisRemoved();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(15);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        java.lang.String str26 = chronology25.toString();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology25);
        org.joda.time.DurationField durationField28 = chronology25.minutes();
        org.joda.time.Period period29 = new org.joda.time.Period(1080765L, (long) 2045, periodType19, chronology25);
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.Chronology chronology33 = instant32.getChronology();
        org.joda.time.DurationField durationField34 = chronology33.eras();
        long long38 = chronology33.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField39 = chronology33.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField40 = chronology33.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj42 = mutableDateTime41.clone();
        mutableDateTime41.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime41.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.add(1L);
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        long long52 = dateTimeZone48.getMillisKeepLocal(dateTimeZone50, (long) 44);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone48);
        mutableDateTime47.setZoneRetainFields(dateTimeZone48);
        java.util.Locale.Builder builder56 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder57 = builder56.clear();
        java.util.Locale locale58 = builder57.build();
        java.lang.String str59 = dateTimeZone48.getName(555370422L, locale58);
        java.lang.String str61 = dateTimeZone48.getShortName(962578L);
        int int63 = dateTimeZone48.getOffset(1645514174548L);
        java.lang.String str64 = dateTimeZone48.toString();
        org.joda.time.Chronology chronology65 = chronology33.withZone(dateTimeZone48);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((long) 26348266, periodType19, chronology65);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField28 and durationField34", Math.signum(durationField28.compareTo(durationField34)) == -Math.signum(durationField34.compareTo(durationField28)));
    }

    @Test
    public void test228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test228");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime13.toString(dateTimeFormatter15);
        org.joda.time.DateTime dateTime18 = dateTime13.minusMonths(22);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.joda.time.DateTime dateTime24 = dateTime13.withChronology(chronology22);
        org.joda.time.Period period25 = duration4.toPeriod(chronology22);
        org.joda.time.DurationField durationField26 = chronology22.eras();
        org.joda.time.DateTimeField dateTimeField27 = chronology22.clockhourOfHalfday();
        org.joda.time.DurationField durationField28 = chronology22.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField28, and durationField23", !(durationField23.compareTo(durationField28) == 0) || (Math.signum(durationField23.compareTo(durationField23)) == Math.signum(durationField28.compareTo(durationField23))));
    }

    @Test
    public void test229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test229");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        org.joda.time.Period period23 = period19.toPeriod();
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.Period period25 = period15.normalizedStandard(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = periodType24.indexOf(durationFieldType26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType24, chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime5.toMutableDateTime(chronology31);
        mutablePeriod2.setPeriod((long) 36946953, 960000L, chronology31);
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        mutablePeriod44.setPeriod((long) 999, chronology49);
        mutablePeriod2.add(949680L, chronology49);
        org.joda.time.DateTimeField dateTimeField55 = chronology49.clockhourOfHalfday();
        org.joda.time.DurationField durationField56 = chronology49.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField32, durationField56, and durationField32", !(durationField32.compareTo(durationField56) == 0) || (Math.signum(durationField32.compareTo(durationField32)) == Math.signum(durationField56.compareTo(durationField32))));
    }

    @Test
    public void test230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test230");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.yearOfEra();
        org.joda.time.Chronology chronology34 = chronology26.withUTC();
        long long38 = chronology26.add((long) 26346587, 1645488050376L, 62234);
        org.joda.time.DateTimeField dateTimeField39 = chronology26.millisOfDay();
        org.joda.time.DateTimeField dateTimeField40 = chronology26.dayOfWeek();
        org.joda.time.DurationField durationField41 = chronology26.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField41, and durationField27", !(durationField27.compareTo(durationField41) == 0) || (Math.signum(durationField27.compareTo(durationField27)) == Math.signum(durationField41.compareTo(durationField27))));
    }

    @Test
    public void test231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test231");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        org.joda.time.Duration duration8 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration8, 1424);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        org.joda.time.Period period18 = period14.withWeeks((int) (byte) 0);
        org.joda.time.Period period20 = period14.minusDays(26183562);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.dayOfYear();
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) 100, 1L, periodType25);
        org.joda.time.Period period28 = period26.minusSeconds((-1));
        java.lang.String str29 = period26.toString();
        org.joda.time.LocalDate localDate31 = localDate21.withPeriodAdded((org.joda.time.ReadablePeriod) period26, 3);
        org.joda.time.DateTime dateTime32 = localDate31.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale36);
        java.lang.Object obj39 = dateTimeParserBucket38.saveState();
        org.joda.time.DateTimeZone dateTimeZone40 = dateTimeParserBucket38.getZone();
        org.joda.time.DateTime dateTime41 = localDate31.toDateTimeAtStartOfDay(dateTimeZone40);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.Period period47 = period45.minusSeconds((-1));
        org.joda.time.Period period49 = period47.multipliedBy((int) '#');
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.centuries();
        int int51 = period49.get(durationFieldType50);
        boolean boolean52 = localDate31.isSupported(durationFieldType50);
        java.lang.String str53 = durationFieldType50.toString();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTime dateTime57 = dateTime55.plusMinutes(15);
        org.joda.time.Chronology chronology58 = dateTime55.getChronology();
        org.joda.time.DurationField durationField59 = chronology58.hours();
        org.joda.time.DateTimeField dateTimeField60 = chronology58.minuteOfHour();
        boolean boolean61 = durationFieldType50.isSupported(chronology58);
        int int62 = period14.get(durationFieldType50);
        mutableDateTime1.add(durationFieldType50, 2000);
        org.joda.time.MutableDateTime.Property property65 = mutableDateTime1.dayOfWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter66 = null;
        org.joda.time.format.DateTimeParser dateTimeParser67 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter68 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter66, dateTimeParser67);
        org.joda.time.Instant instant69 = new org.joda.time.Instant();
        org.joda.time.Instant instant71 = instant69.withMillis(0L);
        org.joda.time.Chronology chronology72 = instant71.getChronology();
        org.joda.time.DurationField durationField73 = chronology72.eras();
        long long77 = chronology72.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter68.withChronology(chronology72);
        org.joda.time.format.DateTimePrinter dateTimePrinter79 = dateTimeFormatter78.getPrinter();
        boolean boolean80 = dateTimeFormatter78.isParser();
        java.lang.Integer int81 = dateTimeFormatter78.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter82 = dateTimeFormatter78.withZoneUTC();
        org.joda.time.Chronology chronology83 = dateTimeFormatter82.getChronolgy();
        mutableDateTime1.setChronology(chronology83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField59 and durationField73", Math.signum(durationField59.compareTo(durationField73)) == -Math.signum(durationField73.compareTo(durationField59)));
    }

    @Test
    public void test232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test232");
        org.joda.time.ReadableDuration readableDuration2 = null;
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.Period period4 = new org.joda.time.Period(readableDuration2, readableInstant3);
        org.joda.time.PeriodType periodType7 = null;
        org.joda.time.Period period8 = new org.joda.time.Period((long) 100, 1L, periodType7);
        org.joda.time.Period period10 = period8.minusSeconds((-1));
        java.lang.String str11 = period8.toString();
        org.joda.time.Period period12 = period8.toPeriod();
        org.joda.time.PeriodType periodType13 = period8.getPeriodType();
        org.joda.time.Period period14 = period4.normalizedStandard(periodType13);
        org.joda.time.Period period16 = period14.withSeconds(10);
        org.joda.time.PeriodType periodType17 = period16.getPeriodType();
        org.joda.time.PeriodType periodType18 = periodType17.withMillisRemoved();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        org.joda.time.DateTime dateTime23 = dateTime21.plusMinutes(15);
        org.joda.time.Chronology chronology24 = dateTime21.getChronology();
        java.lang.String str25 = chronology24.toString();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.fromMillisOfDay((long) (short) -1, chronology24);
        org.joda.time.DurationField durationField27 = chronology24.minutes();
        org.joda.time.Period period28 = new org.joda.time.Period(1080765L, (long) 2045, periodType18, chronology24);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = null;
        java.lang.String str33 = dateTime30.toString(dateTimeFormatter32);
        org.joda.time.DateTime dateTime35 = dateTime30.minusMonths(22);
        org.joda.time.Instant instant36 = new org.joda.time.Instant();
        org.joda.time.Instant instant38 = instant36.withMillis(0L);
        org.joda.time.Chronology chronology39 = instant38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.eras();
        org.joda.time.DateTime dateTime41 = dateTime30.withChronology(chronology39);
        org.joda.time.DateTime dateTime43 = dateTime30.plusYears(340);
        org.joda.time.DateTime dateTime44 = dateTime30.withTimeAtStartOfDay();
        boolean boolean45 = period28.equals((java.lang.Object) dateTime44);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField27 and durationField40", Math.signum(durationField27.compareTo(durationField40)) == -Math.signum(durationField40.compareTo(durationField27)));
    }

    @Test
    public void test233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test233");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime2.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfMonth();
        org.joda.time.Period period16 = new org.joda.time.Period(950707L, chronology9);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.copy();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.setHourOfDay(9);
        mutableDateTime17.setWeekyear(4);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.minusSeconds((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.plusMinutes((-1));
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusHours(0);
        java.lang.Object obj39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(obj39);
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField47 = localDateTime45.getField((int) (byte) 0);
        long long49 = dateTimeField47.roundHalfEven((long) 1);
        int int50 = dateTime40.get(dateTimeField47);
        org.joda.time.LocalDateTime localDateTime51 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime51.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime55.withCenturyOfEra((int) 'a');
        java.util.Locale locale59 = java.util.Locale.GERMAN;
        java.lang.String str60 = locale59.getDisplayName();
        java.lang.String str61 = dateTimeField47.getAsText((org.joda.time.ReadablePartial) localDateTime55, 53, locale59);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period64 = duration63.toPeriod();
        org.joda.time.Duration duration67 = duration63.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime55.minus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.LocalDateTime localDateTime69 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property72 = localDateTime69.hourOfDay();
        org.joda.time.LocalDateTime localDateTime74 = localDateTime69.plusMillis((int) (byte) 0);
        int int75 = localDateTime55.compareTo((org.joda.time.ReadablePartial) localDateTime69);
        int int76 = localDateTime55.getMonthOfYear();
        int int77 = localDateTime55.getMonthOfYear();
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType79 = periodType78.withHoursRemoved();
        org.joda.time.Period period80 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime36, (org.joda.time.ReadablePartial) localDateTime55, periodType79);
        mutableDateTime17.add((org.joda.time.ReadablePeriod) period80);
        org.joda.time.LocalDateTime localDateTime82 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime84 = localDateTime82.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime86 = localDateTime84.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField88 = localDateTime86.getField((int) (byte) 0);
        java.lang.String str89 = dateTimeField88.toString();
        org.joda.time.DurationField durationField90 = dateTimeField88.getDurationField();
        boolean boolean91 = durationField90.isPrecise();
        java.lang.String str92 = durationField90.getName();
        org.joda.time.DurationFieldType durationFieldType93 = durationField90.getType();
        boolean boolean94 = period80.isSupported(durationFieldType93);
        int int95 = period16.get(durationFieldType93);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField90", Math.signum(durationField10.compareTo(durationField90)) == -Math.signum(durationField90.compareTo(durationField10)));
    }

    @Test
    public void test234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test234");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.months();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21, periodType22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(15);
        org.joda.time.Interval interval36 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Instant instant37 = instant9.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant39 = instant37.withMillis((-83734L));
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(50, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(1645514174548L, dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((java.lang.Object) instant39, dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime47.toMutableDateTime();
        mutableDateTime48.setWeekyear(26440);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime47", (instant39.compareTo(mutableDateTime47) == 0) == instant39.equals(mutableDateTime47));
    }

    @Test
    public void test235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test235");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours35 = duration34.toStandardHours();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        int int38 = dateTime37.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime41 = dateTime37.plus(0L);
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime32.add(durationFieldType43, 99);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = org.joda.time.DateTime.now(dateTimeZone46);
        org.joda.time.DateTime dateTime50 = dateTime48.withYearOfCentury(20);
        mutableDateTime32.setMillis((org.joda.time.ReadableInstant) dateTime50);
        mutableDateTime32.addHours(2045);
        org.joda.time.Chronology chronology54 = mutableDateTime32.getChronology();
        org.joda.time.Chronology chronology55 = mutableDateTime32.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField56, and durationField27", !(durationField27.compareTo(durationField56) == 0) || (Math.signum(durationField27.compareTo(durationField27)) == Math.signum(durationField56.compareTo(durationField27))));
    }

    @Test
    public void test236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test236");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.dayOfMonth();
        org.joda.time.DurationField durationField35 = dateTimeField34.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField35, and durationField27", !(durationField27.compareTo(durationField35) == 0) || (Math.signum(durationField27.compareTo(durationField27)) == Math.signum(durationField35.compareTo(durationField27))));
    }

    @Test
    public void test237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test237");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant0.toDateTimeISO();
        org.joda.time.Chronology chronology4 = dateTime3.getChronology();
        org.joda.time.DateTime dateTime6 = dateTime3.plusSeconds(2093);
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration16 = duration12.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant17 = instant10.plus((org.joda.time.ReadableDuration) duration16);
        long long18 = instant17.getMillis();
        org.joda.time.Chronology chronology19 = instant17.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.months();
        org.joda.time.Period period21 = new org.joda.time.Period((-205878993L), chronology19);
        org.joda.time.DateTimeField dateTimeField22 = chronology19.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone23 = chronology19.getZone();
        java.lang.String str25 = dateTimeZone23.getShortName((long) 52);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now(dateTimeZone23);
        int int27 = mutableDateTime26.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime26.monthOfYear();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration36 = duration33.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration37 = duration30.minus((org.joda.time.ReadableDuration) duration36);
        org.joda.time.ReadableInstant readableInstant38 = null;
        org.joda.time.Interval interval39 = duration30.toIntervalFrom(readableInstant38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.Instant instant42 = instant40.toInstant();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod45.clear();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration52 = duration48.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMinutes(15);
        org.joda.time.Interval interval57 = duration52.toIntervalTo((org.joda.time.ReadableInstant) dateTime56);
        mutablePeriod45.setPeriod((org.joda.time.ReadableInterval) interval57);
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(readableInstant59, readableInstant60, periodType61);
        org.joda.time.DurationFieldType durationFieldType64 = periodType61.getFieldType((int) (short) 0);
        int int65 = mutablePeriod45.get(durationFieldType64);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now();
        mutableDateTime68.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime71 = mutableDateTime68.copy();
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime68.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration67, (org.joda.time.ReadableInstant) mutableDateTime68);
        org.joda.time.Instant instant74 = new org.joda.time.Instant();
        org.joda.time.Instant instant76 = instant74.withMillis(0L);
        org.joda.time.Chronology chronology77 = instant76.getChronology();
        org.joda.time.DurationField durationField78 = chronology77.eras();
        org.joda.time.LocalTime localTime79 = org.joda.time.LocalTime.now(chronology77);
        org.joda.time.DurationField durationField80 = chronology77.eras();
        mutablePeriod45.setPeriod((org.joda.time.ReadableDuration) duration67, chronology77);
        org.joda.time.Instant instant82 = instant42.plus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.Instant instant85 = instant42.withDurationAdded((long) 62188, 26150803);
        org.joda.time.PeriodType periodType88 = null;
        org.joda.time.Period period89 = new org.joda.time.Period((long) 100, 1L, periodType88);
        org.joda.time.Period period91 = period89.minusSeconds((-1));
        java.lang.String str92 = period89.toString();
        org.joda.time.Period period94 = period89.withYears(1973);
        org.joda.time.PeriodType periodType95 = period89.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod96 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) instant42, periodType95);
        org.joda.time.Period period97 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) mutableDateTime26, periodType95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField20 and durationField78", Math.signum(durationField20.compareTo(durationField78)) == -Math.signum(durationField78.compareTo(durationField20)));
    }

    @Test
    public void test238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test238");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        long long18 = chronology13.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfMinute();
        boolean boolean20 = dateTimeField19.isSupported();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        int int23 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate25 = localDate21.withYearOfCentury(46);
        boolean boolean26 = property8.equals((java.lang.Object) localDate25);
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology27.add(readablePeriod28, 555370422L, 1191);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.minus((long) 292278993);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration35, 26249401);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime33.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.roundHalfFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        org.joda.time.LocalDate localDate47 = property45.roundCeilingCopy();
        org.joda.time.Chronology chronology48 = localDate47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.months();
        boolean boolean50 = dateTimeFieldType43.isSupported(chronology48);
        org.joda.time.DateTimeField dateTimeField51 = chronology48.dayOfWeek();
        long long53 = dateTimeField51.roundHalfCeiling((long) 48);
        org.joda.time.DurationField durationField54 = dateTimeField51.getDurationField();
        int int55 = mutableDateTime42.get(dateTimeField51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField49", Math.signum(durationField14.compareTo(durationField49)) == -Math.signum(durationField49.compareTo(durationField14)));
    }

    @Test
    public void test239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test239");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod(readableInstant14, readableInstant15, periodType16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.hourOfDay();
        org.joda.time.DateTimeField dateTimeField22 = property21.getField();
        boolean boolean23 = mutablePeriod17.equals((java.lang.Object) dateTimeField22);
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField33 = localDateTime31.getField((int) (byte) 0);
        long long35 = dateTimeField33.roundHalfEven((long) 1);
        int int36 = dateTime26.get(dateTimeField33);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) 'a');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime41, 53, locale45);
        java.lang.String str49 = locale45.getExtension('a');
        java.lang.String str50 = dateTimeField22.getAsText((long) 36950209, locale45);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket53 = new org.joda.time.format.DateTimeParserBucket(97L, chronology7, locale45, (java.lang.Integer) 36950209, 443);
        org.joda.time.MutableDateTime mutableDateTime54 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType57 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime56.withFieldAdded(durationFieldType57, (int) (short) -1);
        int int60 = localDateTime59.getEra();
        java.io.IOException iOException63 = new java.io.IOException("");
        java.io.IOException iOException64 = new java.io.IOException("2022-02-22T10:15:44.882", (java.lang.Throwable) iOException63);
        boolean boolean65 = localDateTime59.equals((java.lang.Object) iOException64);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime59.withMillisOfDay(26150);
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        long long72 = dateTimeZone68.getMillisKeepLocal(dateTimeZone70, (long) 44);
        java.lang.String str74 = dateTimeZone70.getName(0L);
        org.joda.time.DateTime dateTime75 = localDateTime59.toDateTime(dateTimeZone70);
        org.joda.time.Chronology chronology76 = chronology7.withZone(dateTimeZone70);
        org.joda.time.DateTimeField dateTimeField77 = chronology7.minuteOfDay();
        org.joda.time.DurationField durationField78 = chronology7.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField8, durationField78, and durationField8", !(durationField8.compareTo(durationField78) == 0) || (Math.signum(durationField8.compareTo(durationField8)) == Math.signum(durationField78.compareTo(durationField8))));
    }

    @Test
    public void test240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test240");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 44, chronology4);
        org.joda.time.DateTime dateTime10 = dateTime8.withMonthOfYear((int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.yearOfCentury();
        mutableDateTime11.addSeconds(0);
        mutableDateTime11.add((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime11.getZone();
        boolean boolean20 = dateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalTime localTime24 = localTime22.plus(readablePeriod23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant25, readableInstant26, periodType27);
        org.joda.time.DurationFieldType durationFieldType30 = periodType27.getFieldType((int) (short) 0);
        boolean boolean31 = localTime22.isSupported(durationFieldType30);
        mutableDateTime11.add(durationFieldType30, 311);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant34, readableInstant35, periodType36);
        mutablePeriod37.setYears((int) '#');
        org.joda.time.Chronology chronology41 = null;
        mutablePeriod37.add((long) 1, chronology41);
        org.joda.time.ReadableInterval readableInterval43 = null;
        mutablePeriod37.setPeriod(readableInterval43);
        int int45 = mutablePeriod37.getDays();
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property49 = localDate48.monthOfYear();
        org.joda.time.DateTimeField dateTimeField50 = property49.getField();
        org.joda.time.LocalDate localDate51 = property49.roundCeilingCopy();
        org.joda.time.Chronology chronology52 = localDate51.getChronology();
        mutablePeriod37.setPeriod((long) 36946953, (-205878993L), chronology52);
        org.joda.time.DurationField durationField54 = chronology52.centuries();
        org.joda.time.DurationField durationField55 = durationFieldType30.getField(chronology52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField54", Math.signum(durationField5.compareTo(durationField54)) == -Math.signum(durationField54.compareTo(durationField5)));
    }

    @Test
    public void test241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test241");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.minuteOfHour();
        long long9 = dateTimeField7.roundHalfCeiling((-826934400L));
        int int11 = dateTimeField7.getMinimumValue(1439L);
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str15 = locale13.getExtension('a');
        java.lang.String str16 = locale13.getDisplayCountry();
        java.util.Locale.setDefault(locale13);
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("2022-02-22T10:16:18.959");
        java.lang.String str20 = locale13.getDisplayCountry(locale19);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj22 = mutableDateTime21.clone();
        mutableDateTime21.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.add(1L);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone29 = dateTimeZone28.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        long long32 = dateTimeZone28.getMillisKeepLocal(dateTimeZone30, (long) 44);
        org.joda.time.DateTime dateTime33 = org.joda.time.DateTime.now(dateTimeZone28);
        mutableDateTime27.setZoneRetainFields(dateTimeZone28);
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder36.clear();
        java.util.Locale locale38 = builder37.build();
        java.lang.String str39 = dateTimeZone28.getName(555370422L, locale38);
        java.lang.String str40 = locale19.getDisplayVariant(locale38);
        java.lang.String str41 = dateTimeField7.getAsText(985937L, locale38);
        org.joda.time.DurationField durationField42 = dateTimeField7.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField4, durationField42, and durationField4", !(durationField4.compareTo(durationField42) == 0) || (Math.signum(durationField4.compareTo(durationField4)) == Math.signum(durationField42.compareTo(durationField4))));
    }

    @Test
    public void test242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test242");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        org.joda.time.LocalTime localTime6 = property4.roundHalfFloorCopy();
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.LocalTime localTime8 = property7.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField9 = property7.getField();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration19 = duration15.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant20 = instant13.plus((org.joda.time.ReadableDuration) duration19);
        long long21 = instant20.getMillis();
        org.joda.time.Chronology chronology22 = instant20.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.months();
        org.joda.time.Period period24 = new org.joda.time.Period((-205878993L), chronology22);
        org.joda.time.DateTimeField dateTimeField25 = chronology22.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone26 = chronology22.getZone();
        java.lang.String str28 = dateTimeZone26.getShortName((long) 52);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate(dateTimeZone26);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        long long41 = chronology36.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter32.withChronology(chronology36);
        org.joda.time.Chronology chronology43 = dateTimeFormatter32.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = dateTimeFormatter32.withDefaultYear(999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter32.withDefaultYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter32.withPivotYear(56);
        org.joda.time.format.DateTimePrinter dateTimePrinter50 = dateTimeFormatter49.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone53 = null;
        org.joda.time.LocalTime localTime54 = new org.joda.time.LocalTime(dateTimeZone53);
        org.joda.time.LocalTime localTime56 = localTime54.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology57 = localTime56.getChronology();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.millisOfDay();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((java.lang.Object) dateTimePrinter50, chronology57);
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod66.addDays((int) (byte) 10);
        mutablePeriod66.setDays(72600000);
        int[] intArray73 = chronology57.get((org.joda.time.ReadablePeriod) mutablePeriod66, 861235200000L, (long) 600);
        int int74 = dateTimeField9.getMinimumValue((org.joda.time.ReadablePartial) localDate29, intArray73);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField37", Math.signum(durationField5.compareTo(durationField37)) == -Math.signum(durationField37.compareTo(durationField5)));
    }

    @Test
    public void test243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test243");
        org.joda.time.Duration duration1 = new org.joda.time.Duration(995259L);
        org.joda.time.Duration duration2 = org.joda.time.Duration.ZERO;
        long long3 = duration2.getStandardSeconds();
        org.joda.time.Duration duration4 = duration2.toDuration();
        org.joda.time.Duration duration5 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        long long30 = chronology25.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField31 = chronology25.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(44L, periodType20, chronology25);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(950105L, 949680L, periodType20);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology37.hourOfDay();
        boolean boolean40 = periodType20.equals((java.lang.Object) chronology37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        org.joda.time.DateTime dateTime45 = dateTime43.plusMinutes(15);
        org.joda.time.Chronology chronology46 = dateTime43.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.hours();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(1440L, chronology46);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(chronology46);
        org.joda.time.Chronology chronology50 = chronology46.withUTC();
        org.joda.time.Period period51 = duration4.toPeriod(periodType20, chronology46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField26 and durationField47", Math.signum(durationField26.compareTo(durationField47)) == -Math.signum(durationField47.compareTo(durationField26)));
    }

    @Test
    public void test244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test244");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime8 = localDate3.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        long long17 = chronology12.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField18 = chronology12.secondOfMinute();
        boolean boolean19 = dateTimeField18.isSupported();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.monthOfYear();
        int int22 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate24 = localDate20.withYearOfCentury(46);
        org.joda.time.LocalDate.Property property25 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology26 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime8.toDateTime(dateTimeZone27);
        int int30 = dateTime29.getMinuteOfDay();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime33 = dateTime29.minusDays(47892750);
        long long34 = dateTime33.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime29", (dateTime8.compareTo(dateTime29) == 0) == dateTime8.equals(dateTime29));
    }

    @Test
    public void test245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test245");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfDay();
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime(chronology13);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.eras();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.hourOfDay();
        org.joda.time.DateTimeField dateTimeField26 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField27 = chronology21.year();
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(chronology21);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime28.yearOfCentury();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 1, chronology31);
        int int33 = dateTime32.getMinuteOfDay();
        int int34 = dateTime32.getEra();
        int int35 = dateTime32.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime36 = dateTime32.withLaterOffsetAtOverlap();
        org.joda.time.Chronology chronology38 = null;
        java.util.Locale locale39 = java.util.Locale.GERMAN;
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.lang.String str41 = locale39.getDisplayVariant(locale40);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket42 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology38, locale40);
        java.lang.Object obj43 = dateTimeParserBucket42.saveState();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalTime localTime46 = new org.joda.time.LocalTime((long) (short) 100, chronology45);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str48 = durationFieldType47.getName();
        boolean boolean49 = localTime46.isSupported(durationFieldType47);
        boolean boolean50 = dateTimeParserBucket42.restoreState((java.lang.Object) boolean49);
        java.lang.Integer int51 = dateTimeParserBucket42.getOffsetInteger();
        org.joda.time.Chronology chronology52 = dateTimeParserBucket42.getChronology();
        dateTimeParserBucket42.setOffset((int) 'a');
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.millisOfSecond();
        java.lang.String str56 = dateTimeFieldType55.getName();
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType55.getRangeDurationType();
        dateTimeParserBucket42.saveField(dateTimeFieldType55, 20);
        int int60 = dateTime32.get(dateTimeFieldType55);
        mutableDateTime28.set(dateTimeFieldType55, 97);
        org.joda.time.LocalTime.Property property63 = localTime17.property(dateTimeFieldType55);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime(chronology66);
        org.joda.time.DateTime dateTime69 = dateTime67.plusMinutes(15);
        org.joda.time.Chronology chronology70 = dateTime67.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.hours();
        org.joda.time.DurationField durationField72 = chronology70.years();
        org.joda.time.Period period73 = new org.joda.time.Period(1031244L, periodType65, chronology70);
        org.joda.time.DateTimeField dateTimeField74 = dateTimeFieldType55.getField(chronology70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField71", Math.signum(durationField22.compareTo(durationField71)) == -Math.signum(durationField71.compareTo(durationField22)));
    }

    @Test
    public void test246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test246");
        org.joda.time.ReadableDuration readableDuration3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period(readableDuration3, readableInstant4);
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period((long) 100, 1L, periodType8);
        org.joda.time.Period period11 = period9.minusSeconds((-1));
        java.lang.String str12 = period9.toString();
        org.joda.time.Period period13 = period9.toPeriod();
        org.joda.time.PeriodType periodType14 = period9.getPeriodType();
        org.joda.time.Period period15 = period5.normalizedStandard(periodType14);
        org.joda.time.Period period17 = period15.withSeconds(10);
        org.joda.time.PeriodType periodType18 = period17.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod21.clear();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period25 = duration24.toPeriod();
        org.joda.time.Duration duration28 = duration24.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        org.joda.time.DateTime dateTime32 = dateTime30.plusMinutes(15);
        org.joda.time.Interval interval33 = duration28.toIntervalTo((org.joda.time.ReadableInstant) dateTime32);
        mutablePeriod21.setPeriod((org.joda.time.ReadableInterval) interval33);
        mutablePeriod21.setYears(0);
        int int37 = mutablePeriod21.getYears();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMinutes(15);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMinutes(15);
        org.joda.time.Chronology chronology48 = dateTime45.getChronology();
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.eras();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(chronology52);
        org.joda.time.DurationField durationField55 = chronology52.eras();
        org.joda.time.DateTimeField dateTimeField56 = chronology52.hourOfDay();
        org.joda.time.DateTime dateTime57 = dateTime45.withChronology(chronology52);
        org.joda.time.DateTimeField dateTimeField58 = chronology52.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = dateTimeField58.getType();
        int int60 = dateTime43.get(dateTimeFieldType59);
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.Chronology chronology64 = instant63.getChronology();
        org.joda.time.DurationField durationField65 = chronology64.eras();
        org.joda.time.LocalTime localTime66 = org.joda.time.LocalTime.now(chronology64);
        org.joda.time.DurationField durationField67 = chronology64.eras();
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType59.getField(chronology64);
        org.joda.time.LocalTime localTime69 = org.joda.time.LocalTime.now(chronology64);
        org.joda.time.LocalTime localTime70 = new org.joda.time.LocalTime(chronology64);
        mutablePeriod21.setPeriod(315532800000L, (long) 766, chronology64);
        org.joda.time.DateTimeField dateTimeField72 = chronology64.dayOfWeek();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod((long) 62305, 4801285113105L, periodType18, chronology64);
        org.joda.time.MutableDateTime mutableDateTime74 = new org.joda.time.MutableDateTime((long) 62259, chronology64);
        org.joda.time.DurationField durationField75 = chronology64.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField53, durationField75, and durationField53", !(durationField53.compareTo(durationField75) == 0) || (Math.signum(durationField53.compareTo(durationField53)) == Math.signum(durationField75.compareTo(durationField53))));
    }

    @Test
    public void test247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test247");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getDurationField();
        org.joda.time.LocalTime localTime6 = property4.withMinimumValue();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.copy();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime7.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime7.dayOfYear();
        java.lang.String str13 = property12.getAsText();
        org.joda.time.MutableDateTime mutableDateTime15 = property12.add((long) (short) 0);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.millisOfSecond();
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime15.minuteOfDay();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod20.clear();
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException25 = new java.io.IOException("");
        java.io.IOException iOException26 = new java.io.IOException((java.lang.Throwable) iOException25);
        boolean boolean27 = mutableDateTime23.equals((java.lang.Object) iOException25);
        org.joda.time.Duration duration30 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration30, 1424);
        org.joda.time.Days days33 = duration30.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod36.clear();
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration43 = duration39.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime(chronology44);
        org.joda.time.DateTime dateTime47 = dateTime45.plusMinutes(15);
        org.joda.time.Interval interval48 = duration43.toIntervalTo((org.joda.time.ReadableInstant) dateTime47);
        mutablePeriod36.setPeriod((org.joda.time.ReadableInterval) interval48);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(readableInstant50, readableInstant51, periodType52);
        org.joda.time.DurationFieldType durationFieldType55 = periodType52.getFieldType((int) (short) 0);
        int int56 = mutablePeriod36.get(durationFieldType55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.now();
        mutableDateTime59.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime62 = mutableDateTime59.copy();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime59.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration58, (org.joda.time.ReadableInstant) mutableDateTime59);
        org.joda.time.Instant instant65 = new org.joda.time.Instant();
        org.joda.time.Instant instant67 = instant65.withMillis(0L);
        org.joda.time.Chronology chronology68 = instant67.getChronology();
        org.joda.time.DurationField durationField69 = chronology68.eras();
        org.joda.time.LocalTime localTime70 = org.joda.time.LocalTime.now(chronology68);
        org.joda.time.DurationField durationField71 = chronology68.eras();
        mutablePeriod36.setPeriod((org.joda.time.ReadableDuration) duration58, chronology68);
        org.joda.time.Duration duration74 = duration30.withDurationAdded((org.joda.time.ReadableDuration) duration58, 26148950);
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration58);
        mutableDateTime15.add((org.joda.time.ReadablePeriod) mutablePeriod20);
        java.lang.String str77 = mutablePeriod20.toString();
        org.joda.time.LocalTime localTime79 = localTime6.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod20, 37127812);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField69", Math.signum(durationField5.compareTo(durationField69)) == -Math.signum(durationField69.compareTo(durationField5)));
    }

    @Test
    public void test248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test248");
        org.joda.time.DateTimeZone dateTimeZone1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime(dateTimeZone1);
        org.joda.time.LocalTime localTime4 = localTime2.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.DateTimeZone dateTimeZone7 = null;
        org.joda.time.LocalTime localTime8 = new org.joda.time.LocalTime(dateTimeZone7);
        org.joda.time.LocalTime localTime10 = localTime8.minusHours((int) (byte) 100);
        int int11 = localTime10.getMinuteOfHour();
        java.lang.String str13 = localTime10.toString("1");
        org.joda.time.LocalTime localTime15 = localTime10.minusMinutes(15);
        long long17 = chronology5.set((org.joda.time.ReadablePartial) localTime10, (long) 48);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now(chronology23);
        org.joda.time.DurationField durationField26 = chronology23.eras();
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 44, chronology23);
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType18.getField(chronology23);
        org.joda.time.PeriodType periodType31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period((long) 100, 1L, periodType31);
        org.joda.time.Period period34 = period32.minusSeconds((-1));
        java.lang.String str35 = period32.toString();
        long long38 = chronology23.add((org.joda.time.ReadablePeriod) period32, (long) ' ', (int) 'a');
        org.joda.time.Period period40 = period32.minusHours((-292275054));
        long long43 = chronology5.add((org.joda.time.ReadablePeriod) period32, (long) 26195, 26180329);
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.fromMillisOfDay(0L, chronology5);
        org.joda.time.DurationField durationField45 = chronology5.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField24, durationField45, and durationField24", !(durationField24.compareTo(durationField45) == 0) || (Math.signum(durationField24.compareTo(durationField24)) == Math.signum(durationField45.compareTo(durationField24))));
    }

    @Test
    public void test249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test249");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        long long18 = dateTimeField15.add(0L, (long) 274);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusYears((int) (short) 100);
        int int26 = localDateTime25.getEra();
        int int27 = dateTimeField15.getMinimumValue((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.minusWeeks(62167);
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType36 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str37 = dateTimeFieldType36.getName();
        int int38 = localDateTime30.indexOf(dateTimeFieldType36);
        java.lang.String str39 = dateTimeFieldType36.getName();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMinutes(15);
        org.joda.time.Chronology chronology44 = dateTime41.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.hours();
        org.joda.time.DurationField durationField46 = chronology44.years();
        org.joda.time.DateTimeField dateTimeField47 = chronology44.dayOfYear();
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType36.getField(chronology44);
        int int49 = localDateTime29.get(dateTimeFieldType36);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj51 = mutableDateTime50.clone();
        mutableDateTime50.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime50.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime56 = property54.add(1L);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone58 = dateTimeZone57.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        long long61 = dateTimeZone57.getMillisKeepLocal(dateTimeZone59, (long) 44);
        org.joda.time.DateTime dateTime62 = org.joda.time.DateTime.now(dateTimeZone57);
        mutableDateTime56.setZoneRetainFields(dateTimeZone57);
        org.joda.time.MutableDateTime mutableDateTime64 = org.joda.time.MutableDateTime.now(dateTimeZone57);
        mutableDateTime64.add((long) 26164766);
        org.joda.time.DateTime dateTime67 = localDateTime29.toDateTime((org.joda.time.ReadableInstant) mutableDateTime64);
        org.joda.time.LocalDateTime localDateTime68 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime72 = localDateTime70.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.dayOfMonth();
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period78 = duration77.toPeriod();
        org.joda.time.Duration duration81 = duration77.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period82 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableDuration) duration81);
        org.joda.time.Duration duration84 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration86 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration89 = duration86.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean90 = duration84.isLongerThan((org.joda.time.ReadableDuration) duration89);
        org.joda.time.Minutes minutes91 = duration84.toStandardMinutes();
        org.joda.time.Period period92 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableDuration) duration84);
        int int93 = property73.getDifference((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.DateTime.Property property94 = dateTime75.year();
        org.joda.time.DateTimeZone dateTimeZone96 = org.joda.time.DateTimeZone.forOffsetMillis(62166);
        org.joda.time.MutableDateTime mutableDateTime97 = dateTime75.toMutableDateTime(dateTimeZone96);
        org.joda.time.DateTime dateTime98 = dateTime67.toDateTime(dateTimeZone96);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime75 and mutableDateTime97", (dateTime75.compareTo(mutableDateTime97) == 0) == dateTime75.equals(mutableDateTime97));
    }

    @Test
    public void test250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test250");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getSecondOfMinute();
        boolean boolean3 = dateTime1.isEqualNow();
        int int4 = dateTime1.getDayOfYear();
        org.joda.time.DateTime dateTime6 = dateTime1.plusDays((int) '#');
        org.joda.time.DateTime dateTime8 = dateTime1.plus((long) 2100);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = duration10.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.add((long) 'a');
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime14.yearOfCentury();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = duration22.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration26 = duration19.minus((org.joda.time.ReadableDuration) duration25);
        mutableDateTime14.add((org.joda.time.ReadableDuration) duration19);
        boolean boolean28 = duration13.isShorterThan((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration30 = duration19.minus((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        mutableDateTime31.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime31.copy();
        mutableDateTime31.setDate((long) '#');
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property38 = localDate37.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType39 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean40 = localDate37.isSupported(dateTimeFieldType39);
        int int41 = localDate37.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight43 = localDate37.toDateMidnight(dateTimeZone42);
        org.joda.time.DateTime dateTime44 = mutableDateTime31.toDateTime(dateTimeZone42);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) mutableDateTime31);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration30);
        int int47 = dateTime8.getMillisOfDay();
        org.joda.time.DateTime dateTime49 = dateTime8.plus((long) 298);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime31 and dateTime44", (mutableDateTime31.compareTo(dateTime44) == 0) == mutableDateTime31.equals(dateTime44));
    }

    @Test
    public void test251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test251");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.PeriodType periodType14 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.PeriodType periodType15 = periodType14.withHoursRemoved();
        org.joda.time.Chronology chronology17 = null;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket21 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology17, locale19);
        java.lang.Object obj22 = dateTimeParserBucket21.saveState();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalTime localTime25 = new org.joda.time.LocalTime((long) (short) 100, chronology24);
        org.joda.time.DurationFieldType durationFieldType26 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str27 = durationFieldType26.getName();
        boolean boolean28 = localTime25.isSupported(durationFieldType26);
        boolean boolean29 = dateTimeParserBucket21.restoreState((java.lang.Object) boolean28);
        org.joda.time.Chronology chronology30 = dateTimeParserBucket21.getChronology();
        long long33 = dateTimeParserBucket21.computeMillis(true, "");
        int int34 = dateTimeParserBucket21.getOffset();
        java.lang.Object obj35 = dateTimeParserBucket21.saveState();
        java.lang.Integer int36 = dateTimeParserBucket21.getPivotYear();
        long long38 = dateTimeParserBucket21.computeMillis(false);
        java.lang.Integer int39 = dateTimeParserBucket21.getPivotYear();
        org.joda.time.Chronology chronology40 = dateTimeParserBucket21.getChronology();
        org.joda.time.DurationField durationField41 = chronology40.centuries();
        org.joda.time.Period period42 = new org.joda.time.Period((long) 37057844, (long) 26343, periodType15, chronology40);
        boolean boolean43 = duration4.equals((java.lang.Object) period42);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        mutableDateTime44.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime47 = mutableDateTime44.copy();
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime44.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime50 = property48.add(0L);
        org.joda.time.MutableDateTime mutableDateTime51 = property48.roundFloor();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.Period period57 = org.joda.time.Period.millis(26170959);
        mutablePeriod55.setPeriod((org.joda.time.ReadablePeriod) period57);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant67 = new org.joda.time.Instant();
        org.joda.time.Instant instant69 = instant67.withMillis(0L);
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.DurationField durationField71 = chronology70.eras();
        org.joda.time.LocalTime localTime72 = org.joda.time.LocalTime.now(chronology70);
        org.joda.time.DurationField durationField73 = chronology70.eras();
        mutablePeriod65.setPeriod((long) 999, chronology70);
        org.joda.time.Chronology chronology75 = chronology70.withUTC();
        mutablePeriod55.setPeriod((long) 1132, 4801285081106L, chronology75);
        org.joda.time.DateTime dateTime77 = mutableDateTime51.toDateTime(chronology75);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField41 and durationField71", Math.signum(durationField41.compareTo(durationField71)) == -Math.signum(durationField71.compareTo(durationField41)));
    }

    @Test
    public void test252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test252");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime((long) 17);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds(62222);
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone6 = null;
        org.joda.time.LocalTime localTime7 = new org.joda.time.LocalTime(dateTimeZone6);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime7.plus(readablePeriod8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType15 = periodType12.getFieldType((int) (short) 0);
        boolean boolean16 = localTime7.isSupported(durationFieldType15);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        long long28 = chronology23.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter19.withChronology(chronology23);
        boolean boolean30 = durationFieldType15.isSupported(chronology23);
        mutablePeriod5.add(durationFieldType15, 0);
        org.joda.time.LocalTime localTime33 = localTime1.plus((org.joda.time.ReadablePeriod) mutablePeriod5);
        org.joda.time.LocalTime.Property property34 = localTime1.millisOfDay();
        org.joda.time.DurationField durationField35 = property34.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField24, durationField35, and durationField24", !(durationField24.compareTo(durationField35) == 0) || (Math.signum(durationField24.compareTo(durationField24)) == Math.signum(durationField35.compareTo(durationField24))));
    }

    @Test
    public void test253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test253");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime1.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime1.minusMonths(22);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DateTime dateTime12 = dateTime1.withChronology(chronology10);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.centuryOfEra();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime13.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = property15.getFieldType();
        boolean boolean17 = dateTime1.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate localDate18 = dateTime1.toLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = null;
        boolean boolean20 = localDate18.isSupported(dateTimeFieldType19);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(chronology21);
        org.joda.time.DateTime dateTime24 = dateTime22.plusMinutes(15);
        org.joda.time.Chronology chronology25 = dateTime22.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.hours();
        org.joda.time.DurationField durationField27 = chronology25.years();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.dayOfYear();
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(chronology25);
        int int30 = localTime29.getHourOfDay();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate((long) (byte) -1);
        int int33 = localDate32.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        long long38 = dateTimeZone34.getMillisKeepLocal(dateTimeZone36, (long) 44);
        org.joda.time.DateTime dateTime39 = localDate32.toDateTimeAtMidnight(dateTimeZone34);
        java.util.Locale locale41 = null;
        java.lang.String str42 = dateTimeZone34.getName(946000L, locale41);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(dateTimeZone34);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone34);
        long long46 = dateTimeZone34.nextTransition((long) 25);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        mutableDateTime47.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime47.copy();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime47.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime52 = property51.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime54 = property51.add((long) (byte) 10);
        int int55 = mutableDateTime54.getCenturyOfEra();
        mutableDateTime54.setMinuteOfDay(1424);
        org.joda.time.DateTimeField dateTimeField58 = mutableDateTime54.getRoundingField();
        int int59 = dateTimeZone34.getOffset((org.joda.time.ReadableInstant) mutableDateTime54);
        int int61 = dateTimeZone34.getOffset((long) 1228548);
        org.joda.time.DateTime dateTime62 = localDate18.toDateTime(localTime29, dateTimeZone34);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField26", Math.signum(durationField11.compareTo(durationField26)) == -Math.signum(durationField26.compareTo(durationField11)));
    }

    @Test
    public void test254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test254");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        int int4 = localDate0.getDayOfYear();
        org.joda.time.LocalDate localDate5 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean7 = localDate5.isSupported(dateTimeFieldType6);
        org.joda.time.LocalDate.Property property8 = localDate0.property(dateTimeFieldType6);
        org.joda.time.LocalDate localDate9 = property8.getLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfMonth(11);
        org.joda.time.LocalDate.Property property12 = localDate9.weekyear();
        org.joda.time.LocalDate localDate14 = localDate9.withYearOfEra(26252);
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) (byte) -1);
        int int17 = localDate16.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        long long22 = dateTimeZone18.getMillisKeepLocal(dateTimeZone20, (long) 44);
        org.joda.time.DateTime dateTime23 = localDate16.toDateTimeAtMidnight(dateTimeZone18);
        java.util.Locale locale25 = null;
        java.lang.String str26 = dateTimeZone18.getName(946000L, locale25);
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone18);
        mutableDateTime27.addMillis((-356));
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        int int32 = dateTime31.getSecondOfMinute();
        boolean boolean33 = dateTime31.isEqualNow();
        int int34 = dateTime31.getDayOfYear();
        org.joda.time.DateTime dateTime36 = dateTime31.plusDays((int) '#');
        org.joda.time.DateTime.Property property37 = dateTime31.centuryOfEra();
        org.joda.time.DateTime.Property property38 = dateTime31.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime27, (org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = dateTime31.toDateTime(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = localDate9.toDateTimeAtMidnight(dateTimeZone41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime31 and mutableDateTime42", (dateTime31.compareTo(mutableDateTime42) == 0) == dateTime31.equals(mutableDateTime42));
    }

    @Test
    public void test255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test255");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillis(960000L);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime16.copy();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 1, chronology34);
        int int36 = dateTime35.getMinuteOfDay();
        int int37 = dateTime35.getEra();
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        mutableDateTime16.setChronology(chronology38);
        java.lang.Object obj40 = null;
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        mutableDateTime41.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime41.copy();
        mutableDateTime41.setDate((long) '#');
        org.joda.time.LocalDate localDate47 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property48 = localDate47.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean50 = localDate47.isSupported(dateTimeFieldType49);
        int int51 = localDate47.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight53 = localDate47.toDateMidnight(dateTimeZone52);
        org.joda.time.DateTime dateTime54 = mutableDateTime41.toDateTime(dateTimeZone52);
        org.joda.time.LocalDate localDate55 = org.joda.time.LocalDate.now(dateTimeZone52);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(obj40, dateTimeZone52);
        long long59 = dateTimeZone52.convertLocalToUTC((long) 28, true);
        org.joda.time.Chronology chronology60 = chronology38.withZone(dateTimeZone52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant5", (dateTime1.compareTo(instant5) == 0) == dateTime1.equals(instant5));
    }

    @Test
    public void test256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test256");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks(44);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.Chronology chronology16 = dateTime13.getChronology();
        java.lang.String str17 = chronology16.toString();
        org.joda.time.DateTimeField dateTimeField18 = chronology16.dayOfYear();
        org.joda.time.DateTime dateTime19 = dateTime8.withChronology(chronology16);
        org.joda.time.DateTime.Property property20 = dateTime8.secondOfMinute();
        org.joda.time.DateTime dateTime22 = dateTime8.withWeekyear(1200);
        org.joda.time.DateTime dateTime23 = dateTime22.toDateTimeISO();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str28 = duration27.toString();
        boolean boolean29 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Hours hours30 = duration25.toStandardHours();
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardSeconds(100L);
        int int33 = duration25.compareTo((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        int int36 = duration25.compareTo((org.joda.time.ReadableDuration) duration35);
        java.lang.String str37 = duration25.toString();
        java.lang.String str38 = duration25.toString();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str43 = duration42.toString();
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration42, 8);
        mutableDateTime40.setSecondOfMinute((int) (short) 0);
        mutableDateTime40.addMonths(36956320);
        mutableDateTime40.setDayOfYear(49);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime55 = dateTime53.withZoneRetainFields(dateTimeZone54);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property57 = localDate56.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.DateTime dateTime60 = localDate56.toDateTimeAtCurrentTime(dateTimeZone58);
        int int61 = dateTime55.compareTo((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.DateTime dateTime63 = dateTime60.minusWeeks(44);
        org.joda.time.DateTime dateTime66 = dateTime63.withDurationAdded((-1L), 36946953);
        org.joda.time.YearMonthDay yearMonthDay67 = dateTime66.toYearMonthDay();
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration71 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period72 = duration71.toPeriod();
        org.joda.time.Duration duration75 = duration71.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableDuration) duration75);
        org.joda.time.Duration duration78 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration83 = duration80.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean84 = duration78.isLongerThan((org.joda.time.ReadableDuration) duration83);
        org.joda.time.Minutes minutes85 = duration78.toStandardMinutes();
        org.joda.time.Period period86 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime69, (org.joda.time.ReadableDuration) duration78);
        org.joda.time.Duration duration88 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period89 = duration88.toPeriod();
        org.joda.time.PeriodType periodType90 = period89.getPeriodType();
        org.joda.time.Period period91 = period86.withPeriodType(periodType90);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime40, (org.joda.time.ReadableInstant) dateTime66, periodType90);
        org.joda.time.PeriodType periodType93 = periodType90.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration25, periodType90);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime13", (dateTime8.compareTo(dateTime13) == 0) == dateTime8.equals(dateTime13));
    }

    @Test
    public void test257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test257");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 44);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        org.joda.time.Period period38 = period36.minusMinutes(49);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.months();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime44, periodType45);
        org.joda.time.Period period47 = period46.toPeriod();
        org.joda.time.Period period48 = period38.withFields((org.joda.time.ReadablePeriod) period47);
        mutableDateTime14.add((org.joda.time.ReadablePeriod) period38, (int) (byte) 10);
        org.joda.time.Weeks weeks51 = period38.toStandardWeeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime16", (dateTime12.compareTo(dateTime16) == 0) == dateTime12.equals(dateTime16));
    }

    @Test
    public void test258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test258");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getYearOfCentury();
        int int9 = dateTime7.getWeekyear();
        org.joda.time.DateTime dateTime10 = dateTime7.withEarlierOffsetAtOverlap();
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime10.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        boolean boolean14 = dateTimeZone13.isFixed();
        mutableDateTime12.setZoneRetainFields(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = dateTime4.toDateTime(dateTimeZone13);
        long long18 = dateTimeZone13.nextTransition((long) 21);
        int int20 = dateTimeZone13.getOffset(826665956185622L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime16", (dateTime1.compareTo(dateTime16) == 0) == dateTime1.equals(dateTime16));
    }

    @Test
    public void test259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test259");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addYears(12);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime20 = instant19.toDateTime();
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.DateTime dateTime32 = localDateTime25.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = localDateTime25.toDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = dateTime20.withZoneRetainFields(dateTimeZone33);
        java.lang.String str36 = dateTimeZone33.toString();
        java.lang.String str37 = dateTimeZone33.getID();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(dateTimeZone33);
        mutableDateTime0.setDate((org.joda.time.ReadableInstant) mutableDateTime38);
        mutableDateTime0.addMinutes(26180329);
        mutableDateTime0.setWeekyear(671);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant19 and dateTime20", (instant19.compareTo(dateTime20) == 0) == instant19.equals(dateTime20));
    }

    @Test
    public void test260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test260");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Period period10 = period8.plusSeconds((int) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime17 = property15.roundHalfCeiling();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.DateTimeField dateTimeField33 = dateTimeFieldType18.getField(chronology31);
        java.util.Locale locale34 = java.util.Locale.UK;
        java.lang.String str35 = locale34.getDisplayLanguage();
        int int36 = dateTimeField33.getMaximumTextLength(locale34);
        mutableDateTime17.setRounding(dateTimeField33);
        org.joda.time.Duration duration38 = period8.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.centuryOfEra();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime39.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType50 = null;
        org.joda.time.Period period51 = new org.joda.time.Period((long) 100, 1L, periodType50);
        org.joda.time.Period period53 = period51.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime54 = localDateTime47.minus((org.joda.time.ReadablePeriod) period51);
        mutableDateTime39.add((org.joda.time.ReadablePeriod) period51, 0);
        org.joda.time.PeriodType periodType57 = period51.getPeriodType();
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.PeriodType periodType63 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod64 = new org.joda.time.MutablePeriod(readableInstant61, readableInstant62, periodType63);
        org.joda.time.DurationFieldType durationFieldType66 = periodType63.getFieldType((int) (short) 0);
        java.lang.String str67 = periodType63.toString();
        org.joda.time.Instant instant68 = new org.joda.time.Instant();
        org.joda.time.Instant instant70 = instant68.withMillis(0L);
        org.joda.time.Chronology chronology71 = instant70.getChronology();
        org.joda.time.Period period72 = new org.joda.time.Period((long) 53, (long) (-1), periodType63, chronology71);
        org.joda.time.ReadableInstant readableInstant75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.PeriodType periodType77 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod(readableInstant75, readableInstant76, periodType77);
        org.joda.time.DurationFieldType durationFieldType80 = periodType77.getFieldType((int) (short) 0);
        java.lang.String str81 = periodType77.toString();
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.Instant instant84 = instant82.withMillis(0L);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.joda.time.Period period86 = new org.joda.time.Period((long) 53, (long) (-1), periodType77, chronology85);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) (short) 10, periodType63, chronology85);
        org.joda.time.DateTimeField dateTimeField88 = chronology85.weekOfWeekyear();
        org.joda.time.Period period89 = duration38.toPeriod(periodType57, chronology85);
        org.joda.time.LocalDateTime localDateTime90 = org.joda.time.LocalDateTime.now(chronology85);
        org.joda.time.DateTimeField dateTimeField91 = chronology85.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and mutableDateTime39", (instant28.compareTo(mutableDateTime39) == 0) == instant28.equals(mutableDateTime39));
    }

    @Test
    public void test261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test261");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        boolean boolean5 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration11 = duration7.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean17 = duration11.isLongerThan((org.joda.time.ReadableDuration) duration13);
        boolean boolean18 = duration3.isEqual((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration24 = duration20.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = duration3.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTimeZone dateTimeZone26 = null;
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(dateTimeZone26);
        org.joda.time.LocalTime localTime29 = localTime27.minusHours((int) (byte) 100);
        int int30 = localTime29.getMinuteOfHour();
        java.lang.String str32 = localTime29.toString("1");
        org.joda.time.LocalTime localTime34 = localTime29.minusMinutes(15);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getYearOfCentury();
        int int38 = dateTime36.getWeekyear();
        org.joda.time.DateTime dateTime40 = dateTime36.plus((long) 15);
        org.joda.time.DateTime.Property property41 = dateTime36.year();
        org.joda.time.DateTime dateTime42 = property41.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property43 = dateTime42.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime44 = dateTime42.toMutableDateTime();
        org.joda.time.LocalTime localTime45 = dateTime42.toLocalTime();
        org.joda.time.LocalTime localTime46 = localTime29.withFields((org.joda.time.ReadablePartial) localTime45);
        boolean boolean47 = duration3.equals((java.lang.Object) localTime46);
        org.joda.time.LocalTime localTime49 = localTime46.withHourOfDay((int) (byte) 10);
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.DateTime dateTime53 = instant52.toDateTime();
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType56 = org.joda.time.PeriodType.months();
        org.joda.time.Period period57 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) dateTime55, periodType56);
        org.joda.time.DateTime.Property property58 = dateTime55.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = property58.getFieldType();
        org.joda.time.LocalTime.Property property60 = localTime49.property(dateTimeFieldType59);
        org.joda.time.Chronology chronology61 = localTime49.getChronology();
        org.joda.time.LocalTime localTime63 = localTime49.withSecondOfMinute(0);
        int int64 = localTime49.getMillisOfSecond();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and instant50", (dateTime36.compareTo(instant50) == 0) == dateTime36.equals(instant50));
    }

    @Test
    public void test262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test262");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute(53);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration28 = duration21.minus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.DurationFieldType durationFieldType34 = periodType31.getFieldType((int) (short) 0);
        java.lang.String str35 = periodType31.toString();
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableDuration) duration21, periodType31);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration21);
        mutableDateTime0.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime0.minuteOfHour();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        int int45 = dateTime44.getSecondOfMinute();
        int int46 = dateTime44.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant47 = null;
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.PeriodType periodType49 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod(readableInstant47, readableInstant48, periodType49);
        mutablePeriod50.setYears((int) '#');
        mutablePeriod50.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime55 = dateTime44.plus((org.joda.time.ReadablePeriod) mutablePeriod50);
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property57 = localDate56.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.DateTime dateTime60 = localDate56.toDateTimeAtCurrentTime(dateTimeZone58);
        org.joda.time.DateTime dateTime61 = dateTime44.toDateTime(dateTimeZone58);
        boolean boolean63 = dateTimeZone58.equals((java.lang.Object) 122);
        mutableDateTime0.setZone(dateTimeZone58);
        long long67 = dateTimeZone58.adjustOffset((long) 26367, true);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and mutableDateTime41", (mutableDateTime0.compareTo(mutableDateTime41) == 0) == mutableDateTime0.equals(mutableDateTime41));
    }

    @Test
    public void test263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test263");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalTime localTime20 = new org.joda.time.LocalTime((long) (short) 100, chronology19);
        int int21 = localTime20.getMillisOfDay();
        org.joda.time.LocalTime.Property property22 = localTime20.millisOfSecond();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.joda.time.LocalTime localTime24 = property22.roundHalfEvenCopy();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration33 = duration29.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant34 = instant27.plus((org.joda.time.ReadableDuration) duration33);
        long long35 = instant34.getMillis();
        org.joda.time.Chronology chronology36 = instant34.getChronology();
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        mutableDateTime37.add((long) 'a');
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str44 = duration43.toString();
        boolean boolean45 = duration41.isShorterThan((org.joda.time.ReadableDuration) duration43);
        org.joda.time.Hours hours46 = duration41.toStandardHours();
        mutableDateTime37.add((org.joda.time.ReadableDuration) duration41, 20);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = null;
        java.lang.String str53 = dateTime50.toString(dateTimeFormatter52);
        org.joda.time.DateTime dateTime55 = dateTime50.minusMonths(22);
        org.joda.time.Instant instant56 = new org.joda.time.Instant();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Chronology chronology59 = instant58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.eras();
        org.joda.time.DateTime dateTime61 = dateTime50.withChronology(chronology59);
        org.joda.time.Period period62 = duration41.toPeriod(chronology59);
        org.joda.time.Instant instant64 = instant34.withDurationAdded((org.joda.time.ReadableDuration) duration41, 16);
        boolean boolean65 = localTime24.equals((java.lang.Object) instant34);
        org.joda.time.Instant instant68 = instant34.withDurationAdded(3155695200000L, 44);
        org.joda.time.DateTimeZone dateTimeZone69 = instant34.getZone();
        java.lang.String str70 = dateTimeZone69.toString();
        org.joda.time.Chronology chronology71 = chronology13.withZone(dateTimeZone69);
        org.joda.time.DurationField durationField72 = chronology13.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime50", (instant10.compareTo(dateTime50) == 0) == instant10.equals(dateTime50));
    }

    @Test
    public void test264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test264");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap3);
        java.util.Locale locale5 = java.util.Locale.PRC;
        java.lang.String str6 = locale5.getScript();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.lang.String str8 = java.util.Locale.lookupTag(languageRangeList4, (java.util.Collection<java.lang.String>) strSet7);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap12);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap14 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList15 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap14);
        boolean boolean16 = strSet7.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15);
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime20 = dateTime18.withZoneRetainFields(dateTimeZone19);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtCurrentTime(dateTimeZone23);
        int int26 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTime dateTime28 = dateTime25.minusWeeks(44);
        org.joda.time.DateTime dateTime31 = dateTime28.withDurationAdded((-1L), 36946953);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) 100, 1L, periodType34);
        org.joda.time.Period period37 = period35.minusSeconds((-1));
        org.joda.time.Period period39 = period35.withWeeks((int) (byte) 0);
        org.joda.time.Period period41 = period39.withHours(2000);
        org.joda.time.DateTime dateTime42 = dateTime31.minus((org.joda.time.ReadablePeriod) period39);
        int int43 = dateTime42.getYearOfCentury();
        long long44 = dateTime42.getMillis();
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean48 = localDate45.isSupported(dateTimeFieldType47);
        int int49 = localDate45.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight51 = localDate45.toDateMidnight(dateTimeZone50);
        org.joda.time.LocalDate.Property property52 = localDate45.year();
        java.util.Date date53 = localDate45.toDate();
        org.joda.time.LocalDate localDate55 = localDate45.withDayOfYear(13);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.dayOfYear();
        int int57 = localDate55.get(dateTimeFieldType56);
        int int58 = dateTime42.get(dateTimeFieldType56);
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        int int61 = dateTime60.getYearOfCentury();
        int int62 = dateTime60.getWeekyear();
        org.joda.time.DateTime dateTime64 = dateTime60.plus((long) 15);
        org.joda.time.DateTime.Property property65 = dateTime64.millisOfSecond();
        org.joda.time.DateTime dateTime67 = dateTime64.withCenturyOfEra((int) '#');
        org.joda.time.DateTime dateTime69 = dateTime64.withYear((int) 'u');
        org.joda.time.MutableDateTime mutableDateTime70 = org.joda.time.MutableDateTime.now();
        mutableDateTime70.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime73 = mutableDateTime70.copy();
        mutableDateTime70.setDate((long) '#');
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property77 = localDate76.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean79 = localDate76.isSupported(dateTimeFieldType78);
        int int80 = localDate76.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight82 = localDate76.toDateMidnight(dateTimeZone81);
        org.joda.time.DateTime dateTime83 = mutableDateTime70.toDateTime(dateTimeZone81);
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(dateTimeZone81);
        org.joda.time.DateTime dateTime85 = org.joda.time.DateTime.now(dateTimeZone81);
        org.joda.time.DateTime dateTime86 = dateTime64.toDateTime(dateTimeZone81);
        org.joda.time.Instant instant87 = new org.joda.time.Instant();
        org.joda.time.Instant instant89 = instant87.withMillis(0L);
        org.joda.time.Duration duration91 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str92 = duration91.toString();
        org.joda.time.Instant instant93 = instant87.minus((org.joda.time.ReadableDuration) duration91);
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableDuration) duration91);
        boolean boolean95 = dateTime42.isAfter((org.joda.time.ReadableInstant) dateTime64);
        boolean boolean96 = strSet7.equals((java.lang.Object) boolean95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and dateTime60", (dateTime25.compareTo(dateTime60) == 0) == dateTime25.equals(dateTime60));
    }

    @Test
    public void test265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test265");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime7 = property6.roundFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now();
        mutableDateTime8.add((long) 'a');
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime8.yearOfCentury();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration19 = duration16.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration20 = duration13.minus((org.joda.time.ReadableDuration) duration19);
        mutableDateTime8.add((org.joda.time.ReadableDuration) duration13);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime8.centuryOfEra();
        mutableDateTime8.addYears(0);
        mutableDateTime8.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period32 = duration31.toPeriod();
        org.joda.time.Duration duration35 = duration31.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant36 = instant29.plus((org.joda.time.ReadableDuration) duration35);
        long long37 = instant36.getMillis();
        org.joda.time.Duration duration38 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime8, (org.joda.time.ReadableInstant) instant36);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime8.millisOfSecond();
        org.joda.time.Instant instant40 = new org.joda.time.Instant((java.lang.Object) mutableDateTime8);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.era();
        org.joda.time.MutableDateTime mutableDateTime43 = dateTime7.toMutableDateTime(chronology41);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and instant40", (mutableDateTime8.compareTo(instant40) == 0) == mutableDateTime8.equals(instant40));
    }

    @Test
    public void test266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test266");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        int int40 = mutableDateTime39.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime30", (dateTime2.compareTo(dateTime30) == 0) == dateTime2.equals(dateTime30));
    }

    @Test
    public void test267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test267");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate(dateTimeZone11);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime(dateTimeZone11);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime13", (mutableDateTime0.compareTo(dateTime13) == 0) == mutableDateTime0.equals(dateTime13));
    }

    @Test
    public void test268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test268");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        int int20 = mutableDateTime16.getYearOfEra();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) 36946953);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Duration duration25 = duration22.withMillis((long) 36992192);
        org.joda.time.Duration duration28 = duration25.withDurationAdded(1296112L, 443);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant5", (dateTime1.compareTo(instant5) == 0) == dateTime1.equals(instant5));
    }

    @Test
    public void test269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test269");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        org.joda.time.DateTime dateTime4 = localDate0.toDateTimeAtCurrentTime(dateTimeZone2);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtCurrentTime();
        boolean boolean7 = dateTime5.isBefore(1671667200000L);
        org.joda.time.DateTime dateTime10 = dateTime5.withDurationAdded((long) 33454, 0);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.lang.String str15 = locale14.getDisplayName();
        java.lang.String str16 = dateTimeZone12.getName(100L, locale14);
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(948227L, dateTimeZone12);
        long long18 = mutableDateTime17.getMillis();
        mutableDateTime17.setWeekyear(1439);
        boolean boolean22 = mutableDateTime17.isBefore(1645514186724L);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(36988464);
        mutableDateTime17.setZone(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime10.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime27 = dateTime26.withEarlierOffsetAtOverlap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and dateTime5", (dateTime4.compareTo(dateTime5) == 0) == dateTime4.equals(dateTime5));
    }

    @Test
    public void test270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test270");
        java.lang.Object obj0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.yearOfCentury();
        mutableDateTime1.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period(readableDuration9, readableInstant10);
        org.joda.time.PeriodType periodType14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period((long) 100, 1L, periodType14);
        org.joda.time.Period period17 = period15.minusSeconds((-1));
        java.lang.String str18 = period15.toString();
        org.joda.time.Period period19 = period15.toPeriod();
        org.joda.time.PeriodType periodType20 = period15.getPeriodType();
        org.joda.time.Period period21 = period11.normalizedStandard(periodType20);
        org.joda.time.DurationFieldType durationFieldType22 = null;
        int int23 = periodType20.indexOf(durationFieldType22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.eras();
        org.joda.time.LocalTime localTime29 = org.joda.time.LocalTime.now(chronology27);
        org.joda.time.DurationField durationField30 = chronology27.eras();
        org.joda.time.DateTimeField dateTimeField31 = chronology27.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType20, chronology27);
        org.joda.time.MutableDateTime mutableDateTime33 = mutableDateTime1.toMutableDateTime(chronology27);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours36 = duration35.toStandardHours();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        int int39 = dateTime38.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime42 = dateTime38.plus(0L);
        mutableDateTime33.setMillis((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DurationFieldType durationFieldType44 = org.joda.time.DurationFieldType.minutes();
        mutableDateTime33.add(durationFieldType44, 99);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone47);
        org.joda.time.DateTime dateTime49 = org.joda.time.DateTime.now(dateTimeZone47);
        org.joda.time.DateTime dateTime51 = dateTime49.withYearOfCentury(20);
        mutableDateTime33.setMillis((org.joda.time.ReadableInstant) dateTime51);
        mutableDateTime33.addHours(2045);
        org.joda.time.Chronology chronology55 = mutableDateTime33.getChronology();
        org.joda.time.Chronology chronology56 = mutableDateTime33.getChronology();
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime(obj0, chronology56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant24 and dateTime38", (instant24.compareTo(dateTime38) == 0) == instant24.equals(dateTime38));
    }

    @Test
    public void test271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test271");
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology11);
        org.joda.time.DurationField durationField14 = chronology11.eras();
        mutablePeriod6.setPeriod((long) 999, chronology11);
        org.joda.time.Chronology chronology16 = chronology11.withUTC();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.Period period18 = new org.joda.time.Period((long) (-3077672), (long) 16, chronology11);
        org.joda.time.DurationField durationField19 = chronology11.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField12, durationField19, and durationField12", !(durationField12.compareTo(durationField19) == 0) || (Math.signum(durationField12.compareTo(durationField12)) == Math.signum(durationField19.compareTo(durationField12))));
    }

    @Test
    public void test272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test272");
        org.joda.time.Duration duration1 = new org.joda.time.Duration((long) 59);
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology5.hourOfDay();
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod11 = new org.joda.time.MutablePeriod(readableInstant8, readableInstant9, periodType10);
        mutablePeriod11.setYears((int) '#');
        mutablePeriod11.setSeconds((int) 'a');
        mutablePeriod11.setPeriod((long) 0, (-1L));
        mutablePeriod11.addHours((-1));
        long long23 = chronology5.add((org.joda.time.ReadablePeriod) mutablePeriod11, (long) 999, 7);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(chronology5);
        boolean boolean25 = duration1.equals((java.lang.Object) dateTime24);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime29 = dateTime27.withZoneRetainFields(dateTimeZone28);
        org.joda.time.LocalDate localDate30 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property31 = localDate30.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = localDate30.toDateTimeAtCurrentTime(dateTimeZone32);
        int int35 = dateTime29.compareTo((org.joda.time.ReadableInstant) dateTime34);
        org.joda.time.DateTime dateTime37 = dateTime34.withDayOfMonth(20);
        org.joda.time.DateTime.Property property38 = dateTime37.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale42.getDisplayName();
        java.lang.String str44 = dateTimeZone40.getName(100L, locale42);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(948227L, dateTimeZone40);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.year();
        mutableDateTime45.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType57 = periodType54.getFieldType((int) (short) 0);
        java.lang.String str58 = periodType54.toString();
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.Chronology chronology62 = instant61.getChronology();
        org.joda.time.Period period63 = new org.joda.time.Period((long) 53, (long) (-1), periodType54, chronology62);
        org.joda.time.DateTimeField dateTimeField64 = dateTimeFieldType49.getField(chronology62);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(chronology65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusMinutes(15);
        org.joda.time.Chronology chronology69 = dateTime66.getChronology();
        java.lang.String str70 = chronology69.toString();
        org.joda.time.DateTimeField dateTimeField71 = dateTimeFieldType49.getField(chronology69);
        org.joda.time.DurationField durationField72 = chronology69.centuries();
        org.joda.time.DateTimeField dateTimeField73 = chronology69.millisOfDay();
        mutableDateTime45.setChronology(chronology69);
        org.joda.time.MutableDateTime mutableDateTime75 = dateTime37.toMutableDateTime(chronology69);
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime77.setSecondOfMinute(53);
        mutableDateTime77.setMillis(966164L);
        mutableDateTime75.setMillis((org.joda.time.ReadableInstant) mutableDateTime77);
        org.joda.time.DateTimeZone dateTimeZone85 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        long long87 = dateTimeZone85.convertUTCToLocal((long) 52);
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime77, dateTimeZone85);
        org.joda.time.Instant instant89 = dateTime88.toInstant();
        org.joda.time.DateTime dateTime91 = dateTime88.plusMinutes(1970);
        boolean boolean92 = dateTime88.isEqualNow();
        org.joda.time.DateTime dateTime94 = dateTime88.withYearOfCentury(39);
        org.joda.time.PeriodType periodType95 = org.joda.time.PeriodType.yearDay();
        org.joda.time.Period period96 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime88, periodType95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField72", Math.signum(durationField6.compareTo(durationField72)) == -Math.signum(durationField72.compareTo(durationField6)));
    }

    @Test
    public void test273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test273");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        long long11 = dateTimeZone7.getMillisKeepLocal(dateTimeZone9, (long) 44);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone7);
        mutableDateTime6.setZoneRetainFields(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.weekyear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.forOffsetMillis(2922789);
        mutableDateTime14.setZone(dateTimeZone17);
        org.joda.time.LocalDateTime localDateTime19 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property22 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str26 = dateTimeFieldType25.getName();
        int int27 = localDateTime19.indexOf(dateTimeFieldType25);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime19.minusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.plusMillis(10);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime29.minusWeeks(21);
        org.joda.time.LocalDateTime.Property property34 = localDateTime29.millisOfDay();
        org.joda.time.LocalDateTime localDateTime35 = property34.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withYearOfEra(55);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime35.minusMinutes(2122);
        boolean boolean40 = dateTimeZone17.isLocalDateTimeGap(localDateTime35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and mutableDateTime14", (dateTime12.compareTo(mutableDateTime14) == 0) == dateTime12.equals(mutableDateTime14));
    }

    @Test
    public void test274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test274");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        boolean boolean20 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Hours hours21 = duration16.toStandardHours();
        mutableDateTime12.add((org.joda.time.ReadableDuration) duration16, 20);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = null;
        java.lang.String str28 = dateTime25.toString(dateTimeFormatter27);
        org.joda.time.DateTime dateTime30 = dateTime25.minusMonths(22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.DateTime dateTime36 = dateTime25.withChronology(chronology34);
        org.joda.time.Period period37 = duration16.toPeriod(chronology34);
        org.joda.time.Instant instant39 = instant9.withDurationAdded((org.joda.time.ReadableDuration) duration16, 16);
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.dayOfYear();
        boolean boolean41 = instant39.isSupported(dateTimeFieldType40);
        java.lang.String str42 = dateTimeFieldType40.getName();
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = null;
        org.joda.time.format.DateTimeParser dateTimeParser44 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter43, dateTimeParser44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter45.withChronology(chronology49);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(chronology49);
        org.joda.time.DateTimeField dateTimeField57 = dateTimeFieldType40.getField(chronology49);
        int int58 = dateTimeField57.getMinimumValue();
        org.joda.time.DurationField durationField59 = dateTimeField57.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField59, and durationField35", !(durationField35.compareTo(durationField59) == 0) || (Math.signum(durationField35.compareTo(durationField35)) == Math.signum(durationField59.compareTo(durationField35))));
    }

    @Test
    public void test275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test275");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField31 = chronology21.minuteOfHour();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalTime localTime34 = new org.joda.time.LocalTime((long) (short) 100, chronology33);
        int int35 = localTime34.getMillisOfDay();
        org.joda.time.LocalTime.Property property36 = localTime34.millisOfSecond();
        org.joda.time.DurationField durationField37 = property36.getDurationField();
        org.joda.time.LocalTime localTime38 = property36.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime39 = property36.withMinimumValue();
        org.joda.time.LocalTime localTime41 = localTime39.plusMinutes(37112100);
        java.util.Locale.Category category42 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale43 = java.util.Locale.getDefault(category42);
        java.util.Locale locale44 = java.util.Locale.getDefault(category42);
        java.util.Locale.Builder builder45 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder46 = builder45.clear();
        java.util.Locale locale47 = builder46.build();
        java.util.Locale locale48 = builder46.build();
        java.lang.String str49 = locale48.getISO3Country();
        java.util.Locale.setDefault(category42, locale48);
        java.util.Locale locale51 = java.util.Locale.getDefault(category42);
        java.util.Locale locale52 = java.util.Locale.GERMAN;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.lang.String str54 = locale52.getDisplayVariant(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale52.getISO3Country();
        java.util.Locale locale57 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale57);
        java.lang.String str59 = locale52.getDisplayLanguage(locale57);
        java.util.Locale.setDefault(category42, locale52);
        java.lang.String str61 = dateTimeField31.getAsShortText((org.joda.time.ReadablePartial) localTime39, locale52);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField37", Math.signum(durationField9.compareTo(durationField37)) == -Math.signum(durationField37.compareTo(durationField9)));
    }

    @Test
    public void test276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test276");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.setYears((int) '#');
        org.joda.time.Chronology chronology7 = null;
        mutablePeriod3.add((long) 1, chronology7);
        org.joda.time.ReadableInterval readableInterval9 = null;
        mutablePeriod3.setPeriod(readableInterval9);
        int int11 = mutablePeriod3.getDays();
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property15 = localDate14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField16 = property15.getField();
        org.joda.time.LocalDate localDate17 = property15.roundCeilingCopy();
        org.joda.time.Chronology chronology18 = localDate17.getChronology();
        mutablePeriod3.setPeriod((long) 36946953, (-205878993L), chronology18);
        org.joda.time.DurationField durationField20 = chronology18.centuries();
        org.joda.time.LocalDate localDate21 = org.joda.time.LocalDate.now(chronology18);
        org.joda.time.DateTime dateTime22 = localDate21.toDateTimeAtMidnight();
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.yearOfCentury();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration34 = duration31.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration35 = duration28.minus((org.joda.time.ReadableDuration) duration34);
        mutableDateTime23.add((org.joda.time.ReadableDuration) duration28);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime23.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime38 = property37.roundFloor();
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime38.yearOfEra();
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.eras();
        long long48 = chronology43.add(0L, (long) 2022, (int) '4');
        mutableDateTime38.setChronology(chronology43);
        boolean boolean50 = localDate21.equals((java.lang.Object) mutableDateTime38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField20 and durationField44", Math.signum(durationField20.compareTo(durationField44)) == -Math.signum(durationField44.compareTo(durationField20)));
    }

    @Test
    public void test277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test277");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Chronology chronology5 = instant4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.eras();
        org.joda.time.LocalTime localTime7 = org.joda.time.LocalTime.now(chronology5);
        org.joda.time.DurationField durationField8 = chronology5.eras();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 44, chronology5);
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType0.getField(chronology5);
        org.joda.time.DateTimeField dateTimeField11 = chronology5.weekOfWeekyear();
        long long14 = dateTimeField11.set(950707L, 45);
        org.joda.time.DateTimeZone dateTimeZone15 = null;
        org.joda.time.LocalTime localTime16 = new org.joda.time.LocalTime(dateTimeZone15);
        org.joda.time.LocalTime localTime18 = localTime16.minusHours((int) (byte) 100);
        int int19 = localTime18.getMinuteOfHour();
        java.util.Locale locale21 = java.util.Locale.GERMAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale21.getDisplayVariant(locale22);
        java.util.Set<java.lang.Character> charSet24 = locale22.getExtensionKeys();
        java.lang.String str25 = dateTimeField11.getAsText((org.joda.time.ReadablePartial) localTime18, 62187, locale22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getYearOfCentury();
        int int29 = dateTime27.getWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property31 = dateTime27.yearOfEra();
        org.joda.time.DateTime dateTime32 = property31.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime33 = property31.roundHalfEvenCopy();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours36 = duration35.toStandardHours();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(chronology37);
        int int39 = dateTime38.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration35, (org.joda.time.ReadableInstant) dateTime38);
        mutablePeriod40.addSeconds(292278993);
        mutablePeriod40.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime46 = dateTime33.minus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.joda.time.DateTime dateTime49 = dateTime33.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period52 = duration51.toPeriod();
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration59 = duration56.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean60 = duration54.isLongerThan((org.joda.time.ReadableDuration) duration59);
        org.joda.time.Duration duration61 = duration51.minus((org.joda.time.ReadableDuration) duration54);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration66 = duration63.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean67 = duration54.equals((java.lang.Object) duration63);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableDuration) duration54);
        org.joda.time.PeriodType periodType69 = null;
        org.joda.time.Instant instant70 = new org.joda.time.Instant();
        org.joda.time.Instant instant72 = instant70.withMillis(0L);
        org.joda.time.Chronology chronology73 = instant72.getChronology();
        org.joda.time.DurationField durationField74 = chronology73.eras();
        org.joda.time.LocalTime localTime75 = org.joda.time.LocalTime.now(chronology73);
        org.joda.time.Period period76 = duration54.toPeriod(periodType69, chronology73);
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.ReadableInstant readableInstant78 = null;
        org.joda.time.PeriodType periodType79 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod80 = new org.joda.time.MutablePeriod(readableInstant77, readableInstant78, periodType79);
        org.joda.time.DurationFieldType durationFieldType82 = periodType79.getFieldType((int) (short) 0);
        org.joda.time.Period period84 = period76.withFieldAdded(durationFieldType82, 20);
        boolean boolean85 = localTime18.isSupported(durationFieldType82);
        org.joda.time.Instant instant86 = new org.joda.time.Instant();
        org.joda.time.Instant instant88 = instant86.withMillis(0L);
        org.joda.time.Chronology chronology89 = instant88.getChronology();
        org.joda.time.Instant instant90 = instant88.toInstant();
        org.joda.time.Chronology chronology91 = null;
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime(chronology91);
        org.joda.time.DateTime dateTime94 = dateTime92.plusMinutes(15);
        org.joda.time.Chronology chronology95 = dateTime92.getChronology();
        org.joda.time.DurationField durationField96 = chronology95.hours();
        org.joda.time.MutableDateTime mutableDateTime97 = instant90.toMutableDateTime(chronology95);
        org.joda.time.DurationField durationField98 = durationFieldType82.getField(chronology95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField96", Math.signum(durationField6.compareTo(durationField96)) == -Math.signum(durationField96.compareTo(durationField6)));
    }

    @Test
    public void test278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test278");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        long long7 = mutableDateTime6.getMillis();
        mutableDateTime6.setWeekyear(1439);
        boolean boolean11 = mutableDateTime6.isBefore(1645514186724L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(36988464);
        mutableDateTime6.setZone(dateTimeZone13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.Period period22 = period18.toPeriod();
        int int23 = period22.size();
        org.joda.time.Period period25 = period22.plusSeconds(62151);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableInstant27, readableInstant28, periodType29);
        org.joda.time.PeriodType periodType31 = periodType29.withHoursRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.eras();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 44, chronology37);
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType32.getField(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) (-292275054), periodType29, chronology37);
        org.joda.time.Period period45 = period25.minus((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str47 = durationFieldType46.getName();
        int int48 = mutablePeriod44.get(durationFieldType46);
        mutableDateTime6.add(durationFieldType46, 37048051);
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = null;
        org.joda.time.format.DateTimeParser dateTimeParser52 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter51, dateTimeParser52);
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.Chronology chronology57 = instant56.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.eras();
        long long62 = chronology57.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter53.withChronology(chronology57);
        org.joda.time.format.DateTimePrinter dateTimePrinter64 = dateTimeFormatter63.getPrinter();
        org.joda.time.Chronology chronology65 = dateTimeFormatter63.getChronology();
        boolean boolean66 = durationFieldType46.isSupported(chronology65);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology68);
        org.joda.time.DateTime dateTime71 = dateTime69.plusMinutes(15);
        org.joda.time.Chronology chronology72 = dateTime69.getChronology();
        org.joda.time.Instant instant73 = new org.joda.time.Instant();
        org.joda.time.Instant instant75 = instant73.withMillis(0L);
        org.joda.time.Chronology chronology76 = instant75.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.eras();
        org.joda.time.LocalTime localTime78 = org.joda.time.LocalTime.now(chronology76);
        org.joda.time.DurationField durationField79 = chronology76.eras();
        org.joda.time.DateTimeField dateTimeField80 = chronology76.hourOfDay();
        org.joda.time.DateTime dateTime81 = dateTime69.withChronology(chronology76);
        org.joda.time.DateTimeField dateTimeField82 = chronology76.dayOfMonth();
        org.joda.time.Period period83 = new org.joda.time.Period(950707L, chronology76);
        org.joda.time.DateTimeField dateTimeField84 = chronology76.secondOfMinute();
        org.joda.time.DurationField durationField85 = durationFieldType46.getField(chronology76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField38, durationField85, and durationField38", !(durationField38.compareTo(durationField85) == 0) || (Math.signum(durationField38.compareTo(durationField38)) == Math.signum(durationField85.compareTo(durationField38))));
    }

    @Test
    public void test279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test279");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration3, 8);
        mutableDateTime1.setSecondOfMinute((int) (short) 0);
        mutableDateTime1.addMonths(36956320);
        mutableDateTime1.setDayOfYear(49);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime1.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period(readableDuration16, readableInstant17);
        org.joda.time.PeriodType periodType21 = null;
        org.joda.time.Period period22 = new org.joda.time.Period((long) 100, 1L, periodType21);
        org.joda.time.Period period24 = period22.minusSeconds((-1));
        java.lang.String str25 = period22.toString();
        org.joda.time.Period period26 = period22.toPeriod();
        org.joda.time.PeriodType periodType27 = period22.getPeriodType();
        org.joda.time.Period period28 = period18.normalizedStandard(periodType27);
        org.joda.time.DurationFieldType durationFieldType29 = null;
        int int30 = periodType27.indexOf(durationFieldType29);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType27, chronology34);
        org.joda.time.DateTimeField dateTimeField40 = chronology34.hourOfDay();
        mutableDateTime1.setChronology(chronology34);
        org.joda.time.DateTimeField dateTimeField42 = chronology34.dayOfMonth();
        org.joda.time.DurationField durationField43 = chronology34.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField43, and durationField35", !(durationField35.compareTo(durationField43) == 0) || (Math.signum(durationField35.compareTo(durationField35)) == Math.signum(durationField43.compareTo(durationField35))));
    }

    @Test
    public void test280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test280");
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.LocalTime localTime5 = new org.joda.time.LocalTime(dateTimeZone4);
        org.joda.time.LocalTime localTime7 = localTime5.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology8 = localTime7.getChronology();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.millisOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.minuteOfHour();
        org.joda.time.DurationField durationField12 = chronology8.weekyears();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod(959393L, 29923154006400000L, chronology8);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration17 = duration16.toDuration();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str24 = duration23.toString();
        boolean boolean25 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration23);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration35 = duration32.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean36 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration37 = duration27.minus((org.joda.time.ReadableDuration) duration30);
        boolean boolean38 = duration21.isShorterThan((org.joda.time.ReadableDuration) duration37);
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.Period period41 = new org.joda.time.Period(readableDuration39, readableInstant40);
        org.joda.time.Period period43 = period41.withDays((int) (byte) 1);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours46 = duration45.toStandardHours();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology47);
        int int49 = dateTime48.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod50 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration45, (org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration51 = period41.toDurationFrom((org.joda.time.ReadableInstant) dateTime48);
        org.joda.time.Duration duration53 = duration37.withDurationAdded((org.joda.time.ReadableDuration) duration51, (int) ' ');
        int int54 = duration19.compareTo((org.joda.time.ReadableDuration) duration37);
        boolean boolean55 = duration17.isEqual((org.joda.time.ReadableDuration) duration19);
        org.joda.time.Instant instant56 = new org.joda.time.Instant();
        org.joda.time.Instant instant58 = instant56.withMillis(0L);
        org.joda.time.Chronology chronology59 = instant58.getChronology();
        org.joda.time.DurationField durationField60 = chronology59.eras();
        org.joda.time.LocalTime localTime61 = org.joda.time.LocalTime.now(chronology59);
        mutablePeriod14.setPeriod((org.joda.time.ReadableDuration) duration19, chronology59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField12 and durationField60", Math.signum(durationField12.compareTo(durationField60)) == -Math.signum(durationField60.compareTo(durationField12)));
    }

    @Test
    public void test281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test281");
        org.joda.time.Period period1 = org.joda.time.Period.weeks(311);
        org.joda.time.Period period3 = new org.joda.time.Period((long) 46);
        int int4 = period3.getMillis();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTime dateTime6 = new org.joda.time.DateTime(chronology5);
        int int7 = dateTime6.getYearOfCentury();
        int int8 = dateTime6.getWeekyear();
        org.joda.time.DateTime dateTime9 = dateTime6.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property10 = dateTime6.yearOfEra();
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime12 = property10.roundHalfEvenCopy();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours15 = duration14.toStandardHours();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration14, (org.joda.time.ReadableInstant) dateTime17);
        mutablePeriod19.addSeconds(292278993);
        mutablePeriod19.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime25 = dateTime12.minus((org.joda.time.ReadablePeriod) mutablePeriod19);
        org.joda.time.DateTime dateTime28 = dateTime12.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration38 = duration35.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean39 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration38);
        org.joda.time.Duration duration40 = duration30.minus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration45 = duration42.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean46 = duration33.equals((java.lang.Object) duration42);
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableDuration) duration33);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.eras();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(chronology52);
        org.joda.time.Period period55 = duration33.toPeriod(periodType48, chronology52);
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(readableInstant56, readableInstant57, periodType58);
        org.joda.time.DurationFieldType durationFieldType61 = periodType58.getFieldType((int) (short) 0);
        org.joda.time.Period period63 = period55.withFieldAdded(durationFieldType61, 20);
        boolean boolean64 = period3.isSupported(durationFieldType61);
        org.joda.time.Period period66 = period1.withFieldAdded(durationFieldType61, 0);
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime(dateTimeZone67);
        org.joda.time.LocalTime localTime70 = localTime68.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology71 = localTime70.getChronology();
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime(chronology71);
        org.joda.time.DurationField durationField73 = durationFieldType61.getField(chronology71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField53, durationField73, and durationField53", !(durationField53.compareTo(durationField73) == 0) || (Math.signum(durationField53.compareTo(durationField53)) == Math.signum(durationField73.compareTo(durationField53))));
    }

    @Test
    public void test282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test282");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.forOffsetMillis(776);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.toMutableDateTime(dateTimeZone19);
        int int21 = mutableDateTime17.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime20", (instant10.compareTo(mutableDateTime20) == 0) == instant10.equals(mutableDateTime20));
    }

    @Test
    public void test283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test283");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.roundFloor();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        long long13 = chronology8.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField14 = chronology8.monthOfYear();
        org.joda.time.DateTimeField dateTimeField15 = chronology8.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField16 = chronology8.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField17 = chronology8.hourOfDay();
        mutableDateTime4.setChronology(chronology8);
        org.joda.time.DurationField durationField19 = chronology8.minutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField19, and durationField9", !(durationField9.compareTo(durationField19) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField19.compareTo(durationField9))));
    }

    @Test
    public void test284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test284");
        org.joda.time.Instant instant2 = new org.joda.time.Instant();
        org.joda.time.Instant instant4 = instant2.withMillis(0L);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant11 = instant4.plus((org.joda.time.ReadableDuration) duration10);
        long long12 = instant11.getMillis();
        org.joda.time.Chronology chronology13 = instant11.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.months();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(chronology13);
        org.joda.time.LocalTime localTime16 = org.joda.time.LocalTime.fromMillisOfDay((long) (-356), chronology13);
        org.joda.time.Chronology chronology18 = null;
        java.util.Locale locale19 = java.util.Locale.GERMAN;
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.lang.String str21 = locale19.getDisplayVariant(locale20);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket22 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology18, locale20);
        java.lang.String str23 = locale20.getDisplayScript();
        java.util.Locale locale24 = locale20.stripExtensions();
        java.lang.String str25 = locale24.getDisplayCountry();
        java.util.Locale.setDefault(locale24);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket29 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology13, locale24, (java.lang.Integer) 62265, (int) 'x');
        org.joda.time.LocalTime localTime30 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.eras();
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime((long) 44, chronology36);
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType31.getField(chronology36);
        org.joda.time.PeriodType periodType44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period((long) 100, 1L, periodType44);
        org.joda.time.Period period47 = period45.minusSeconds((-1));
        java.lang.String str48 = period45.toString();
        long long51 = chronology36.add((org.joda.time.ReadablePeriod) period45, (long) ' ', (int) 'a');
        org.joda.time.Period period53 = period45.minusHours((-292275054));
        org.joda.time.Period period55 = period53.minusHours(2000);
        org.joda.time.Period period57 = period55.minusMonths((int) (byte) 100);
        org.joda.time.Period period59 = period57.minusMonths(26262);
        org.joda.time.Period period60 = period57.normalizedStandard();
        int[] intArray62 = chronology13.get((org.joda.time.ReadablePeriod) period57, (long) 37068754);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField37", Math.signum(durationField14.compareTo(durationField37)) == -Math.signum(durationField37.compareTo(durationField14)));
    }

    @Test
    public void test285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test285");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.months();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21, periodType22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(15);
        org.joda.time.Interval interval36 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Instant instant37 = instant9.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant39 = instant37.withMillis((-83734L));
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(50, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(1645514174548L, dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((java.lang.Object) instant39, dateTimeZone43);
        int int49 = dateTimeZone43.getOffsetFromLocal((-124334350888067L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime47", (instant39.compareTo(mutableDateTime47) == 0) == instant39.equals(mutableDateTime47));
    }

    @Test
    public void test286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test286");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.ReadableInstant readableInstant6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period(readableDuration5, readableInstant6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.Period period17 = period7.normalizedStandard(periodType16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(44L, periodType16, chronology21);
        org.joda.time.DateTimeField dateTimeField29 = chronology21.clockhourOfHalfday();
        org.joda.time.DateTime dateTime30 = dateTime2.toDateTime(chronology21);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property34 = localDate33.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean36 = localDate33.isSupported(dateTimeFieldType35);
        org.joda.time.Chronology chronology37 = localDate33.getChronology();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime30.toMutableDateTime(chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField41 = chronology37.year();
        org.joda.time.DateTime dateTime42 = org.joda.time.DateTime.now(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.minuteOfHour();
        long long45 = dateTimeField43.roundHalfCeiling(1645514308180L);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalTime localTime48 = new org.joda.time.LocalTime((long) (short) 100, chronology47);
        int int49 = localTime48.getMillisOfDay();
        org.joda.time.LocalTime.Property property50 = localTime48.millisOfSecond();
        org.joda.time.DurationField durationField51 = property50.getLeapDurationField();
        java.lang.String str52 = property50.getName();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale56 = java.util.Locale.GERMAN;
        java.lang.String str57 = locale56.getDisplayName();
        java.lang.String str58 = dateTimeZone54.getName(100L, locale56);
        org.joda.time.LocalTime localTime59 = property50.setCopy("615", locale56);
        org.joda.time.LocalTime localTime61 = property50.addWrapFieldToCopy(4);
        org.joda.time.Interval interval62 = property50.toInterval();
        org.joda.time.LocalTime localTime63 = property50.roundHalfFloorCopy();
        org.joda.time.DurationField durationField64 = property50.getDurationField();
        org.joda.time.LocalTime localTime65 = property50.getLocalTime();
        org.joda.time.LocalTime.Property property66 = localTime65.millisOfDay();
        org.joda.time.LocalTime.Property property67 = localTime65.secondOfMinute();
        org.joda.time.LocalTime localTime68 = property67.getLocalTime();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod71.clear();
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period75 = duration74.toPeriod();
        org.joda.time.Duration duration78 = duration74.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTime dateTime82 = dateTime80.plusMinutes(15);
        org.joda.time.Interval interval83 = duration78.toIntervalTo((org.joda.time.ReadableInstant) dateTime82);
        mutablePeriod71.setPeriod((org.joda.time.ReadableInterval) interval83);
        mutablePeriod71.setMillis((int) ' ');
        mutablePeriod71.setPeriod((long) 2);
        int[] intArray89 = mutablePeriod71.getValues();
        int int90 = dateTimeField43.getMaximumValue((org.joda.time.ReadablePartial) localTime68, intArray89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField22 and durationField64", Math.signum(durationField22.compareTo(durationField64)) == -Math.signum(durationField64.compareTo(durationField22)));
    }

    @Test
    public void test287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test287");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 44, chronology4);
        org.joda.time.DateTime.Property property9 = dateTime8.hourOfDay();
        java.lang.String[] strArray11 = java.util.TimeZone.getAvailableIDs((int) '#');
        boolean boolean12 = dateTime8.equals((java.lang.Object) strArray11);
        org.joda.time.DateMidnight dateMidnight13 = dateTime8.toDateMidnight();
        org.joda.time.Instant instant15 = org.joda.time.Instant.parse("2022-02-22T07:16:25.090Z");
        org.joda.time.MutableDateTime mutableDateTime16 = instant15.toMutableDateTimeISO();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withHoursRemoved();
        org.joda.time.PeriodType periodType27 = periodType26.withWeeksRemoved();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant28, readableInstant29, periodType30);
        mutablePeriod31.setYears((int) '#');
        org.joda.time.Chronology chronology35 = null;
        mutablePeriod31.add((long) 1, chronology35);
        org.joda.time.ReadableInterval readableInterval37 = null;
        mutablePeriod31.setPeriod(readableInterval37);
        int int39 = mutablePeriod31.getDays();
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property43 = localDate42.monthOfYear();
        org.joda.time.DateTimeField dateTimeField44 = property43.getField();
        org.joda.time.LocalDate localDate45 = property43.roundCeilingCopy();
        org.joda.time.Chronology chronology46 = localDate45.getChronology();
        mutablePeriod31.setPeriod((long) 36946953, (-205878993L), chronology46);
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod(953941L, periodType26, chronology46);
        org.joda.time.Period period49 = new org.joda.time.Period((-205860000L), 984293L, periodType26);
        org.joda.time.DurationFieldType durationFieldType50 = org.joda.time.DurationFieldType.millis();
        java.lang.String str51 = durationFieldType50.getName();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMinutes(15);
        org.joda.time.Chronology chronology57 = dateTime54.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.hours();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(1440L, chronology57);
        boolean boolean60 = durationFieldType50.isSupported(chronology57);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(1220624L, 1570529880000L, periodType26, chronology57);
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableInstant) mutableDateTime16, periodType26);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField5 and durationField58", Math.signum(durationField5.compareTo(durationField58)) == -Math.signum(durationField58.compareTo(durationField5)));
    }

    @Test
    public void test288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test288");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17, periodType18);
        org.joda.time.DurationFieldType durationFieldType21 = periodType18.getFieldType((int) (short) 0);
        int int22 = mutablePeriod2.get(durationFieldType21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime25.copy();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration24, chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.weekyearOfCentury();
        java.lang.String str41 = chronology34.toString();
        org.joda.time.DurationField durationField42 = chronology34.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField42, and durationField35", !(durationField35.compareTo(durationField42) == 0) || (Math.signum(durationField35.compareTo(durationField35)) == Math.signum(durationField42.compareTo(durationField35))));
    }

    @Test
    public void test289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test289");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime0.minusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        int int14 = localDateTime0.indexOf(dateTimeFieldType13);
        int int15 = localDateTime0.getEra();
        int int16 = localDateTime0.getMillisOfSecond();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime0.withCenturyOfEra(5);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.era();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.minusDays(2121);
        org.joda.time.LocalDateTime localDateTime22 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property25 = localDateTime22.hourOfDay();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime22.plusMillis((int) (byte) 0);
        org.joda.time.LocalDateTime.Property property28 = localDateTime22.dayOfYear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime22.withMillisOfSecond((int) (byte) 1);
        org.joda.time.LocalDateTime.Property property31 = localDateTime22.minuteOfHour();
        int int32 = localDateTime22.getWeekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime22.plusMinutes(26199);
        org.joda.time.ReadablePartial readablePartial35 = null;
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withFields(readablePartial35);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.minusWeeks(62244);
        org.joda.time.Period period39 = new org.joda.time.Period((org.joda.time.ReadablePartial) localDateTime18, (org.joda.time.ReadablePartial) localDateTime38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime38.withCenturyOfEra(33487);
        org.joda.time.Duration duration43 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours44 = duration43.toStandardHours();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        int int47 = dateTime46.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration43, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime50 = dateTime46.plus(0L);
        org.joda.time.Instant instant51 = dateTime50.toInstant();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime50.toMutableDateTime(dateTimeZone53);
        org.joda.time.Duration duration56 = new org.joda.time.Duration(0L);
        org.joda.time.Duration duration58 = duration56.minus((long) 40);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime54, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime38.minus((org.joda.time.ReadableDuration) duration58);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime46 and mutableDateTime54", (dateTime46.compareTo(mutableDateTime54) == 0) == dateTime46.equals(mutableDateTime54));
    }

    @Test
    public void test290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test290");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(chronology21);
        org.joda.time.DurationField durationField32 = chronology21.centuries();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField9, durationField32, and durationField9", !(durationField9.compareTo(durationField32) == 0) || (Math.signum(durationField9.compareTo(durationField9)) == Math.signum(durationField32.compareTo(durationField9))));
    }

    @Test
    public void test291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test291");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(15);
        org.joda.time.Chronology chronology6 = dateTime3.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.hours();
        org.joda.time.DurationField durationField8 = chronology6.years();
        org.joda.time.DateTimeField dateTimeField9 = chronology6.dayOfYear();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.fromMillisOfDay((long) 97, chronology6);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str17 = duration16.toString();
        org.joda.time.Instant instant18 = instant12.minus((org.joda.time.ReadableDuration) duration16);
        org.joda.time.Instant instant20 = instant12.minus(950105L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime28 = property26.set(45);
        org.joda.time.MutableDateTime mutableDateTime29 = property26.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime31 = property26.add(45);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        long long35 = dateTimeZone32.previousTransition(100L);
        int int37 = dateTimeZone32.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime38 = mutableDateTime31.toDateTime(dateTimeZone32);
        mutableDateTime24.setZoneRetainFields(dateTimeZone32);
        org.joda.time.LocalDateTime localDateTime40 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField46 = property45.getField();
        mutableDateTime24.setRounding(dateTimeField46);
        org.joda.time.Instant instant48 = new org.joda.time.Instant();
        org.joda.time.Instant instant50 = instant48.withMillis(0L);
        org.joda.time.Chronology chronology51 = instant50.getChronology();
        org.joda.time.DurationField durationField52 = chronology51.eras();
        long long56 = chronology51.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField57 = chronology51.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime58 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property61 = localDateTime58.hourOfDay();
        org.joda.time.DateTimeField dateTimeField62 = property61.getField();
        java.lang.String str63 = property61.toString();
        org.joda.time.LocalDateTime localDateTime65 = property61.addToCopy(100L);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime65.minusMinutes(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType69 = dateTimeFieldType68.getDurationType();
        org.joda.time.LocalDateTime.Property property70 = localDateTime67.property(dateTimeFieldType68);
        java.util.Locale.Category category71 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale72 = java.util.Locale.getDefault(category71);
        java.util.Locale locale73 = java.util.Locale.getDefault(category71);
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale73.getDisplayScript(locale74);
        int int76 = property70.getMaximumShortTextLength(locale73);
        int int77 = dateTimeField57.getMaximumTextLength(locale73);
        int int78 = dateTimeField46.getMaximumShortTextLength(locale73);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket80 = new org.joda.time.format.DateTimeParserBucket((long) 62194, chronology21, locale73, (java.lang.Integer) 62277);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket83 = new org.joda.time.format.DateTimeParserBucket(0L, chronology6, locale73, (java.lang.Integer) 732, 26350);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField52", Math.signum(durationField7.compareTo(durationField52)) == -Math.signum(durationField52.compareTo(durationField7)));
    }

    @Test
    public void test292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test292");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.DateTime dateTime6 = dateTime1.plusHours(19045);
        org.joda.time.DateTime dateTime7 = dateTime1.toDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration12 = duration9.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.yearOfCentury();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration24 = duration21.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration25 = duration18.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration18);
        boolean boolean27 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration29 = duration18.minus((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime1.minus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        long long39 = chronology34.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField40 = chronology34.monthOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.yearOfCentury();
        int int42 = dateTime1.get(dateTimeField41);
        boolean boolean43 = dateTimeField41.isSupported();
        org.joda.time.DurationField durationField44 = dateTimeField41.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField44, and durationField35", !(durationField35.compareTo(durationField44) == 0) || (Math.signum(durationField35.compareTo(durationField35)) == Math.signum(durationField44.compareTo(durationField35))));
    }

    @Test
    public void test293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test293");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        mutableDateTime16.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.toPeriod();
        org.joda.time.PeriodType periodType35 = period30.getPeriodType();
        org.joda.time.Period period36 = period26.normalizedStandard(periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        int int38 = periodType35.indexOf(durationFieldType37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.eras();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.DurationField durationField45 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType35, chronology42);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime16.toMutableDateTime(chronology42);
        mutableDateTime16.setDayOfYear(44);
        int int51 = mutableDateTime16.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addMillis(365);
        mutableDateTime2.setTime((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTime dateTime56 = mutableDateTime2.toDateTime();
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime2.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime58 = property57.roundFloor();
        org.joda.time.Chronology chronology59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(chronology59);
        org.joda.time.DateTime dateTime62 = dateTime60.plusMinutes(15);
        org.joda.time.Chronology chronology63 = dateTime60.getChronology();
        java.lang.String str64 = chronology63.toString();
        org.joda.time.DurationField durationField65 = chronology63.halfdays();
        long long71 = chronology63.getDateTimeMillis((long) 26175904, 0, 25, 53, 14);
        org.joda.time.DateTimeField dateTimeField72 = chronology63.clockhourOfDay();
        org.joda.time.DurationField durationField73 = chronology63.months();
        org.joda.time.DateTimeField dateTimeField74 = chronology63.halfdayOfDay();
        mutableDateTime58.setRounding(dateTimeField74);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField43 and durationField65", Math.signum(durationField43.compareTo(durationField65)) == -Math.signum(durationField65.compareTo(durationField43)));
    }

    @Test
    public void test294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test294");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime6.toMutableDateTime();
        int int8 = mutableDateTime7.getSecondOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime7.millisOfSecond();
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime7, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant13 = mutableDateTime7.toInstant();
        java.util.Date date14 = mutableDateTime7.toDate();
        mutableDateTime7.setSecondOfDay(26238);
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration25, readableInstant26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.Period period33 = period31.minusSeconds((-1));
        java.lang.String str34 = period31.toString();
        org.joda.time.Period period35 = period31.toPeriod();
        org.joda.time.PeriodType periodType36 = period31.getPeriodType();
        org.joda.time.Period period37 = period27.normalizedStandard(periodType36);
        org.joda.time.DurationFieldType durationFieldType38 = null;
        int int39 = periodType36.indexOf(durationFieldType38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.eras();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now(chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType36, chronology43);
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime17.toMutableDateTime(chronology43);
        int int50 = mutableDateTime49.getMonthOfYear();
        boolean boolean51 = mutableDateTime7.isAfter((org.joda.time.ReadableInstant) mutableDateTime49);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMinutes(15);
        org.joda.time.Chronology chronology57 = dateTime54.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.hours();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(1440L, chronology57);
        org.joda.time.DateTime dateTime60 = org.joda.time.DateTime.now(chronology57);
        mutableDateTime7.setChronology(chronology57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField44 and durationField58", Math.signum(durationField44.compareTo(durationField58)) == -Math.signum(durationField58.compareTo(durationField44)));
    }

    @Test
    public void test295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test295");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime8 = localDate3.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        long long17 = chronology12.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField18 = chronology12.secondOfMinute();
        boolean boolean19 = dateTimeField18.isSupported();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.monthOfYear();
        int int22 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate24 = localDate20.withYearOfCentury(46);
        org.joda.time.LocalDate.Property property25 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology26 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime8.toDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime34 = dateTime32.withZoneRetainFields(dateTimeZone33);
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTime dateTime39 = localDate35.toDateTimeAtCurrentTime(dateTimeZone37);
        int int40 = dateTime34.compareTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.DateTime dateTime42 = dateTime39.minusWeeks(44);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMinutes(15);
        org.joda.time.Chronology chronology47 = dateTime44.getChronology();
        java.lang.String str48 = chronology47.toString();
        org.joda.time.DateTimeField dateTimeField49 = chronology47.dayOfYear();
        org.joda.time.DateTime dateTime50 = dateTime39.withChronology(chronology47);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType57 = periodType54.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType58 = periodType54.withMillisRemoved();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, readableDuration51, periodType58);
        org.joda.time.Period period60 = new org.joda.time.Period(0L, periodType58);
        org.joda.time.DurationFieldType durationFieldType61 = org.joda.time.DurationFieldType.weekyears();
        int int62 = period60.indexOf(durationFieldType61);
        org.joda.time.DateTime dateTime64 = dateTime29.withFieldAdded(durationFieldType61, 26343);
        org.joda.time.DateTime dateTime67 = dateTime64.withDurationAdded(25574L, 21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime29", (dateTime8.compareTo(dateTime29) == 0) == dateTime8.equals(dateTime29));
    }

    @Test
    public void test296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test296");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        java.lang.String str6 = chronology5.toString();
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) 0, chronology5);
        org.joda.time.LocalDate localDate9 = localDate7.withDayOfYear(31);
        org.joda.time.Chronology chronology11 = null;
        java.util.Locale locale12 = java.util.Locale.GERMAN;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale12.getDisplayVariant(locale13);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology11, locale13, (java.lang.Integer) 10);
        long long19 = dateTimeParserBucket16.computeMillis(true, "deu");
        long long20 = dateTimeParserBucket16.computeMillis();
        boolean boolean21 = localDate9.equals((java.lang.Object) dateTimeParserBucket16);
        org.joda.time.DateTime dateTime22 = localDate9.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property23 = localDate9.weekyear();
        org.joda.time.LocalDate localDate24 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property25 = localDate24.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = property25.getField();
        org.joda.time.LocalDate localDate27 = property25.roundCeilingCopy();
        org.joda.time.Chronology chronology28 = localDate27.getChronology();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime32 = localDate27.toDateTimeAtMidnight(dateTimeZone31);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        long long41 = chronology36.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField42 = chronology36.secondOfMinute();
        boolean boolean43 = dateTimeField42.isSupported();
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        int int46 = dateTimeField42.getMinimumValue((org.joda.time.ReadablePartial) localDate44);
        org.joda.time.LocalDate localDate48 = localDate44.withYearOfCentury(46);
        org.joda.time.LocalDate.Property property49 = localDate44.dayOfMonth();
        org.joda.time.Chronology chronology50 = localDate44.getChronology();
        org.joda.time.DateTimeZone dateTimeZone51 = chronology50.getZone();
        org.joda.time.MutableDateTime mutableDateTime52 = new org.joda.time.MutableDateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime53 = dateTime32.toDateTime(dateTimeZone51);
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone57 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime58 = dateTime56.withZoneRetainFields(dateTimeZone57);
        org.joda.time.LocalDate localDate59 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property60 = localDate59.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.DateTime dateTime63 = localDate59.toDateTimeAtCurrentTime(dateTimeZone61);
        int int64 = dateTime58.compareTo((org.joda.time.ReadableInstant) dateTime63);
        org.joda.time.DateTime dateTime66 = dateTime63.minusWeeks(44);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.DateTime dateTime68 = new org.joda.time.DateTime(chronology67);
        org.joda.time.DateTime dateTime70 = dateTime68.plusMinutes(15);
        org.joda.time.Chronology chronology71 = dateTime68.getChronology();
        java.lang.String str72 = chronology71.toString();
        org.joda.time.DateTimeField dateTimeField73 = chronology71.dayOfYear();
        org.joda.time.DateTime dateTime74 = dateTime63.withChronology(chronology71);
        org.joda.time.ReadableDuration readableDuration75 = null;
        org.joda.time.ReadableInstant readableInstant76 = null;
        org.joda.time.ReadableInstant readableInstant77 = null;
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod79 = new org.joda.time.MutablePeriod(readableInstant76, readableInstant77, periodType78);
        org.joda.time.DurationFieldType durationFieldType81 = periodType78.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType82 = periodType78.withMillisRemoved();
        org.joda.time.Period period83 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime74, readableDuration75, periodType82);
        org.joda.time.Period period84 = new org.joda.time.Period(0L, periodType82);
        org.joda.time.DurationFieldType durationFieldType85 = org.joda.time.DurationFieldType.weekyears();
        int int86 = period84.indexOf(durationFieldType85);
        org.joda.time.DateTime dateTime88 = dateTime53.withFieldAdded(durationFieldType85, 26343);
        boolean boolean89 = localDate9.isSupported(durationFieldType85);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime32 and dateTime53", (dateTime32.compareTo(dateTime53) == 0) == dateTime32.equals(dateTime53));
    }

    @Test
    public void test297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test297");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str8 = duration7.toString();
        boolean boolean9 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Hours hours10 = duration5.toStandardHours();
        mutableDateTime1.add((org.joda.time.ReadableDuration) duration5, 20);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = null;
        java.lang.String str17 = dateTime14.toString(dateTimeFormatter16);
        org.joda.time.DateTime dateTime19 = dateTime14.minusMonths(22);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.DateTime dateTime25 = dateTime14.withChronology(chronology23);
        org.joda.time.Period period26 = duration5.toPeriod(chronology23);
        org.joda.time.ReadableDuration readableDuration29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period(readableDuration29, readableInstant30);
        org.joda.time.PeriodType periodType34 = null;
        org.joda.time.Period period35 = new org.joda.time.Period((long) 100, 1L, periodType34);
        org.joda.time.Period period37 = period35.minusSeconds((-1));
        java.lang.String str38 = period35.toString();
        org.joda.time.Period period39 = period35.toPeriod();
        org.joda.time.PeriodType periodType40 = period35.getPeriodType();
        org.joda.time.Period period41 = period31.normalizedStandard(periodType40);
        java.lang.String str42 = periodType40.getName();
        java.lang.String str43 = periodType40.toString();
        org.joda.time.PeriodType periodType44 = periodType40.withDaysRemoved();
        org.joda.time.PeriodType periodType45 = periodType44.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType45);
        int[] intArray48 = chronology23.get((org.joda.time.ReadablePeriod) mutablePeriod46, 1L);
        org.joda.time.DateTimeField dateTimeField49 = chronology23.clockhourOfHalfday();
        org.joda.time.LocalTime localTime50 = org.joda.time.LocalTime.fromMillisOfDay(25L, chronology23);
        org.joda.time.DateTimeField dateTimeField51 = chronology23.weekOfWeekyear();
        org.joda.time.DurationField durationField52 = chronology23.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField24, durationField52, and durationField24", !(durationField24.compareTo(durationField52) == 0) || (Math.signum(durationField24.compareTo(durationField24)) == Math.signum(durationField52.compareTo(durationField24))));
    }

    @Test
    public void test298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test298");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.eras();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 44, chronology10);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType5.getField(chronology10);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        long long25 = chronology10.add((org.joda.time.ReadablePeriod) period19, (long) ' ', (int) 'a');
        org.joda.time.Period period27 = period19.minusHours((-292275054));
        org.joda.time.Period period29 = period27.minusHours(2000);
        int int30 = period27.getMinutes();
        org.joda.time.Period period31 = period27.toPeriod();
        mutableDateTime4.add((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale36);
        java.util.Locale locale39 = dateTimeParserBucket38.getLocale();
        long long40 = dateTimeParserBucket38.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket38.getZone();
        mutableDateTime4.setZone(dateTimeZone41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime4.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(readableInstant50, readableInstant51, periodType52);
        org.joda.time.DurationFieldType durationFieldType55 = periodType52.getFieldType((int) (short) 0);
        java.lang.String str56 = periodType52.toString();
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.Chronology chronology60 = instant59.getChronology();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 53, (long) (-1), periodType52, chronology60);
        org.joda.time.DateTimeField dateTimeField62 = dateTimeFieldType47.getField(chronology60);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        org.joda.time.DateTime dateTime66 = dateTime64.plusMinutes(15);
        org.joda.time.Chronology chronology67 = dateTime64.getChronology();
        java.lang.String str68 = chronology67.toString();
        org.joda.time.DateTimeField dateTimeField69 = dateTimeFieldType47.getField(chronology67);
        org.joda.time.DateTimeField dateTimeField70 = chronology67.dayOfYear();
        java.util.Locale locale71 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology67, locale71, (java.lang.Integer) 5);
        org.joda.time.DateTimeField dateTimeField74 = chronology67.dayOfYear();
        org.joda.time.DurationField durationField75 = chronology67.days();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((long) 393, (long) 47, chronology67);
        org.joda.time.LocalDate localDate77 = new org.joda.time.LocalDate((java.lang.Object) mutableDateTime4, chronology67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField75", Math.signum(durationField11.compareTo(durationField75)) == -Math.signum(durationField75.compareTo(durationField11)));
    }

    @Test
    public void test299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test299");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.yearOfEra();
        org.joda.time.Chronology chronology34 = chronology26.withUTC();
        long long38 = chronology26.add((long) 26346587, 1645488050376L, 62234);
        org.joda.time.DateTimeField dateTimeField39 = chronology26.millisOfDay();
        org.joda.time.DurationField durationField40 = dateTimeField39.getRangeDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField40, and durationField27", !(durationField27.compareTo(durationField40) == 0) || (Math.signum(durationField27.compareTo(durationField27)) == Math.signum(durationField40.compareTo(durationField27))));
    }

    @Test
    public void test300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test300");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime12.withChronology(chronology19);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.getMutableDateTime();
        boolean boolean28 = dateTime24.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.setHourOfDay(0);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.lang.String str35 = locale33.getDisplayVariant(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        java.lang.String str37 = locale33.getISO3Country();
        java.util.Locale locale38 = java.util.Locale.PRC;
        java.util.Locale.setDefault(locale38);
        java.lang.String str40 = locale33.getDisplayLanguage(locale38);
        java.lang.String str41 = mutableDateTime10.toString("2022-02-01", locale38);
        mutableDateTime10.setMillisOfDay(51);
        mutableDateTime10.setYear(26252175);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime10.hourOfDay();
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.months();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime52, periodType53);
        org.joda.time.PeriodType periodType57 = null;
        org.joda.time.Period period58 = new org.joda.time.Period((long) 100, 1L, periodType57);
        org.joda.time.Period period60 = period58.minusSeconds((-1));
        java.lang.String str61 = period58.toString();
        org.joda.time.Period period62 = period58.toPeriod();
        org.joda.time.PeriodType periodType63 = period58.getPeriodType();
        org.joda.time.DateTime dateTime64 = dateTime52.plus((org.joda.time.ReadablePeriod) period58);
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(readableInstant68, readableInstant69, periodType70);
        org.joda.time.DurationFieldType durationFieldType73 = periodType70.getFieldType((int) (short) 0);
        java.lang.String str74 = periodType70.toString();
        org.joda.time.Instant instant75 = new org.joda.time.Instant();
        org.joda.time.Instant instant77 = instant75.withMillis(0L);
        org.joda.time.Chronology chronology78 = instant77.getChronology();
        org.joda.time.Period period79 = new org.joda.time.Period((long) 53, (long) (-1), periodType70, chronology78);
        org.joda.time.ReadableInstant readableInstant82 = null;
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.PeriodType periodType84 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod(readableInstant82, readableInstant83, periodType84);
        org.joda.time.DurationFieldType durationFieldType87 = periodType84.getFieldType((int) (short) 0);
        java.lang.String str88 = periodType84.toString();
        org.joda.time.Instant instant89 = new org.joda.time.Instant();
        org.joda.time.Instant instant91 = instant89.withMillis(0L);
        org.joda.time.Chronology chronology92 = instant91.getChronology();
        org.joda.time.Period period93 = new org.joda.time.Period((long) 53, (long) (-1), periodType84, chronology92);
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod((long) (short) 10, periodType70, chronology92);
        org.joda.time.DateTime dateTime95 = dateTime64.toDateTime(chronology92);
        mutableDateTime10.setChronology(chronology92);
        org.joda.time.DurationField durationField97 = chronology92.seconds();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField20, durationField97, and durationField20", !(durationField20.compareTo(durationField97) == 0) || (Math.signum(durationField20.compareTo(durationField20)) == Math.signum(durationField97.compareTo(durationField20))));
    }

    @Test
    public void test301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test301");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        long long18 = chronology13.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfMinute();
        boolean boolean20 = dateTimeField19.isSupported();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        int int23 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate25 = localDate21.withYearOfCentury(46);
        boolean boolean26 = property8.equals((java.lang.Object) localDate25);
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology27.add(readablePeriod28, 555370422L, 1191);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.secondOfDay();
        org.joda.time.DurationField durationField36 = chronology27.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField36, and durationField14", !(durationField14.compareTo(durationField36) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField36.compareTo(durationField14))));
    }

    @Test
    public void test302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test302");
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration10 = duration6.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime4, (org.joda.time.ReadableDuration) duration10);
        org.joda.time.Instant instant12 = dateTime4.toInstant();
        org.joda.time.DateTime dateTime15 = dateTime4.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        mutableDateTime16.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.Period period32 = period30.minusSeconds((-1));
        java.lang.String str33 = period30.toString();
        org.joda.time.Period period34 = period30.toPeriod();
        org.joda.time.PeriodType periodType35 = period30.getPeriodType();
        org.joda.time.Period period36 = period26.normalizedStandard(periodType35);
        org.joda.time.DurationFieldType durationFieldType37 = null;
        int int38 = periodType35.indexOf(durationFieldType37);
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.Chronology chronology42 = instant41.getChronology();
        org.joda.time.DurationField durationField43 = chronology42.eras();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology42);
        org.joda.time.DurationField durationField45 = chronology42.eras();
        org.joda.time.DateTimeField dateTimeField46 = chronology42.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType35, chronology42);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime16.toMutableDateTime(chronology42);
        mutableDateTime16.setDayOfYear(44);
        int int51 = mutableDateTime16.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addMillis(365);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.DateTime dateTime58 = instant57.toDateTime();
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType61 = org.joda.time.PeriodType.months();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime58, (org.joda.time.ReadableInstant) dateTime60, periodType61);
        org.joda.time.PeriodType periodType65 = null;
        org.joda.time.Period period66 = new org.joda.time.Period((long) 100, 1L, periodType65);
        org.joda.time.Period period68 = period66.minusSeconds((-1));
        java.lang.String str69 = period66.toString();
        org.joda.time.Period period70 = period66.toPeriod();
        org.joda.time.PeriodType periodType71 = period66.getPeriodType();
        org.joda.time.DateTime dateTime72 = dateTime60.plus((org.joda.time.ReadablePeriod) period66);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalTime localTime75 = new org.joda.time.LocalTime((long) (short) 100, chronology74);
        org.joda.time.DurationFieldType durationFieldType76 = org.joda.time.DurationFieldType.millis();
        java.lang.String str77 = durationFieldType76.getName();
        boolean boolean78 = localTime75.isSupported(durationFieldType76);
        int int79 = period66.get(durationFieldType76);
        mutableDateTime16.add(durationFieldType76, 442);
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime16.dayOfMonth();
        org.joda.time.Chronology chronology83 = mutableDateTime16.getChronology();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod(47892750L, (long) 25653799, chronology83);
        org.joda.time.DateTimeField dateTimeField85 = chronology83.clockhourOfHalfday();
        org.joda.time.Period period86 = new org.joda.time.Period((long) (byte) 0, chronology83);
        org.joda.time.DurationField durationField87 = chronology83.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField43, durationField87, and durationField43", !(durationField43.compareTo(durationField87) == 0) || (Math.signum(durationField43.compareTo(durationField43)) == Math.signum(durationField87.compareTo(durationField43))));
    }

    @Test
    public void test303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test303");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.dayOfYear();
        org.joda.time.PeriodType periodType4 = null;
        org.joda.time.Period period5 = new org.joda.time.Period((long) 100, 1L, periodType4);
        org.joda.time.Period period7 = period5.minusSeconds((-1));
        java.lang.String str8 = period5.toString();
        org.joda.time.LocalDate localDate10 = localDate0.withPeriodAdded((org.joda.time.ReadablePeriod) period5, 3);
        org.joda.time.DateTime dateTime11 = localDate10.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology13 = null;
        java.util.Locale locale14 = java.util.Locale.GERMAN;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale14.getDisplayVariant(locale15);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket17 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology13, locale15);
        java.lang.Object obj18 = dateTimeParserBucket17.saveState();
        org.joda.time.DateTimeZone dateTimeZone19 = dateTimeParserBucket17.getZone();
        org.joda.time.DateTime dateTime20 = localDate10.toDateTimeAtStartOfDay(dateTimeZone19);
        long long23 = dateTimeZone19.convertLocalToUTC((long) 39, false);
        java.lang.String str25 = dateTimeZone19.getName(1024502L);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime(dateTimeZone19);
        boolean boolean27 = dateTimeZone19.isFixed();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        int int30 = dateTime29.getYearOfCentury();
        int int31 = dateTime29.getWeekyear();
        org.joda.time.DateTime dateTime32 = dateTime29.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property33 = dateTime29.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        org.joda.time.DateTime dateTime35 = property33.getDateTime();
        org.joda.time.DateTime dateTime36 = property33.roundFloorCopy();
        java.lang.String str37 = property33.toString();
        org.joda.time.DurationField durationField38 = property33.getRangeDurationField();
        org.joda.time.DateTime dateTime40 = property33.addToCopy(26180329);
        org.joda.time.DateTime dateTime41 = property33.roundHalfFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        mutableDateTime42.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime45 = mutableDateTime42.copy();
        mutableDateTime42.setDate((long) '#');
        org.joda.time.LocalDate localDate48 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property49 = localDate48.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean51 = localDate48.isSupported(dateTimeFieldType50);
        int int52 = localDate48.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight54 = localDate48.toDateMidnight(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = mutableDateTime42.toDateTime(dateTimeZone53);
        org.joda.time.LocalDate localDate56 = org.joda.time.LocalDate.now(dateTimeZone53);
        org.joda.time.Interval interval57 = localDate56.toInterval();
        org.joda.time.LocalDate.Property property58 = localDate56.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.forOffsetMillis(26234);
        org.joda.time.DateTime dateTime61 = localDate56.toDateTimeAtMidnight(dateTimeZone60);
        org.joda.time.DateTime dateTime62 = dateTime41.toDateTime(dateTimeZone60);
        long long64 = dateTimeZone19.getMillisKeepLocal(dateTimeZone60, 15876000000000L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime36 and dateTime62", (dateTime36.compareTo(dateTime62) == 0) == dateTime36.equals(dateTime62));
    }

    @Test
    public void test304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test304");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = property2.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime4);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetMillis(62167);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime4.toMutableDateTime(dateTimeZone7);
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(dateTimeZone7);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and mutableDateTime8", (mutableDateTime0.compareTo(mutableDateTime8) == 0) == mutableDateTime0.equals(mutableDateTime8));
    }

    @Test
    public void test305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test305");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = null;
        java.lang.String str16 = dateTime13.toString(dateTimeFormatter15);
        org.joda.time.DateTime dateTime18 = dateTime13.minusMonths(22);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        org.joda.time.DateTime dateTime24 = dateTime13.withChronology(chronology22);
        org.joda.time.Period period25 = duration4.toPeriod(chronology22);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableDuration28, readableInstant29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 1L, periodType33);
        org.joda.time.Period period36 = period34.minusSeconds((-1));
        java.lang.String str37 = period34.toString();
        org.joda.time.Period period38 = period34.toPeriod();
        org.joda.time.PeriodType periodType39 = period34.getPeriodType();
        org.joda.time.Period period40 = period30.normalizedStandard(periodType39);
        java.lang.String str41 = periodType39.getName();
        java.lang.String str42 = periodType39.toString();
        org.joda.time.PeriodType periodType43 = periodType39.withDaysRemoved();
        org.joda.time.PeriodType periodType44 = periodType43.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType44);
        int[] intArray47 = chronology22.get((org.joda.time.ReadablePeriod) mutablePeriod45, 1L);
        org.joda.time.DateTimeField dateTimeField48 = chronology22.year();
        org.joda.time.DurationField durationField49 = chronology22.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField23, durationField49, and durationField23", !(durationField23.compareTo(durationField49) == 0) || (Math.signum(durationField23.compareTo(durationField23)) == Math.signum(durationField49.compareTo(durationField23))));
    }

    @Test
    public void test306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test306");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration4 = duration1.withDurationAdded((long) (short) 100, (int) ' ');
        long long5 = duration4.getMillis();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.months();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15, periodType16);
        boolean boolean18 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime13);
        int int19 = dateTime13.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime13, periodType22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime27.withChronology(chronology34);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.getMutableDateTime();
        boolean boolean43 = dateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.eras();
        long long52 = chronology47.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField53 = chronology47.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.minuteOfDay();
        mutableDateTime42.setChronology(chronology47);
        org.joda.time.DateTime dateTime56 = dateTime13.toDateTime(chronology47);
        org.joda.time.DateTime dateTime58 = dateTime56.withYearOfCentury((int) 'a');
        org.joda.time.DateTime dateTime59 = dateTime58.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime60 = dateTime59.toMutableDateTimeISO();
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime62 = instant61.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime62.weekyear();
        org.joda.time.MutableDateTime mutableDateTime64 = property63.roundCeiling();
        org.joda.time.DurationField durationField65 = property63.getLeapDurationField();
        org.joda.time.MutableDateTime mutableDateTime67 = property63.set(31740);
        int int68 = dateTime59.compareTo((org.joda.time.ReadableInstant) mutableDateTime67);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField35 and durationField65", Math.signum(durationField35.compareTo(durationField65)) == -Math.signum(durationField65.compareTo(durationField35)));
    }

    @Test
    public void test307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test307");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.DateTime dateTime6 = dateTime1.plusHours(19045);
        org.joda.time.DateTime dateTime7 = dateTime1.toDateTimeISO();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration12 = duration9.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now();
        mutableDateTime13.add((long) 'a');
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime13.yearOfCentury();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period19 = duration18.toPeriod();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration24 = duration21.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration25 = duration18.minus((org.joda.time.ReadableDuration) duration24);
        mutableDateTime13.add((org.joda.time.ReadableDuration) duration18);
        boolean boolean27 = duration12.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration29 = duration18.minus((long) (byte) 0);
        org.joda.time.DateTime dateTime30 = dateTime1.minus((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        long long39 = chronology34.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField40 = chronology34.monthOfYear();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.yearOfCentury();
        int int42 = dateTime1.get(dateTimeField41);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.eras();
        long long51 = chronology46.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField52 = chronology46.secondOfMinute();
        boolean boolean53 = dateTimeField52.isSupported();
        org.joda.time.LocalDate localDate54 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property55 = localDate54.monthOfYear();
        int int56 = dateTimeField52.getMinimumValue((org.joda.time.ReadablePartial) localDate54);
        org.joda.time.LocalDate localDate58 = localDate54.withYearOfCentury(46);
        org.joda.time.LocalDate localDate60 = localDate58.withWeekyear(36985848);
        int int61 = dateTimeField41.getMinimumValue((org.joda.time.ReadablePartial) localDate60);
        org.joda.time.DurationFieldType durationFieldType62 = org.joda.time.DurationFieldType.millis();
        java.lang.String str63 = durationFieldType62.getName();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(chronology65);
        org.joda.time.DateTime dateTime68 = dateTime66.plusMinutes(15);
        org.joda.time.Chronology chronology69 = dateTime66.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.hours();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(1440L, chronology69);
        boolean boolean72 = durationFieldType62.isSupported(chronology69);
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime(chronology69);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime76 = localDateTime73.minusHours(26224);
        org.joda.time.LocalDateTime.Property property77 = localDateTime73.millisOfDay();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.DateTime dateTime80 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTime dateTime82 = dateTime80.plusMinutes(15);
        org.joda.time.Chronology chronology83 = dateTime80.getChronology();
        java.lang.String str84 = chronology83.toString();
        org.joda.time.LocalDateTime localDateTime85 = new org.joda.time.LocalDateTime((long) 2022, chronology83);
        org.joda.time.ReadableInstant readableInstant86 = null;
        org.joda.time.ReadableInstant readableInstant87 = null;
        org.joda.time.PeriodType periodType88 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod89 = new org.joda.time.MutablePeriod(readableInstant86, readableInstant87, periodType88);
        mutablePeriod89.setYears((int) '#');
        org.joda.time.DurationFieldType[] durationFieldTypeArray92 = mutablePeriod89.getFieldTypes();
        int int93 = mutablePeriod89.getMonths();
        int[] intArray95 = chronology83.get((org.joda.time.ReadablePeriod) mutablePeriod89, 50376L);
        int int96 = dateTimeField41.getMinimumValue((org.joda.time.ReadablePartial) localDateTime73, intArray95);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField35 and durationField70", Math.signum(durationField35.compareTo(durationField70)) == -Math.signum(durationField70.compareTo(durationField35)));
    }

    @Test
    public void test308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test308");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Chronology chronology7 = instant6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.eras();
        long long12 = chronology7.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter3.withChronology(chronology7);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField15 = chronology7.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        long long19 = dateTimeZone16.previousTransition(100L);
        int int21 = dateTimeZone16.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology22 = chronology7.withZone(dateTimeZone16);
        java.util.TimeZone timeZone23 = dateTimeZone16.toTimeZone();
        java.lang.String str25 = dateTimeZone16.getName(946312L);
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 26208340, dateTimeZone16);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.plusHours(26323);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime26.minusMonths(26310348);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant33, readableInstant34, periodType35);
        org.joda.time.DurationFieldType durationFieldType38 = periodType35.getFieldType((int) (short) 0);
        java.lang.String str39 = periodType35.toString();
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 53, (long) (-1), periodType35, chronology43);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(periodType35);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(4801284961717L);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(10, 1, 53, 15);
        boolean boolean53 = duration47.equals((java.lang.Object) 53);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj55 = mutableDateTime54.clone();
        mutableDateTime54.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime54.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime60 = property58.add(1L);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.UTC;
        long long65 = dateTimeZone61.getMillisKeepLocal(dateTimeZone63, (long) 44);
        org.joda.time.DateTime dateTime66 = org.joda.time.DateTime.now(dateTimeZone61);
        mutableDateTime60.setZoneRetainFields(dateTimeZone61);
        mutableDateTime60.addSeconds((int) (short) 10);
        org.joda.time.Interval interval70 = duration47.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.Duration duration71 = mutablePeriod45.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime60);
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.LocalTime localTime74 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology75 = localTime74.getChronology();
        boolean boolean76 = dateTimeFieldType72.isSupported(chronology75);
        org.joda.time.DurationField durationField77 = chronology75.weekyears();
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime(chronology75);
        org.joda.time.Duration duration80 = org.joda.time.Duration.millis((long) (short) 10);
        mutableDateTime78.add((org.joda.time.ReadableDuration) duration80, 1260);
        int int83 = duration71.compareTo((org.joda.time.ReadableDuration) duration80);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime30.plus((org.joda.time.ReadableDuration) duration80);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField8 and durationField77", Math.signum(durationField8.compareTo(durationField77)) == -Math.signum(durationField77.compareTo(durationField8)));
    }

    @Test
    public void test309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test309");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        long long18 = chronology13.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfMinute();
        boolean boolean20 = dateTimeField19.isSupported();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        int int23 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate25 = localDate21.withYearOfCentury(46);
        boolean boolean26 = property8.equals((java.lang.Object) localDate25);
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology27.add(readablePeriod28, 555370422L, 1191);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.DurationField durationField34 = chronology27.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField34, and durationField14", !(durationField14.compareTo(durationField34) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField34.compareTo(durationField14))));
    }

    @Test
    public void test310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test310");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.months();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21, periodType22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(15);
        org.joda.time.Interval interval36 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Instant instant37 = instant9.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant39 = instant37.withMillis((-83734L));
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(50, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(1645514174548L, dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((java.lang.Object) instant39, dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime47.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        long long53 = dateTimeZone49.getMillisKeepLocal(dateTimeZone51, (long) 44);
        mutableDateTime47.setZone(dateTimeZone49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime48", (instant39.compareTo(mutableDateTime48) == 0) == instant39.equals(mutableDateTime48));
    }

    @Test
    public void test311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test311");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.PeriodType periodType10 = null;
        org.joda.time.Period period11 = new org.joda.time.Period((long) 100, 1L, periodType10);
        org.joda.time.Period period13 = period11.minusSeconds((-1));
        java.lang.String str14 = period11.toString();
        org.joda.time.Period period15 = period11.toPeriod();
        org.joda.time.PeriodType periodType16 = period11.getPeriodType();
        org.joda.time.DateTime dateTime17 = dateTime5.plus((org.joda.time.ReadablePeriod) period11);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.DurationFieldType durationFieldType40 = periodType37.getFieldType((int) (short) 0);
        java.lang.String str41 = periodType37.toString();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 53, (long) (-1), periodType37, chronology45);
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) (short) 10, periodType23, chronology45);
        org.joda.time.DateTime dateTime48 = dateTime17.toDateTime(chronology45);
        org.joda.time.DateTime.Property property49 = dateTime17.year();
        org.joda.time.Instant instant50 = dateTime17.toInstant();
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj52 = mutableDateTime51.clone();
        mutableDateTime51.setDate(0L);
        org.joda.time.DateTimeField dateTimeField55 = mutableDateTime51.getRoundingField();
        org.joda.time.Period period56 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant50, (org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.DurationFieldType[] durationFieldTypeArray57 = period56.getFieldTypes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime3", (instant2.compareTo(dateTime3) == 0) == instant2.equals(dateTime3));
    }

    @Test
    public void test312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test312");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.plusMonths(46);
        int int5 = localDateTime4.getWeekyear();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        org.joda.time.DateTime dateTime18 = dateTime16.plusMinutes(15);
        org.joda.time.DateTime dateTime19 = localDateTime12.toDateTime((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime21 = localDateTime12.toDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime22 = dateTime7.withZoneRetainFields(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.yearOfCentury();
        mutableDateTime23.addSeconds(0);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours31 = duration30.toStandardHours();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.DateTime dateTime41 = instant40.toDateTime();
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.months();
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime41, (org.joda.time.ReadableInstant) dateTime43, periodType44);
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime37, periodType44);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime23, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime48 = dateTime22.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str53 = duration52.toString();
        boolean boolean54 = duration50.isShorterThan((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration56 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period57 = duration56.toPeriod();
        org.joda.time.Duration duration60 = duration56.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration65 = duration62.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean66 = duration60.isLongerThan((org.joda.time.ReadableDuration) duration62);
        boolean boolean67 = duration52.isEqual((org.joda.time.ReadableDuration) duration62);
        org.joda.time.Duration duration69 = duration62.withMillis((long) 22);
        org.joda.time.Duration duration71 = duration62.withMillis(3024000005L);
        org.joda.time.Duration duration72 = duration47.plus((org.joda.time.ReadableDuration) duration62);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime4.plus((org.joda.time.ReadableDuration) duration72);
        org.joda.time.LocalDateTime.Property property74 = localDateTime73.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property75 = localDateTime73.yearOfEra();
        org.joda.time.LocalDateTime localDateTime76 = property75.withMinimumValue();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime7", (instant6.compareTo(dateTime7) == 0) == instant6.equals(dateTime7));
    }

    @Test
    public void test313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test313");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        java.util.Locale locale9 = java.util.Locale.UK;
        java.util.Calendar calendar10 = dateTime1.toCalendar(locale9);
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.lang.String str13 = locale9.getDisplayScript(locale11);
        java.lang.String str14 = locale11.getDisplayVariant();
        java.util.Set<java.lang.String> strSet15 = locale11.getUnicodeLocaleAttributes();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime16.copy();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime16.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime21 = property20.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime23 = property20.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime26 = mutableDateTime23.toMutableDateTime(dateTimeZone24);
        int int28 = dateTimeZone24.getStandardOffset(60000L);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder31 = builder30.clear();
        java.util.Locale locale32 = java.util.Locale.GERMAN;
        java.lang.String str33 = locale32.getDisplayName();
        java.lang.String str34 = locale32.getISO3Language();
        java.util.Locale.Builder builder35 = builder31.setLocale(locale32);
        java.lang.String str36 = dateTimeZone24.getName(950707L, locale32);
        java.util.Set<java.lang.String> strSet37 = locale32.getUnicodeLocaleKeys();
        java.lang.Object[] objArray38 = strSet37.toArray();
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap42 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList43 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strMap42);
        org.joda.time.Chronology chronology45 = null;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale46.getDisplayVariant(locale47);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket49 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology45, locale47);
        java.util.Locale locale50 = java.util.Locale.GERMAN;
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.lang.String str52 = locale50.getDisplayVariant(locale51);
        java.util.Locale locale53 = java.util.Locale.GERMAN;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.lang.String str55 = locale53.getDisplayVariant(locale54);
        java.lang.String str56 = locale53.getISO3Language();
        java.util.Locale locale57 = java.util.Locale.GERMAN;
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.lang.String str59 = locale57.getDisplayVariant(locale58);
        java.util.Locale locale60 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.lang.String str62 = locale61.getDisplayName();
        java.util.Locale locale63 = java.util.Locale.CANADA;
        org.joda.time.Chronology chronology65 = null;
        java.util.Locale locale66 = java.util.Locale.GERMAN;
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.lang.String str68 = locale66.getDisplayVariant(locale67);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket70 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology65, locale67, (java.lang.Integer) 10);
        java.util.Locale locale71 = java.util.Locale.GERMAN;
        java.lang.String str72 = locale71.getDisplayName();
        java.util.Locale locale73 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.util.Locale locale74 = java.util.Locale.UK;
        java.util.Locale[] localeArray75 = new java.util.Locale[] { locale47, locale51, locale53, locale57, locale60, locale61, locale63, locale67, locale71, locale73, locale74 };
        java.util.ArrayList<java.util.Locale> localeList76 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean77 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList76, localeArray75);
        java.util.Locale.FilteringMode filteringMode78 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList79 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.util.Locale>) localeList76, filteringMode78);
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream80 = languageRangeList40.stream();
        java.util.stream.Stream<java.util.Locale.LanguageRange> languageRangeStream81 = languageRangeList40.parallelStream();
        boolean boolean82 = strSet37.retainAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40);
        boolean boolean83 = strSet15.removeAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40);
        int int84 = strSet15.size();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime16 and mutableDateTime26", (mutableDateTime16.compareTo(mutableDateTime26) == 0) == mutableDateTime16.equals(mutableDateTime26));
    }

    @Test
    public void test314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test314");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.LocalDate localDate5 = dateTime1.toLocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        java.util.Date date7 = localDate5.toDate();
        org.joda.time.LocalDate.Property property8 = localDate5.dayOfYear();
        org.joda.time.LocalDate localDate10 = property8.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate11 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfCentury();
        int int16 = dateTime14.getWeekyear();
        org.joda.time.DateTime dateTime18 = dateTime14.plus((long) 15);
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfSecond();
        org.joda.time.DateTime dateTime20 = property19.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime22 = dateTime20.withMillisOfDay(50);
        org.joda.time.DateTime.Property property23 = dateTime22.yearOfEra();
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime25 = instant24.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.add((long) 'a');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.yearOfCentury();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period32 = duration31.toPeriod();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration37 = duration34.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration38 = duration31.minus((org.joda.time.ReadableDuration) duration37);
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime26.centuryOfEra();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        int int43 = dateTime42.getYearOfCentury();
        org.joda.time.DateTime dateTime45 = dateTime42.withSecondOfMinute(53);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration53 = duration50.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration54 = duration47.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.ReadableInstant readableInstant55 = null;
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(readableInstant55, readableInstant56, periodType57);
        org.joda.time.DurationFieldType durationFieldType60 = periodType57.getFieldType((int) (short) 0);
        java.lang.String str61 = periodType57.toString();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableDuration) duration47, periodType57);
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration47);
        mutableDateTime26.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime26.weekOfWeekyear();
        boolean boolean67 = instant24.isAfter((org.joda.time.ReadableInstant) mutableDateTime26);
        long long68 = instant24.getMillis();
        long long69 = property23.getDifferenceAsLong((org.joda.time.ReadableInstant) instant24);
        org.joda.time.ReadableInstant readableInstant70 = null;
        int int71 = property23.getDifference(readableInstant70);
        org.joda.time.DateTime dateTime72 = property23.roundHalfCeilingCopy();
        boolean boolean73 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime72);
        int int74 = dateTime72.getDayOfYear();
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime(chronology75);
        int int77 = dateTime76.getYearOfCentury();
        int int78 = dateTime76.getWeekyear();
        org.joda.time.DateTime dateTime80 = dateTime76.plus((long) 15);
        org.joda.time.DateTime dateTime81 = dateTime76.withEarlierOffsetAtOverlap();
        int int82 = dateTime81.getDayOfWeek();
        int int83 = dateTime81.getMonthOfYear();
        org.joda.time.Period period84 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime72, (org.joda.time.ReadableInstant) dateTime81);
        org.joda.time.Chronology chronology85 = dateTime72.getChronology();
        int int86 = dateTime72.getWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant24", (dateTime1.compareTo(instant24) == 0) == dateTime1.equals(instant24));
    }

    @Test
    public void test315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test315");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = property5.add((-1));
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str12 = duration11.toString();
        boolean boolean13 = duration9.isShorterThan((org.joda.time.ReadableDuration) duration11);
        long long14 = duration9.getStandardMinutes();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.PeriodType periodType25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period((long) 100, 1L, periodType25);
        org.joda.time.Period period28 = period26.minusSeconds((-1));
        java.lang.String str29 = period26.toString();
        org.joda.time.Period period30 = period26.toPeriod();
        org.joda.time.PeriodType periodType31 = period26.getPeriodType();
        org.joda.time.DateTime dateTime32 = dateTime20.plus((org.joda.time.ReadablePeriod) period26);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant36, readableInstant37, periodType38);
        org.joda.time.DurationFieldType durationFieldType41 = periodType38.getFieldType((int) (short) 0);
        java.lang.String str42 = periodType38.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 53, (long) (-1), periodType38, chronology46);
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod53 = new org.joda.time.MutablePeriod(readableInstant50, readableInstant51, periodType52);
        org.joda.time.DurationFieldType durationFieldType55 = periodType52.getFieldType((int) (short) 0);
        java.lang.String str56 = periodType52.toString();
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.Chronology chronology60 = instant59.getChronology();
        org.joda.time.Period period61 = new org.joda.time.Period((long) 53, (long) (-1), periodType52, chronology60);
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod((long) (short) 10, periodType38, chronology60);
        org.joda.time.DateTime dateTime63 = dateTime32.toDateTime(chronology60);
        org.joda.time.DateTime dateTime64 = dateTime63.withLaterOffsetAtOverlap();
        org.joda.time.Interval interval65 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime63);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration9);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime7.centuryOfEra();
        boolean boolean68 = property67.isLeap();
        org.joda.time.MutableDateTime mutableDateTime70 = property67.add((long) 26222);
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime70.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime18", (instant17.compareTo(dateTime18) == 0) == instant17.equals(dateTime18));
    }

    @Test
    public void test316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test316");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Period period4 = period2.minusYears((-1));
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.years();
        org.joda.time.Period period7 = new org.joda.time.Period(60000L, periodType6);
        org.joda.time.Period period8 = period4.withFields((org.joda.time.ReadablePeriod) period7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.yearOfCentury();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period17 = duration16.toPeriod();
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration22 = duration19.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration23 = duration16.minus((org.joda.time.ReadableDuration) duration22);
        mutableDateTime11.add((org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime11.centuryOfEra();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getYearOfCentury();
        org.joda.time.DateTime dateTime30 = dateTime27.withSecondOfMinute(53);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period33 = duration32.toPeriod();
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration38 = duration35.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration39 = duration32.minus((org.joda.time.ReadableDuration) duration38);
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableInstant40, readableInstant41, periodType42);
        org.joda.time.DurationFieldType durationFieldType45 = periodType42.getFieldType((int) (short) 0);
        java.lang.String str46 = periodType42.toString();
        org.joda.time.Period period47 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime27, (org.joda.time.ReadableDuration) duration32, periodType42);
        mutableDateTime11.add((org.joda.time.ReadableDuration) duration32);
        mutableDateTime11.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime11.weekOfWeekyear();
        boolean boolean52 = instant9.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.MutableDateTime mutableDateTime53 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj54 = mutableDateTime53.clone();
        mutableDateTime53.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime53.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime59 = property57.add(1L);
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone61 = dateTimeZone60.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        long long64 = dateTimeZone60.getMillisKeepLocal(dateTimeZone62, (long) 44);
        org.joda.time.DateTime dateTime65 = org.joda.time.DateTime.now(dateTimeZone60);
        mutableDateTime59.setZoneRetainFields(dateTimeZone60);
        mutableDateTime59.addSeconds((int) (short) 10);
        java.lang.Object obj69 = mutableDateTime59.clone();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime59.era();
        boolean boolean71 = mutableDateTime11.isEqual((org.joda.time.ReadableInstant) mutableDateTime59);
        org.joda.time.Duration duration72 = period7.toDurationTo((org.joda.time.ReadableInstant) mutableDateTime59);
        long long73 = duration72.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant9 and mutableDateTime10", (instant9.compareTo(mutableDateTime10) == 0) == instant9.equals(mutableDateTime10));
    }

    @Test
    public void test317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test317");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        org.joda.time.DateTime dateTime18 = dateTime16.withYearOfCentury(54);
        org.joda.time.DateTime dateTime21 = dateTime16.withDurationAdded((long) 26150803, 7);
        org.joda.time.DateTime dateTime22 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale26 = java.util.Locale.GERMAN;
        java.lang.String str27 = locale26.getDisplayName();
        java.lang.String str28 = dateTimeZone24.getName(100L, locale26);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(948227L, dateTimeZone24);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.year();
        org.joda.time.ReadableInstant readableInstant31 = null;
        mutableDateTime29.setMillis(readableInstant31);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology33);
        int int35 = dateTime34.getYearOfCentury();
        int int36 = dateTime34.getWeekyear();
        org.joda.time.DateTime dateTime38 = dateTime34.plus((long) 15);
        org.joda.time.DateTime.Property property39 = dateTime34.year();
        org.joda.time.DateTime dateTime40 = property39.roundHalfFloorCopy();
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = null;
        org.joda.time.format.DateTimeParser dateTimeParser42 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter41, dateTimeParser42);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.eras();
        long long52 = chronology47.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter43.withChronology(chronology47);
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime(chronology47);
        org.joda.time.DateTimeField dateTimeField55 = chronology47.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone57 = dateTimeZone56.toTimeZone();
        long long59 = dateTimeZone56.previousTransition(100L);
        int int61 = dateTimeZone56.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology62 = chronology47.withZone(dateTimeZone56);
        java.util.TimeZone timeZone63 = dateTimeZone56.toTimeZone();
        org.joda.time.DateTime dateTime64 = dateTime40.toDateTime(dateTimeZone56);
        mutableDateTime29.setZoneRetainFields(dateTimeZone56);
        org.joda.time.DateTime dateTime66 = dateTime22.toDateTime(dateTimeZone56);
        long long68 = dateTimeZone56.previousTransition(27425239L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test318");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime7.toMutableDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.Chronology chronology19 = instant18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.eras();
        org.joda.time.LocalTime localTime21 = org.joda.time.LocalTime.now(chronology19);
        org.joda.time.DurationField durationField22 = chronology19.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology19.hourOfDay();
        org.joda.time.DateTime dateTime24 = dateTime12.withChronology(chronology19);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime25.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime27 = property26.getMutableDateTime();
        boolean boolean28 = dateTime24.isBefore((org.joda.time.ReadableInstant) mutableDateTime27);
        mutableDateTime27.setHourOfDay(0);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime27.weekyear();
        int int33 = mutableDateTime27.getYearOfCentury();
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime27.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime35 = property34.roundCeiling();
        int int36 = mutableDateTime35.getMillisOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant16", (dateTime12.compareTo(instant16) == 0) == dateTime12.equals(instant16));
    }

    @Test
    public void test319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test319");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        boolean boolean3 = dateTime1.isBefore((long) 7);
        java.lang.String str4 = dateTime1.toString();
        org.joda.time.DateTime dateTime6 = dateTime1.minus((long) 7);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DateTime dateTime11 = dateTime1.toDateTime(chronology10);
        org.joda.time.DurationField durationField12 = chronology10.days();
        long long15 = durationField12.subtract(725809896000L, 26175904);
        long long18 = durationField12.getMillis(9000, (long) 26195);
        long long20 = durationField12.getValueAsLong(4801285239350L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant7", (dateTime1.compareTo(instant7) == 0) == dateTime1.equals(instant7));
    }

    @Test
    public void test320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test320");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = duration1.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        boolean boolean19 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes(15);
        org.joda.time.Chronology chronology26 = dateTime23.getChronology();
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Chronology chronology30 = instant29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.eras();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime23.withChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.dayOfMonth();
        org.joda.time.Period period37 = new org.joda.time.Period(950707L, chronology30);
        org.joda.time.DateTimeField dateTimeField38 = chronology30.secondOfMinute();
        org.joda.time.Period period39 = duration10.toPeriod(periodType20, chronology30);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        mutableDateTime40.add((long) 'a');
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime40.yearOfCentury();
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period46 = duration45.toPeriod();
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration51 = duration48.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration52 = duration45.minus((org.joda.time.ReadableDuration) duration51);
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration45);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime40.centuryOfEra();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        int int57 = dateTime56.getYearOfCentury();
        org.joda.time.DateTime dateTime59 = dateTime56.withSecondOfMinute(53);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period62 = duration61.toPeriod();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration67 = duration64.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration68 = duration61.minus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.PeriodType periodType71 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod(readableInstant69, readableInstant70, periodType71);
        org.joda.time.DurationFieldType durationFieldType74 = periodType71.getFieldType((int) (short) 0);
        java.lang.String str75 = periodType71.toString();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration61, periodType71);
        mutableDateTime40.add((org.joda.time.ReadableDuration) duration61);
        mutableDateTime40.addWeekyears(21);
        int int80 = mutableDateTime40.getMinuteOfHour();
        org.joda.time.MutableDateTime.Property property81 = mutableDateTime40.yearOfEra();
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime40.weekyear();
        org.joda.time.PeriodType periodType83 = org.joda.time.PeriodType.yearWeekDay();
        org.joda.time.PeriodType periodType84 = periodType83.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod85 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) mutableDateTime40, periodType84);
        mutableDateTime40.setDate(1341299L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime23 and instant27", (dateTime23.compareTo(instant27) == 0) == dateTime23.equals(instant27));
    }

    @Test
    public void test321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test321");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) (byte) -1);
        int int2 = localDate1.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.UTC;
        long long7 = dateTimeZone3.getMillisKeepLocal(dateTimeZone5, (long) 44);
        org.joda.time.DateTime dateTime8 = localDate1.toDateTimeAtMidnight(dateTimeZone3);
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeZone3.getName(946000L, locale10);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone3);
        mutableDateTime12.addMillis((-356));
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getSecondOfMinute();
        boolean boolean18 = dateTime16.isEqualNow();
        int int19 = dateTime16.getDayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime16.plusDays((int) '#');
        org.joda.time.DateTime.Property property22 = dateTime16.centuryOfEra();
        org.joda.time.DateTime.Property property23 = dateTime16.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now(dateTimeZone26);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone26);
        org.joda.time.DateTime dateTime29 = dateTime16.toDateTime(dateTimeZone26);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime16 and mutableDateTime27", (dateTime16.compareTo(mutableDateTime27) == 0) == dateTime16.equals(mutableDateTime27));
    }

    @Test
    public void test322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test322");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.dayOfYear();
        org.joda.time.DateTime dateTime10 = dateTime7.withMillis((long) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime18 = property15.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime21 = mutableDateTime18.toMutableDateTime(dateTimeZone19);
        long long24 = dateTimeZone19.adjustOffset((long) 37, true);
        org.joda.time.DateTime dateTime25 = dateTime10.toDateTime(dateTimeZone19);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime11 and mutableDateTime21", (mutableDateTime11.compareTo(mutableDateTime21) == 0) == mutableDateTime11.equals(mutableDateTime21));
    }

    @Test
    public void test323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test323");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj6 = mutableDateTime5.clone();
        mutableDateTime5.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.add(1L);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        long long16 = dateTimeZone12.getMillisKeepLocal(dateTimeZone14, (long) 44);
        org.joda.time.DateTime dateTime17 = org.joda.time.DateTime.now(dateTimeZone12);
        mutableDateTime11.setZoneRetainFields(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.weekyear();
        mutableDateTime3.setMillis((org.joda.time.ReadableInstant) mutableDateTime19);
        java.util.Date date22 = mutableDateTime3.toDate();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.fromDateFields(date22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime17", (mutableDateTime0.compareTo(dateTime17) == 0) == mutableDateTime0.equals(dateTime17));
    }

    @Test
    public void test324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test324");
        org.joda.time.PeriodType periodType3 = org.joda.time.PeriodType.yearDay();
        java.lang.String str4 = periodType3.getName();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod(100L, periodType3);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str8 = duration7.toString();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours11 = duration10.toStandardHours();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod15 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration10, (org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.Duration duration16 = duration7.plus((org.joda.time.ReadableDuration) duration10);
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.DurationFieldType durationFieldType26 = periodType23.getFieldType((int) (short) 0);
        java.lang.String str27 = periodType23.toString();
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.Period period32 = new org.joda.time.Period((long) 53, (long) (-1), periodType23, chronology31);
        org.joda.time.Period period33 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType23);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.eras();
        org.joda.time.LocalTime localTime41 = org.joda.time.LocalTime.now(chronology37);
        org.joda.time.Period period42 = duration7.toPeriod(periodType23, chronology37);
        org.joda.time.Period period43 = new org.joda.time.Period(1671667200000L, 946312L, periodType3, chronology37);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology37);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now(chronology37);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology47);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.plusMonths(46);
        org.joda.time.LocalDateTime localDateTime52 = localDateTime48.minusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime48.withDayOfYear((int) (byte) 100);
        org.joda.time.Instant instant55 = new org.joda.time.Instant();
        org.joda.time.Instant instant57 = instant55.withMillis(0L);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period60 = duration59.toPeriod();
        org.joda.time.Duration duration63 = duration59.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant64 = instant57.plus((org.joda.time.ReadableDuration) duration63);
        long long65 = instant64.getMillis();
        org.joda.time.Chronology chronology66 = instant64.getChronology();
        org.joda.time.DurationField durationField67 = chronology66.months();
        org.joda.time.MutableDateTime mutableDateTime68 = org.joda.time.MutableDateTime.now(chronology66);
        org.joda.time.DateTimeField dateTimeField69 = chronology66.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = dateTimeField69.getType();
        int int71 = localDateTime54.get(dateTimeFieldType70);
        int int72 = mutableDateTime45.get(dateTimeFieldType70);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField38 and durationField67", Math.signum(durationField38.compareTo(durationField67)) == -Math.signum(durationField67.compareTo(durationField38)));
    }

    @Test
    public void test325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test325");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        long long18 = chronology13.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfMinute();
        boolean boolean20 = dateTimeField19.isSupported();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        int int23 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate25 = localDate21.withYearOfCentury(46);
        boolean boolean26 = property8.equals((java.lang.Object) localDate25);
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology27.add(readablePeriod28, 555370422L, 1191);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField34 = chronology27.clockhourOfHalfday();
        org.joda.time.DurationField durationField35 = dateTimeField34.getDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField14, durationField35, and durationField14", !(durationField14.compareTo(durationField35) == 0) || (Math.signum(durationField14.compareTo(durationField14)) == Math.signum(durationField35.compareTo(durationField14))));
    }

    @Test
    public void test326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test326");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        org.joda.time.LocalTime.Property property4 = localTime1.secondOfMinute();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime12);
        org.joda.time.Duration duration15 = duration6.plus((org.joda.time.ReadableDuration) duration9);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period18 = duration17.toPeriod();
        org.joda.time.Duration duration20 = duration17.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime21.yearOfCentury();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration32 = duration29.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration33 = duration26.minus((org.joda.time.ReadableDuration) duration32);
        mutableDateTime21.add((org.joda.time.ReadableDuration) duration26);
        boolean boolean35 = duration20.isShorterThan((org.joda.time.ReadableDuration) duration26);
        boolean boolean36 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period45 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime38, (org.joda.time.ReadableDuration) duration44);
        org.joda.time.Duration duration46 = duration20.plus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Period period47 = duration44.toPeriod();
        org.joda.time.Period period48 = period47.normalizedStandard();
        org.joda.time.LocalTime localTime49 = localTime1.minus((org.joda.time.ReadablePeriod) period47);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = localTime1.toDateTimeToday(dateTimeZone50);
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        org.joda.time.DateTime dateTime56 = dateTime54.plusMinutes(15);
        org.joda.time.Chronology chronology57 = dateTime54.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.hours();
        org.joda.time.DurationField durationField59 = chronology57.years();
        org.joda.time.DateTimeField dateTimeField60 = chronology57.weekOfWeekyear();
        boolean boolean61 = dateTime52.equals((java.lang.Object) chronology57);
        org.joda.time.DateTimeField dateTimeField62 = chronology57.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and dateTime54", (dateTime12.compareTo(dateTime54) == 0) == dateTime12.equals(dateTime54));
    }

    @Test
    public void test327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test327");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter2.withLocale(locale33);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatter2.getPrinter();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone38);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter2.withZone(dateTimeZone38);
        java.util.Locale locale42 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getDisplayName();
        java.lang.String str48 = dateTimeZone44.getName(100L, locale46);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(948227L, dateTimeZone44);
        long long50 = mutableDateTime49.getMillis();
        mutableDateTime49.setWeekyear(1439);
        boolean boolean54 = mutableDateTime49.isBefore(1645514186724L);
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.forOffsetMillis(36988464);
        mutableDateTime49.setZone(dateTimeZone56);
        org.joda.time.LocalDate localDate58 = org.joda.time.LocalDate.now(dateTimeZone56);
        org.joda.time.DateTime dateTime59 = new org.joda.time.DateTime(dateTimeZone56);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter2.withZone(dateTimeZone56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime59", (instant3.compareTo(dateTime59) == 0) == instant3.equals(dateTime59));
    }

    @Test
    public void test328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test328");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime5.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime5.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.getMutableDateTime();
        mutableDateTime0.setTime((org.joda.time.ReadableInstant) mutableDateTime10);
        mutableDateTime0.addMillis(1898);
        org.joda.time.DateTime dateTime15 = org.joda.time.DateTime.parse("2022-02-22T07:17:18.300Z");
        int int16 = mutableDateTime0.compareTo((org.joda.time.ReadableInstant) dateTime15);
        int int17 = dateTime15.getDayOfMonth();
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.Period period21 = new org.joda.time.Period(readableDuration19, readableInstant20);
        org.joda.time.PeriodType periodType24 = null;
        org.joda.time.Period period25 = new org.joda.time.Period((long) 100, 1L, periodType24);
        org.joda.time.Period period27 = period25.minusSeconds((-1));
        java.lang.String str28 = period25.toString();
        org.joda.time.Period period29 = period25.toPeriod();
        org.joda.time.PeriodType periodType30 = period25.getPeriodType();
        org.joda.time.Period period31 = period21.normalizedStandard(periodType30);
        java.lang.String str32 = periodType30.getName();
        org.joda.time.PeriodType periodType33 = periodType30.withYearsRemoved();
        org.joda.time.PeriodType periodType34 = periodType33.withSecondsRemoved();
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.eras();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.DurationField durationField41 = chronology38.eras();
        org.joda.time.DateTimeField dateTimeField42 = chronology38.hourOfDay();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.clockhourOfHalfday();
        org.joda.time.LocalTime localTime44 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.Period period45 = new org.joda.time.Period((long) 55, periodType33, chronology38);
        org.joda.time.DateTimeField dateTimeField46 = chronology38.weekyearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime15.toMutableDateTime(chronology38);
        org.joda.time.DurationField durationField48 = chronology38.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField39, durationField48, and durationField39", !(durationField39.compareTo(durationField48) == 0) || (Math.signum(durationField39.compareTo(durationField39)) == Math.signum(durationField48.compareTo(durationField39))));
    }

    @Test
    public void test329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test329");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean3 = localDate1.isSupported(dateTimeFieldType2);
        org.joda.time.LocalDate.Property property4 = localDate1.yearOfEra();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str10 = duration9.toString();
        org.joda.time.Instant instant11 = instant5.minus((org.joda.time.ReadableDuration) duration9);
        int int12 = property4.getDifference((org.joda.time.ReadableInstant) instant5);
        org.joda.time.Duration duration15 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant16 = instant5.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours22 = duration21.toStandardHours();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration21, (org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.Duration duration27 = duration18.plus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period30 = duration29.toPeriod();
        org.joda.time.Duration duration32 = duration29.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime33.yearOfCentury();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration44 = duration41.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration45 = duration38.minus((org.joda.time.ReadableDuration) duration44);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration38);
        boolean boolean47 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration38);
        boolean boolean48 = duration21.isLongerThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant49 = instant16.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours52 = duration51.toStandardHours();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(chronology53);
        int int55 = dateTime54.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime54);
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant59 = new org.joda.time.Instant();
        org.joda.time.Instant instant61 = instant59.withMillis(0L);
        org.joda.time.DateTime dateTime62 = instant61.toDateTime();
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.months();
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime62, (org.joda.time.ReadableInstant) dateTime64, periodType65);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration51, (org.joda.time.ReadableInstant) dateTime58, periodType65);
        org.joda.time.Instant instant69 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration51, 113);
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.Chronology chronology71 = instant69.getChronology();
        org.joda.time.Period period72 = new org.joda.time.Period(1097350513053516508L, chronology71);
        org.joda.time.MutableDateTime mutableDateTime73 = new org.joda.time.MutableDateTime(chronology71);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime62", (instant7.compareTo(dateTime62) == 0) == instant7.equals(dateTime62));
    }

    @Test
    public void test330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test330");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours21 = duration20.toStandardHours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration17.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean47 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant48 = instant15.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.MutableDateTime mutableDateTime49 = instant48.toMutableDateTime();
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str54 = duration53.toString();
        boolean boolean55 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Duration duration61 = duration57.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration66 = duration63.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean67 = duration61.isLongerThan((org.joda.time.ReadableDuration) duration63);
        boolean boolean68 = duration53.isEqual((org.joda.time.ReadableDuration) duration63);
        long long69 = duration53.getStandardDays();
        org.joda.time.Instant instant70 = instant48.minus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.DateTime dateTime71 = instant48.toDateTime();
        org.joda.time.Instant instant73 = instant48.minus(1399597L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime23", (instant4.compareTo(dateTime23) == 0) == instant4.equals(dateTime23));
    }

    @Test
    public void test331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test331");
        org.joda.time.DateTimeZone dateTimeZone0 = null;
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime3 = localTime1.minusHours((int) (byte) 100);
        int int4 = localTime3.getMinuteOfHour();
        java.lang.String str6 = localTime3.toString("1");
        org.joda.time.LocalTime localTime8 = localTime3.minusMinutes(15);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime14 = dateTime10.plus((long) 15);
        org.joda.time.DateTime.Property property15 = dateTime10.year();
        org.joda.time.DateTime dateTime16 = property15.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property17 = dateTime16.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime16.toMutableDateTime();
        org.joda.time.LocalTime localTime19 = dateTime16.toLocalTime();
        org.joda.time.LocalTime localTime20 = localTime3.withFields((org.joda.time.ReadablePartial) localTime19);
        org.joda.time.LocalTime localTime22 = localTime3.minusMinutes(26212472);
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        mutablePeriod26.setYears((int) '#');
        mutablePeriod26.setSeconds((int) 'a');
        mutablePeriod26.setMinutes(44);
        org.joda.time.LocalTime localTime33 = localTime22.plus((org.joda.time.ReadablePeriod) mutablePeriod26);
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration41 = duration37.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime35, (org.joda.time.ReadableDuration) duration41);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        int int45 = dateTime44.getSecondOfMinute();
        org.joda.time.Interval interval46 = duration41.toIntervalTo((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime44.toMutableDateTime();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology48);
        org.joda.time.DateTime dateTime51 = dateTime49.plusMinutes(15);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        org.joda.time.DateTime dateTime55 = dateTime53.plusMinutes(15);
        org.joda.time.Chronology chronology56 = dateTime53.getChronology();
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.Chronology chronology60 = instant59.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.eras();
        org.joda.time.LocalTime localTime62 = org.joda.time.LocalTime.now(chronology60);
        org.joda.time.DurationField durationField63 = chronology60.eras();
        org.joda.time.DateTimeField dateTimeField64 = chronology60.hourOfDay();
        org.joda.time.DateTime dateTime65 = dateTime53.withChronology(chronology60);
        org.joda.time.DateTimeField dateTimeField66 = chronology60.dayOfMonth();
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = dateTimeField66.getType();
        int int68 = dateTime51.get(dateTimeFieldType67);
        org.joda.time.DateTime dateTime70 = dateTime51.minusDays(2022);
        mutablePeriod26.setPeriod((org.joda.time.ReadableInstant) mutableDateTime47, (org.joda.time.ReadableInstant) dateTime51);
        org.joda.time.DateTime dateTime72 = dateTime51.withLaterOffsetAtOverlap();
        org.joda.time.LocalDate localDate73 = dateTime51.toLocalDate();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant57", (dateTime10.compareTo(instant57) == 0) == dateTime10.equals(instant57));
    }

    @Test
    public void test332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test332");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        org.joda.time.DateTime dateTime5 = dateTime3.plusMinutes(15);
        org.joda.time.Chronology chronology6 = dateTime3.getChronology();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.eras();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.hourOfDay();
        org.joda.time.DateTime dateTime15 = dateTime3.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.dayOfMonth();
        org.joda.time.Period period17 = new org.joda.time.Period(950707L, chronology10);
        org.joda.time.Period period19 = period17.withWeeks(1969);
        java.lang.String str20 = period19.toString();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.months();
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableInstant) dateTime26, periodType27);
        org.joda.time.DateTime.Property property29 = dateTime26.minuteOfDay();
        org.joda.time.DateTime dateTime30 = property29.roundHalfEvenCopy();
        org.joda.time.Duration duration31 = period19.toDurationTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getYearOfCentury();
        int int35 = dateTime33.getWeekyear();
        org.joda.time.DateTime dateTime37 = dateTime33.plus((long) 15);
        org.joda.time.DateTime.Property property38 = dateTime33.year();
        org.joda.time.DateTime dateTime39 = property38.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property40 = dateTime39.dayOfMonth();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration41, readableInstant42);
        org.joda.time.PeriodType periodType46 = null;
        org.joda.time.Period period47 = new org.joda.time.Period((long) 100, 1L, periodType46);
        org.joda.time.Period period49 = period47.minusSeconds((-1));
        java.lang.String str50 = period47.toString();
        org.joda.time.Period period51 = period47.toPeriod();
        org.joda.time.PeriodType periodType52 = period47.getPeriodType();
        org.joda.time.Period period53 = period43.normalizedStandard(periodType52);
        java.lang.String str54 = periodType52.getName();
        org.joda.time.PeriodType periodType55 = periodType52.withYearsRemoved();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime30, (org.joda.time.ReadableInstant) dateTime39, periodType55);
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod(periodType55);
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(47985262272000000L, periodType55);
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime59.centuryOfEra();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime59.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = property61.getFieldType();
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType62.getRangeDurationType();
        org.joda.time.DurationFieldType durationFieldType64 = dateTimeFieldType62.getDurationType();
        int int65 = periodType55.indexOf(durationFieldType64);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime3 and instant7", (dateTime3.compareTo(instant7) == 0) == dateTime3.equals(instant7));
    }

    @Test
    public void test333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test333");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMinutes(15);
        org.joda.time.Interval interval10 = duration5.toIntervalTo((org.joda.time.ReadableInstant) dateTime9);
        long long11 = duration5.getStandardMinutes();
        long long12 = duration5.getStandardSeconds();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str19 = duration18.toString();
        boolean boolean20 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration18);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration30 = duration27.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean31 = duration25.isLongerThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Duration duration32 = duration22.minus((org.joda.time.ReadableDuration) duration25);
        boolean boolean33 = duration16.isShorterThan((org.joda.time.ReadableDuration) duration32);
        org.joda.time.ReadableDuration readableDuration34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period(readableDuration34, readableInstant35);
        org.joda.time.Period period38 = period36.withDays((int) (byte) 1);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours41 = duration40.toStandardHours();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration46 = period36.toDurationFrom((org.joda.time.ReadableInstant) dateTime43);
        org.joda.time.Duration duration48 = duration32.withDurationAdded((org.joda.time.ReadableDuration) duration46, (int) ' ');
        int int49 = duration14.compareTo((org.joda.time.ReadableDuration) duration32);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime(chronology50);
        org.joda.time.DateTime dateTime53 = dateTime51.plusMinutes(15);
        org.joda.time.Instant instant54 = dateTime53.toInstant();
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        mutableDateTime55.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime55.copy();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime55.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime60 = property59.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime61 = property59.roundHalfCeiling();
        org.joda.time.Duration duration62 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime53, (org.joda.time.ReadableInstant) mutableDateTime61);
        boolean boolean63 = duration32.isShorterThan((org.joda.time.ReadableDuration) duration62);
        boolean boolean64 = duration5.isShorterThan((org.joda.time.ReadableDuration) duration62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant54", (dateTime9.compareTo(instant54) == 0) == dateTime9.equals(instant54));
    }

    @Test
    public void test334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test334");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now();
        mutableDateTime6.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime9 = mutableDateTime6.copy();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now();
        mutableDateTime12.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime15 = mutableDateTime12.copy();
        mutableDateTime12.setDate((long) '#');
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property19 = localDate18.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean21 = localDate18.isSupported(dateTimeFieldType20);
        int int22 = localDate18.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight24 = localDate18.toDateMidnight(dateTimeZone23);
        org.joda.time.DateTime dateTime25 = mutableDateTime12.toDateTime(dateTimeZone23);
        org.joda.time.LocalDate localDate26 = org.joda.time.LocalDate.now(dateTimeZone23);
        org.joda.time.PeriodType periodType29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period((long) 100, 1L, periodType29);
        org.joda.time.PeriodType periodType31 = period30.getPeriodType();
        boolean boolean32 = dateTimeZone23.equals((java.lang.Object) periodType31);
        mutableDateTime6.setZoneRetainFields(dateTimeZone23);
        mutableDateTime5.setZoneRetainFields(dateTimeZone23);
        int int35 = mutableDateTime5.getCenturyOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime12 and dateTime25", (mutableDateTime12.compareTo(dateTime25) == 0) == mutableDateTime12.equals(dateTime25));
    }

    @Test
    public void test335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test335");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addYears(0);
        mutableDateTime0.setMinuteOfDay((int) (short) 0);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant28 = instant21.plus((org.joda.time.ReadableDuration) duration27);
        long long29 = instant28.getMillis();
        org.joda.time.Duration duration30 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) instant28);
        org.joda.time.MutableDateTime mutableDateTime31 = instant28.toMutableDateTime();
        org.joda.time.LocalDate localDate32 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property33 = localDate32.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean35 = localDate32.isSupported(dateTimeFieldType34);
        int int36 = localDate32.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight38 = localDate32.toDateMidnight(dateTimeZone37);
        org.joda.time.LocalDate.Property property39 = localDate32.year();
        org.joda.time.LocalDate localDate40 = property39.roundHalfEvenCopy();
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.DateTime dateTime42 = localDate40.toDateTime(readableInstant41);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.minus((long) 0);
        org.joda.time.DateTimeZone dateTimeZone46 = instant43.getZone();
        org.joda.time.DateTime dateTime47 = localDate40.toDateTimeAtMidnight(dateTimeZone46);
        boolean boolean48 = mutableDateTime31.equals((java.lang.Object) dateTime47);
        org.joda.time.DateTime dateTime50 = dateTime47.minusSeconds(26272);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant28 and mutableDateTime31", (instant28.compareTo(mutableDateTime31) == 0) == instant28.equals(mutableDateTime31));
    }

    @Test
    public void test336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test336");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getLeapDurationField();
        org.joda.time.LocalTime localTime6 = property4.getLocalTime();
        java.lang.String str7 = localTime6.toString();
        org.joda.time.LocalTime.Property property8 = localTime6.millisOfDay();
        org.joda.time.Period period10 = org.joda.time.Period.months(53);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.months();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.DateTime.Property property22 = dateTime19.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = property22.getFieldType();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime11.property(dateTimeFieldType23);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration34 = duration30.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant35 = instant28.plus((org.joda.time.ReadableDuration) duration34);
        long long36 = instant35.getMillis();
        org.joda.time.Chronology chronology37 = instant35.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.months();
        org.joda.time.Period period39 = new org.joda.time.Period((-205878993L), chronology37);
        org.joda.time.DateTimeField dateTimeField40 = chronology37.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone41 = chronology37.getZone();
        org.joda.time.LocalTime localTime42 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime11, chronology37);
        mutableDateTime11.addSeconds(152);
        mutableDateTime11.addDays(57);
        org.joda.time.Duration duration47 = period10.toDurationFrom((org.joda.time.ReadableInstant) mutableDateTime11);
        mutableDateTime11.addWeekyears(435);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime11.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime52 = property50.add((long) 26221);
        org.joda.time.MutableDateTime mutableDateTime54 = property50.add(26333335);
        boolean boolean55 = property8.equals((java.lang.Object) mutableDateTime54);
        org.joda.time.DateTimeField dateTimeField56 = property8.getField();
        org.joda.time.DateTimeField dateTimeField57 = property8.getField();
        boolean boolean58 = dateTimeField57.isSupported();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant16 and dateTime17", (instant16.compareTo(dateTime17) == 0) == instant16.equals(dateTime17));
    }

    @Test
    public void test337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test337");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.withDayOfMonth(20);
        int int12 = dateTime11.getCenturyOfEra();
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period15 = duration14.toPeriod();
        org.joda.time.Duration duration18 = duration14.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes(15);
        org.joda.time.Interval interval23 = duration18.toIntervalTo((org.joda.time.ReadableInstant) dateTime22);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        int int27 = dateTime25.getWeekyear();
        org.joda.time.DateTime dateTime29 = dateTime25.plus((long) 15);
        org.joda.time.DateTime.Property property30 = dateTime25.year();
        org.joda.time.DateTime dateTime31 = property30.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime33 = property30.addToCopy((long) 61);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardHours((-229564796800L));
        org.joda.time.Period period36 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableDuration) duration35);
        org.joda.time.DateTime dateTime38 = dateTime33.withWeekyear(0);
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.DateTime dateTime43 = localDate39.toDateTimeAtCurrentTime(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime45 = dateTime33.withZoneRetainFields(dateTimeZone41);
        org.joda.time.DateTime dateTime46 = dateTime22.withZone(dateTimeZone41);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfEra();
        org.joda.time.Duration duration48 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableInstant) dateTime46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime20 and mutableDateTime44", (dateTime20.compareTo(mutableDateTime44) == 0) == dateTime20.equals(mutableDateTime44));
    }

    @Test
    public void test338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test338");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        mutableDateTime16.addHours(26150565);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.eras();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.secondOfMinute();
        mutableDateTime16.setRounding(dateTimeField30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime16.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.roundFloor();
        mutableDateTime34.setMillisOfDay(37349456);
        java.lang.String str37 = mutableDateTime34.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant5", (dateTime1.compareTo(instant5) == 0) == dateTime1.equals(instant5));
    }

    @Test
    public void test339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test339");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException4 = new java.io.IOException("");
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        boolean boolean6 = mutableDateTime2.equals((java.lang.Object) iOException4);
        org.joda.time.Duration duration9 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration9, 1424);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration19 = duration16.withDurationAdded((long) (short) 100, (int) ' ');
        long long20 = duration19.getMillis();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.months();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime30, periodType31);
        boolean boolean33 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        int int34 = dateTime28.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime28, periodType37);
        org.joda.time.Period period41 = new org.joda.time.Period(0L, 24L, periodType37);
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableInstant) mutableDateTime2, periodType37);
        mutableDateTime2.addWeeks(26322781);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and dateTime24", (instant23.compareTo(dateTime24) == 0) == instant23.equals(dateTime24));
    }

    @Test
    public void test340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test340");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.Interval interval12 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean15 = localDate13.isSupported(dateTimeFieldType14);
        org.joda.time.LocalDate.Property property16 = localDate13.yearOfEra();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str22 = duration21.toString();
        org.joda.time.Instant instant23 = instant17.minus((org.joda.time.ReadableDuration) duration21);
        int int24 = property16.getDifference((org.joda.time.ReadableInstant) instant17);
        org.joda.time.Duration duration27 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant28 = instant17.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str31 = duration30.toString();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours34 = duration33.toStandardHours();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime36);
        org.joda.time.Duration duration39 = duration30.plus((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period42 = duration41.toPeriod();
        org.joda.time.Duration duration44 = duration41.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        mutableDateTime45.add((long) 'a');
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime45.yearOfCentury();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration56 = duration53.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration57 = duration50.minus((org.joda.time.ReadableDuration) duration56);
        mutableDateTime45.add((org.joda.time.ReadableDuration) duration50);
        boolean boolean59 = duration44.isShorterThan((org.joda.time.ReadableDuration) duration50);
        boolean boolean60 = duration33.isLongerThan((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Instant instant61 = instant28.minus((org.joda.time.ReadableDuration) duration44);
        org.joda.time.Interval interval62 = duration7.toIntervalTo((org.joda.time.ReadableInstant) instant61);
        org.joda.time.Instant instant63 = new org.joda.time.Instant();
        org.joda.time.Instant instant65 = instant63.withMillis(0L);
        org.joda.time.Duration duration67 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str68 = duration67.toString();
        org.joda.time.Instant instant69 = instant63.minus((org.joda.time.ReadableDuration) duration67);
        org.joda.time.MutableDateTime mutableDateTime70 = instant63.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property71 = mutableDateTime70.centuryOfEra();
        mutableDateTime70.addYears(22);
        org.joda.time.Period period74 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) mutableDateTime70);
        org.joda.time.Period period76 = period74.minusMonths(359);
        int int77 = period74.getMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime36", (instant17.compareTo(dateTime36) == 0) == instant17.equals(dateTime36));
    }

    @Test
    public void test341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test341");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration4 = duration1.withDurationAdded((long) (short) 100, (int) ' ');
        long long5 = duration4.getMillis();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.months();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15, periodType16);
        boolean boolean18 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime13);
        int int19 = dateTime13.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime13, periodType22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime27.withChronology(chronology34);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.getMutableDateTime();
        boolean boolean43 = dateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.eras();
        long long52 = chronology47.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField53 = chronology47.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.minuteOfDay();
        mutableDateTime42.setChronology(chronology47);
        org.joda.time.DateTime dateTime56 = dateTime13.toDateTime(chronology47);
        org.joda.time.DateTime dateTime58 = dateTime13.plus(953015L);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone60 = dateTimeZone59.toTimeZone();
        org.joda.time.DateTime dateTime61 = dateTime58.toDateTime(dateTimeZone59);
        boolean boolean62 = dateTime58.isBeforeNow();
        org.joda.time.DateTime.Property property63 = dateTime58.centuryOfEra();
        int int64 = property63.get();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime27", (instant6.compareTo(dateTime27) == 0) == instant6.equals(dateTime27));
    }

    @Test
    public void test342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test342");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException3 = new java.io.IOException("");
        java.io.IOException iOException4 = new java.io.IOException((java.lang.Throwable) iOException3);
        boolean boolean5 = mutableDateTime1.equals((java.lang.Object) iOException3);
        mutableDateTime1.setSecondOfMinute((int) (short) 10);
        mutableDateTime1.add(1581732953L);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes(15);
        org.joda.time.DateTime dateTime23 = localDateTime16.toDateTime((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime25 = localDateTime16.toDateTime(dateTimeZone24);
        org.joda.time.DateTime dateTime26 = dateTime11.withZoneRetainFields(dateTimeZone24);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        mutableDateTime27.add((long) 'a');
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime27.yearOfCentury();
        mutableDateTime27.addSeconds(0);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours35 = duration34.toStandardHours();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        int int38 = dateTime37.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.DateTime dateTime45 = instant44.toDateTime();
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType48 = org.joda.time.PeriodType.months();
        org.joda.time.Period period49 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime47, periodType48);
        org.joda.time.Period period50 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration34, (org.joda.time.ReadableInstant) dateTime41, periodType48);
        org.joda.time.Duration duration51 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime27, (org.joda.time.ReadableInstant) dateTime41);
        org.joda.time.DateTime dateTime52 = dateTime26.plus((org.joda.time.ReadableDuration) duration51);
        org.joda.time.DateTime dateTime54 = dateTime26.minusYears(29);
        org.joda.time.DateTime dateTime56 = dateTime54.minusWeeks(62181);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.DateTime dateTime58 = new org.joda.time.DateTime(chronology57);
        int int59 = dateTime58.getYearOfCentury();
        int int60 = dateTime58.getWeekyear();
        org.joda.time.DateTime dateTime61 = dateTime58.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property62 = dateTime58.yearOfEra();
        org.joda.time.DateTime dateTime63 = property62.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime64 = property62.roundHalfEvenCopy();
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours67 = duration66.toStandardHours();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.DateTime dateTime69 = new org.joda.time.DateTime(chronology68);
        int int70 = dateTime69.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration66, (org.joda.time.ReadableInstant) dateTime69);
        mutablePeriod71.addSeconds(292278993);
        mutablePeriod71.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime77 = dateTime64.minus((org.joda.time.ReadablePeriod) mutablePeriod71);
        org.joda.time.DateTime dateTime80 = dateTime64.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.DateTime.Property property81 = dateTime80.year();
        int int82 = dateTime80.getMillisOfSecond();
        int int83 = dateTime80.getWeekOfWeekyear();
        boolean boolean84 = dateTime56.isAfter((org.joda.time.ReadableInstant) dateTime80);
        org.joda.time.DateTime dateTime86 = dateTime80.minus((long) 652);
        org.joda.time.DateTime dateTime88 = dateTime80.plusWeeks(26238);
        boolean boolean89 = mutableDateTime1.equals((java.lang.Object) dateTime88);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime11", (instant10.compareTo(dateTime11) == 0) == instant10.equals(dateTime11));
    }

    @Test
    public void test343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test343");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        org.joda.time.Period period23 = period19.toPeriod();
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.Period period25 = period15.normalizedStandard(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = periodType24.indexOf(durationFieldType26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType24, chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime5.toMutableDateTime(chronology31);
        mutablePeriod2.setPeriod((long) 36946953, 960000L, chronology31);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        mutableDateTime39.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime39.copy();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration43, readableInstant44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period51 = period49.minusSeconds((-1));
        java.lang.String str52 = period49.toString();
        org.joda.time.Period period53 = period49.toPeriod();
        org.joda.time.PeriodType periodType54 = period49.getPeriodType();
        org.joda.time.Period period55 = period45.normalizedStandard(periodType54);
        int int56 = period55.getWeeks();
        mutableDateTime42.add((org.joda.time.ReadablePeriod) period55, 36946953);
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) period55);
        org.joda.time.Period period61 = period55.minusSeconds(1191);
        org.joda.time.Period period63 = period55.multipliedBy(42);
        int int64 = period55.getMonths();
        org.joda.time.Instant instant65 = new org.joda.time.Instant();
        org.joda.time.Instant instant67 = instant65.withMillis(0L);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str70 = duration69.toString();
        org.joda.time.Instant instant71 = instant65.minus((org.joda.time.ReadableDuration) duration69);
        org.joda.time.MutableDateTime mutableDateTime72 = instant65.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property73 = mutableDateTime72.centuryOfEra();
        mutableDateTime72.setSecondOfMinute(49);
        org.joda.time.LocalDate localDate76 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property77 = localDate76.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean79 = localDate76.isSupported(dateTimeFieldType78);
        org.joda.time.DurationFieldType durationFieldType80 = dateTimeFieldType78.getRangeDurationType();
        java.lang.String str81 = durationFieldType80.toString();
        mutableDateTime72.add(durationFieldType80, 53);
        org.joda.time.Period period85 = period55.withFieldAdded(durationFieldType80, 62354);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and mutableDateTime37", (mutableDateTime5.compareTo(mutableDateTime37) == 0) == mutableDateTime5.equals(mutableDateTime37));
    }

    @Test
    public void test344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test344");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration4 = duration1.withDurationAdded((long) (short) 100, (int) ' ');
        long long5 = duration4.getMillis();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.months();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15, periodType16);
        boolean boolean18 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime13);
        int int19 = dateTime13.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime13, periodType22);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        int int27 = localDate26.getDayOfMonth();
        org.joda.time.DateTime dateTime28 = localDate26.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property29 = localDate26.weekOfWeekyear();
        boolean boolean30 = duration4.equals((java.lang.Object) property29);
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property32 = localDate31.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        org.joda.time.LocalDate localDate34 = property32.roundCeilingCopy();
        org.joda.time.Chronology chronology35 = localDate34.getChronology();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime39 = localDate34.toDateTimeAtCurrentTime(dateTimeZone38);
        boolean boolean40 = dateTime39.isEqualNow();
        org.joda.time.Interval interval41 = duration4.toIntervalTo((org.joda.time.ReadableInstant) dateTime39);
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime39.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime44 = dateTime39.plusYears(26608);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant8 and dateTime9", (instant8.compareTo(dateTime9) == 0) == instant8.equals(dateTime9));
    }

    @Test
    public void test345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test345");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.LocalDate localDate4 = property2.roundCeilingCopy();
        org.joda.time.LocalDate localDate6 = localDate4.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate8 = localDate4.withWeekOfWeekyear(46);
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.Period period12 = new org.joda.time.Period(readableDuration10, readableInstant11);
        org.joda.time.PeriodType periodType15 = null;
        org.joda.time.Period period16 = new org.joda.time.Period((long) 100, 1L, periodType15);
        org.joda.time.Period period18 = period16.minusSeconds((-1));
        java.lang.String str19 = period16.toString();
        org.joda.time.Period period20 = period16.toPeriod();
        org.joda.time.PeriodType periodType21 = period16.getPeriodType();
        org.joda.time.Period period22 = period12.normalizedStandard(periodType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        long long31 = chronology26.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField32 = chronology26.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(44L, periodType21, chronology26);
        org.joda.time.LocalDate localDate35 = localDate8.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod33, (int) (byte) 1);
        org.joda.time.Chronology chronology36 = localDate35.getChronology();
        org.joda.time.Period period37 = new org.joda.time.Period(0L, chronology36);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now();
        mutableDateTime38.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime38.copy();
        mutableDateTime38.setDate((long) '#');
        org.joda.time.LocalDate localDate44 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property45 = localDate44.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean47 = localDate44.isSupported(dateTimeFieldType46);
        int int48 = localDate44.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight50 = localDate44.toDateMidnight(dateTimeZone49);
        org.joda.time.DateTime dateTime51 = mutableDateTime38.toDateTime(dateTimeZone49);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(dateTimeZone49);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime54 = org.joda.time.MutableDateTime.now();
        mutableDateTime54.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime57 = mutableDateTime54.copy();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime54.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime59 = property58.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime60 = property58.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime62 = property58.set(1);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.DateTime dateTime64 = new org.joda.time.DateTime(chronology63);
        int int65 = dateTime64.getYearOfCentury();
        int int66 = dateTime64.getWeekyear();
        org.joda.time.DateTime dateTime67 = dateTime64.withEarlierOffsetAtOverlap();
        java.lang.String str68 = dateTime67.toString();
        org.joda.time.MutableDateTime mutableDateTime69 = dateTime67.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.UTC;
        boolean boolean71 = dateTimeZone70.isFixed();
        mutableDateTime69.setZoneRetainFields(dateTimeZone70);
        org.joda.time.MutableDateTime mutableDateTime73 = mutableDateTime62.toMutableDateTime(dateTimeZone70);
        org.joda.time.Interval interval74 = localDate53.toInterval(dateTimeZone70);
        org.joda.time.LocalDate.Property property75 = localDate53.monthOfYear();
        org.joda.time.LocalDate localDate76 = property75.roundCeilingCopy();
        org.joda.time.LocalDate localDate78 = property75.addToCopy(26275);
        long long80 = chronology36.set((org.joda.time.ReadablePartial) localDate78, (long) 41);
        org.joda.time.DateTimeZone dateTimeZone81 = chronology36.getZone();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant23 and dateTime64", (instant23.compareTo(dateTime64) == 0) == instant23.equals(dateTime64));
    }

    @Test
    public void test346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test346");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardHours((long) 62172);
        org.joda.time.Duration duration3 = duration1.withMillis((long) 84);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getYearOfCentury();
        int int7 = dateTime5.getWeekyear();
        org.joda.time.DateTime dateTime8 = dateTime5.withEarlierOffsetAtOverlap();
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.MutableDateTime mutableDateTime10 = dateTime8.toMutableDateTime();
        org.joda.time.Instant instant11 = mutableDateTime10.toInstant();
        org.joda.time.LocalDateTime localDateTime12 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds((int) (byte) 10);
        java.lang.Object obj21 = null;
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime(obj21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableDuration) duration24);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime18.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Instant instant27 = instant11.minus((org.joda.time.ReadableDuration) duration24);
        org.joda.time.Period period28 = duration3.toPeriodFrom((org.joda.time.ReadableInstant) instant11);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration32, readableInstant33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 1L, periodType37);
        org.joda.time.Period period40 = period38.minusSeconds((-1));
        java.lang.String str41 = period38.toString();
        org.joda.time.Period period42 = period38.toPeriod();
        org.joda.time.PeriodType periodType43 = period38.getPeriodType();
        org.joda.time.Period period44 = period34.normalizedStandard(periodType43);
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.eras();
        long long53 = chronology48.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField54 = chronology48.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(44L, periodType43, chronology48);
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod(950105L, 949680L, periodType43);
        org.joda.time.Period period57 = period28.withPeriodType(periodType43);
        org.joda.time.PeriodType periodType58 = period28.getPeriodType();
        org.joda.time.Period period60 = period28.minusWeeks(26302057);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant11", (dateTime5.compareTo(instant11) == 0) == dateTime5.equals(instant11));
    }

    @Test
    public void test347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test347");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = property14.roundHalfEvenCopy();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours19 = duration18.toStandardHours();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime21);
        mutablePeriod23.addSeconds(292278993);
        mutablePeriod23.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime29 = dateTime16.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTime dateTime32 = dateTime16.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean43 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration44 = duration34.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration49 = duration46.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean50 = duration37.equals((java.lang.Object) duration46);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.eras();
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.now(chronology56);
        org.joda.time.Period period59 = duration37.toPeriod(periodType52, chronology56);
        org.joda.time.DurationFieldType durationFieldType61 = period59.getFieldType(1);
        mutableDateTime8.add(durationFieldType61, 61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime8.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime65 = property64.roundFloor();
        org.joda.time.MutableDateTime.Property property66 = mutableDateTime65.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant53", (dateTime10.compareTo(instant53) == 0) == dateTime10.equals(instant53));
    }

    @Test
    public void test348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test348");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime6.setMillis(readableInstant8);
        mutableDateTime6.addYears(36985848);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.era();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Instant instant19 = instant13.minus((org.joda.time.ReadableDuration) duration17);
        java.lang.String str20 = instant13.toString();
        org.joda.time.DateTime dateTime22 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime24 = dateTime22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.LocalDate localDate25 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property26 = localDate25.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDate25.toDateTimeAtCurrentTime(dateTimeZone27);
        int int30 = dateTime24.compareTo((org.joda.time.ReadableInstant) dateTime29);
        int int31 = dateTime29.getCenturyOfEra();
        org.joda.time.DateTime dateTime33 = dateTime29.withWeekyear(44);
        org.joda.time.DateTime.Property property34 = dateTime33.millisOfSecond();
        org.joda.time.Chronology chronology35 = dateTime33.getChronology();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period40 = duration39.toPeriod();
        org.joda.time.Duration duration43 = duration39.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period44 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration43);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration51 = duration48.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean52 = duration46.isLongerThan((org.joda.time.ReadableDuration) duration51);
        org.joda.time.Minutes minutes53 = duration46.toStandardMinutes();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime37, (org.joda.time.ReadableDuration) duration46);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        int int57 = dateTime56.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(readableInstant60, readableInstant61, periodType62);
        org.joda.time.DurationFieldType durationFieldType65 = periodType62.getFieldType((int) (short) 0);
        java.lang.String str66 = periodType62.toString();
        org.joda.time.Instant instant67 = new org.joda.time.Instant();
        org.joda.time.Instant instant69 = instant67.withMillis(0L);
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 53, (long) (-1), periodType62, chronology70);
        org.joda.time.PeriodType periodType72 = periodType62.withMonthsRemoved();
        org.joda.time.Period period73 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration46, (org.joda.time.ReadableInstant) dateTime56, periodType62);
        org.joda.time.DateTime dateTime74 = dateTime33.minus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.Instant instant75 = instant13.plus((org.joda.time.ReadableDuration) duration46);
        org.joda.time.DateTime dateTime76 = instant13.toDateTime();
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) dateTime76);
        org.joda.time.DateTime.Property property78 = dateTime76.yearOfEra();
        org.joda.time.DateTime dateTime80 = dateTime76.plusDays(455);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and dateTime56", (instant13.compareTo(dateTime56) == 0) == instant13.equals(dateTime56));
    }

    @Test
    public void test349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test349");
        org.joda.time.Instant instant0 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime2 = instant0.toDateTime();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardHours((long) 36946953);
        org.joda.time.Instant instant5 = instant0.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate((long) (byte) -1);
        int int8 = localDate7.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        long long13 = dateTimeZone9.getMillisKeepLocal(dateTimeZone11, (long) 44);
        org.joda.time.DateTime dateTime14 = localDate7.toDateTimeAtMidnight(dateTimeZone9);
        org.joda.time.DateTime dateTime15 = localDate7.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime16 = org.joda.time.MutableDateTime.now();
        mutableDateTime16.add((long) 'a');
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime16.yearOfCentury();
        mutableDateTime16.addWeekyears((int) (byte) 1);
        int int22 = dateTime15.compareTo((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime16.centuryOfEra();
        org.joda.time.PeriodType periodType26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period((long) 100, 1L, periodType26);
        org.joda.time.Period period29 = period27.minusSeconds((-1));
        java.lang.String str30 = period27.toString();
        org.joda.time.Duration duration31 = period27.toStandardDuration();
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration31, 1200);
        org.joda.time.Period period34 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addMonths(26304);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test350");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        boolean boolean10 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean21 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration22 = duration12.minus((org.joda.time.ReadableDuration) duration15);
        boolean boolean23 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.Period period28 = period26.withDays((int) (byte) 1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours31 = duration30.toStandardHours();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration36 = period26.toDurationFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration38 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) ' ');
        int int39 = duration4.compareTo((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        org.joda.time.DateTime dateTime43 = dateTime41.plusMinutes(15);
        org.joda.time.Instant instant44 = dateTime43.toInstant();
        org.joda.time.MutableDateTime mutableDateTime45 = org.joda.time.MutableDateTime.now();
        mutableDateTime45.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime45.copy();
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime45.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime50 = property49.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime51 = property49.roundHalfCeiling();
        org.joda.time.Duration duration52 = new org.joda.time.Duration((org.joda.time.ReadableInstant) dateTime43, (org.joda.time.ReadableInstant) mutableDateTime51);
        boolean boolean53 = duration22.isShorterThan((org.joda.time.ReadableDuration) duration52);
        mutablePeriod2.add((org.joda.time.ReadableDuration) duration52);
        mutablePeriod2.addMonths(62312);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime43 and instant44", (dateTime43.compareTo(instant44) == 0) == dateTime43.equals(instant44));
    }

    @Test
    public void test351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test351");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean2 = localDate0.isSupported(dateTimeFieldType1);
        org.joda.time.LocalDate.Property property3 = localDate0.yearOfEra();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        org.joda.time.Instant instant10 = instant4.minus((org.joda.time.ReadableDuration) duration8);
        int int11 = property3.getDifference((org.joda.time.ReadableInstant) instant4);
        org.joda.time.Duration duration14 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant15 = instant4.plus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours21 = duration20.toStandardHours();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        int int24 = dateTime23.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration20, (org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.Duration duration26 = duration17.plus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration31 = duration28.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        boolean boolean46 = duration31.isShorterThan((org.joda.time.ReadableDuration) duration37);
        boolean boolean47 = duration20.isLongerThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant48 = instant15.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours51 = duration50.toStandardHours();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(chronology52);
        int int54 = dateTime53.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTime dateTime57 = dateTime53.plus(0L);
        org.joda.time.Instant instant58 = dateTime57.toInstant();
        boolean boolean59 = instant15.isAfter((org.joda.time.ReadableInstant) instant58);
        org.joda.time.Instant instant60 = instant58.toInstant();
        org.joda.time.Instant instant61 = instant58.toInstant();
        org.joda.time.PeriodType periodType64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period((long) 100, 1L, periodType64);
        org.joda.time.Period period67 = period65.minusSeconds((-1));
        org.joda.time.Period period69 = period67.multipliedBy((int) '#');
        org.joda.time.DurationFieldType durationFieldType70 = org.joda.time.DurationFieldType.centuries();
        int int71 = period69.get(durationFieldType70);
        org.joda.time.Period period73 = period69.plusMinutes(44);
        org.joda.time.Duration duration75 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration77 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str78 = duration77.toString();
        boolean boolean79 = duration75.isShorterThan((org.joda.time.ReadableDuration) duration77);
        org.joda.time.Hours hours80 = duration75.toStandardHours();
        boolean boolean81 = period73.equals((java.lang.Object) duration75);
        org.joda.time.Instant instant82 = instant58.minus((org.joda.time.ReadableDuration) duration75);
        org.joda.time.Chronology chronology83 = instant82.getChronology();
        org.joda.time.DateTimeField dateTimeField84 = chronology83.halfdayOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant4 and dateTime23", (instant4.compareTo(dateTime23) == 0) == instant4.equals(dateTime23));
    }

    @Test
    public void test352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test352");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime1 = instant0.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime2.yearOfCentury();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration13 = duration10.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration14 = duration7.minus((org.joda.time.ReadableDuration) duration13);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration7);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime2.centuryOfEra();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        int int19 = dateTime18.getYearOfCentury();
        org.joda.time.DateTime dateTime21 = dateTime18.withSecondOfMinute(53);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration30 = duration23.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        java.lang.String str37 = periodType33.toString();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration23, periodType33);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration23);
        mutableDateTime2.addWeekyears(21);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime2.weekOfWeekyear();
        boolean boolean43 = instant0.isAfter((org.joda.time.ReadableInstant) mutableDateTime2);
        int int44 = mutableDateTime2.getMillisOfSecond();
        mutableDateTime2.addHours(26499);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and mutableDateTime1", (instant0.compareTo(mutableDateTime1) == 0) == instant0.equals(mutableDateTime1));
    }

    @Test
    public void test353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test353");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        mutablePeriod35.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod35.toMutablePeriod();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod38, 1439);
        mutableDateTime16.setSecondOfDay(100);
        int int43 = mutableDateTime16.getYear();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime16.millisOfSecond();
        int int45 = mutableDateTime16.getDayOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant5", (dateTime1.compareTo(instant5) == 0) == dateTime1.equals(instant5));
    }

    @Test
    public void test354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test354");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now();
        mutableDateTime4.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime7 = mutableDateTime4.copy();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime4.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime9 = property8.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime12 = property8.set(1);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        int int15 = dateTime14.getYearOfCentury();
        int int16 = dateTime14.getWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime14.withEarlierOffsetAtOverlap();
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.MutableDateTime mutableDateTime19 = dateTime17.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.UTC;
        boolean boolean21 = dateTimeZone20.isFixed();
        mutableDateTime19.setZoneRetainFields(dateTimeZone20);
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime12.toMutableDateTime(dateTimeZone20);
        org.joda.time.DateTime dateTime24 = org.joda.time.DateTime.now(dateTimeZone20);
        long long27 = dateTimeZone20.convertLocalToUTC(2100L, true);
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((java.lang.Object) instant2, dateTimeZone20);
        java.lang.String str29 = dateTimeZone20.getID();
        org.joda.time.DateTimeZone.setDefault(dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime3", (instant2.compareTo(dateTime3) == 0) == instant2.equals(dateTime3));
    }

    @Test
    public void test355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test355");
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant4, readableInstant5, periodType6);
        org.joda.time.DurationFieldType durationFieldType9 = periodType6.getFieldType((int) (short) 0);
        java.lang.String str10 = periodType6.toString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 53, (long) (-1), periodType6, chronology14);
        org.joda.time.DateTimeField dateTimeField16 = dateTimeFieldType1.getField(chronology14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(15);
        org.joda.time.Chronology chronology21 = dateTime18.getChronology();
        java.lang.String str22 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = dateTimeFieldType1.getField(chronology21);
        org.joda.time.DateTimeField dateTimeField24 = chronology21.dayOfYear();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket27 = new org.joda.time.format.DateTimeParserBucket((long) 19045, chronology21, locale25, (java.lang.Integer) 5);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = property29.getField();
        org.joda.time.LocalDate localDate31 = property29.roundCeilingCopy();
        org.joda.time.LocalDate localDate33 = localDate31.withCenturyOfEra((int) (short) 1);
        org.joda.time.DateTime dateTime34 = localDate31.toDateTimeAtStartOfDay();
        boolean boolean35 = dateTimeParserBucket27.restoreState((java.lang.Object) localDate31);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forOffsetMillis(62166);
        dateTimeParserBucket27.setZone(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and mutableDateTime39", (instant11.compareTo(mutableDateTime39) == 0) == instant11.equals(mutableDateTime39));
    }

    @Test
    public void test356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test356");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        org.joda.time.DateTime dateTime30 = org.joda.time.DateTime.now(chronology21);
        org.joda.time.DateTimeField dateTimeField31 = chronology21.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.UTC;
        long long36 = dateTimeZone32.getMillisKeepLocal(dateTimeZone34, (long) 44);
        java.lang.String str38 = dateTimeZone34.getName(0L);
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime(dateTimeZone34);
        java.util.Locale locale44 = new java.util.Locale("", "years", "2022-02-22T10:15:44.882");
        java.lang.String str45 = dateTimeZone34.getName(987048L, locale44);
        int int46 = dateTimeField31.getMaximumTextLength(locale44);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes(15);
        org.joda.time.Chronology chronology53 = dateTime50.getChronology();
        org.joda.time.DurationField durationField54 = chronology53.hours();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(1440L, chronology53);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime(chronology53);
        org.joda.time.Chronology chronology57 = chronology53.withUTC();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) 575, chronology57);
        org.joda.time.DateTimeField dateTimeField59 = chronology57.millisOfDay();
        java.lang.String str60 = dateTimeField59.getName();
        java.util.Locale locale63 = java.util.Locale.forLanguageTag("12");
        java.lang.String str64 = dateTimeField59.getAsText((long) 37188122, locale63);
        java.lang.String str65 = locale44.getDisplayLanguage(locale63);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField54", Math.signum(durationField9.compareTo(durationField54)) == -Math.signum(durationField54.compareTo(durationField9)));
    }

    @Test
    public void test357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test357");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.minusWeeks(44);
        org.joda.time.DateTime dateTime14 = dateTime11.withDurationAdded((-1L), 36946953);
        org.joda.time.YearMonthDay yearMonthDay15 = dateTime14.toYearMonthDay();
        org.joda.time.DateTime.Property property16 = dateTime14.yearOfEra();
        int int17 = property16.get();
        org.joda.time.DateTime dateTime18 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.forOffsetMillis(36988464);
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDate21.toDateTimeAtCurrentTime(dateTimeZone23);
        org.joda.time.DateTime dateTime26 = localDate21.toDateTimeAtCurrentTime();
        boolean boolean28 = dateTime26.isBefore(1671667200000L);
        org.joda.time.DateTime dateTime31 = dateTime26.withDurationAdded((long) 33454, 0);
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.lang.String str36 = locale35.getDisplayName();
        java.lang.String str37 = dateTimeZone33.getName(100L, locale35);
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime(948227L, dateTimeZone33);
        long long39 = mutableDateTime38.getMillis();
        mutableDateTime38.setWeekyear(1439);
        boolean boolean43 = mutableDateTime38.isBefore(1645514186724L);
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.forOffsetMillis(36988464);
        mutableDateTime38.setZone(dateTimeZone45);
        org.joda.time.DateTime dateTime47 = dateTime31.toDateTime(dateTimeZone45);
        org.joda.time.DateTime.Property property48 = dateTime47.hourOfDay();
        org.joda.time.DateTime dateTime50 = dateTime47.plusMillis((-883));
        int int51 = dateTimeZone20.getOffset((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((java.lang.Object) dateTime18, dateTimeZone20);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime47", (dateTime8.compareTo(dateTime47) == 0) == dateTime8.equals(dateTime47));
    }

    @Test
    public void test358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test358");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        long long7 = mutableDateTime6.getMillis();
        mutableDateTime6.setWeekyear(1439);
        boolean boolean11 = mutableDateTime6.isBefore(1645514186724L);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.forOffsetMillis(36988464);
        mutableDateTime6.setZone(dateTimeZone13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.Period period22 = period18.toPeriod();
        int int23 = period22.size();
        org.joda.time.Period period25 = period22.plusSeconds(62151);
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.PeriodType periodType29 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod(readableInstant27, readableInstant28, periodType29);
        org.joda.time.PeriodType periodType31 = periodType29.withHoursRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.eras();
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime((long) 44, chronology37);
        org.joda.time.DateTimeField dateTimeField42 = dateTimeFieldType32.getField(chronology37);
        org.joda.time.DateTimeField dateTimeField43 = chronology37.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((long) (-292275054), periodType29, chronology37);
        org.joda.time.Period period45 = period25.minus((org.joda.time.ReadablePeriod) mutablePeriod44);
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str47 = durationFieldType46.getName();
        int int48 = mutablePeriod44.get(durationFieldType46);
        mutableDateTime6.add(durationFieldType46, 37048051);
        mutableDateTime6.setSecondOfDay(51);
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone53);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone53);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateTime55);
        boolean boolean58 = dateTime55.isEqual((-62135596800000L));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and instant34", (mutableDateTime6.compareTo(instant34) == 0) == mutableDateTime6.equals(instant34));
    }

    @Test
    public void test359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test359");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime2.withChronology(chronology9);
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.getMutableDateTime();
        boolean boolean18 = dateTime14.isBefore((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.Chronology chronology22 = instant21.getChronology();
        org.joda.time.DurationField durationField23 = chronology22.eras();
        long long27 = chronology22.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField28 = chronology22.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField29 = chronology22.minuteOfDay();
        mutableDateTime17.setChronology(chronology22);
        org.joda.time.DateTime dateTime31 = org.joda.time.DateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField32 = chronology22.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime((java.lang.Object) "2022-02-22T07:20:18.487Z", chronology22);
        org.joda.time.DurationField durationField34 = chronology22.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField34, and durationField10", !(durationField10.compareTo(durationField34) == 0) || (Math.signum(durationField10.compareTo(durationField10)) == Math.signum(durationField34.compareTo(durationField10))));
    }

    @Test
    public void test360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test360");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.dayOfMonth();
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.fromMillisOfDay((long) (byte) 1);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        boolean boolean6 = dateTimeFieldType2.isSupported(chronology5);
        org.joda.time.DurationField durationField7 = chronology5.weekyears();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(chronology5);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.fromMillisOfDay((long) 26302057, chronology5);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.DateTimeField dateTimeField16 = chronology13.weekyearOfCentury();
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale18.getDisplayVariant(locale19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale23 = java.util.Locale.GERMAN;
        java.lang.String str24 = locale23.getDisplayName();
        java.lang.String str25 = dateTimeZone21.getName(100L, locale23);
        java.lang.String str26 = locale19.getDisplayScript(locale23);
        java.lang.String str27 = locale19.toLanguageTag();
        java.lang.String str28 = dateTimeField16.getAsShortText((long) (byte) -1, locale19);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.util.Locale locale31 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str32 = locale30.getDisplayScript(locale31);
        java.lang.String str33 = dateTimeField16.getAsText(0L, locale30);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket35 = new org.joda.time.format.DateTimeParserBucket(26612150707L, chronology5, locale30, (java.lang.Integer) 0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField14", Math.signum(durationField7.compareTo(durationField14)) == -Math.signum(durationField14.compareTo(durationField7)));
    }

    @Test
    public void test361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test361");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        long long18 = chronology13.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfMinute();
        boolean boolean20 = dateTimeField19.isSupported();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        int int23 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate25 = localDate21.withYearOfCentury(46);
        boolean boolean26 = property8.equals((java.lang.Object) localDate25);
        org.joda.time.Chronology chronology27 = localDate25.getChronology();
        org.joda.time.ReadablePeriod readablePeriod28 = null;
        long long31 = chronology27.add(readablePeriod28, 555370422L, 1191);
        org.joda.time.DateTimeField dateTimeField32 = chronology27.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.Duration duration35 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period36 = duration35.toPeriod();
        org.joda.time.Duration duration38 = duration35.minus((long) 292278993);
        mutableDateTime33.add((org.joda.time.ReadableDuration) duration35, 26249401);
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime33.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField42 = property41.getField();
        org.joda.time.MutableDateTime mutableDateTime43 = property41.roundHalfCeiling();
        boolean boolean44 = mutableDateTime43.isAfterNow();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant2 and dateTime3", (instant2.compareTo(dateTime3) == 0) == instant2.equals(dateTime3));
    }

    @Test
    public void test362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test362");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime2 = property1.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime4 = property1.getMutableDateTime();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration9 = duration6.withDurationAdded((long) (short) 100, (int) ' ');
        long long10 = duration9.getMillis();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        boolean boolean23 = dateTime14.isBefore((org.joda.time.ReadableInstant) dateTime18);
        int int24 = dateTime18.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant25, readableInstant26, periodType27);
        org.joda.time.PeriodType periodType29 = periodType27.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime18, periodType27);
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod33.clear();
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period37 = duration36.toPeriod();
        org.joda.time.Duration duration40 = duration36.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes(15);
        org.joda.time.Interval interval45 = duration40.toIntervalTo((org.joda.time.ReadableInstant) dateTime44);
        mutablePeriod33.setPeriod((org.joda.time.ReadableInterval) interval45);
        mutablePeriod33.setYears(0);
        mutablePeriod33.addMinutes((int) (byte) 10);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.Period period53 = new org.joda.time.Period(readableDuration51, readableInstant52);
        org.joda.time.Period period55 = period53.withDays((int) (byte) 1);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) (short) 100, chronology57);
        org.joda.time.DurationFieldType durationFieldType59 = org.joda.time.DurationFieldType.millis();
        java.lang.String str60 = durationFieldType59.getName();
        boolean boolean61 = localTime58.isSupported(durationFieldType59);
        int int62 = period53.get(durationFieldType59);
        boolean boolean63 = mutablePeriod33.isSupported(durationFieldType59);
        int int64 = mutablePeriod30.get(durationFieldType59);
        mutableDateTime4.add(durationFieldType59, 0);
        org.joda.time.LocalDate localDate67 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property68 = localDate67.monthOfYear();
        org.joda.time.DateTimeField dateTimeField69 = property68.getField();
        org.joda.time.LocalDate localDate70 = property68.roundCeilingCopy();
        org.joda.time.LocalDate localDate72 = localDate70.minusMonths(22);
        org.joda.time.DateTimeZone dateTimeZone73 = null;
        org.joda.time.DateTime dateTime74 = localDate72.toDateTimeAtMidnight(dateTimeZone73);
        org.joda.time.DateTime dateTime76 = dateTime74.plusDays(25);
        org.joda.time.Chronology chronology77 = dateTime76.getChronology();
        boolean boolean78 = durationFieldType59.isSupported(chronology77);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime42", (instant11.compareTo(dateTime42) == 0) == instant11.equals(dateTime42));
    }

    @Test
    public void test363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test363");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        org.joda.time.ReadableInstant readableInstant8 = null;
        mutableDateTime6.setMillis(readableInstant8);
        mutableDateTime6.setMillisOfDay(54);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        int int14 = dateTime13.getYearOfCentury();
        int int15 = dateTime13.getWeekyear();
        org.joda.time.DateTime dateTime17 = dateTime13.plus((long) 15);
        org.joda.time.DateTime.Property property18 = dateTime13.year();
        org.joda.time.DateTime dateTime20 = property18.addToCopy((long) 25);
        org.joda.time.DateTime dateTime21 = property18.roundCeilingCopy();
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj23 = mutableDateTime22.clone();
        mutableDateTime22.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime22.dayOfWeek();
        int int27 = mutableDateTime22.getMinuteOfDay();
        boolean boolean28 = dateTime21.isEqual((org.joda.time.ReadableInstant) mutableDateTime22);
        int int29 = dateTime21.getYearOfCentury();
        boolean boolean30 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) dateTime21);
        org.joda.time.Instant instant31 = dateTime21.toInstant();
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes(15);
        org.joda.time.DateTime dateTime45 = localDateTime38.toDateTime((org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime47 = localDateTime38.toDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime48 = dateTime33.withZoneRetainFields(dateTimeZone46);
        java.lang.String str49 = dateTimeZone46.toString();
        java.lang.String str50 = dateTimeZone46.getID();
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(dateTimeZone46);
        org.joda.time.DateTime dateTime52 = dateTime21.withZoneRetainFields(dateTimeZone46);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and instant32", (dateTime13.compareTo(instant32) == 0) == dateTime13.equals(instant32));
    }

    @Test
    public void test364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test364");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(26197957);
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.LocalTime localTime3 = org.joda.time.LocalTime.now(dateTimeZone1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        org.joda.time.DateTime dateTime7 = dateTime5.plusMinutes(15);
        org.joda.time.Chronology chronology8 = dateTime5.getChronology();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (byte) -1);
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withFieldAdded(durationFieldType11, (int) (short) -1);
        int int14 = localDateTime13.getEra();
        java.io.IOException iOException17 = new java.io.IOException("");
        java.io.IOException iOException18 = new java.io.IOException("2022-02-22T10:15:44.882", (java.lang.Throwable) iOException17);
        boolean boolean19 = localDateTime13.equals((java.lang.Object) iOException18);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withMillisOfDay(26150);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.hourOfDay();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime13.withField(dateTimeFieldType22, (int) (byte) 1);
        org.joda.time.DateTime.Property property25 = dateTime5.property(dateTimeFieldType22);
        boolean boolean26 = localTime3.isSupported(dateTimeFieldType22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and dateTime5", (dateTime2.compareTo(dateTime5) == 0) == dateTime2.equals(dateTime5));
    }

    @Test
    public void test365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test365");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getSecondOfMinute();
        boolean boolean13 = dateTime11.isEqualNow();
        int int14 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime11.plusDays((int) '#');
        org.joda.time.DateTime.Property property17 = dateTime11.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.LocalTime localTime21 = localTime19.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getYearOfCentury();
        int int26 = dateTime24.getWeekyear();
        org.joda.time.DateTime dateTime27 = dateTime24.withEarlierOffsetAtOverlap();
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime27.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        mutableDateTime29.setZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localTime21.toDateTimeToday(dateTimeZone30);
        long long35 = dateTimeZone30.nextTransition((long) 161);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(dateTimeZone30);
        org.joda.time.DateTime dateTime37 = dateTime11.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj9, dateTimeZone30);
        org.joda.time.Chronology chronology39 = chronology3.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField40 = chronology39.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField4, durationField40, and durationField4", !(durationField4.compareTo(durationField40) == 0) || (Math.signum(durationField4.compareTo(durationField4)) == Math.signum(durationField40.compareTo(durationField4))));
    }

    @Test
    public void test366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test366");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime2 = instant1.toDateTime();
        org.joda.time.Instant instant3 = instant1.toInstant();
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.hourOfHalfday();
        org.joda.time.DateTimeField dateTimeField6 = chronology4.minuteOfDay();
        org.joda.time.DurationField durationField7 = chronology4.weeks();
        org.joda.time.DateTimeField dateTimeField8 = chronology4.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime9 = new org.joda.time.MutableDateTime(1169818L, chronology4);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime11 = property10.roundFloor();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(15);
        org.joda.time.Chronology chronology17 = dateTime14.getChronology();
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        org.joda.time.LocalTime localTime23 = org.joda.time.LocalTime.now(chronology21);
        org.joda.time.DurationField durationField24 = chronology21.eras();
        org.joda.time.DateTimeField dateTimeField25 = chronology21.hourOfDay();
        org.joda.time.DateTime dateTime26 = dateTime14.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField27 = chronology21.dayOfMonth();
        org.joda.time.Period period28 = new org.joda.time.Period(950707L, chronology21);
        org.joda.time.Period period30 = period28.withWeeks(1969);
        java.lang.String str31 = period30.toString();
        org.joda.time.Period period33 = period30.minusHours(57);
        org.joda.time.Period period35 = period33.withYears((-1));
        org.joda.time.Period period36 = period33.negated();
        int int37 = period33.getHours();
        org.joda.time.PeriodType periodType38 = period33.getPeriodType();
        mutableDateTime11.add((org.joda.time.ReadablePeriod) period33, 1348);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField22", Math.signum(durationField7.compareTo(durationField22)) == -Math.signum(durationField22.compareTo(durationField7)));
    }

    @Test
    public void test367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test367");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.yearOfEra();
        org.joda.time.DateTimeField dateTimeField34 = chronology26.dayOfMonth();
        org.joda.time.DurationField durationField35 = chronology26.months();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField35, and durationField27", !(durationField27.compareTo(durationField35) == 0) || (Math.signum(durationField27.compareTo(durationField27)) == Math.signum(durationField35.compareTo(durationField27))));
    }

    @Test
    public void test368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test368");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusYears(26148950);
        org.joda.time.LocalDateTime.Property property16 = localDateTime13.minuteOfHour();
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period22 = period20.minusSeconds((-1));
        org.joda.time.Period period24 = period22.multipliedBy((int) '#');
        org.joda.time.Minutes minutes25 = period24.toStandardMinutes();
        int int26 = period24.getYears();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime13.minus((org.joda.time.ReadablePeriod) period24);
        int int28 = localDateTime13.getMinuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime32 = property30.set(45);
        org.joda.time.MutableDateTime mutableDateTime33 = property30.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime35 = property30.add(45);
        org.joda.time.Chronology chronology36 = mutableDateTime35.getChronology();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology38);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.plusMonths(46);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime39.minusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime39.withDayOfYear((int) (byte) 100);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period51 = duration50.toPeriod();
        org.joda.time.Duration duration54 = duration50.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant55 = instant48.plus((org.joda.time.ReadableDuration) duration54);
        long long56 = instant55.getMillis();
        org.joda.time.Chronology chronology57 = instant55.getChronology();
        org.joda.time.DurationField durationField58 = chronology57.months();
        org.joda.time.MutableDateTime mutableDateTime59 = org.joda.time.MutableDateTime.now(chronology57);
        org.joda.time.DateTimeField dateTimeField60 = chronology57.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = dateTimeField60.getType();
        int int62 = localDateTime45.get(dateTimeFieldType61);
        mutableDateTime35.set(dateTimeFieldType61, 15);
        org.joda.time.DurationFieldType durationFieldType65 = dateTimeFieldType61.getDurationType();
        int int66 = localDateTime13.get(dateTimeFieldType61);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField58", Math.signum(durationField7.compareTo(durationField58)) == -Math.signum(durationField58.compareTo(durationField7)));
    }

    @Test
    public void test369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test369");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        int int4 = dateTime3.getMinuteOfHour();
        org.joda.time.DateTime dateTime6 = dateTime3.plusWeeks(0);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTime dateTime8 = dateTime3.toDateTime(chronology7);
        org.joda.time.DateTime dateTime10 = dateTime3.withMillisOfSecond(765);
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime15 = localDate11.toDateTimeAtCurrentTime(dateTimeZone13);
        org.joda.time.DateTime dateTime16 = localDate11.toDateTimeAtCurrentTime();
        boolean boolean18 = dateTime16.isBefore(1671667200000L);
        org.joda.time.DateTime dateTime21 = dateTime16.withDurationAdded((long) 33454, 0);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale25 = java.util.Locale.GERMAN;
        java.lang.String str26 = locale25.getDisplayName();
        java.lang.String str27 = dateTimeZone23.getName(100L, locale25);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(948227L, dateTimeZone23);
        long long29 = mutableDateTime28.getMillis();
        mutableDateTime28.setWeekyear(1439);
        boolean boolean33 = mutableDateTime28.isBefore(1645514186724L);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetMillis(36988464);
        mutableDateTime28.setZone(dateTimeZone35);
        org.joda.time.DateTime dateTime37 = dateTime21.toDateTime(dateTimeZone35);
        org.joda.time.DateTime dateTime38 = dateTime10.toDateTime(dateTimeZone35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and dateTime37", (dateTime15.compareTo(dateTime37) == 0) == dateTime15.equals(dateTime37));
    }

    @Test
    public void test370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test370");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        mutableDateTime6.addWeeks(5);
        org.joda.time.Instant instant9 = org.joda.time.Instant.now();
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) instant9);
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.DurationField durationField15 = chronology14.eras();
        long long19 = chronology14.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField20 = chronology14.secondOfMinute();
        boolean boolean21 = dateTimeField20.isSupported();
        long long23 = dateTimeField20.roundHalfEven(946312L);
        java.util.Locale locale24 = null;
        int int25 = dateTimeField20.getMaximumTextLength(locale24);
        mutableDateTime6.setRounding(dateTimeField20);
        long long28 = dateTimeField20.roundHalfCeiling(828351087385752000L);
        org.joda.time.LocalDateTime localDateTime29 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property32 = localDateTime29.hourOfDay();
        org.joda.time.DateTimeField dateTimeField33 = property32.getField();
        java.lang.String str34 = property32.toString();
        org.joda.time.LocalDateTime localDateTime36 = property32.addToCopy(100L);
        org.joda.time.LocalDateTime localDateTime37 = property32.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime38 = property32.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime39 = property32.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime40 = property32.roundFloorCopy();
        org.joda.time.LocalDateTime localDateTime41 = property32.roundFloorCopy();
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        mutableDateTime43.add((long) 'a');
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.DateTime dateTime49 = instant48.toDateTime();
        org.joda.time.DateTime dateTime51 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType52 = org.joda.time.PeriodType.months();
        org.joda.time.Period period53 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime49, (org.joda.time.ReadableInstant) dateTime51, periodType52);
        org.joda.time.DateTime.Property property54 = dateTime51.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = property54.getFieldType();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime43.property(dateTimeFieldType55);
        org.joda.time.Instant instant58 = new org.joda.time.Instant();
        org.joda.time.Instant instant60 = instant58.withMillis(0L);
        org.joda.time.Duration duration62 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period63 = duration62.toPeriod();
        org.joda.time.Duration duration66 = duration62.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant67 = instant60.plus((org.joda.time.ReadableDuration) duration66);
        long long68 = instant67.getMillis();
        org.joda.time.Chronology chronology69 = instant67.getChronology();
        org.joda.time.DurationField durationField70 = chronology69.months();
        org.joda.time.Period period71 = new org.joda.time.Period((-205878993L), chronology69);
        org.joda.time.DateTimeField dateTimeField72 = chronology69.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone73 = chronology69.getZone();
        org.joda.time.LocalTime localTime74 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime43, chronology69);
        org.joda.time.LocalTime localTime76 = localTime74.withMillisOfDay((int) (short) 100);
        int int77 = localTime76.getMillisOfDay();
        int[] intArray78 = localTime76.getValues();
        int[] intArray80 = dateTimeField20.addWrapPartial((org.joda.time.ReadablePartial) localDateTime41, 0, intArray78, 36956320);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField15 and durationField70", Math.signum(durationField15.compareTo(durationField70)) == -Math.signum(durationField70.compareTo(durationField15)));
    }

    @Test
    public void test371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test371");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = duration3.withDurationAdded((long) (short) 100, (int) ' ');
        long long7 = duration6.getMillis();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.months();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17, periodType18);
        boolean boolean20 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime15);
        int int21 = dateTime15.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime15, periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.Chronology chronology32 = dateTime29.getChronology();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime29.withChronology(chronology36);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.getMutableDateTime();
        boolean boolean45 = dateTime41.isBefore((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField55 = chronology49.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology49.minuteOfDay();
        mutableDateTime44.setChronology(chronology49);
        org.joda.time.DateTime dateTime58 = dateTime15.toDateTime(chronology49);
        org.joda.time.ReadableDuration readableDuration59 = null;
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period(readableDuration59, readableInstant60);
        org.joda.time.Period period63 = period61.withDays((int) (byte) 1);
        org.joda.time.Period period65 = period63.minusWeeks(100);
        org.joda.time.Period period67 = period63.plusWeeks((int) (short) -1);
        long long70 = chronology49.add((org.joda.time.ReadablePeriod) period67, 86403200L, 443);
        boolean boolean71 = dateTimeFieldType0.isSupported(chronology49);
        org.joda.time.DurationField durationField72 = chronology49.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField37, durationField72, and durationField37", !(durationField37.compareTo(durationField72) == 0) || (Math.signum(durationField37.compareTo(durationField37)) == Math.signum(durationField72.compareTo(durationField37))));
    }

    @Test
    public void test372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test372");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours5 = duration4.toStandardHours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        org.joda.time.ReadableInstant readableInstant15 = null;
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod(readableInstant15, readableInstant16, periodType17);
        org.joda.time.DurationFieldType durationFieldType20 = periodType17.getFieldType((int) (short) 0);
        java.lang.String str21 = periodType17.toString();
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.Period period26 = new org.joda.time.Period((long) 53, (long) (-1), periodType17, chronology25);
        org.joda.time.Period period27 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType17);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.LocalTime localTime35 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.Period period36 = duration1.toPeriod(periodType17, chronology31);
        java.lang.String str37 = chronology31.toString();
        org.joda.time.DurationField durationField38 = chronology31.years();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField32, durationField38, and durationField32", !(durationField32.compareTo(durationField38) == 0) || (Math.signum(durationField32.compareTo(durationField32)) == Math.signum(durationField38.compareTo(durationField32))));
    }

    @Test
    public void test373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test373");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(chronology3);
        org.joda.time.DurationField durationField6 = chronology3.eras();
        org.joda.time.DateTimeField dateTimeField7 = chronology3.hourOfDay();
        org.joda.time.DateTimeField dateTimeField8 = chronology3.clockhourOfHalfday();
        java.lang.Object obj9 = null;
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        int int12 = dateTime11.getSecondOfMinute();
        boolean boolean13 = dateTime11.isEqualNow();
        int int14 = dateTime11.getDayOfYear();
        org.joda.time.DateTime dateTime16 = dateTime11.plusDays((int) '#');
        org.joda.time.DateTime.Property property17 = dateTime11.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone18 = null;
        org.joda.time.LocalTime localTime19 = new org.joda.time.LocalTime(dateTimeZone18);
        org.joda.time.LocalTime localTime21 = localTime19.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology22 = localTime21.getChronology();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        int int25 = dateTime24.getYearOfCentury();
        int int26 = dateTime24.getWeekyear();
        org.joda.time.DateTime dateTime27 = dateTime24.withEarlierOffsetAtOverlap();
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.MutableDateTime mutableDateTime29 = dateTime27.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.UTC;
        boolean boolean31 = dateTimeZone30.isFixed();
        mutableDateTime29.setZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime33 = localTime21.toDateTimeToday(dateTimeZone30);
        long long35 = dateTimeZone30.nextTransition((long) 161);
        org.joda.time.LocalTime localTime36 = new org.joda.time.LocalTime(dateTimeZone30);
        org.joda.time.DateTime dateTime37 = dateTime11.withZoneRetainFields(dateTimeZone30);
        org.joda.time.DateTime dateTime38 = new org.joda.time.DateTime(obj9, dateTimeZone30);
        org.joda.time.Chronology chronology39 = chronology3.withZone(dateTimeZone30);
        org.joda.time.DurationField durationField40 = chronology3.hours();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField4, durationField40, and durationField4", !(durationField4.compareTo(durationField40) == 0) || (Math.signum(durationField4.compareTo(durationField4)) == Math.signum(durationField40.compareTo(durationField4))));
    }

    @Test
    public void test374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test374");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period4 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration3);
        org.joda.time.LocalDate localDate5 = dateTime1.toLocalDate();
        org.joda.time.LocalDate.Property property6 = localDate5.dayOfMonth();
        java.util.Date date7 = localDate5.toDate();
        org.joda.time.LocalDate.Property property8 = localDate5.dayOfYear();
        org.joda.time.LocalDate localDate10 = property8.addWrapFieldToCopy(0);
        org.joda.time.LocalDate localDate11 = property8.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime12 = localDate11.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate.Property property13 = localDate11.dayOfWeek();
        org.joda.time.LocalDate.Property property14 = localDate11.weekyear();
        org.joda.time.LocalDate.Property property15 = localDate11.yearOfCentury();
        org.joda.time.LocalDate localDate16 = property15.getLocalDate();
        org.joda.time.LocalDate localDate18 = property15.addWrapFieldToCopy(62317);
        org.joda.time.Period period21 = new org.joda.time.Period(1645514191495L, (long) 62181);
        org.joda.time.LocalDate localDate23 = localDate18.withPeriodAdded((org.joda.time.ReadablePeriod) period21, 892);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        mutableDateTime24.add((long) 'a');
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str31 = duration30.toString();
        boolean boolean32 = duration28.isShorterThan((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Hours hours33 = duration28.toStandardHours();
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration28, 20);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime24.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime37 = property36.roundFloor();
        java.lang.Object obj38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(obj38);
        boolean boolean40 = dateTime39.isEqualNow();
        long long41 = dateTime39.getMillis();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        org.joda.time.DateTime dateTime52 = dateTime50.plusMinutes(15);
        org.joda.time.DateTime dateTime53 = localDateTime46.toDateTime((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime55 = localDateTime46.toDateTime(dateTimeZone54);
        java.lang.String str57 = dateTimeZone54.getName((-9571L));
        org.joda.time.DateTime dateTime58 = dateTime39.withZone(dateTimeZone54);
        java.lang.String str60 = dateTimeZone54.getName(1181780L);
        org.joda.time.DateTime dateTime61 = new org.joda.time.DateTime(dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime62 = mutableDateTime37.toMutableDateTime(dateTimeZone54);
        org.joda.time.Interval interval63 = localDate23.toInterval(dateTimeZone54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime58", (dateTime1.compareTo(dateTime58) == 0) == dateTime1.equals(dateTime58));
    }

    @Test
    public void test375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test375");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add((long) (byte) 10);
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime11 = dateTime9.withZoneRetainFields(dateTimeZone10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDate12.toDateTimeAtCurrentTime(dateTimeZone14);
        int int17 = dateTime11.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime11.withYear(5);
        int int20 = dateTime19.getHourOfDay();
        org.joda.time.DateTime dateTime22 = dateTime19.plusDays(26150565);
        boolean boolean23 = mutableDateTime7.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime.Property property24 = dateTime19.yearOfCentury();
        int int25 = dateTime19.getDayOfWeek();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        int int28 = dateTime27.getYearOfCentury();
        int int29 = dateTime27.getWeekyear();
        org.joda.time.DateTime dateTime30 = dateTime27.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property31 = dateTime27.yearOfEra();
        org.joda.time.DateTimeField dateTimeField32 = property31.getField();
        org.joda.time.DateTime dateTime33 = property31.getDateTime();
        boolean boolean34 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime33);
        java.lang.Object obj35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(obj35);
        boolean boolean38 = dateTime36.isBefore((long) 7);
        java.lang.String str39 = dateTime36.toString();
        org.joda.time.DateTime dateTime41 = dateTime36.minus((long) 7);
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.DateTime dateTime46 = dateTime36.toDateTime(chronology45);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology45);
        org.joda.time.DateTimeField dateTimeField48 = chronology45.dayOfWeek();
        org.joda.time.DateTime dateTime49 = dateTime19.toDateTime(chronology45);
        org.joda.time.Chronology chronology50 = chronology45.withUTC();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and instant42", (dateTime27.compareTo(instant42) == 0) == dateTime27.equals(instant42));
    }

    @Test
    public void test376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test376");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime4.plus(0L);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.DateTime.Property property10 = dateTime8.weekOfWeekyear();
        org.joda.time.DateTime dateTime11 = property10.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property12 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime dateTime14 = property12.addToCopy((long) 311);
        org.joda.time.DateTime dateTime15 = property12.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(15);
        org.joda.time.Chronology chronology20 = dateTime17.getChronology();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        org.joda.time.LocalTime localTime26 = org.joda.time.LocalTime.now(chronology24);
        org.joda.time.DurationField durationField27 = chronology24.eras();
        org.joda.time.DateTimeField dateTimeField28 = chronology24.hourOfDay();
        org.joda.time.DateTime dateTime29 = dateTime17.withChronology(chronology24);
        org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime32 = property31.getMutableDateTime();
        boolean boolean33 = dateTime29.isBefore((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        long long42 = chronology37.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField43 = chronology37.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField44 = chronology37.minuteOfDay();
        mutableDateTime32.setChronology(chronology37);
        mutableDateTime32.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant48 = null;
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.PeriodType periodType50 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(readableInstant48, readableInstant49, periodType50);
        mutablePeriod51.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod54 = mutablePeriod51.toMutablePeriod();
        mutableDateTime32.add((org.joda.time.ReadablePeriod) mutablePeriod54, 1439);
        mutableDateTime32.setSecondOfDay(100);
        int int59 = mutableDateTime32.getYear();
        org.joda.time.MutableDateTime.Property property60 = mutableDateTime32.millisOfSecond();
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime32.dayOfMonth();
        boolean boolean62 = dateTime15.isAfter((org.joda.time.ReadableInstant) mutableDateTime32);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and instant9", (dateTime4.compareTo(instant9) == 0) == dateTime4.equals(instant9));
    }

    @Test
    public void test377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test377");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        int int18 = dateTime17.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = null;
        java.lang.String str20 = dateTime17.toString(dateTimeFormatter19);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime17);
        mutableDateTime15.addDays(22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (short) 100, chronology25);
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.weeks();
        java.lang.String str28 = durationFieldType27.getName();
        boolean boolean29 = localTime26.isSupported(durationFieldType27);
        mutableDateTime15.add(durationFieldType27, 3);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime15.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod35.clear();
        org.joda.time.Duration duration38 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period39 = duration38.toPeriod();
        org.joda.time.Duration duration42 = duration38.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(chronology43);
        org.joda.time.DateTime dateTime46 = dateTime44.plusMinutes(15);
        org.joda.time.Interval interval47 = duration42.toIntervalTo((org.joda.time.ReadableInstant) dateTime46);
        mutablePeriod35.setPeriod((org.joda.time.ReadableInterval) interval47);
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(readableInstant49, readableInstant50, periodType51);
        org.joda.time.DurationFieldType durationFieldType54 = periodType51.getFieldType((int) (short) 0);
        int int55 = mutablePeriod35.get(durationFieldType54);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime58 = org.joda.time.MutableDateTime.now();
        mutableDateTime58.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime58.copy();
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime58.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration57, (org.joda.time.ReadableInstant) mutableDateTime58);
        org.joda.time.Instant instant64 = new org.joda.time.Instant();
        org.joda.time.Instant instant66 = instant64.withMillis(0L);
        org.joda.time.Chronology chronology67 = instant66.getChronology();
        org.joda.time.DurationField durationField68 = chronology67.eras();
        org.joda.time.LocalTime localTime69 = org.joda.time.LocalTime.now(chronology67);
        org.joda.time.DurationField durationField70 = chronology67.eras();
        mutablePeriod35.setPeriod((org.joda.time.ReadableDuration) duration57, chronology67);
        org.joda.time.Hours hours72 = duration57.toStandardHours();
        mutableDateTime15.add((org.joda.time.ReadableDuration) duration57);
        long long74 = mutableDateTime15.getMillis();
        mutableDateTime15.add((long) 26196);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant64", (dateTime17.compareTo(instant64) == 0) == dateTime17.equals(instant64));
    }

    @Test
    public void test378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test378");
        org.joda.time.LocalDateTime localDateTime0 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime2 = localDateTime0.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property3 = localDateTime0.hourOfDay();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime0.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str7 = dateTimeFieldType6.getName();
        int int8 = localDateTime0.indexOf(dateTimeFieldType6);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime0.minusSeconds((int) (short) 0);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getYearOfCentury();
        int int14 = dateTime12.getWeekyear();
        org.joda.time.DateTime dateTime16 = dateTime12.plus((long) 15);
        org.joda.time.DateTime.Property property17 = dateTime12.year();
        org.joda.time.DateTime dateTime18 = property17.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property19 = dateTime18.millisOfSecond();
        org.joda.time.DateTime dateTime20 = localDateTime10.toDateTime((org.joda.time.ReadableInstant) dateTime18);
        org.joda.time.DateTime dateTime22 = dateTime18.minusMinutes(55);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant32 = instant25.plus((org.joda.time.ReadableDuration) duration31);
        long long33 = instant32.getMillis();
        org.joda.time.Chronology chronology34 = instant32.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.months();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(chronology34);
        org.joda.time.DateTimeField dateTimeField37 = chronology34.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = dateTimeField37.getType();
        boolean boolean39 = dateTime18.isSupported(dateTimeFieldType38);
        int int40 = dateTime18.getYear();
        org.joda.time.DateTime.Property property41 = dateTime18.centuryOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant23", (dateTime12.compareTo(instant23) == 0) == dateTime12.equals(instant23));
    }

    @Test
    public void test379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test379");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.year();
        mutableDateTime6.addWeeks(2121);
        mutableDateTime6.addMonths(26407425);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration19 = duration15.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration19);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration27 = duration24.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean28 = duration22.isLongerThan((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Minutes minutes29 = duration22.toStandardMinutes();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableDuration) duration22);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.months();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime36, periodType37);
        org.joda.time.Period period39 = period38.toPeriod();
        int int40 = period39.getWeeks();
        org.joda.time.DateTime dateTime41 = dateTime13.plus((org.joda.time.ReadablePeriod) period39);
        boolean boolean42 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) dateTime13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant33 and dateTime34", (instant33.compareTo(dateTime34) == 0) == instant33.equals(dateTime34));
    }

    @Test
    public void test380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test380");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.Instant instant2 = instant0.toInstant();
        org.joda.time.MutableDateTime mutableDateTime3 = instant0.toMutableDateTime();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime5 = instant4.toDateTime();
        org.joda.time.Instant instant6 = instant4.toInstant();
        long long7 = instant6.getMillis();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        int int10 = dateTime9.getSecondOfMinute();
        boolean boolean11 = dateTime9.isEqualNow();
        int int12 = dateTime9.getDayOfYear();
        org.joda.time.DateTime dateTime14 = dateTime9.plusDays((int) '#');
        boolean boolean15 = instant6.isBefore((org.joda.time.ReadableInstant) dateTime9);
        boolean boolean16 = instant0.isAfter((org.joda.time.ReadableInstant) dateTime9);
        org.joda.time.LocalDate localDate17 = dateTime9.toLocalDate();
        org.joda.time.LocalDate localDate19 = localDate17.plusDays(9);
        org.joda.time.Chronology chronology20 = localDate19.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test381");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillisOfSecond((int) '4');
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        mutablePeriod35.addDays((int) '4');
        org.joda.time.MutablePeriod mutablePeriod38 = mutablePeriod35.toMutablePeriod();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) mutablePeriod38, 1439);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.ReadableInstant readableInstant42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period(readableDuration41, readableInstant42);
        org.joda.time.Period period45 = period43.withDays((int) (byte) 1);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours48 = duration47.toStandardHours();
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.DateTime dateTime50 = new org.joda.time.DateTime(chronology49);
        int int51 = dateTime50.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration47, (org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.Duration duration53 = period43.toDurationFrom((org.joda.time.ReadableInstant) dateTime50);
        int int54 = period43.getDays();
        mutableDateTime16.add((org.joda.time.ReadablePeriod) period43);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime16.dayOfMonth();
        java.lang.Object obj57 = mutableDateTime16.clone();
        mutableDateTime16.addMillis(26150803);
        org.joda.time.MutableDateTime mutableDateTime60 = mutableDateTime16.copy();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime(chronology61);
        int int63 = dateTime62.getYearOfCentury();
        int int64 = dateTime62.getWeekyear();
        org.joda.time.DateTime dateTime66 = dateTime62.plus((long) 15);
        org.joda.time.DateTime.Property property67 = dateTime62.year();
        org.joda.time.DateTime dateTime68 = property67.roundHalfFloorCopy();
        org.joda.time.DurationField durationField69 = property67.getDurationField();
        org.joda.time.DateTime dateTime70 = property67.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime72 = property67.addToCopy(14400);
        boolean boolean73 = mutableDateTime16.isAfter((org.joda.time.ReadableInstant) dateTime72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField69", Math.signum(durationField9.compareTo(durationField69)) == -Math.signum(durationField69.compareTo(durationField9)));
    }

    @Test
    public void test382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test382");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.months();
        org.joda.time.Period period7 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableInstant) dateTime5, periodType6);
        org.joda.time.DateTime.Property property8 = dateTime5.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = property8.getFieldType();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        long long18 = chronology13.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField19 = chronology13.secondOfMinute();
        boolean boolean20 = dateTimeField19.isSupported();
        org.joda.time.LocalDate localDate21 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property22 = localDate21.monthOfYear();
        int int23 = dateTimeField19.getMinimumValue((org.joda.time.ReadablePartial) localDate21);
        org.joda.time.LocalDate localDate25 = localDate21.withYearOfCentury(46);
        boolean boolean26 = property8.equals((java.lang.Object) localDate25);
        org.joda.time.LocalDate.Property property27 = localDate25.year();
        int int28 = property27.getMinimumValue();
        org.joda.time.LocalDate localDate29 = property27.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime33 = dateTime31.withZoneRetainFields(dateTimeZone32);
        org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property35 = localDate34.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDate34.toDateTimeAtCurrentTime(dateTimeZone36);
        int int39 = dateTime33.compareTo((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.DateTime dateTime41 = dateTime38.withDayOfMonth(20);
        org.joda.time.DateTime.Property property42 = dateTime41.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale46 = java.util.Locale.GERMAN;
        java.lang.String str47 = locale46.getDisplayName();
        java.lang.String str48 = dateTimeZone44.getName(100L, locale46);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime(948227L, dateTimeZone44);
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime49.year();
        mutableDateTime49.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant56 = null;
        org.joda.time.ReadableInstant readableInstant57 = null;
        org.joda.time.PeriodType periodType58 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod(readableInstant56, readableInstant57, periodType58);
        org.joda.time.DurationFieldType durationFieldType61 = periodType58.getFieldType((int) (short) 0);
        java.lang.String str62 = periodType58.toString();
        org.joda.time.Instant instant63 = new org.joda.time.Instant();
        org.joda.time.Instant instant65 = instant63.withMillis(0L);
        org.joda.time.Chronology chronology66 = instant65.getChronology();
        org.joda.time.Period period67 = new org.joda.time.Period((long) 53, (long) (-1), periodType58, chronology66);
        org.joda.time.DateTimeField dateTimeField68 = dateTimeFieldType53.getField(chronology66);
        org.joda.time.Chronology chronology69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(chronology69);
        org.joda.time.DateTime dateTime72 = dateTime70.plusMinutes(15);
        org.joda.time.Chronology chronology73 = dateTime70.getChronology();
        java.lang.String str74 = chronology73.toString();
        org.joda.time.DateTimeField dateTimeField75 = dateTimeFieldType53.getField(chronology73);
        org.joda.time.DurationField durationField76 = chronology73.centuries();
        org.joda.time.DateTimeField dateTimeField77 = chronology73.millisOfDay();
        mutableDateTime49.setChronology(chronology73);
        org.joda.time.MutableDateTime mutableDateTime79 = dateTime41.toMutableDateTime(chronology73);
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime81.setSecondOfMinute(53);
        mutableDateTime81.setMillis(966164L);
        mutableDateTime79.setMillis((org.joda.time.ReadableInstant) mutableDateTime81);
        org.joda.time.DateTimeZone dateTimeZone89 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        long long91 = dateTimeZone89.convertUTCToLocal((long) 52);
        org.joda.time.DateTime dateTime92 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime81, dateTimeZone89);
        org.joda.time.DateTime dateTime93 = localDate29.toDateTimeAtMidnight(dateTimeZone89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField76", Math.signum(durationField14.compareTo(durationField76)) == -Math.signum(durationField76.compareTo(durationField14)));
    }

    @Test
    public void test383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test383");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration5 = duration1.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration10 = duration7.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean11 = duration5.isLongerThan((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str17 = duration16.toString();
        org.joda.time.Instant instant18 = instant12.minus((org.joda.time.ReadableDuration) duration16);
        boolean boolean19 = duration5.isEqual((org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        mutableDateTime20.add((long) 'a');
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime20.yearOfCentury();
        mutableDateTime20.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.Period period30 = new org.joda.time.Period(readableDuration28, readableInstant29);
        org.joda.time.PeriodType periodType33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period((long) 100, 1L, periodType33);
        org.joda.time.Period period36 = period34.minusSeconds((-1));
        java.lang.String str37 = period34.toString();
        org.joda.time.Period period38 = period34.toPeriod();
        org.joda.time.PeriodType periodType39 = period34.getPeriodType();
        org.joda.time.Period period40 = period30.normalizedStandard(periodType39);
        org.joda.time.DurationFieldType durationFieldType41 = null;
        int int42 = periodType39.indexOf(durationFieldType41);
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.DurationField durationField47 = chronology46.eras();
        org.joda.time.LocalTime localTime48 = org.joda.time.LocalTime.now(chronology46);
        org.joda.time.DurationField durationField49 = chronology46.eras();
        org.joda.time.DateTimeField dateTimeField50 = chronology46.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType39, chronology46);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime20.toMutableDateTime(chronology46);
        org.joda.time.DateTimeField dateTimeField53 = chronology46.yearOfEra();
        org.joda.time.DateTimeField dateTimeField54 = chronology46.dayOfMonth();
        org.joda.time.LocalTime localTime55 = new org.joda.time.LocalTime(chronology46);
        org.joda.time.Period period56 = duration5.toPeriod(chronology46);
        org.joda.time.DateTimeField dateTimeField57 = chronology46.minuteOfDay();
        org.joda.time.DurationField durationField58 = chronology46.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField47, durationField58, and durationField47", !(durationField47.compareTo(durationField58) == 0) || (Math.signum(durationField47.compareTo(durationField47)) == Math.signum(durationField58.compareTo(durationField47))));
    }

    @Test
    public void test384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test384");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime3 = dateTime1.withZoneRetainFields(dateTimeZone2);
        org.joda.time.LocalDate localDate4 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property5 = localDate4.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDate4.toDateTimeAtCurrentTime(dateTimeZone6);
        int int9 = dateTime3.compareTo((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime dateTime11 = dateTime8.withDayOfMonth(20);
        org.joda.time.DateTime.Property property12 = dateTime11.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale16 = java.util.Locale.GERMAN;
        java.lang.String str17 = locale16.getDisplayName();
        java.lang.String str18 = dateTimeZone14.getName(100L, locale16);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(948227L, dateTimeZone14);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.year();
        mutableDateTime19.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.ReadableInstant readableInstant27 = null;
        org.joda.time.PeriodType periodType28 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod29 = new org.joda.time.MutablePeriod(readableInstant26, readableInstant27, periodType28);
        org.joda.time.DurationFieldType durationFieldType31 = periodType28.getFieldType((int) (short) 0);
        java.lang.String str32 = periodType28.toString();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.Period period37 = new org.joda.time.Period((long) 53, (long) (-1), periodType28, chronology36);
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType23.getField(chronology36);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(15);
        org.joda.time.Chronology chronology43 = dateTime40.getChronology();
        java.lang.String str44 = chronology43.toString();
        org.joda.time.DateTimeField dateTimeField45 = dateTimeFieldType23.getField(chronology43);
        org.joda.time.DurationField durationField46 = chronology43.centuries();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.millisOfDay();
        mutableDateTime19.setChronology(chronology43);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime11.toMutableDateTime(chronology43);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime51.setSecondOfMinute(53);
        mutableDateTime51.setMillis(966164L);
        mutableDateTime49.setMillis((org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        long long61 = dateTimeZone59.convertUTCToLocal((long) 52);
        org.joda.time.DateTime dateTime62 = new org.joda.time.DateTime((java.lang.Object) mutableDateTime51, dateTimeZone59);
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(dateTimeZone59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime49 and dateTime62", (mutableDateTime49.compareTo(dateTime62) == 0) == mutableDateTime49.equals(dateTime62));
    }

    @Test
    public void test385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test385");
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(50, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime4 = org.joda.time.LocalDateTime.now(dateTimeZone3);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime(1645514174548L, dateTimeZone3);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime(chronology8);
        org.joda.time.DateTime dateTime11 = dateTime9.plusMinutes(15);
        org.joda.time.Chronology chronology12 = dateTime9.getChronology();
        java.lang.String str13 = chronology12.toString();
        org.joda.time.DurationField durationField14 = chronology12.halfdays();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusYears((int) (short) 100);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration29 = duration26.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration30 = duration23.minus((org.joda.time.ReadableDuration) duration29);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.plus((org.joda.time.ReadableDuration) duration23);
        long long33 = chronology12.set((org.joda.time.ReadablePartial) localDateTime31, 950105L);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(86400L, chronology12);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime41 = property40.roundHalfFloorCopy();
        java.util.Locale locale42 = java.util.Locale.GERMAN;
        java.lang.String str43 = locale42.getDisplayName();
        java.lang.String str44 = locale42.getISO3Language();
        java.lang.String str45 = locale42.getISO3Country();
        java.lang.String str46 = property40.getAsShortText(locale42);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(0L, chronology12, locale42, (java.lang.Integer) 26175904);
        org.joda.time.DurationField durationField49 = chronology12.months();
        org.joda.time.DateTime dateTime50 = mutableDateTime5.toDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField51 = chronology12.minuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and dateTime50", (mutableDateTime5.compareTo(dateTime50) == 0) == mutableDateTime5.equals(dateTime50));
    }

    @Test
    public void test386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test386");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        int int20 = mutableDateTime16.getYearOfEra();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardHours((long) 36946953);
        mutableDateTime16.add((org.joda.time.ReadableDuration) duration22);
        org.joda.time.Hours hours24 = duration22.toStandardHours();
        java.lang.String str25 = duration22.toString();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant28, readableInstant29, periodType30);
        org.joda.time.DurationFieldType durationFieldType33 = periodType30.getFieldType((int) (short) 0);
        java.lang.String str34 = periodType30.toString();
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 53, (long) (-1), periodType30, chronology38);
        org.joda.time.LocalDate localDate40 = org.joda.time.LocalDate.now(chronology38);
        java.lang.String str41 = chronology38.toString();
        org.joda.time.DurationField durationField42 = chronology38.hours();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.halfdayOfDay();
        org.joda.time.Period period44 = duration22.toPeriod(chronology38);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField42", Math.signum(durationField9.compareTo(durationField42)) == -Math.signum(durationField42.compareTo(durationField9)));
    }

    @Test
    public void test387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test387");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod4.clear();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration11 = duration7.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime13.plusMinutes(15);
        org.joda.time.Interval interval16 = duration11.toIntervalTo((org.joda.time.ReadableInstant) dateTime15);
        mutablePeriod4.setPeriod((org.joda.time.ReadableInterval) interval16);
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod21 = new org.joda.time.MutablePeriod(readableInstant18, readableInstant19, periodType20);
        org.joda.time.DurationFieldType durationFieldType23 = periodType20.getFieldType((int) (short) 0);
        int int24 = mutablePeriod4.get(durationFieldType23);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        mutableDateTime27.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime27.copy();
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime27.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration26, (org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.eras();
        mutablePeriod4.setPeriod((org.joda.time.ReadableDuration) duration26, chronology36);
        org.joda.time.DateTimeField dateTimeField41 = chronology36.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod(555370422L, 1645514161062L, chronology36);
        org.joda.time.DurationFieldType durationFieldType43 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod42.set(durationFieldType43, 26175498);
        mutablePeriod42.addDays(21);
        org.joda.time.Instant instant51 = new org.joda.time.Instant();
        org.joda.time.Instant instant53 = instant51.withMillis(0L);
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period56 = duration55.toPeriod();
        org.joda.time.Duration duration59 = duration55.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant60 = instant53.plus((org.joda.time.ReadableDuration) duration59);
        long long61 = instant60.getMillis();
        org.joda.time.Chronology chronology62 = instant60.getChronology();
        org.joda.time.DurationField durationField63 = chronology62.months();
        org.joda.time.Period period64 = new org.joda.time.Period((-205878993L), chronology62);
        org.joda.time.DateTimeField dateTimeField65 = chronology62.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone66 = chronology62.getZone();
        mutablePeriod42.setPeriod(1645514421052L, 1040955L, chronology62);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField37 and durationField63", Math.signum(durationField37.compareTo(durationField63)) == -Math.signum(durationField63.compareTo(durationField37)));
    }

    @Test
    public void test388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test388");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.withMaximumValue();
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate.Property property5 = localDate3.dayOfMonth();
        org.joda.time.LocalDate localDate7 = localDate3.withEra(0);
        org.joda.time.LocalDate localDate9 = localDate3.withCenturyOfEra(36);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.Instant instant12 = instant10.toInstant();
        org.joda.time.MutableDateTime mutableDateTime13 = instant10.toMutableDateTime();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = instant14.toInstant();
        long long17 = instant16.getMillis();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime(chronology18);
        int int20 = dateTime19.getSecondOfMinute();
        boolean boolean21 = dateTime19.isEqualNow();
        int int22 = dateTime19.getDayOfYear();
        org.joda.time.DateTime dateTime24 = dateTime19.plusDays((int) '#');
        boolean boolean25 = instant16.isBefore((org.joda.time.ReadableInstant) dateTime19);
        boolean boolean26 = instant10.isAfter((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.DateTime dateTime27 = localDate3.toDateTime((org.joda.time.ReadableInstant) instant10);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.months();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime33, periodType34);
        org.joda.time.Period period36 = period35.toPeriod();
        org.joda.time.LocalDate localDate37 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property38 = localDate37.monthOfYear();
        org.joda.time.DateTimeField dateTimeField39 = property38.getField();
        org.joda.time.LocalDate localDate40 = property38.roundCeilingCopy();
        org.joda.time.LocalDate localDate42 = localDate40.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate44 = localDate40.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate46 = localDate44.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        mutableDateTime47.add((long) 'a');
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime47.yearOfCentury();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period53 = duration52.toPeriod();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration58 = duration55.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration59 = duration52.minus((org.joda.time.ReadableDuration) duration58);
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration52);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime47.centuryOfEra();
        mutableDateTime47.addHours((int) (byte) 10);
        int int64 = mutableDateTime47.getSecondOfDay();
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property66 = localDate65.monthOfYear();
        org.joda.time.LocalDate.Property property67 = localDate65.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant68 = null;
        org.joda.time.ReadableInstant readableInstant69 = null;
        org.joda.time.PeriodType periodType70 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod71 = new org.joda.time.MutablePeriod(readableInstant68, readableInstant69, periodType70);
        org.joda.time.DurationFieldType durationFieldType73 = periodType70.getFieldType((int) (short) 0);
        boolean boolean74 = localDate65.isSupported(durationFieldType73);
        mutableDateTime47.add(durationFieldType73, (-292275054));
        org.joda.time.LocalDate localDate78 = localDate44.withFieldAdded(durationFieldType73, 53);
        int int79 = period35.get(durationFieldType73);
        org.joda.time.LocalDate localDate81 = localDate3.withFieldAdded(durationFieldType73, 22);
        org.joda.time.LocalDate.Property property82 = localDate3.weekOfWeekyear();
        org.joda.time.LocalDate localDate84 = localDate3.minusWeeks(26420625);
        org.joda.time.LocalDate.Property property85 = localDate3.year();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime11", (instant10.compareTo(dateTime11) == 0) == instant10.equals(dateTime11));
    }

    @Test
    public void test389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test389");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration6 = duration3.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now();
        mutableDateTime7.add((long) 'a');
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.yearOfCentury();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration18 = duration15.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration19 = duration12.minus((org.joda.time.ReadableDuration) duration18);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration12);
        boolean boolean21 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration12);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(15);
        org.joda.time.Chronology chronology28 = dateTime25.getChronology();
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.eras();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.now(chronology32);
        org.joda.time.DurationField durationField35 = chronology32.eras();
        org.joda.time.DateTimeField dateTimeField36 = chronology32.hourOfDay();
        org.joda.time.DateTime dateTime37 = dateTime25.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField38 = chronology32.dayOfMonth();
        org.joda.time.Period period39 = new org.joda.time.Period(950707L, chronology32);
        org.joda.time.DateTimeField dateTimeField40 = chronology32.secondOfMinute();
        org.joda.time.Period period41 = duration12.toPeriod(periodType22, chronology32);
        org.joda.time.Period period42 = new org.joda.time.Period(15278138534255L, 26565879L, periodType22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime25 and instant29", (dateTime25.compareTo(instant29) == 0) == dateTime25.equals(instant29));
    }

    @Test
    public void test390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test390");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean3 = localDate0.isSupported(dateTimeFieldType2);
        org.joda.time.Chronology chronology4 = localDate0.getChronology();
        int int5 = localDate0.getDayOfMonth();
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes(1L);
        long long8 = duration7.getStandardMinutes();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.Chronology chronology15 = instant14.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.eras();
        long long20 = chronology15.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter11.withChronology(chronology15);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter11.withZoneUTC();
        boolean boolean23 = dateTimeFormatter11.isPrinter();
        org.joda.time.Chronology chronology24 = dateTimeFormatter11.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter11.withOffsetParsed();
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration35 = duration32.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean36 = duration30.isLongerThan((org.joda.time.ReadableDuration) duration35);
        org.joda.time.Duration duration37 = duration27.minus((org.joda.time.ReadableDuration) duration30);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getYearOfCentury();
        int int41 = dateTime39.getWeekyear();
        org.joda.time.DateTime dateTime43 = dateTime39.plus((long) 15);
        org.joda.time.DateTime.Property property44 = dateTime39.year();
        org.joda.time.DateTime dateTime45 = property44.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property46 = dateTime45.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime47 = dateTime45.toMutableDateTime();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime51 = dateTime49.withZoneRetainFields(dateTimeZone50);
        org.joda.time.LocalDate localDate52 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property53 = localDate52.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone55 = dateTimeZone54.toTimeZone();
        org.joda.time.DateTime dateTime56 = localDate52.toDateTimeAtCurrentTime(dateTimeZone54);
        int int57 = dateTime51.compareTo((org.joda.time.ReadableInstant) dateTime56);
        int int58 = dateTime56.getCenturyOfEra();
        org.joda.time.DateTime dateTime60 = dateTime56.withWeekyear(44);
        org.joda.time.ReadableInstant readableInstant63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.PeriodType periodType65 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod66 = new org.joda.time.MutablePeriod(readableInstant63, readableInstant64, periodType65);
        org.joda.time.DurationFieldType durationFieldType68 = periodType65.getFieldType((int) (short) 0);
        java.lang.String str69 = periodType65.toString();
        org.joda.time.Instant instant70 = new org.joda.time.Instant();
        org.joda.time.Instant instant72 = instant70.withMillis(0L);
        org.joda.time.Chronology chronology73 = instant72.getChronology();
        org.joda.time.Period period74 = new org.joda.time.Period((long) 53, (long) (-1), periodType65, chronology73);
        org.joda.time.PeriodType periodType75 = periodType65.withMonthsRemoved();
        org.joda.time.Period period76 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableInstant) dateTime56, periodType65);
        org.joda.time.Period period77 = period76.toPeriod();
        org.joda.time.Period period79 = period76.minusHours(26184);
        org.joda.time.PeriodType periodType80 = period79.getPeriodType();
        java.lang.Object obj81 = null;
        org.joda.time.DateTime dateTime82 = new org.joda.time.DateTime(obj81);
        boolean boolean84 = dateTime82.isBefore((long) 7);
        java.lang.String str85 = dateTime82.toString();
        org.joda.time.DateTime dateTime87 = dateTime82.minus((long) 7);
        org.joda.time.Instant instant88 = new org.joda.time.Instant();
        org.joda.time.Instant instant90 = instant88.withMillis(0L);
        org.joda.time.Chronology chronology91 = instant90.getChronology();
        org.joda.time.DateTime dateTime92 = dateTime82.toDateTime(chronology91);
        org.joda.time.Period period93 = duration37.toPeriod(periodType80, chronology91);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = dateTimeFormatter11.withChronology(chronology91);
        org.joda.time.Period period95 = duration7.toPeriod(chronology91);
        org.joda.time.LocalDate localDate96 = new org.joda.time.LocalDate((java.lang.Object) localDate0, chronology91);
        org.joda.time.DateTimeField dateTimeField97 = chronology91.weekOfWeekyear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime39", (instant12.compareTo(dateTime39) == 0) == instant12.equals(dateTime39));
    }

    @Test
    public void test391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test391");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime2.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfMonth();
        org.joda.time.Period period16 = new org.joda.time.Period(950707L, chronology9);
        org.joda.time.Period period18 = period16.withWeeks(1969);
        java.lang.String str19 = period18.toString();
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.months();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime25, periodType26);
        org.joda.time.DateTime.Property property28 = dateTime25.minuteOfDay();
        org.joda.time.DateTime dateTime29 = property28.roundHalfEvenCopy();
        org.joda.time.Duration duration30 = period18.toDurationTo((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Period period32 = period18.minusYears(1979);
        org.joda.time.Period period34 = org.joda.time.Period.seconds(12);
        org.joda.time.Duration duration36 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime37 = org.joda.time.MutableDateTime.now();
        mutableDateTime37.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime37.copy();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime37.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod42 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration36, (org.joda.time.ReadableInstant) mutableDateTime37);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration43, readableInstant44);
        org.joda.time.Period period47 = period45.withDays((int) (byte) 1);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) (short) 100, chronology49);
        org.joda.time.DurationFieldType durationFieldType51 = org.joda.time.DurationFieldType.millis();
        java.lang.String str52 = durationFieldType51.getName();
        boolean boolean53 = localTime50.isSupported(durationFieldType51);
        int int54 = period45.get(durationFieldType51);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMinutes(15);
        org.joda.time.Chronology chronology60 = dateTime57.getChronology();
        org.joda.time.DurationField durationField61 = chronology60.hours();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(1440L, chronology60);
        boolean boolean63 = durationFieldType51.isSupported(chronology60);
        java.lang.String str64 = durationFieldType51.getName();
        mutablePeriod42.set(durationFieldType51, (-1));
        boolean boolean67 = period34.isSupported(durationFieldType51);
        org.joda.time.Period period69 = period32.withField(durationFieldType51, 720);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField10 and durationField61", Math.signum(durationField10.compareTo(durationField61)) == -Math.signum(durationField61.compareTo(durationField10)));
    }

    @Test
    public void test392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test392");
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        mutableDateTime3.add((long) 'a');
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.yearOfCentury();
        mutableDateTime3.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration11, readableInstant12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 1L, periodType16);
        org.joda.time.Period period19 = period17.minusSeconds((-1));
        java.lang.String str20 = period17.toString();
        org.joda.time.Period period21 = period17.toPeriod();
        org.joda.time.PeriodType periodType22 = period17.getPeriodType();
        org.joda.time.Period period23 = period13.normalizedStandard(periodType22);
        org.joda.time.DurationFieldType durationFieldType24 = null;
        int int25 = periodType22.indexOf(durationFieldType24);
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.eras();
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.now(chronology29);
        org.joda.time.DurationField durationField32 = chronology29.eras();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType22, chronology29);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime3.toMutableDateTime(chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime((long) (short) 0, chronology29);
        org.joda.time.DateTime.Property property38 = dateTime37.dayOfMonth();
        org.joda.time.DateTime dateTime40 = property38.addWrapFieldToCopy((int) 'a');
        org.joda.time.Instant instant41 = dateTime40.toInstant();
        org.joda.time.DateTime dateTime42 = dateTime40.toDateTimeISO();
        int int43 = dateTime40.getWeekOfWeekyear();
        org.joda.time.PeriodType periodType44 = org.joda.time.PeriodType.yearDay();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(readableDuration1, (org.joda.time.ReadableInstant) dateTime40, periodType44);
        org.joda.time.DateTimeZone dateTimeZone52 = null;
        org.joda.time.LocalTime localTime53 = new org.joda.time.LocalTime(dateTimeZone52);
        org.joda.time.LocalTime localTime55 = localTime53.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology56 = localTime55.getChronology();
        org.joda.time.MutablePeriod mutablePeriod57 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology56);
        org.joda.time.DateTimeField dateTimeField58 = chronology56.millisOfDay();
        org.joda.time.DateTimeField dateTimeField59 = chronology56.minuteOfHour();
        org.joda.time.DurationField durationField60 = chronology56.weekyears();
        org.joda.time.DateTimeField dateTimeField61 = chronology56.yearOfCentury();
        org.joda.time.MutablePeriod mutablePeriod62 = new org.joda.time.MutablePeriod(959393L, 29923154006400000L, chronology56);
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod((long) 62323, (-826273409031807808L), chronology56);
        org.joda.time.Period period64 = new org.joda.time.Period(62265L, periodType44, chronology56);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField30 and durationField60", Math.signum(durationField30.compareTo(durationField60)) == -Math.signum(durationField60.compareTo(durationField30)));
    }

    @Test
    public void test393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test393");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime8 = localDate3.toDateTimeAtMidnight(dateTimeZone7);
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.Chronology chronology12 = instant11.getChronology();
        org.joda.time.DurationField durationField13 = chronology12.eras();
        long long17 = chronology12.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField18 = chronology12.secondOfMinute();
        boolean boolean19 = dateTimeField18.isSupported();
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property21 = localDate20.monthOfYear();
        int int22 = dateTimeField18.getMinimumValue((org.joda.time.ReadablePartial) localDate20);
        org.joda.time.LocalDate localDate24 = localDate20.withYearOfCentury(46);
        org.joda.time.LocalDate.Property property25 = localDate20.dayOfMonth();
        org.joda.time.Chronology chronology26 = localDate20.getChronology();
        org.joda.time.DateTimeZone dateTimeZone27 = chronology26.getZone();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone27);
        org.joda.time.DateTime dateTime29 = dateTime8.toDateTime(dateTimeZone27);
        int int30 = dateTime29.getMinuteOfDay();
        org.joda.time.DateTime.Property property31 = dateTime29.yearOfEra();
        org.joda.time.DateTime dateTime33 = dateTime29.minusDays(47892750);
        org.joda.time.LocalDateTime localDateTime34 = dateTime33.toLocalDateTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime8 and dateTime29", (dateTime8.compareTo(dateTime29) == 0) == dateTime8.equals(dateTime29));
    }

    @Test
    public void test394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test394");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        boolean boolean10 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period13 = duration12.toPeriod();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration20 = duration17.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean21 = duration15.isLongerThan((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration22 = duration12.minus((org.joda.time.ReadableDuration) duration15);
        boolean boolean23 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration22);
        org.joda.time.ReadableDuration readableDuration24 = null;
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.Period period26 = new org.joda.time.Period(readableDuration24, readableInstant25);
        org.joda.time.Period period28 = period26.withDays((int) (byte) 1);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours31 = duration30.toStandardHours();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        int int34 = dateTime33.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration30, (org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration36 = period26.toDurationFrom((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.Duration duration38 = duration22.withDurationAdded((org.joda.time.ReadableDuration) duration36, (int) ' ');
        int int39 = duration4.compareTo((org.joda.time.ReadableDuration) duration22);
        boolean boolean40 = duration2.isEqual((org.joda.time.ReadableDuration) duration4);
        org.joda.time.Duration duration41 = duration2.toDuration();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period47 = duration46.toPeriod();
        org.joda.time.Duration duration50 = duration46.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant51 = instant44.plus((org.joda.time.ReadableDuration) duration50);
        long long52 = instant51.getMillis();
        org.joda.time.Chronology chronology53 = instant51.getChronology();
        org.joda.time.Instant instant54 = new org.joda.time.Instant();
        org.joda.time.Instant instant56 = instant54.withMillis(0L);
        org.joda.time.DateTime dateTime57 = instant56.toDateTime();
        org.joda.time.Instant instant58 = new org.joda.time.Instant();
        org.joda.time.Instant instant60 = instant58.withMillis(0L);
        org.joda.time.DateTime dateTime61 = instant60.toDateTime();
        org.joda.time.DateTime dateTime63 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType64 = org.joda.time.PeriodType.months();
        org.joda.time.Period period65 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime61, (org.joda.time.ReadableInstant) dateTime63, periodType64);
        boolean boolean66 = dateTime57.isBefore((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Period period67 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant51, (org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.Duration duration69 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period70 = duration69.toPeriod();
        org.joda.time.Duration duration73 = duration69.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.DateTime dateTime75 = new org.joda.time.DateTime(chronology74);
        org.joda.time.DateTime dateTime77 = dateTime75.plusMinutes(15);
        org.joda.time.Interval interval78 = duration73.toIntervalTo((org.joda.time.ReadableInstant) dateTime77);
        org.joda.time.Instant instant79 = instant51.minus((org.joda.time.ReadableDuration) duration73);
        org.joda.time.Instant instant82 = instant79.withDurationAdded(1645514161062L, (int) (short) -1);
        org.joda.time.Chronology chronology83 = null;
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime(chronology83);
        org.joda.time.DateTime dateTime86 = dateTime84.plusMinutes(15);
        org.joda.time.Chronology chronology87 = dateTime84.getChronology();
        org.joda.time.DurationField durationField88 = chronology87.hours();
        org.joda.time.DurationField durationField89 = chronology87.years();
        org.joda.time.DateTimeField dateTimeField90 = chronology87.dayOfYear();
        org.joda.time.DateTimeField dateTimeField91 = chronology87.halfdayOfDay();
        org.joda.time.DateTime dateTime92 = instant79.toDateTime(chronology87);
        org.joda.time.MutableDateTime mutableDateTime93 = instant79.toMutableDateTime();
        org.joda.time.Period period94 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) instant79);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant42 and dateTime75", (instant42.compareTo(dateTime75) == 0) == instant42.equals(dateTime75));
    }

    @Test
    public void test395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test395");
        org.joda.time.Instant instant1 = new org.joda.time.Instant(26342498L);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        int int11 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks(44);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((-1L), 36946953);
        org.joda.time.PeriodType periodType19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period((long) 100, 1L, periodType19);
        org.joda.time.Period period22 = period20.minusSeconds((-1));
        org.joda.time.Period period24 = period20.withWeeks((int) (byte) 0);
        org.joda.time.Period period26 = period24.withHours(2000);
        org.joda.time.DateTime dateTime27 = dateTime16.minus((org.joda.time.ReadablePeriod) period24);
        int int28 = dateTime27.getYearOfCentury();
        org.joda.time.DateTime dateTime30 = dateTime27.plusDays(62151);
        org.joda.time.MutableDateTime mutableDateTime31 = dateTime27.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime32.copy();
        mutableDateTime32.setDate((long) '#');
        org.joda.time.LocalDate localDate38 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property39 = localDate38.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean41 = localDate38.isSupported(dateTimeFieldType40);
        int int42 = localDate38.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight44 = localDate38.toDateMidnight(dateTimeZone43);
        org.joda.time.DateTime dateTime45 = mutableDateTime32.toDateTime(dateTimeZone43);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone43);
        mutableDateTime31.setZone(dateTimeZone43);
        org.joda.time.MutableDateTime.Property property48 = mutableDateTime31.centuryOfEra();
        boolean boolean49 = instant1.isEqual((org.joda.time.ReadableInstant) mutableDateTime31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime32 and dateTime45", (mutableDateTime32.compareTo(dateTime45) == 0) == mutableDateTime32.equals(dateTime45));
    }

    @Test
    public void test396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test396");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Duration duration4 = duration1.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration16 = duration13.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration17 = duration10.minus((org.joda.time.ReadableDuration) duration16);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration10);
        boolean boolean19 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration10);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.years();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime dateTime25 = dateTime23.plusMinutes(15);
        org.joda.time.Chronology chronology26 = dateTime23.getChronology();
        org.joda.time.Instant instant27 = new org.joda.time.Instant();
        org.joda.time.Instant instant29 = instant27.withMillis(0L);
        org.joda.time.Chronology chronology30 = instant29.getChronology();
        org.joda.time.DurationField durationField31 = chronology30.eras();
        org.joda.time.LocalTime localTime32 = org.joda.time.LocalTime.now(chronology30);
        org.joda.time.DurationField durationField33 = chronology30.eras();
        org.joda.time.DateTimeField dateTimeField34 = chronology30.hourOfDay();
        org.joda.time.DateTime dateTime35 = dateTime23.withChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.dayOfMonth();
        org.joda.time.Period period37 = new org.joda.time.Period(950707L, chronology30);
        org.joda.time.DateTimeField dateTimeField38 = chronology30.secondOfMinute();
        org.joda.time.Period period39 = duration10.toPeriod(periodType20, chronology30);
        org.joda.time.DateTimeField dateTimeField40 = chronology30.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField41 = chronology30.yearOfCentury();
        org.joda.time.DurationField durationField42 = chronology30.weekyears();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField31, durationField42, and durationField31", !(durationField31.compareTo(durationField42) == 0) || (Math.signum(durationField31.compareTo(durationField31)) == Math.signum(durationField42.compareTo(durationField31))));
    }

    @Test
    public void test397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test397");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration17, readableInstant18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period25 = period23.minusSeconds((-1));
        java.lang.String str26 = period23.toString();
        org.joda.time.Period period27 = period23.toPeriod();
        org.joda.time.PeriodType periodType28 = period23.getPeriodType();
        org.joda.time.Period period29 = period19.normalizedStandard(periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = null;
        int int31 = periodType28.indexOf(durationFieldType30);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType28, chronology35);
        org.joda.time.DateTimeField dateTimeField41 = chronology35.hourOfDay();
        org.joda.time.Chronology chronology42 = chronology35.withUTC();
        org.joda.time.DateTime dateTime43 = mutableDateTime0.toDateTime(chronology35);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.DurationField durationField45 = chronology35.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField36, durationField45, and durationField36", !(durationField36.compareTo(durationField45) == 0) || (Math.signum(durationField36.compareTo(durationField36)) == Math.signum(durationField45.compareTo(durationField36))));
    }

    @Test
    public void test398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test398");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property5 = dateTime1.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime7 = property5.roundHalfEvenCopy();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours10 = duration9.toStandardHours();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod14 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime12);
        mutablePeriod14.addSeconds(292278993);
        mutablePeriod14.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime20 = dateTime7.minus((org.joda.time.ReadablePeriod) mutablePeriod14);
        org.joda.time.DateTime dateTime23 = dateTime7.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period26 = duration25.toPeriod();
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean34 = duration28.isLongerThan((org.joda.time.ReadableDuration) duration33);
        org.joda.time.Duration duration35 = duration25.minus((org.joda.time.ReadableDuration) duration28);
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration40 = duration37.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean41 = duration28.equals((java.lang.Object) duration37);
        org.joda.time.Period period42 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableDuration) duration28);
        org.joda.time.PeriodType periodType43 = null;
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.eras();
        org.joda.time.LocalTime localTime49 = org.joda.time.LocalTime.now(chronology47);
        org.joda.time.Period period50 = duration28.toPeriod(periodType43, chronology47);
        org.joda.time.ReadableInstant readableInstant51 = null;
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod(readableInstant51, readableInstant52, periodType53);
        org.joda.time.DurationFieldType durationFieldType56 = periodType53.getFieldType((int) (short) 0);
        org.joda.time.Period period58 = period50.withFieldAdded(durationFieldType56, 20);
        java.lang.Object obj59 = null;
        org.joda.time.DateTime dateTime60 = new org.joda.time.DateTime(obj59);
        boolean boolean62 = dateTime60.isBefore((long) 7);
        java.lang.String str63 = dateTime60.toString();
        org.joda.time.DateTime dateTime65 = dateTime60.minus((long) 7);
        org.joda.time.Instant instant66 = new org.joda.time.Instant();
        org.joda.time.Instant instant68 = instant66.withMillis(0L);
        org.joda.time.Chronology chronology69 = instant68.getChronology();
        org.joda.time.DateTime dateTime70 = dateTime60.toDateTime(chronology69);
        org.joda.time.DurationField durationField71 = chronology69.days();
        long long74 = durationField71.getMillis((long) 50, 1143849662172L);
        org.joda.time.DurationFieldType durationFieldType75 = durationField71.getType();
        boolean boolean76 = period50.isSupported(durationFieldType75);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField48 and durationField71", Math.signum(durationField48.compareTo(durationField71)) == -Math.signum(durationField71.compareTo(durationField48)));
    }

    @Test
    public void test399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test399");
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = duration3.withDurationAdded((long) (short) 100, (int) ' ');
        long long7 = duration6.getMillis();
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.DateTime dateTime11 = instant10.toDateTime();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.months();
        org.joda.time.Period period19 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime15, (org.joda.time.ReadableInstant) dateTime17, periodType18);
        boolean boolean20 = dateTime11.isBefore((org.joda.time.ReadableInstant) dateTime15);
        int int21 = dateTime15.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod27 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration6, (org.joda.time.ReadableInstant) dateTime15, periodType24);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.Chronology chronology32 = dateTime29.getChronology();
        org.joda.time.Instant instant33 = new org.joda.time.Instant();
        org.joda.time.Instant instant35 = instant33.withMillis(0L);
        org.joda.time.Chronology chronology36 = instant35.getChronology();
        org.joda.time.DurationField durationField37 = chronology36.eras();
        org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.now(chronology36);
        org.joda.time.DurationField durationField39 = chronology36.eras();
        org.joda.time.DateTimeField dateTimeField40 = chronology36.hourOfDay();
        org.joda.time.DateTime dateTime41 = dateTime29.withChronology(chronology36);
        org.joda.time.MutableDateTime mutableDateTime42 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime42.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.getMutableDateTime();
        boolean boolean45 = dateTime41.isBefore((org.joda.time.ReadableInstant) mutableDateTime44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        long long54 = chronology49.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField55 = chronology49.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField56 = chronology49.minuteOfDay();
        mutableDateTime44.setChronology(chronology49);
        org.joda.time.DateTime dateTime58 = dateTime15.toDateTime(chronology49);
        org.joda.time.LocalTime localTime59 = new org.joda.time.LocalTime((long) 99, chronology49);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) 62166, chronology49);
        org.joda.time.DurationField durationField61 = chronology49.millis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField37, durationField61, and durationField37", !(durationField37.compareTo(durationField61) == 0) || (Math.signum(durationField37.compareTo(durationField37)) == Math.signum(durationField61.compareTo(durationField37))));
    }

    @Test
    public void test400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test400");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.ReadableInstant readableInstant9 = null;
        org.joda.time.Period period10 = new org.joda.time.Period(readableDuration8, readableInstant9);
        org.joda.time.PeriodType periodType13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period((long) 100, 1L, periodType13);
        org.joda.time.Period period16 = period14.minusSeconds((-1));
        java.lang.String str17 = period14.toString();
        org.joda.time.Period period18 = period14.toPeriod();
        org.joda.time.PeriodType periodType19 = period14.getPeriodType();
        org.joda.time.Period period20 = period10.normalizedStandard(periodType19);
        org.joda.time.DurationFieldType durationFieldType21 = null;
        int int22 = periodType19.indexOf(durationFieldType21);
        org.joda.time.Instant instant23 = new org.joda.time.Instant();
        org.joda.time.Instant instant25 = instant23.withMillis(0L);
        org.joda.time.Chronology chronology26 = instant25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.eras();
        org.joda.time.LocalTime localTime28 = org.joda.time.LocalTime.now(chronology26);
        org.joda.time.DurationField durationField29 = chronology26.eras();
        org.joda.time.DateTimeField dateTimeField30 = chronology26.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType19, chronology26);
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime0.toMutableDateTime(chronology26);
        org.joda.time.DateTimeField dateTimeField33 = chronology26.yearOfEra();
        org.joda.time.Chronology chronology34 = chronology26.withUTC();
        long long38 = chronology26.add((long) 26346587, 1645488050376L, 62234);
        org.joda.time.DurationField durationField39 = chronology26.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField27, durationField39, and durationField27", !(durationField27.compareTo(durationField39) == 0) || (Math.signum(durationField27.compareTo(durationField27)) == Math.signum(durationField39.compareTo(durationField27))));
    }

    @Test
    public void test401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test401");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        long long26 = chronology21.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField27 = chronology21.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.minuteOfDay();
        mutableDateTime16.setChronology(chronology21);
        mutableDateTime16.setMillisOfSecond((int) '4');
        mutableDateTime16.setWeekyear(365);
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.LocalDate localDate35 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property36 = localDate35.monthOfYear();
        org.joda.time.DateTimeField dateTimeField37 = property36.getField();
        org.joda.time.LocalDate localDate38 = property36.roundCeilingCopy();
        org.joda.time.Chronology chronology39 = localDate38.getChronology();
        org.joda.time.DurationField durationField40 = chronology39.months();
        boolean boolean41 = dateTimeFieldType34.isSupported(chronology39);
        org.joda.time.DateTimeField dateTimeField42 = chronology39.dayOfWeek();
        mutableDateTime16.setChronology(chronology39);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField9 and durationField40", Math.signum(durationField9.compareTo(durationField40)) == -Math.signum(durationField40.compareTo(durationField9)));
    }

    @Test
    public void test402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test402");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(chronology16);
        org.joda.time.DateTime dateTime19 = dateTime17.plusMinutes(15);
        org.joda.time.Chronology chronology20 = dateTime17.getChronology();
        java.lang.String str21 = chronology20.toString();
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType0.getField(chronology20);
        org.joda.time.DurationField durationField23 = chronology20.weekyears();
        org.joda.time.DurationField durationField24 = chronology20.years();
        org.joda.time.DateTimeField dateTimeField25 = chronology20.yearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on durationField23 and durationField24", (durationField23.compareTo(durationField24) == 0) == durationField23.equals(durationField24));
    }

    @Test
    public void test403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test403");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17, periodType18);
        org.joda.time.DurationFieldType durationFieldType21 = periodType18.getFieldType((int) (short) 0);
        int int22 = mutablePeriod2.get(durationFieldType21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime25.copy();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration24, chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.minuteOfHour();
        org.joda.time.Chronology chronology42 = chronology34.withUTC();
        org.joda.time.DurationField durationField43 = chronology34.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField35, durationField43, and durationField35", !(durationField35.compareTo(durationField43) == 0) || (Math.signum(durationField35.compareTo(durationField35)) == Math.signum(durationField43.compareTo(durationField35))));
    }

    @Test
    public void test404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test404");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period5 = duration4.toPeriod();
        org.joda.time.Duration duration8 = duration4.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant9 = instant2.plus((org.joda.time.ReadableDuration) duration8);
        long long10 = instant9.getMillis();
        org.joda.time.Chronology chronology11 = instant9.getChronology();
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.Instant instant14 = instant12.withMillis(0L);
        org.joda.time.DateTime dateTime15 = instant14.toDateTime();
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.months();
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime19, (org.joda.time.ReadableInstant) dateTime21, periodType22);
        boolean boolean24 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Period period25 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant9, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period28 = duration27.toPeriod();
        org.joda.time.Duration duration31 = duration27.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime(chronology32);
        org.joda.time.DateTime dateTime35 = dateTime33.plusMinutes(15);
        org.joda.time.Interval interval36 = duration31.toIntervalTo((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.Instant instant37 = instant9.minus((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant39 = instant37.withMillis((-83734L));
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(50, (int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime44 = org.joda.time.LocalDateTime.now(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(1645514174548L, dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime(dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime47 = new org.joda.time.MutableDateTime((java.lang.Object) instant39, dateTimeZone43);
        org.joda.time.MutableDateTime mutableDateTime48 = mutableDateTime47.toMutableDateTime();
        mutableDateTime48.addSeconds(26475607);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant39 and mutableDateTime47", (instant39.compareTo(mutableDateTime47) == 0) == instant39.equals(mutableDateTime47));
    }

    @Test
    public void test405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test405");
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration5 = duration2.withDurationAdded((long) (short) 100, (int) ' ');
        long long6 = duration5.getMillis();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.DateTime dateTime10 = instant9.toDateTime();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.DateTime dateTime14 = instant13.toDateTime();
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType17 = org.joda.time.PeriodType.months();
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime14, (org.joda.time.ReadableInstant) dateTime16, periodType17);
        boolean boolean19 = dateTime10.isBefore((org.joda.time.ReadableInstant) dateTime14);
        int int20 = dateTime14.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        org.joda.time.PeriodType periodType25 = periodType23.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration5, (org.joda.time.ReadableInstant) dateTime14, periodType23);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.hourOfDay();
        org.joda.time.DateTime dateTime40 = dateTime28.withChronology(chronology35);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime41.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime43 = property42.getMutableDateTime();
        boolean boolean44 = dateTime40.isBefore((org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.eras();
        long long53 = chronology48.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField54 = chronology48.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField55 = chronology48.minuteOfDay();
        mutableDateTime43.setChronology(chronology48);
        org.joda.time.DateTime dateTime57 = dateTime14.toDateTime(chronology48);
        org.joda.time.LocalTime localTime58 = new org.joda.time.LocalTime((long) 99, chronology48);
        org.joda.time.DateTimeField dateTimeField59 = chronology48.secondOfDay();
        org.joda.time.DurationField durationField60 = chronology48.days();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField36, durationField60, and durationField36", !(durationField36.compareTo(durationField60) == 0) || (Math.signum(durationField36.compareTo(durationField36)) == Math.signum(durationField60.compareTo(durationField36))));
    }

    @Test
    public void test406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test406");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = property14.roundHalfEvenCopy();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours19 = duration18.toStandardHours();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime21);
        mutablePeriod23.addSeconds(292278993);
        mutablePeriod23.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime29 = dateTime16.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTime dateTime32 = dateTime16.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean43 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration44 = duration34.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration49 = duration46.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean50 = duration37.equals((java.lang.Object) duration46);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.eras();
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.now(chronology56);
        org.joda.time.Period period59 = duration37.toPeriod(periodType52, chronology56);
        org.joda.time.DurationFieldType durationFieldType61 = period59.getFieldType(1);
        mutableDateTime8.add(durationFieldType61, 61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime8.millisOfSecond();
        org.joda.time.DateTimeZone dateTimeZone67 = null;
        org.joda.time.LocalTime localTime68 = new org.joda.time.LocalTime(dateTimeZone67);
        org.joda.time.LocalTime localTime70 = localTime68.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology71 = localTime70.getChronology();
        org.joda.time.MutablePeriod mutablePeriod72 = new org.joda.time.MutablePeriod((long) 45, 949680L, chronology71);
        org.joda.time.DateTimeField dateTimeField73 = chronology71.millisOfDay();
        org.joda.time.DateTimeField dateTimeField74 = chronology71.minuteOfHour();
        org.joda.time.DurationField durationField75 = chronology71.weekyears();
        org.joda.time.DateTimeField dateTimeField76 = chronology71.yearOfCentury();
        long long78 = dateTimeField76.roundHalfEven(1645514520277L);
        mutableDateTime8.setRounding(dateTimeField76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField57 and durationField75", Math.signum(durationField57.compareTo(durationField75)) == -Math.signum(durationField75.compareTo(durationField57)));
    }

    @Test
    public void test407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test407");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        int int11 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.withDayOfMonth(20);
        org.joda.time.DateTime.Property property14 = dateTime13.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale18 = java.util.Locale.GERMAN;
        java.lang.String str19 = locale18.getDisplayName();
        java.lang.String str20 = dateTimeZone16.getName(100L, locale18);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(948227L, dateTimeZone16);
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.year();
        mutableDateTime21.addHours(16);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant28 = null;
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.PeriodType periodType30 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod31 = new org.joda.time.MutablePeriod(readableInstant28, readableInstant29, periodType30);
        org.joda.time.DurationFieldType durationFieldType33 = periodType30.getFieldType((int) (short) 0);
        java.lang.String str34 = periodType30.toString();
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.Period period39 = new org.joda.time.Period((long) 53, (long) (-1), periodType30, chronology38);
        org.joda.time.DateTimeField dateTimeField40 = dateTimeFieldType25.getField(chronology38);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        org.joda.time.DateTime dateTime44 = dateTime42.plusMinutes(15);
        org.joda.time.Chronology chronology45 = dateTime42.getChronology();
        java.lang.String str46 = chronology45.toString();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType25.getField(chronology45);
        org.joda.time.DurationField durationField48 = chronology45.centuries();
        org.joda.time.DateTimeField dateTimeField49 = chronology45.millisOfDay();
        mutableDateTime21.setChronology(chronology45);
        org.joda.time.MutableDateTime mutableDateTime51 = dateTime13.toMutableDateTime(chronology45);
        org.joda.time.DurationField durationField52 = chronology45.months();
        org.joda.time.Period period53 = new org.joda.time.Period((long) 274, 1645514162999L, chronology45);
        org.joda.time.DurationField durationField54 = chronology45.eras();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField54, durationField48, and durationField52", !(durationField54.compareTo(durationField48) == 0) || (Math.signum(durationField54.compareTo(durationField52)) == Math.signum(durationField48.compareTo(durationField52))));
    }

    @Test
    public void test408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test408");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime4.plus(0L);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTime(dateTimeZone11);
        org.joda.time.Duration duration14 = new org.joda.time.Duration(0L);
        org.joda.time.Duration duration16 = duration14.minus((long) 40);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime12.minuteOfDay();
        org.joda.time.LocalDate localDate19 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property20 = localDate19.dayOfYear();
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.Period period26 = period24.minusSeconds((-1));
        java.lang.String str27 = period24.toString();
        org.joda.time.LocalDate localDate29 = localDate19.withPeriodAdded((org.joda.time.ReadablePeriod) period24, 3);
        int int30 = localDate19.getYear();
        org.joda.time.LocalDate.Property property31 = localDate19.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTimeZone.setDefault(dateTimeZone32);
        org.joda.time.DateTime dateTime34 = localDate19.toDateTimeAtCurrentTime(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now(dateTimeZone32);
        mutableDateTime12.setMillis((org.joda.time.ReadableInstant) mutableDateTime35);
        int int37 = mutableDateTime35.getMonthOfYear();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test409");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime15 = property14.roundFloor();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime17.copy();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime17.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime24 = property21.add((long) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime27 = mutableDateTime24.toMutableDateTime(dateTimeZone25);
        int int28 = mutableDateTime27.getDayOfYear();
        int int29 = mutableDateTime27.getWeekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) mutableDateTime15, (org.joda.time.ReadableInstant) mutableDateTime27);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime27.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period38 = duration37.toPeriod();
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration43 = duration40.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration44 = duration37.minus((org.joda.time.ReadableDuration) duration43);
        mutableDateTime32.add((org.joda.time.ReadableDuration) duration37);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime32.centuryOfEra();
        mutableDateTime32.addHours((int) (byte) 10);
        mutableDateTime32.addWeeks(20);
        org.joda.time.DateTimeField dateTimeField51 = mutableDateTime32.getRoundingField();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime32.era();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        mutableDateTime32.setZoneRetainFields(dateTimeZone54);
        org.joda.time.MutableDateTime mutableDateTime56 = mutableDateTime27.toMutableDateTime(dateTimeZone54);
        long long58 = dateTimeZone54.previousTransition((long) 984);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and mutableDateTime56", (mutableDateTime17.compareTo(mutableDateTime56) == 0) == mutableDateTime17.equals(mutableDateTime56));
    }

    @Test
    public void test410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test410");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.Chronology chronology13 = dateTimeFormatter2.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter2.withDefaultYear(999);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter2.withDefaultYear((int) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter2.withPivotYear(56);
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = dateTimeFormatter19.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter19.withDefaultYear((int) (short) 1);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter22.withOffsetParsed();
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        org.joda.time.DateTime dateTime34 = dateTime32.plusMinutes(15);
        org.joda.time.DateTime dateTime35 = localDateTime28.toDateTime((org.joda.time.ReadableInstant) dateTime32);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime37 = localDateTime28.toDateTime(dateTimeZone36);
        org.joda.time.DateTime dateTime39 = dateTime37.withMinuteOfHour(46);
        org.joda.time.DateTimeZone dateTimeZone40 = dateTime39.getZone();
        java.lang.String str42 = dateTimeZone40.getShortName((long) ' ');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter22.withZone(dateTimeZone40);
        org.joda.time.DateTimeZone dateTimeZone44 = dateTimeFormatter43.getZone();
        org.joda.time.Chronology chronology46 = null;
        java.util.Locale locale47 = java.util.Locale.GERMAN;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale47.getDisplayVariant(locale48);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology46, locale48);
        java.lang.Object obj51 = dateTimeParserBucket50.saveState();
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeParserBucket50.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter43.withZone(dateTimeZone52);
        boolean boolean54 = dateTimeFormatter53.isOffsetParsed();
        java.lang.Integer int55 = dateTimeFormatter53.getPivotYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter53.withPivotYear((java.lang.Integer) 37154493);
        org.joda.time.MutableDateTime mutableDateTime60 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime60.setSecondOfMinute(53);
        mutableDateTime60.addMonths(0);
        org.joda.time.LocalDate localDate65 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property66 = localDate65.monthOfYear();
        org.joda.time.DateTimeField dateTimeField67 = property66.getField();
        org.joda.time.LocalDate localDate68 = property66.roundCeilingCopy();
        org.joda.time.Chronology chronology69 = localDate68.getChronology();
        org.joda.time.DateTimeField dateTimeField70 = chronology69.weekOfWeekyear();
        mutableDateTime60.setChronology(chronology69);
        org.joda.time.DateTime dateTime72 = new org.joda.time.DateTime(1005101L, chronology69);
        org.joda.time.DurationField durationField73 = chronology69.days();
        org.joda.time.DateTimeField dateTimeField74 = chronology69.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField75 = chronology69.halfdayOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter57.withChronology(chronology69);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField7 and durationField73", Math.signum(durationField7.compareTo(durationField73)) == -Math.signum(durationField73.compareTo(durationField7)));
    }

    @Test
    public void test411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test411");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays(948227L);
        long long2 = duration1.getStandardSeconds();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime((long) 1, chronology4);
        int int6 = dateTime5.getMinuteOfDay();
        org.joda.time.Instant instant7 = dateTime5.toInstant();
        org.joda.time.Instant instant9 = instant7.minus((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime10 = instant9.toMutableDateTimeISO();
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardHours((-229564796800L));
        org.joda.time.Instant instant13 = instant9.minus((org.joda.time.ReadableDuration) duration12);
        org.joda.time.Instant instant15 = instant9.plus(0L);
        org.joda.time.ReadableDuration readableDuration18 = null;
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.Period period20 = new org.joda.time.Period(readableDuration18, readableInstant19);
        org.joda.time.PeriodType periodType23 = null;
        org.joda.time.Period period24 = new org.joda.time.Period((long) 100, 1L, periodType23);
        org.joda.time.Period period26 = period24.minusSeconds((-1));
        java.lang.String str27 = period24.toString();
        org.joda.time.Period period28 = period24.toPeriod();
        org.joda.time.PeriodType periodType29 = period24.getPeriodType();
        org.joda.time.Period period30 = period20.normalizedStandard(periodType29);
        java.lang.String str31 = periodType29.getName();
        java.lang.String str32 = periodType29.toString();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology34);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(15);
        org.joda.time.Chronology chronology38 = dateTime35.getChronology();
        java.lang.String str39 = chronology38.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod(readableInstant43, readableInstant44, periodType45);
        org.joda.time.DurationFieldType durationFieldType48 = periodType45.getFieldType((int) (short) 0);
        java.lang.String str49 = periodType45.toString();
        org.joda.time.Instant instant50 = new org.joda.time.Instant();
        org.joda.time.Instant instant52 = instant50.withMillis(0L);
        org.joda.time.Chronology chronology53 = instant52.getChronology();
        org.joda.time.Period period54 = new org.joda.time.Period((long) 53, (long) (-1), periodType45, chronology53);
        org.joda.time.DateTimeField dateTimeField55 = dateTimeFieldType40.getField(chronology53);
        java.util.Locale locale56 = java.util.Locale.UK;
        java.lang.String str57 = locale56.getDisplayLanguage();
        int int58 = dateTimeField55.getMaximumTextLength(locale56);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(3155695200000L, chronology38, locale56);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate(chronology38);
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod((long) 52, 946312L, periodType29, chronology38);
        java.lang.String str62 = periodType29.toString();
        org.joda.time.Period period63 = duration1.toPeriodTo((org.joda.time.ReadableInstant) instant15, periodType29);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and instant7", (dateTime5.compareTo(instant7) == 0) == dateTime5.equals(instant7));
    }

    @Test
    public void test412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test412");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant24 = instant17.plus((org.joda.time.ReadableDuration) duration23);
        long long25 = instant24.getMillis();
        org.joda.time.Chronology chronology26 = instant24.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.months();
        org.joda.time.Period period28 = new org.joda.time.Period((-205878993L), chronology26);
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone30 = chronology26.getZone();
        org.joda.time.LocalTime localTime31 = new org.joda.time.LocalTime((java.lang.Object) mutableDateTime0, chronology26);
        org.joda.time.LocalTime localTime33 = localTime31.withMillisOfDay((int) (short) 100);
        org.joda.time.LocalTime localTime35 = localTime33.withMillisOfDay(62167);
        org.joda.time.LocalTime.Property property36 = localTime33.secondOfMinute();
        org.joda.time.LocalTime localTime37 = property36.getLocalTime();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod40.clear();
        mutablePeriod40.addMinutes(53);
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod46.clear();
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration53 = duration49.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        org.joda.time.DateTime dateTime57 = dateTime55.plusMinutes(15);
        org.joda.time.Interval interval58 = duration53.toIntervalTo((org.joda.time.ReadableInstant) dateTime57);
        mutablePeriod46.setPeriod((org.joda.time.ReadableInterval) interval58);
        mutablePeriod40.setPeriod((org.joda.time.ReadableInterval) interval58);
        mutablePeriod40.setWeeks(50);
        org.joda.time.LocalTime localTime63 = localTime37.plus((org.joda.time.ReadablePeriod) mutablePeriod40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime55", (instant3.compareTo(dateTime55) == 0) == instant3.equals(dateTime55));
    }

    @Test
    public void test413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test413");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale locale2 = java.util.Locale.GERMAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.lang.String str4 = locale2.getISO3Language();
        java.util.Locale.Builder builder5 = builder1.setLocale(locale2);
        java.util.Locale.Builder builder6 = builder1.clearExtensions();
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.ReadableInstant readableInstant11 = null;
        org.joda.time.PeriodType periodType12 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod13 = new org.joda.time.MutablePeriod(readableInstant10, readableInstant11, periodType12);
        org.joda.time.DurationFieldType durationFieldType15 = periodType12.getFieldType((int) (short) 0);
        java.lang.String str16 = periodType12.toString();
        org.joda.time.Instant instant17 = new org.joda.time.Instant();
        org.joda.time.Instant instant19 = instant17.withMillis(0L);
        org.joda.time.Chronology chronology20 = instant19.getChronology();
        org.joda.time.Period period21 = new org.joda.time.Period((long) 53, (long) (-1), periodType12, chronology20);
        org.joda.time.DateTimeField dateTimeField22 = dateTimeFieldType7.getField(chronology20);
        java.util.Locale locale23 = java.util.Locale.UK;
        java.lang.String str24 = locale23.getDisplayLanguage();
        int int25 = dateTimeField22.getMaximumTextLength(locale23);
        java.lang.String str26 = locale23.getScript();
        java.util.Locale.Builder builder27 = builder1.setLocale(locale23);
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean31 = localDate28.isSupported(dateTimeFieldType30);
        org.joda.time.LocalDate.Property property32 = localDate28.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime33 = org.joda.time.MutableDateTime.now();
        mutableDateTime33.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime36 = mutableDateTime33.copy();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime33.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime38 = property37.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime41 = property37.set(1);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.DateTime dateTime43 = new org.joda.time.DateTime(chronology42);
        int int44 = dateTime43.getYearOfCentury();
        int int45 = dateTime43.getWeekyear();
        org.joda.time.DateTime dateTime46 = dateTime43.withEarlierOffsetAtOverlap();
        java.lang.String str47 = dateTime46.toString();
        org.joda.time.MutableDateTime mutableDateTime48 = dateTime46.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.UTC;
        boolean boolean50 = dateTimeZone49.isFixed();
        mutableDateTime48.setZoneRetainFields(dateTimeZone49);
        org.joda.time.MutableDateTime mutableDateTime52 = mutableDateTime41.toMutableDateTime(dateTimeZone49);
        org.joda.time.LocalDate localDate53 = org.joda.time.LocalDate.now(dateTimeZone49);
        java.lang.Object obj55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(obj55);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime56, (org.joda.time.ReadableDuration) duration58);
        org.joda.time.LocalDate localDate60 = dateTime56.toLocalDate();
        org.joda.time.LocalDate.Property property61 = localDate60.dayOfMonth();
        java.util.Date date62 = localDate60.toDate();
        org.joda.time.LocalDate.Property property63 = localDate60.dayOfYear();
        java.util.Locale locale64 = java.util.Locale.GERMAN;
        java.lang.String str65 = property63.getAsText(locale64);
        java.lang.String str66 = dateTimeZone49.getShortName(360000000L, locale64);
        java.lang.String str67 = property32.getAsText(locale64);
        java.util.Set<java.lang.String> strSet68 = locale64.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder69 = builder1.setLocale(locale64);
        java.util.Set<java.lang.String> strSet70 = locale64.getUnicodeLocaleKeys();
        java.util.Locale locale74 = new java.util.Locale("1970_MILLIS", "2022-02-22T07:16:23.777Z", "20");
        java.lang.String str75 = locale64.getDisplayScript(locale74);
        java.lang.String str76 = locale64.getISO3Language();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime43", (instant17.compareTo(dateTime43) == 0) == instant17.equals(dateTime43));
    }

    @Test
    public void test414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test414");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.addHours((int) (byte) 10);
        mutableDateTime0.addYears(12);
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime0.getZone();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime((long) (short) 100, chronology21);
        int int23 = localTime22.getMillisOfDay();
        org.joda.time.LocalTime.Property property24 = localTime22.millisOfSecond();
        int int25 = localTime22.getHourOfDay();
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalTime localTime27 = localTime22.plus(readablePeriod26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.DateTime dateTime31 = instant30.toDateTime();
        org.joda.time.DateTime dateTime33 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.months();
        org.joda.time.Period period35 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime31, (org.joda.time.ReadableInstant) dateTime33, periodType34);
        org.joda.time.DateTime.Property property36 = dateTime33.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = property36.getFieldType();
        boolean boolean38 = localTime22.isSupported(dateTimeFieldType37);
        org.joda.time.MutableDateTime.Property property39 = mutableDateTime0.property(dateTimeFieldType37);
        mutableDateTime0.setYear((-459969));
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant30 and dateTime31", (instant30.compareTo(dateTime31) == 0) == instant30.equals(dateTime31));
    }

    @Test
    public void test415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test415");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        boolean boolean5 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardMinutes(1L);
        long long8 = duration7.getStandardMinutes();
        int int9 = duration1.compareTo((org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime((long) 1, chronology11);
        int int13 = dateTime12.getMinuteOfDay();
        org.joda.time.Instant instant14 = dateTime12.toInstant();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(chronology15);
        int int17 = dateTime16.getYearOfCentury();
        int int18 = dateTime16.getWeekyear();
        org.joda.time.DateTime dateTime19 = dateTime16.withEarlierOffsetAtOverlap();
        java.lang.String str20 = dateTime19.toString();
        org.joda.time.MutableDateTime mutableDateTime21 = dateTime19.toMutableDateTime();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) instant14, (org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.LocalTime localTime23 = dateTime19.toLocalTime();
        boolean boolean24 = duration7.equals((java.lang.Object) dateTime19);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate((long) (byte) 1);
        org.joda.time.LocalDate.Property property27 = localDate26.year();
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate((long) (byte) -1);
        int int30 = localDate29.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.UTC;
        long long35 = dateTimeZone31.getMillisKeepLocal(dateTimeZone33, (long) 44);
        org.joda.time.DateTime dateTime36 = localDate29.toDateTimeAtMidnight(dateTimeZone31);
        java.util.TimeZone timeZone37 = dateTimeZone31.toTimeZone();
        org.joda.time.DateMidnight dateMidnight38 = localDate26.toDateMidnight(dateTimeZone31);
        org.joda.time.MutableDateTime mutableDateTime39 = dateTime19.toMutableDateTime(dateTimeZone31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant14", (dateTime12.compareTo(instant14) == 0) == dateTime12.equals(instant14));
    }

    @Test
    public void test416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test416");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime2.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime5 = property3.set(45);
        org.joda.time.MutableDateTime mutableDateTime6 = property3.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime8 = property3.add(45);
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        long long12 = dateTimeZone9.previousTransition(100L);
        int int14 = dateTimeZone9.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime15 = mutableDateTime8.toDateTime(dateTimeZone9);
        mutableDateTime1.setZoneRetainFields(dateTimeZone9);
        java.lang.String str18 = dateTimeZone9.getNameKey((long) 36950209);
        long long20 = dateTimeZone9.previousTransition(959393L);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone9);
        java.util.GregorianCalendar gregorianCalendar22 = dateTime21.toGregorianCalendar();
        int int23 = dateTime21.getEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and dateTime15", (mutableDateTime2.compareTo(dateTime15) == 0) == mutableDateTime2.equals(dateTime15));
    }

    @Test
    public void test417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test417");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.UTC;
        long long4 = dateTimeZone0.getMillisKeepLocal(dateTimeZone2, (long) 44);
        boolean boolean6 = dateTimeZone2.isStandardOffset((long) (-1));
        java.lang.String str7 = dateTimeZone2.toString();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime(dateTimeZone2);
        mutableDateTime8.setSecondOfMinute(41);
        mutableDateTime8.setTime(181439999948L);
        int int13 = mutableDateTime8.getMinuteOfHour();
        org.joda.time.Instant instant15 = org.joda.time.Instant.parse("2022-02-22T07:16:17.248Z");
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str20 = duration19.toString();
        boolean boolean21 = duration17.isShorterThan((org.joda.time.ReadableDuration) duration19);
        long long22 = duration17.getStandardMinutes();
        org.joda.time.Instant instant24 = instant15.withDurationAdded((org.joda.time.ReadableDuration) duration17, 200);
        boolean boolean25 = mutableDateTime8.isEqual((org.joda.time.ReadableInstant) instant24);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime26.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime29 = property27.set(45);
        org.joda.time.MutableDateTime mutableDateTime30 = property27.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime32 = property27.add(45);
        mutableDateTime32.addWeeks(10);
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property38 = localDateTime35.hourOfDay();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime35.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str42 = dateTimeFieldType41.getName();
        int int43 = localDateTime35.indexOf(dateTimeFieldType41);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime35.minusSeconds((int) (short) 0);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.minus((long) 0);
        org.joda.time.DateTime dateTime49 = localDateTime35.toDateTime((org.joda.time.ReadableInstant) instant48);
        boolean boolean50 = mutableDateTime32.isBefore((org.joda.time.ReadableInstant) dateTime49);
        int int51 = mutableDateTime32.getMinuteOfHour();
        mutableDateTime32.addYears(61);
        org.joda.time.Chronology chronology54 = mutableDateTime32.getChronology();
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime8.toMutableDateTime(chronology54);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now(chronology54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime8 and mutableDateTime55", (mutableDateTime8.compareTo(mutableDateTime55) == 0) == mutableDateTime8.equals(mutableDateTime55));
    }

    @Test
    public void test418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test418");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        mutableDateTime0.addSeconds(0);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours8 = duration7.toStandardHours();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod12 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.months();
        org.joda.time.Period period22 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableInstant) dateTime20, periodType21);
        org.joda.time.Period period23 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime14, periodType21);
        org.joda.time.Duration duration24 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period29 = duration28.toPeriod();
        org.joda.time.Duration duration32 = duration28.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period33 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime26, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Instant instant34 = dateTime26.toInstant();
        org.joda.time.DateTime dateTime37 = dateTime26.withDurationAdded((long) 3, 4);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.DateTime dateTime39 = new org.joda.time.DateTime(chronology38);
        int int40 = dateTime39.getYearOfCentury();
        org.joda.time.DateTime dateTime42 = dateTime39.withSecondOfMinute(53);
        org.joda.time.Duration duration44 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period45 = duration44.toPeriod();
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration50 = duration47.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration51 = duration44.minus((org.joda.time.ReadableDuration) duration50);
        org.joda.time.ReadableInstant readableInstant52 = null;
        org.joda.time.ReadableInstant readableInstant53 = null;
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod55 = new org.joda.time.MutablePeriod(readableInstant52, readableInstant53, periodType54);
        org.joda.time.DurationFieldType durationFieldType57 = periodType54.getFieldType((int) (short) 0);
        java.lang.String str58 = periodType54.toString();
        org.joda.time.Period period59 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime39, (org.joda.time.ReadableDuration) duration44, periodType54);
        org.joda.time.Period period60 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime0, (org.joda.time.ReadableInstant) dateTime37, periodType54);
        org.joda.time.DateTime dateTime62 = dateTime37.plusMonths(26186255);
        org.joda.time.LocalDateTime localDateTime63 = dateTime37.toLocalDateTime();
        org.joda.time.LocalDateTime localDateTime64 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property67 = localDateTime64.hourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType68 = property67.getFieldType();
        boolean boolean69 = localDateTime63.isSupported(dateTimeFieldType68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime63.minusMillis(432);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime63.withCenturyOfEra(26574);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant15", (dateTime10.compareTo(instant15) == 0) == dateTime10.equals(instant15));
    }

    @Test
    public void test419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test419");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.Chronology chronology4 = localDate3.getChronology();
        org.joda.time.DateTimeField dateTimeField5 = chronology4.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(chronology4);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime6.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundHalfCeiling();
        org.joda.time.LocalDate localDate9 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean11 = localDate9.isSupported(dateTimeFieldType10);
        org.joda.time.LocalDate.Property property12 = localDate9.yearOfEra();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Instant instant19 = instant13.minus((org.joda.time.ReadableDuration) duration17);
        int int20 = property12.getDifference((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period23 = duration22.toPeriod();
        org.joda.time.Duration duration25 = duration22.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime26 = org.joda.time.MutableDateTime.now();
        mutableDateTime26.add((long) 'a');
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime26.yearOfCentury();
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period32 = duration31.toPeriod();
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration37 = duration34.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration38 = duration31.minus((org.joda.time.ReadableDuration) duration37);
        mutableDateTime26.add((org.joda.time.ReadableDuration) duration31);
        boolean boolean40 = duration25.isShorterThan((org.joda.time.ReadableDuration) duration31);
        org.joda.time.Instant instant41 = instant13.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.DateTime dateTime42 = instant13.toDateTimeISO();
        mutableDateTime8.setMillis((org.joda.time.ReadableInstant) instant13);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration52 = duration48.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant53 = instant46.plus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.PeriodType periodType54 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.Period period55 = duration52.toPeriod(periodType54);
        long long56 = duration52.getStandardMinutes();
        org.joda.time.Instant instant57 = instant13.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration59 = org.joda.time.Duration.standardMinutes((long) 36946953);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period62 = duration61.toPeriod();
        org.joda.time.Duration duration64 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration66 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration69 = duration66.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean70 = duration64.isLongerThan((org.joda.time.ReadableDuration) duration69);
        org.joda.time.Duration duration71 = duration61.minus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Days days72 = duration61.toStandardDays();
        boolean boolean73 = duration59.isEqual((org.joda.time.ReadableDuration) duration61);
        org.joda.time.Duration duration74 = duration52.plus((org.joda.time.ReadableDuration) duration59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime6 and dateTime42", (mutableDateTime6.compareTo(dateTime42) == 0) == mutableDateTime6.equals(dateTime42));
    }

    @Test
    public void test420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test420");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime3, (org.joda.time.ReadableDuration) duration9);
        java.util.Locale locale11 = java.util.Locale.UK;
        java.util.Calendar calendar12 = dateTime3.toCalendar(locale11);
        java.lang.Object obj13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(obj13);
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField21 = localDateTime19.getField((int) (byte) 0);
        long long23 = dateTimeField21.roundHalfEven((long) 1);
        int int24 = dateTime14.get(dateTimeField21);
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withCenturyOfEra((int) 'a');
        java.util.Locale locale33 = java.util.Locale.GERMAN;
        java.lang.String str34 = locale33.getDisplayName();
        java.lang.String str35 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime29, 53, locale33);
        java.lang.String str37 = dateTimeField21.getAsShortText((long) (byte) 100);
        long long39 = dateTimeField21.roundHalfEven((long) '4');
        java.util.Locale locale41 = java.util.Locale.getDefault();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime44.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField48 = localDateTime46.getField((int) (byte) 0);
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = dateTimeField48.getAsShortText((long) '4', locale50);
        java.lang.String str52 = locale50.getVariant();
        java.lang.String str53 = locale41.getDisplayScript(locale50);
        java.lang.String str54 = dateTimeField21.getAsShortText((int) (short) 1, locale41);
        java.lang.String str55 = locale11.getDisplayLanguage(locale41);
        java.util.Locale.setDefault(locale11);
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant60 = null;
        org.joda.time.ReadableInstant readableInstant61 = null;
        org.joda.time.PeriodType periodType62 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod63 = new org.joda.time.MutablePeriod(readableInstant60, readableInstant61, periodType62);
        org.joda.time.DurationFieldType durationFieldType65 = periodType62.getFieldType((int) (short) 0);
        java.lang.String str66 = periodType62.toString();
        org.joda.time.Instant instant67 = new org.joda.time.Instant();
        org.joda.time.Instant instant69 = instant67.withMillis(0L);
        org.joda.time.Chronology chronology70 = instant69.getChronology();
        org.joda.time.Period period71 = new org.joda.time.Period((long) 53, (long) (-1), periodType62, chronology70);
        org.joda.time.DateTimeField dateTimeField72 = dateTimeFieldType57.getField(chronology70);
        java.util.Locale locale73 = java.util.Locale.UK;
        java.lang.String str74 = locale73.getDisplayLanguage();
        int int75 = dateTimeField72.getMaximumTextLength(locale73);
        java.lang.String str76 = locale11.getDisplayCountry(locale73);
        java.util.Locale.setDefault(category0, locale73);
        java.util.Locale locale78 = java.util.Locale.GERMANY;
        java.util.Locale.setDefault(category0, locale78);
        java.util.Locale locale80 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet81 = locale80.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and instant67", (dateTime14.compareTo(instant67) == 0) == dateTime14.equals(instant67));
    }

    @Test
    public void test421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test421");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.LocalDate localDate20 = org.joda.time.LocalDate.now(dateTimeZone16);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.weekyear();
        boolean boolean22 = localDate20.isSupported(dateTimeFieldType21);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and mutableDateTime19", (mutableDateTime0.compareTo(mutableDateTime19) == 0) == mutableDateTime0.equals(mutableDateTime19));
    }

    @Test
    public void test422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test422");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period4 = duration3.toPeriod();
        org.joda.time.Duration duration7 = duration3.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period8 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration7);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getSecondOfMinute();
        org.joda.time.Interval interval12 = duration7.toIntervalTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.Duration duration13 = duration7.toDuration();
        org.joda.time.Period period14 = duration7.toPeriod();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        org.joda.time.DateTime dateTime27 = dateTime25.plusMinutes(15);
        org.joda.time.DateTime dateTime28 = localDateTime21.toDateTime((org.joda.time.ReadableInstant) dateTime25);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime30 = localDateTime21.toDateTime(dateTimeZone29);
        org.joda.time.DateTime dateTime31 = dateTime16.withZoneRetainFields(dateTimeZone29);
        org.joda.time.MutableDateTime mutableDateTime32 = org.joda.time.MutableDateTime.now();
        mutableDateTime32.add((long) 'a');
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime32.yearOfCentury();
        mutableDateTime32.addSeconds(0);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours40 = duration39.toStandardHours();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(chronology41);
        int int43 = dateTime42.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime42);
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.DateTime dateTime50 = instant49.toDateTime();
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType53 = org.joda.time.PeriodType.months();
        org.joda.time.Period period54 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime50, (org.joda.time.ReadableInstant) dateTime52, periodType53);
        org.joda.time.Period period55 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) dateTime46, periodType53);
        org.joda.time.Duration duration56 = new org.joda.time.Duration((org.joda.time.ReadableInstant) mutableDateTime32, (org.joda.time.ReadableInstant) dateTime46);
        org.joda.time.DateTime dateTime57 = dateTime31.plus((org.joda.time.ReadableDuration) duration56);
        int int58 = dateTime57.getWeekyear();
        org.joda.time.Period period59 = duration7.toPeriodTo((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.Period period61 = period59.plusYears(52);
        org.joda.time.Period period63 = period59.withHours(1200);
        org.joda.time.Period period65 = period63.plusHours(949);
        org.joda.time.Period period67 = org.joda.time.Period.hours((int) (short) 10);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.seconds();
        org.joda.time.DurationFieldType durationFieldType69 = org.joda.time.DurationFieldType.years();
        boolean boolean70 = periodType68.isSupported(durationFieldType69);
        int int71 = period67.indexOf(durationFieldType69);
        org.joda.time.Period period73 = period65.withField(durationFieldType69, 37174539);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant15", (dateTime10.compareTo(instant15) == 0) == dateTime10.equals(instant15));
    }

    @Test
    public void test423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test423");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        int int4 = dateTime2.getEra();
        int int5 = dateTime2.getWeekOfWeekyear();
        org.joda.time.Instant instant6 = dateTime2.toInstant();
        org.joda.time.DateTime.Property property7 = dateTime2.era();
        org.joda.time.DateTime dateTime8 = property7.roundCeilingCopy();
        org.joda.time.Duration duration10 = new org.joda.time.Duration(995259L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.ZERO;
        long long12 = duration11.getStandardSeconds();
        org.joda.time.Duration duration13 = duration11.toDuration();
        org.joda.time.Duration duration14 = duration10.plus((org.joda.time.ReadableDuration) duration13);
        org.joda.time.Duration duration16 = new org.joda.time.Duration(0L);
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((-9571L));
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration22 = duration18.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Duration duration23 = duration16.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) (byte) 10);
        org.joda.time.DateTime.Property property26 = dateTime25.millisOfSecond();
        org.joda.time.DateTime dateTime27 = dateTime25.toDateTime();
        int int28 = dateTime25.getMinuteOfDay();
        org.joda.time.DateTime dateTime30 = dateTime25.minusHours(766);
        org.joda.time.MutableDateTime mutableDateTime31 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime31.centuryOfEra();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime31.dayOfWeek();
        org.joda.time.LocalDateTime localDateTime34 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property37 = localDateTime34.hourOfDay();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime34.plusMillis((int) (byte) 0);
        org.joda.time.PeriodType periodType42 = null;
        org.joda.time.Period period43 = new org.joda.time.Period((long) 100, 1L, periodType42);
        org.joda.time.Period period45 = period43.minusSeconds((-1));
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.minus((org.joda.time.ReadablePeriod) period43);
        mutableDateTime31.add((org.joda.time.ReadablePeriod) period43, 0);
        org.joda.time.PeriodType periodType49 = period43.getPeriodType();
        int int50 = periodType49.size();
        org.joda.time.PeriodType periodType51 = periodType49.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration23, (org.joda.time.ReadableInstant) dateTime30, periodType51);
        org.joda.time.PeriodType periodType53 = periodType51.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration13, periodType51);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant6", (dateTime2.compareTo(instant6) == 0) == dateTime2.equals(instant6));
    }

    @Test
    public void test424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test424");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (short) 0);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property14 = dateTime10.yearOfEra();
        org.joda.time.DateTime dateTime15 = property14.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime16 = property14.roundHalfEvenCopy();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours19 = duration18.toStandardHours();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration18, (org.joda.time.ReadableInstant) dateTime21);
        mutablePeriod23.addSeconds(292278993);
        mutablePeriod23.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime29 = dateTime16.minus((org.joda.time.ReadablePeriod) mutablePeriod23);
        org.joda.time.DateTime dateTime32 = dateTime16.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.Duration duration34 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period35 = duration34.toPeriod();
        org.joda.time.Duration duration37 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration42 = duration39.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean43 = duration37.isLongerThan((org.joda.time.ReadableDuration) duration42);
        org.joda.time.Duration duration44 = duration34.minus((org.joda.time.ReadableDuration) duration37);
        org.joda.time.Duration duration46 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration49 = duration46.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean50 = duration37.equals((java.lang.Object) duration46);
        org.joda.time.Period period51 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime32, (org.joda.time.ReadableDuration) duration37);
        org.joda.time.PeriodType periodType52 = null;
        org.joda.time.Instant instant53 = new org.joda.time.Instant();
        org.joda.time.Instant instant55 = instant53.withMillis(0L);
        org.joda.time.Chronology chronology56 = instant55.getChronology();
        org.joda.time.DurationField durationField57 = chronology56.eras();
        org.joda.time.LocalTime localTime58 = org.joda.time.LocalTime.now(chronology56);
        org.joda.time.Period period59 = duration37.toPeriod(periodType52, chronology56);
        org.joda.time.DurationFieldType durationFieldType61 = period59.getFieldType(1);
        mutableDateTime8.add(durationFieldType61, 61);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime8.millisOfDay();
        mutableDateTime8.addSeconds(37118622);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime8.yearOfEra();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant53", (dateTime10.compareTo(instant53) == 0) == dateTime10.equals(instant53));
    }

    @Test
    public void test425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test425");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalTime localTime2 = new org.joda.time.LocalTime((long) (short) 100, chronology1);
        int int3 = localTime2.getMillisOfDay();
        org.joda.time.LocalTime.Property property4 = localTime2.millisOfSecond();
        org.joda.time.DurationField durationField5 = property4.getLeapDurationField();
        org.joda.time.LocalTime localTime6 = property4.roundHalfEvenCopy();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period12 = duration11.toPeriod();
        org.joda.time.Duration duration15 = duration11.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant16 = instant9.plus((org.joda.time.ReadableDuration) duration15);
        long long17 = instant16.getMillis();
        org.joda.time.Chronology chronology18 = instant16.getChronology();
        org.joda.time.MutableDateTime mutableDateTime19 = org.joda.time.MutableDateTime.now();
        mutableDateTime19.add((long) 'a');
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str26 = duration25.toString();
        boolean boolean27 = duration23.isShorterThan((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Hours hours28 = duration23.toStandardHours();
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration23, 20);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(chronology31);
        int int33 = dateTime32.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = null;
        java.lang.String str35 = dateTime32.toString(dateTimeFormatter34);
        org.joda.time.DateTime dateTime37 = dateTime32.minusMonths(22);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Chronology chronology41 = instant40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.eras();
        org.joda.time.DateTime dateTime43 = dateTime32.withChronology(chronology41);
        org.joda.time.Period period44 = duration23.toPeriod(chronology41);
        org.joda.time.Instant instant46 = instant16.withDurationAdded((org.joda.time.ReadableDuration) duration23, 16);
        boolean boolean47 = localTime6.equals((java.lang.Object) instant16);
        org.joda.time.Instant instant50 = instant16.withDurationAdded(3155695200000L, 44);
        org.joda.time.DateTime dateTime51 = instant50.toDateTimeISO();
        org.joda.time.Duration duration53 = new org.joda.time.Duration((long) 470);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) instant50, (org.joda.time.ReadableDuration) duration53);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime32", (instant7.compareTo(dateTime32) == 0) == instant7.equals(dateTime32));
    }

    @Test
    public void test426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test426");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime3 = property1.set(45);
        org.joda.time.MutableDateTime mutableDateTime4 = property1.roundFloor();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.LocalTime localTime12 = org.joda.time.LocalTime.now(chronology10);
        org.joda.time.DurationField durationField13 = chronology10.eras();
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 44, chronology10);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType5.getField(chronology10);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        long long25 = chronology10.add((org.joda.time.ReadablePeriod) period19, (long) ' ', (int) 'a');
        org.joda.time.Period period27 = period19.minusHours((-292275054));
        org.joda.time.Period period29 = period27.minusHours(2000);
        int int30 = period27.getMinutes();
        org.joda.time.Period period31 = period27.toPeriod();
        mutableDateTime4.add((org.joda.time.ReadablePeriod) period31);
        org.joda.time.Chronology chronology34 = null;
        java.util.Locale locale35 = java.util.Locale.GERMAN;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.lang.String str37 = locale35.getDisplayVariant(locale36);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket38 = new org.joda.time.format.DateTimeParserBucket((long) 'a', chronology34, locale36);
        java.util.Locale locale39 = dateTimeParserBucket38.getLocale();
        long long40 = dateTimeParserBucket38.computeMillis();
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket38.getZone();
        mutableDateTime4.setZone(dateTimeZone41);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime4.weekyear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        long long47 = dateTimeZone44.previousTransition(100L);
        mutableDateTime4.setZone(dateTimeZone44);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime4.minuteOfHour();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.DateTime dateTime52 = new org.joda.time.DateTime(chronology51);
        org.joda.time.DateTime dateTime54 = dateTime52.plusMinutes(15);
        org.joda.time.Chronology chronology55 = dateTime52.getChronology();
        java.lang.String str56 = chronology55.toString();
        org.joda.time.LocalDate localDate57 = new org.joda.time.LocalDate((long) 0, chronology55);
        org.joda.time.LocalDate localDate59 = localDate57.withDayOfYear(31);
        org.joda.time.Chronology chronology61 = null;
        java.util.Locale locale62 = java.util.Locale.GERMAN;
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.lang.String str64 = locale62.getDisplayVariant(locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket66 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology61, locale63, (java.lang.Integer) 10);
        long long69 = dateTimeParserBucket66.computeMillis(true, "deu");
        long long70 = dateTimeParserBucket66.computeMillis();
        boolean boolean71 = localDate59.equals((java.lang.Object) dateTimeParserBucket66);
        org.joda.time.LocalDate.Property property72 = localDate59.era();
        int int73 = localDate59.getEra();
        org.joda.time.LocalDate localDate75 = localDate59.plusDays(1898);
        boolean boolean76 = property49.equals((java.lang.Object) localDate59);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant7 and dateTime52", (instant7.compareTo(dateTime52) == 0) == instant7.equals(dateTime52));
    }

    @Test
    public void test427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test427");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfYear();
        org.joda.time.Period period6 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period8 = period6.withDays(2022);
        org.joda.time.DateTime dateTime10 = dateTime1.withPeriodAdded((org.joda.time.ReadablePeriod) period8, (int) (short) 100);
        org.joda.time.LocalDateTime localDateTime11 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusYears((int) (short) 100);
        int int18 = localDateTime17.getEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.minusHours(45);
        org.joda.time.DateTime dateTime21 = dateTime10.withFields((org.joda.time.ReadablePartial) localDateTime17);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime17.withYear(62437);
        org.joda.time.DateTimeZone dateTimeZone24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime(dateTimeZone24);
        int int26 = localDateTime25.getWeekOfWeekyear();
        org.joda.time.DateTime dateTime27 = localDateTime25.toDateTime();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusMonths(36956320);
        int int30 = localDateTime23.compareTo((org.joda.time.ReadablePartial) localDateTime25);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.DateTime dateTime34 = instant33.toDateTime();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.months();
        org.joda.time.Period period38 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime34, (org.joda.time.ReadableInstant) dateTime36, periodType37);
        org.joda.time.Period period39 = period38.toPeriod();
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.monthOfYear();
        org.joda.time.DateTimeField dateTimeField42 = property41.getField();
        org.joda.time.LocalDate localDate43 = property41.roundCeilingCopy();
        org.joda.time.LocalDate localDate45 = localDate43.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate47 = localDate43.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate49 = localDate47.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime50 = org.joda.time.MutableDateTime.now();
        mutableDateTime50.add((long) 'a');
        org.joda.time.MutableDateTime.Property property53 = mutableDateTime50.yearOfCentury();
        org.joda.time.Duration duration55 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period56 = duration55.toPeriod();
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration61 = duration58.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration62 = duration55.minus((org.joda.time.ReadableDuration) duration61);
        mutableDateTime50.add((org.joda.time.ReadableDuration) duration55);
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime50.centuryOfEra();
        mutableDateTime50.addHours((int) (byte) 10);
        int int67 = mutableDateTime50.getSecondOfDay();
        org.joda.time.LocalDate localDate68 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property69 = localDate68.monthOfYear();
        org.joda.time.LocalDate.Property property70 = localDate68.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(readableInstant71, readableInstant72, periodType73);
        org.joda.time.DurationFieldType durationFieldType76 = periodType73.getFieldType((int) (short) 0);
        boolean boolean77 = localDate68.isSupported(durationFieldType76);
        mutableDateTime50.add(durationFieldType76, (-292275054));
        org.joda.time.LocalDate localDate81 = localDate47.withFieldAdded(durationFieldType76, 53);
        int int82 = period38.get(durationFieldType76);
        boolean boolean83 = localDateTime25.isSupported(durationFieldType76);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant31", (dateTime1.compareTo(instant31) == 0) == dateTime1.equals(instant31));
    }

    @Test
    public void test428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test428");
        java.lang.Object obj0 = null;
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now();
        mutableDateTime1.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime4 = mutableDateTime1.copy();
        mutableDateTime1.setDate((long) '#');
        org.joda.time.LocalDate localDate7 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean10 = localDate7.isSupported(dateTimeFieldType9);
        int int11 = localDate7.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight13 = localDate7.toDateMidnight(dateTimeZone12);
        org.joda.time.DateTime dateTime14 = mutableDateTime1.toDateTime(dateTimeZone12);
        org.joda.time.LocalDate localDate15 = org.joda.time.LocalDate.now(dateTimeZone12);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(obj0, dateTimeZone12);
        java.lang.String str18 = dateTimeZone12.getName(105144L);
        java.lang.Object obj19 = null;
        boolean boolean20 = dateTimeZone12.equals(obj19);
        org.joda.time.DateTime dateTime21 = org.joda.time.DateTime.now(dateTimeZone12);
        org.joda.time.DateTime.Property property22 = dateTime21.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime14", (mutableDateTime1.compareTo(dateTime14) == 0) == mutableDateTime1.equals(dateTime14));
    }

    @Test
    public void test429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test429");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Instant instant1 = org.joda.time.Instant.now();
        org.joda.time.MutableDateTime mutableDateTime2 = instant1.toMutableDateTimeISO();
        org.joda.time.DateTime dateTime3 = instant1.toDateTime();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.DateTime dateTime5 = new org.joda.time.DateTime(chronology4);
        int int6 = dateTime5.getYearOfCentury();
        int int7 = dateTime5.getWeekyear();
        org.joda.time.DateTime.Property property8 = dateTime5.dayOfYear();
        org.joda.time.Period period10 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period12 = period10.withDays(2022);
        org.joda.time.DateTime dateTime14 = dateTime5.withPeriodAdded((org.joda.time.ReadablePeriod) period12, (int) (short) 100);
        boolean boolean15 = instant1.isBefore((org.joda.time.ReadableInstant) dateTime14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(chronology17);
        org.joda.time.DateTime dateTime20 = dateTime18.plusMinutes(15);
        org.joda.time.Chronology chronology21 = dateTime18.getChronology();
        java.lang.String str22 = chronology21.toString();
        org.joda.time.DateTimeField dateTimeField23 = chronology21.dayOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.era();
        java.lang.Object obj25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(obj25);
        org.joda.time.LocalDateTime localDateTime27 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField33 = localDateTime31.getField((int) (byte) 0);
        long long35 = dateTimeField33.roundHalfEven((long) 1);
        int int36 = dateTime26.get(dateTimeField33);
        org.joda.time.LocalDateTime localDateTime37 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.withCenturyOfEra((int) 'a');
        java.util.Locale locale45 = java.util.Locale.GERMAN;
        java.lang.String str46 = locale45.getDisplayName();
        java.lang.String str47 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime41, 53, locale45);
        java.lang.String str49 = dateTimeField33.getAsShortText((long) (byte) 100);
        long long51 = dateTimeField33.roundHalfEven((long) '4');
        java.util.Locale locale53 = java.util.Locale.getDefault();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime56 = localDateTime54.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField60 = localDateTime58.getField((int) (byte) 0);
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.lang.String str63 = dateTimeField60.getAsShortText((long) '4', locale62);
        java.lang.String str64 = locale62.getVariant();
        java.lang.String str65 = locale53.getDisplayScript(locale62);
        java.lang.String str66 = dateTimeField33.getAsShortText((int) (short) 1, locale53);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket68 = new org.joda.time.format.DateTimeParserBucket((long) 2100, chronology21, locale53, (java.lang.Integer) 26158);
        org.joda.time.DateTimeField dateTimeField69 = chronology21.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime70 = instant1.toMutableDateTime(chronology21);
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(readableInstant71, readableInstant72, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withMonthsRemoved();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod(readableInstant0, (org.joda.time.ReadableInstant) mutableDateTime70, periodType73);
        int int77 = periodType73.size();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant1 and mutableDateTime2", (instant1.compareTo(mutableDateTime2) == 0) == instant1.equals(mutableDateTime2));
    }

    @Test
    public void test430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test430");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime2.withChronology(chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.dayOfMonth();
        org.joda.time.Period period16 = new org.joda.time.Period(950707L, chronology9);
        org.joda.time.Period period18 = period16.withWeeks(1969);
        org.joda.time.Period period20 = period18.minusWeeks(0);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime21.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime24 = property22.set(45);
        org.joda.time.MutableDateTime mutableDateTime25 = property22.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime27 = property22.add(45);
        org.joda.time.Chronology chronology28 = mutableDateTime27.getChronology();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.plusMonths(46);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minusSeconds((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime31.withDayOfYear((int) (byte) 100);
        org.joda.time.Instant instant38 = new org.joda.time.Instant();
        org.joda.time.Instant instant40 = instant38.withMillis(0L);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period43 = duration42.toPeriod();
        org.joda.time.Duration duration46 = duration42.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant47 = instant40.plus((org.joda.time.ReadableDuration) duration46);
        long long48 = instant47.getMillis();
        org.joda.time.Chronology chronology49 = instant47.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.months();
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now(chronology49);
        org.joda.time.DateTimeField dateTimeField52 = chronology49.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = dateTimeField52.getType();
        int int54 = localDateTime37.get(dateTimeFieldType53);
        mutableDateTime27.set(dateTimeFieldType53, 15);
        org.joda.time.DurationFieldType durationFieldType57 = dateTimeFieldType53.getDurationType();
        int int58 = period20.get(durationFieldType57);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime2 and instant6", (dateTime2.compareTo(instant6) == 0) == dateTime2.equals(instant6));
    }

    @Test
    public void test431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test431");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime19.yearOfCentury();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str26 = duration25.toString();
        org.joda.time.Instant instant27 = instant21.minus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.Days days28 = duration25.toStandardDays();
        mutableDateTime19.add((org.joda.time.ReadableDuration) duration25, 1439);
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime32.setSecondOfMinute(53);
        org.joda.time.MutableDateTime mutableDateTime35 = mutableDateTime32.copy();
        int int36 = mutableDateTime32.getWeekyear();
        boolean boolean37 = mutableDateTime32.isBeforeNow();
        int int38 = mutableDateTime32.getYearOfCentury();
        org.joda.time.LocalDate localDate39 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property40 = localDate39.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean42 = localDate39.isSupported(dateTimeFieldType41);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration52 = duration48.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant53 = instant46.plus((org.joda.time.ReadableDuration) duration52);
        long long54 = instant53.getMillis();
        org.joda.time.Chronology chronology55 = instant53.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.months();
        org.joda.time.Period period57 = new org.joda.time.Period((-205878993L), chronology55);
        org.joda.time.DateTimeField dateTimeField58 = chronology55.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField59 = dateTimeFieldType41.getField(chronology55);
        boolean boolean60 = mutableDateTime32.isSupported(dateTimeFieldType41);
        org.joda.time.MutableDateTime.Property property61 = mutableDateTime19.property(dateTimeFieldType41);
        int int62 = mutableDateTime19.getDayOfMonth();
        org.joda.time.MutableDateTime.Property property63 = mutableDateTime19.secondOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and instant21", (dateTime10.compareTo(instant21) == 0) == dateTime10.equals(instant21));
    }

    @Test
    public void test432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test432");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str7 = duration6.toString();
        boolean boolean8 = duration4.isShorterThan((org.joda.time.ReadableDuration) duration6);
        org.joda.time.Hours hours9 = duration4.toStandardHours();
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration4, 20);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.millisOfSecond();
        org.joda.time.DurationField durationField13 = property12.getRangeDurationField();
        int int14 = property12.get();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.Chronology chronology18 = instant17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.eras();
        long long23 = chronology18.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField24 = chronology18.secondOfMinute();
        boolean boolean25 = dateTimeField24.isSupported();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        java.lang.String str32 = chronology31.toString();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant36, readableInstant37, periodType38);
        org.joda.time.DurationFieldType durationFieldType41 = periodType38.getFieldType((int) (short) 0);
        java.lang.String str42 = periodType38.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 53, (long) (-1), periodType38, chronology46);
        org.joda.time.DateTimeField dateTimeField48 = dateTimeFieldType33.getField(chronology46);
        java.util.Locale locale49 = java.util.Locale.UK;
        java.lang.String str50 = locale49.getDisplayLanguage();
        int int51 = dateTimeField48.getMaximumTextLength(locale49);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket(3155695200000L, chronology31, locale49);
        int int53 = dateTimeField24.getMaximumShortTextLength(locale49);
        java.lang.String str54 = locale49.getDisplayScript();
        java.lang.String str55 = property12.getAsText(locale49);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField13 and durationField19", Math.signum(durationField13.compareTo(durationField19)) == -Math.signum(durationField19.compareTo(durationField13)));
    }

    @Test
    public void test433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test433");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime(chronology1);
        org.joda.time.DateTime dateTime4 = dateTime2.plusMinutes(15);
        org.joda.time.Chronology chronology5 = dateTime2.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.hours();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(1440L, chronology5);
        int int8 = mutablePeriod7.getMonths();
        int int9 = mutablePeriod7.getHours();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration17 = duration13.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Instant instant19 = dateTime11.toInstant();
        org.joda.time.DateTime dateTime22 = dateTime11.withDurationAdded((long) 3, 4);
        org.joda.time.MutableDateTime mutableDateTime23 = org.joda.time.MutableDateTime.now();
        mutableDateTime23.add((long) 'a');
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.yearOfCentury();
        mutableDateTime23.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.Period period33 = new org.joda.time.Period(readableDuration31, readableInstant32);
        org.joda.time.PeriodType periodType36 = null;
        org.joda.time.Period period37 = new org.joda.time.Period((long) 100, 1L, periodType36);
        org.joda.time.Period period39 = period37.minusSeconds((-1));
        java.lang.String str40 = period37.toString();
        org.joda.time.Period period41 = period37.toPeriod();
        org.joda.time.PeriodType periodType42 = period37.getPeriodType();
        org.joda.time.Period period43 = period33.normalizedStandard(periodType42);
        org.joda.time.DurationFieldType durationFieldType44 = null;
        int int45 = periodType42.indexOf(durationFieldType44);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        org.joda.time.DateTimeField dateTimeField53 = chronology49.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType42, chronology49);
        org.joda.time.MutableDateTime mutableDateTime55 = mutableDateTime23.toMutableDateTime(chronology49);
        mutableDateTime23.setDayOfYear(44);
        int int58 = mutableDateTime23.getHourOfDay();
        org.joda.time.MutablePeriod mutablePeriod59 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) mutableDateTime23);
        mutableDateTime23.addMillis(365);
        org.joda.time.Instant instant62 = new org.joda.time.Instant();
        org.joda.time.Instant instant64 = instant62.withMillis(0L);
        org.joda.time.DateTime dateTime65 = instant64.toDateTime();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType68 = org.joda.time.PeriodType.months();
        org.joda.time.Period period69 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime65, (org.joda.time.ReadableInstant) dateTime67, periodType68);
        org.joda.time.PeriodType periodType72 = null;
        org.joda.time.Period period73 = new org.joda.time.Period((long) 100, 1L, periodType72);
        org.joda.time.Period period75 = period73.minusSeconds((-1));
        java.lang.String str76 = period73.toString();
        org.joda.time.Period period77 = period73.toPeriod();
        org.joda.time.PeriodType periodType78 = period73.getPeriodType();
        org.joda.time.DateTime dateTime79 = dateTime67.plus((org.joda.time.ReadablePeriod) period73);
        org.joda.time.Chronology chronology81 = null;
        org.joda.time.LocalTime localTime82 = new org.joda.time.LocalTime((long) (short) 100, chronology81);
        org.joda.time.DurationFieldType durationFieldType83 = org.joda.time.DurationFieldType.millis();
        java.lang.String str84 = durationFieldType83.getName();
        boolean boolean85 = localTime82.isSupported(durationFieldType83);
        int int86 = period73.get(durationFieldType83);
        mutableDateTime23.add(durationFieldType83, 442);
        boolean boolean89 = mutablePeriod7.isSupported(durationFieldType83);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField6 and durationField50", Math.signum(durationField6.compareTo(durationField50)) == -Math.signum(durationField50.compareTo(durationField6)));
    }

    @Test
    public void test434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test434");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        java.lang.Object obj1 = mutableDateTime0.clone();
        mutableDateTime0.setTime((long) 46);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.add(1L);
        mutableDateTime6.setYear(3);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.eras();
        org.joda.time.LocalTime localTime15 = org.joda.time.LocalTime.now(chronology13);
        org.joda.time.DurationField durationField16 = chronology13.eras();
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 44, chronology13);
        org.joda.time.DateTime.Property property18 = dateTime17.hourOfDay();
        java.lang.String[] strArray20 = java.util.TimeZone.getAvailableIDs((int) '#');
        boolean boolean21 = dateTime17.equals((java.lang.Object) strArray20);
        mutableDateTime6.setTime((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.Period period31 = new org.joda.time.Period(529, 26199, 24, 2227, 435, (int) (byte) 100, 26212472, 1973);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration32, readableInstant33);
        org.joda.time.Period period36 = period34.withDays((int) (byte) 1);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalTime localTime39 = new org.joda.time.LocalTime((long) (short) 100, chronology38);
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.millis();
        java.lang.String str41 = durationFieldType40.getName();
        boolean boolean42 = localTime39.isSupported(durationFieldType40);
        int int43 = period34.get(durationFieldType40);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        org.joda.time.DateTime dateTime48 = dateTime46.plusMinutes(15);
        org.joda.time.Chronology chronology49 = dateTime46.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.hours();
        org.joda.time.MutablePeriod mutablePeriod51 = new org.joda.time.MutablePeriod(1440L, chronology49);
        boolean boolean52 = durationFieldType40.isSupported(chronology49);
        boolean boolean53 = period31.isSupported(durationFieldType40);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.DateTime dateTime57 = new org.joda.time.DateTime(chronology56);
        org.joda.time.DateTime dateTime59 = dateTime57.plusMinutes(15);
        org.joda.time.Chronology chronology60 = dateTime57.getChronology();
        java.lang.String str61 = chronology60.toString();
        org.joda.time.DurationField durationField62 = chronology60.halfdays();
        org.joda.time.Period period63 = new org.joda.time.Period((long) (byte) 1, (long) (-1), chronology60);
        boolean boolean64 = durationFieldType40.isSupported(chronology60);
        org.joda.time.DateTime dateTime66 = dateTime17.withFieldAdded(durationFieldType40, 364);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField14 and durationField50", Math.signum(durationField14.compareTo(durationField50)) == -Math.signum(durationField50.compareTo(durationField14)));
    }

    @Test
    public void test435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test435");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setSecondOfMinute(53);
        int int4 = mutableDateTime1.getEra();
        org.joda.time.DateTimeField dateTimeField5 = mutableDateTime1.getRoundingField();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.yearOfCentury();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1, chronology8);
        int int10 = dateTime9.getMinuteOfDay();
        int int11 = dateTime9.getEra();
        int int12 = dateTime9.getWeekOfWeekyear();
        org.joda.time.Instant instant13 = dateTime9.toInstant();
        org.joda.time.DateTime.Property property14 = dateTime9.era();
        org.joda.time.LocalDate localDate15 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property16 = localDate15.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = property16.getField();
        org.joda.time.LocalDate localDate18 = property16.roundCeilingCopy();
        org.joda.time.Chronology chronology19 = localDate18.getChronology();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime23 = localDate18.toDateTimeAtMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime9.withZoneRetainFields(dateTimeZone22);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime24);
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        org.joda.time.LocalDate localDate29 = property27.roundCeilingCopy();
        org.joda.time.LocalDate localDate31 = localDate29.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate33 = localDate29.withWeekOfWeekyear(46);
        org.joda.time.Chronology chronology34 = localDate33.getChronology();
        org.joda.time.DateTime dateTime35 = dateTime24.withFields((org.joda.time.ReadablePartial) localDate33);
        org.joda.time.DateTime dateTime37 = dateTime35.plusMinutes(0);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime1 and dateTime24", (mutableDateTime1.compareTo(dateTime24) == 0) == mutableDateTime1.equals(dateTime24));
    }

    @Test
    public void test436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test436");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(4);
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.DateTime dateTime3 = org.joda.time.DateTime.now(dateTimeZone1);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.ReadableInstant readableInstant8 = null;
        org.joda.time.Period period9 = new org.joda.time.Period(readableDuration7, readableInstant8);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 1L, periodType12);
        org.joda.time.Period period15 = period13.minusSeconds((-1));
        java.lang.String str16 = period13.toString();
        org.joda.time.Period period17 = period13.toPeriod();
        org.joda.time.PeriodType periodType18 = period13.getPeriodType();
        org.joda.time.Period period19 = period9.normalizedStandard(periodType18);
        org.joda.time.DurationFieldType durationFieldType20 = null;
        int int21 = periodType18.indexOf(durationFieldType20);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.eras();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType18, chronology25);
        org.joda.time.LocalTime localTime31 = org.joda.time.LocalTime.fromMillisOfDay((long) 381, chronology25);
        org.joda.time.DateTime dateTime32 = dateTime3.withFields((org.joda.time.ReadablePartial) localTime31);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime2 and instant22", (mutableDateTime2.compareTo(instant22) == 0) == mutableDateTime2.equals(instant22));
    }

    @Test
    public void test437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test437");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        long long8 = chronology3.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = chronology3.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField10 = chronology3.clockhourOfDay();
        int int11 = dateTimeField10.getMinimumValue();
        boolean boolean13 = dateTimeField10.isLeap((long) 26312);
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime14.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str21 = dateTimeFieldType20.getName();
        int int22 = localDateTime14.indexOf(dateTimeFieldType20);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.minusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMillis(10);
        int int27 = localDateTime26.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone28 = null;
        org.joda.time.LocalTime localTime29 = new org.joda.time.LocalTime(dateTimeZone28);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalTime localTime31 = localTime29.plus(readablePeriod30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        org.joda.time.DurationFieldType durationFieldType37 = periodType34.getFieldType((int) (short) 0);
        boolean boolean38 = localTime29.isSupported(durationFieldType37);
        java.lang.String str39 = durationFieldType37.toString();
        org.joda.time.DateTimeZone dateTimeZone40 = null;
        org.joda.time.LocalTime localTime41 = new org.joda.time.LocalTime(dateTimeZone40);
        org.joda.time.LocalTime localTime43 = localTime41.minusHours((int) (byte) 100);
        org.joda.time.Chronology chronology44 = localTime43.getChronology();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime(chronology44);
        org.joda.time.LocalTime localTime46 = org.joda.time.LocalTime.now(chronology44);
        org.joda.time.DurationField durationField47 = durationFieldType37.getField(chronology44);
        org.joda.time.DateTimeField dateTimeField48 = chronology44.centuryOfEra();
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) 2037);
        org.joda.time.Period period51 = duration50.toPeriod();
        int[] intArray54 = chronology44.get((org.joda.time.ReadablePeriod) period51, (long) 1349, (long) 62357);
        int int55 = dateTimeField10.getMaximumValue((org.joda.time.ReadablePartial) localDateTime26, intArray54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField4 and durationField47", Math.signum(durationField4.compareTo(durationField47)) == -Math.signum(durationField47.compareTo(durationField4)));
    }

    @Test
    public void test438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test438");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.withMaximumValue();
        java.util.Date date4 = localDate3.toDate();
        org.joda.time.LocalDate localDate6 = localDate3.minusMonths((int) ' ');
        org.joda.time.LocalDate localDate8 = localDate6.withYear(1973);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration13 = duration10.minus((long) 292278993);
        org.joda.time.Period period14 = new org.joda.time.Period((java.lang.Object) duration13);
        org.joda.time.Duration duration15 = duration13.toDuration();
        boolean boolean16 = localDate6.equals((java.lang.Object) duration13);
        org.joda.time.Duration duration19 = duration13.withDurationAdded(617L, (-52));
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime(chronology20);
        int int22 = dateTime21.getYearOfCentury();
        int int23 = dateTime21.getYearOfEra();
        org.joda.time.MutableDateTime mutableDateTime24 = dateTime21.toMutableDateTime();
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration29 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration31 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration34 = duration31.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean35 = duration29.isLongerThan((org.joda.time.ReadableDuration) duration34);
        org.joda.time.Duration duration36 = duration26.minus((org.joda.time.ReadableDuration) duration29);
        mutableDateTime24.add((org.joda.time.ReadableDuration) duration29);
        long long38 = duration29.getStandardMinutes();
        boolean boolean39 = duration19.isEqual((org.joda.time.ReadableDuration) duration29);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.DateTime dateTime41 = new org.joda.time.DateTime(chronology40);
        int int42 = dateTime41.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = null;
        java.lang.String str44 = dateTime41.toString(dateTimeFormatter43);
        org.joda.time.DateTime dateTime46 = dateTime41.minusMonths(22);
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Chronology chronology50 = instant49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.eras();
        org.joda.time.DateTime dateTime52 = dateTime41.withChronology(chronology50);
        org.joda.time.DateTime dateTime54 = dateTime41.plusYears(340);
        org.joda.time.DateTime dateTime55 = dateTime41.withTimeAtStartOfDay();
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period58 = duration57.toPeriod();
        org.joda.time.Period period60 = period58.minusYears((-1));
        org.joda.time.Period period62 = period58.withMillis(100);
        int int63 = period62.getMonths();
        org.joda.time.Period period65 = period62.plusMillis(4);
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.PeriodType periodType72 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod73 = new org.joda.time.MutablePeriod(readableInstant70, readableInstant71, periodType72);
        org.joda.time.DurationFieldType durationFieldType75 = periodType72.getFieldType((int) (short) 0);
        java.lang.String str76 = periodType72.toString();
        org.joda.time.Instant instant77 = new org.joda.time.Instant();
        org.joda.time.Instant instant79 = instant77.withMillis(0L);
        org.joda.time.Chronology chronology80 = instant79.getChronology();
        org.joda.time.Period period81 = new org.joda.time.Period((long) 53, (long) (-1), periodType72, chronology80);
        org.joda.time.Chronology chronology82 = null;
        org.joda.time.DateTime dateTime83 = new org.joda.time.DateTime(chronology82);
        org.joda.time.DateTime dateTime85 = dateTime83.plusMinutes(15);
        org.joda.time.Chronology chronology86 = dateTime83.getChronology();
        org.joda.time.DurationField durationField87 = chronology86.hours();
        org.joda.time.DurationField durationField88 = chronology86.years();
        org.joda.time.DateTimeField dateTimeField89 = chronology86.dayOfYear();
        org.joda.time.DateTimeField dateTimeField90 = chronology86.halfdayOfDay();
        org.joda.time.MutablePeriod mutablePeriod91 = new org.joda.time.MutablePeriod((long) 26170959, (long) 999, periodType72, chronology86);
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod((java.lang.Object) period65, periodType72);
        org.joda.time.Period period93 = duration19.toPeriodFrom((org.joda.time.ReadableInstant) dateTime55, periodType72);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField51 and durationField87", Math.signum(durationField51.compareTo(durationField87)) == -Math.signum(durationField87.compareTo(durationField51)));
    }

    @Test
    public void test439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test439");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime8 = dateTime5.plusMillis(1439);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeZone dateTimeZone10 = chronology9.getZone();
        org.joda.time.DurationField durationField11 = chronology9.centuries();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(chronology9);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime16 = dateTime14.withZoneRetainFields(dateTimeZone15);
        boolean boolean18 = dateTime16.equals((java.lang.Object) (-1L));
        org.joda.time.Chronology chronology19 = dateTime16.getChronology();
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.Chronology chronology23 = instant22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.eras();
        org.joda.time.LocalTime localTime25 = org.joda.time.LocalTime.now(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime16.toDateTime(chronology23);
        org.joda.time.DateTime dateTime28 = dateTime26.minusHours(253);
        boolean boolean29 = mutableDateTime12.isEqual((org.joda.time.ReadableInstant) dateTime28);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField11 and durationField24", Math.signum(durationField11.compareTo(durationField24)) == -Math.signum(durationField24.compareTo(durationField11)));
    }

    @Test
    public void test440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test440");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.DateTime dateTime3 = instant2.toDateTime();
        org.joda.time.Instant instant4 = new org.joda.time.Instant();
        org.joda.time.Instant instant6 = instant4.withMillis(0L);
        org.joda.time.DateTime dateTime7 = instant6.toDateTime();
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType10 = org.joda.time.PeriodType.months();
        org.joda.time.Period period11 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime7, (org.joda.time.ReadableInstant) dateTime9, periodType10);
        boolean boolean12 = dateTime3.isBefore((org.joda.time.ReadableInstant) dateTime7);
        int int13 = dateTime7.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property17 = localDateTime14.hourOfDay();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        boolean boolean20 = property17.equals((java.lang.Object) 10L);
        long long21 = property17.remainder();
        java.lang.String str22 = property17.getAsText();
        org.joda.time.LocalDateTime localDateTime23 = property17.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = property17.getFieldType();
        int int25 = dateTime7.get(dateTimeFieldType24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        org.joda.time.DateTime dateTime30 = dateTime28.plusMinutes(15);
        org.joda.time.Chronology chronology31 = dateTime28.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.hours();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod(1440L, chronology31);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology31);
        org.joda.time.Chronology chronology35 = chronology31.withUTC();
        org.joda.time.DateTimeField dateTimeField36 = dateTimeFieldType24.getField(chronology35);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = null;
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.Instant instant41 = new org.joda.time.Instant();
        org.joda.time.Instant instant43 = instant41.withMillis(0L);
        org.joda.time.Chronology chronology44 = instant43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.eras();
        long long49 = chronology44.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter40.withChronology(chronology44);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(chronology44);
        org.joda.time.DateTimeField dateTimeField52 = chronology44.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone53 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone54 = dateTimeZone53.toTimeZone();
        long long56 = dateTimeZone53.previousTransition(100L);
        int int58 = dateTimeZone53.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology59 = chronology44.withZone(dateTimeZone53);
        java.util.TimeZone timeZone60 = dateTimeZone53.toTimeZone();
        java.lang.String str62 = dateTimeZone53.getName(946312L);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime((long) 26208340, dateTimeZone53);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.plusHours(26323);
        org.joda.time.LocalDateTime localDateTime67 = localDateTime63.minusMonths(26310348);
        org.joda.time.LocalDateTime.Property property68 = localDateTime63.millisOfSecond();
        org.joda.time.Chronology chronology71 = null;
        java.util.Locale locale72 = java.util.Locale.GERMAN;
        java.util.Locale locale73 = java.util.Locale.CANADA;
        java.lang.String str74 = locale72.getDisplayVariant(locale73);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket76 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology71, locale73, (java.lang.Integer) 10);
        java.util.Locale locale77 = java.util.Locale.GERMAN;
        java.util.Locale locale78 = java.util.Locale.CANADA;
        java.lang.String str79 = locale77.getDisplayVariant(locale78);
        org.joda.time.DateTimeZone dateTimeZone80 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale82 = java.util.Locale.GERMAN;
        java.lang.String str83 = locale82.getDisplayName();
        java.lang.String str84 = dateTimeZone80.getName(100L, locale82);
        java.lang.String str85 = locale78.getDisplayScript(locale82);
        java.lang.String str86 = locale73.getDisplayScript(locale78);
        java.util.Locale.Builder builder87 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder88 = builder87.clear();
        java.util.Locale locale89 = builder88.build();
        boolean boolean90 = locale89.hasExtensions();
        java.lang.String str92 = locale89.getExtension('x');
        java.util.Locale locale93 = locale89.stripExtensions();
        java.lang.String str94 = locale73.getDisplayVariant(locale89);
        java.lang.String str95 = dateTimeField36.getAsShortText((org.joda.time.ReadablePartial) localDateTime63, 0, locale89);
        org.junit.Assert.assertTrue("Contract failed: compareTo-anti-symmetric on durationField32 and durationField45", Math.signum(durationField32.compareTo(durationField45)) == -Math.signum(durationField45.compareTo(durationField32)));
    }

    @Test
    public void test441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test441");
        org.joda.time.Instant instant1 = new org.joda.time.Instant();
        org.joda.time.Instant instant3 = instant1.withMillis(0L);
        org.joda.time.Chronology chronology4 = instant3.getChronology();
        org.joda.time.DurationField durationField5 = chronology4.eras();
        org.joda.time.LocalTime localTime6 = org.joda.time.LocalTime.now(chronology4);
        org.joda.time.DurationField durationField7 = chronology4.eras();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 44, chronology4);
        org.joda.time.DateTime dateTime10 = dateTime8.withMonthOfYear((int) (short) 10);
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime11.yearOfCentury();
        mutableDateTime11.addSeconds(0);
        mutableDateTime11.add((long) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone19 = mutableDateTime11.getZone();
        boolean boolean20 = dateTime10.isAfter((org.joda.time.ReadableInstant) mutableDateTime11);
        org.joda.time.DateTimeZone dateTimeZone21 = null;
        org.joda.time.LocalTime localTime22 = new org.joda.time.LocalTime(dateTimeZone21);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalTime localTime24 = localTime22.plus(readablePeriod23);
        org.joda.time.ReadableInstant readableInstant25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.PeriodType periodType27 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod(readableInstant25, readableInstant26, periodType27);
        org.joda.time.DurationFieldType durationFieldType30 = periodType27.getFieldType((int) (short) 0);
        boolean boolean31 = localTime22.isSupported(durationFieldType30);
        mutableDateTime11.add(durationFieldType30, 311);
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withHoursRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.DurationField durationField46 = chronology45.eras();
        org.joda.time.LocalTime localTime47 = org.joda.time.LocalTime.now(chronology45);
        org.joda.time.DurationField durationField48 = chronology45.eras();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime((long) 44, chronology45);
        org.joda.time.DateTimeField dateTimeField50 = dateTimeFieldType40.getField(chronology45);
        org.joda.time.DateTimeField dateTimeField51 = chronology45.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod((long) (-292275054), periodType37, chronology45);
        org.joda.time.DateTimeField dateTimeField53 = chronology45.monthOfYear();
        org.joda.time.DurationField durationField54 = durationFieldType30.getField(chronology45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField5, durationField54, and durationField5", !(durationField5.compareTo(durationField54) == 0) || (Math.signum(durationField5.compareTo(durationField5)) == Math.signum(durationField54.compareTo(durationField5))));
    }

    @Test
    public void test442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test442");
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = chronology13.dayOfMonth();
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        boolean boolean17 = locale16.hasExtensions();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket20 = new org.joda.time.format.DateTimeParserBucket((-60715529700000L), chronology13, locale16, (java.lang.Integer) 4, (int) (short) 10);
        dateTimeParserBucket20.setOffset(63);
        dateTimeParserBucket20.setPivotYear((java.lang.Integer) 47892750);
        dateTimeParserBucket20.setPivotYear((java.lang.Integer) 26209742);
        java.util.TimeZone timeZone27 = java.util.TimeZone.getDefault();
        boolean boolean28 = timeZone27.observesDaylightTime();
        timeZone27.setRawOffset((-1));
        int int31 = timeZone27.getRawOffset();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.forOffsetHours(23);
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        boolean boolean36 = timeZone27.hasSameRules(timeZone34);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.forTimeZone(timeZone34);
        org.joda.time.MutableDateTime mutableDateTime38 = org.joda.time.MutableDateTime.now(dateTimeZone37);
        dateTimeParserBucket20.setZone(dateTimeZone37);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and mutableDateTime38", (instant10.compareTo(mutableDateTime38) == 0) == instant10.equals(mutableDateTime38));
    }

    @Test
    public void test443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test443");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours2 = duration1.toStandardHours();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.DateTime dateTime4 = new org.joda.time.DateTime(chronology3);
        int int5 = dateTime4.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration1, (org.joda.time.ReadableInstant) dateTime4);
        org.joda.time.DateTime dateTime8 = dateTime4.plus(0L);
        org.joda.time.Instant instant9 = dateTime8.toInstant();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetHours(100);
        org.joda.time.MutableDateTime mutableDateTime12 = dateTime8.toMutableDateTime(dateTimeZone11);
        org.joda.time.Duration duration14 = new org.joda.time.Duration(0L);
        org.joda.time.Duration duration16 = duration14.minus((long) 40);
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime12, (org.joda.time.ReadableDuration) duration16);
        org.joda.time.Period period19 = period17.withMonths(937);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime4 and mutableDateTime12", (dateTime4.compareTo(mutableDateTime12) == 0) == dateTime4.equals(mutableDateTime12));
    }

    @Test
    public void test444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test444");
        org.joda.time.MutablePeriod mutablePeriod4 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.Chronology chronology9 = instant8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.eras();
        org.joda.time.LocalTime localTime11 = org.joda.time.LocalTime.now(chronology9);
        org.joda.time.DurationField durationField12 = chronology9.eras();
        mutablePeriod4.setPeriod((long) 999, chronology9);
        org.joda.time.Chronology chronology14 = chronology9.withUTC();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.DateTimeField dateTimeField16 = chronology9.era();
        org.joda.time.DurationField durationField17 = chronology9.halfdays();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField10, durationField17, and durationField10", !(durationField10.compareTo(durationField17) == 0) || (Math.signum(durationField10.compareTo(durationField10)) == Math.signum(durationField17.compareTo(durationField10))));
    }

    @Test
    public void test445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test445");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.ReadableInstant readableInstant3 = null;
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.PeriodType periodType5 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(readableInstant3, readableInstant4, periodType5);
        org.joda.time.DurationFieldType durationFieldType8 = periodType5.getFieldType((int) (short) 0);
        java.lang.String str9 = periodType5.toString();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Chronology chronology13 = instant12.getChronology();
        org.joda.time.Period period14 = new org.joda.time.Period((long) 53, (long) (-1), periodType5, chronology13);
        org.joda.time.DateTimeField dateTimeField15 = dateTimeFieldType0.getField(chronology13);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant19, readableInstant20, periodType21);
        org.joda.time.DurationFieldType durationFieldType24 = periodType21.getFieldType((int) (short) 0);
        java.lang.String str25 = periodType21.toString();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Chronology chronology29 = instant28.getChronology();
        org.joda.time.Period period30 = new org.joda.time.Period((long) 53, (long) (-1), periodType21, chronology29);
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.PeriodType periodType35 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod(readableInstant33, readableInstant34, periodType35);
        org.joda.time.DurationFieldType durationFieldType38 = periodType35.getFieldType((int) (short) 0);
        java.lang.String str39 = periodType35.toString();
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.Period period44 = new org.joda.time.Period((long) 53, (long) (-1), periodType35, chronology43);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (short) 10, periodType21, chronology43);
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType0.getField(chronology43);
        org.joda.time.MutableDateTime mutableDateTime48 = org.joda.time.MutableDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField49 = chronology43.clockhourOfDay();
        org.joda.time.DateTimeZone dateTimeZone50 = null;
        org.joda.time.LocalTime localTime51 = new org.joda.time.LocalTime(dateTimeZone50);
        org.joda.time.LocalTime localTime53 = localTime51.minusHours((int) (byte) 100);
        org.joda.time.LocalTime localTime55 = localTime53.withHourOfDay(0);
        org.joda.time.LocalTime localTime57 = localTime55.withMillisOfSecond(44);
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.ReadableInstant readableInstant62 = null;
        org.joda.time.Period period63 = new org.joda.time.Period(readableDuration61, readableInstant62);
        org.joda.time.PeriodType periodType66 = null;
        org.joda.time.Period period67 = new org.joda.time.Period((long) 100, 1L, periodType66);
        org.joda.time.Period period69 = period67.minusSeconds((-1));
        java.lang.String str70 = period67.toString();
        org.joda.time.Period period71 = period67.toPeriod();
        org.joda.time.PeriodType periodType72 = period67.getPeriodType();
        org.joda.time.Period period73 = period63.normalizedStandard(periodType72);
        org.joda.time.DurationFieldType durationFieldType74 = null;
        int int75 = periodType72.indexOf(durationFieldType74);
        org.joda.time.Instant instant76 = new org.joda.time.Instant();
        org.joda.time.Instant instant78 = instant76.withMillis(0L);
        org.joda.time.Chronology chronology79 = instant78.getChronology();
        org.joda.time.DurationField durationField80 = chronology79.eras();
        org.joda.time.LocalTime localTime81 = org.joda.time.LocalTime.now(chronology79);
        org.joda.time.DurationField durationField82 = chronology79.eras();
        org.joda.time.DateTimeField dateTimeField83 = chronology79.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod84 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType72, chronology79);
        org.joda.time.DurationFieldType durationFieldType85 = null;
        boolean boolean86 = periodType72.isSupported(durationFieldType85);
        org.joda.time.MutablePeriod mutablePeriod87 = new org.joda.time.MutablePeriod((long) (byte) 0, periodType72);
        mutablePeriod87.clear();
        org.joda.time.Duration duration90 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration93 = duration90.withDurationAdded((long) (short) 100, (int) ' ');
        mutablePeriod87.add((org.joda.time.ReadableDuration) duration90);
        int[] intArray95 = mutablePeriod87.getValues();
        chronology43.validate((org.joda.time.ReadablePartial) localTime57, intArray95);
        org.joda.time.DurationField durationField97 = chronology43.weeks();
        org.junit.Assert.assertTrue("Contract failed: compareTo-substitutability on durationField80, durationField97, and durationField80", !(durationField80.compareTo(durationField97) == 0) || (Math.signum(durationField80.compareTo(durationField80)) == Math.signum(durationField97.compareTo(durationField80))));
    }

    @Test
    public void test446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test446");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.yearOfCentury();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration11 = duration8.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration12 = duration5.minus((org.joda.time.ReadableDuration) duration11);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration5);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime0.centuryOfEra();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.ReadableInstant readableInstant18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period(readableDuration17, readableInstant18);
        org.joda.time.PeriodType periodType22 = null;
        org.joda.time.Period period23 = new org.joda.time.Period((long) 100, 1L, periodType22);
        org.joda.time.Period period25 = period23.minusSeconds((-1));
        java.lang.String str26 = period23.toString();
        org.joda.time.Period period27 = period23.toPeriod();
        org.joda.time.PeriodType periodType28 = period23.getPeriodType();
        org.joda.time.Period period29 = period19.normalizedStandard(periodType28);
        org.joda.time.DurationFieldType durationFieldType30 = null;
        int int31 = periodType28.indexOf(durationFieldType30);
        org.joda.time.Instant instant32 = new org.joda.time.Instant();
        org.joda.time.Instant instant34 = instant32.withMillis(0L);
        org.joda.time.Chronology chronology35 = instant34.getChronology();
        org.joda.time.DurationField durationField36 = chronology35.eras();
        org.joda.time.LocalTime localTime37 = org.joda.time.LocalTime.now(chronology35);
        org.joda.time.DurationField durationField38 = chronology35.eras();
        org.joda.time.DateTimeField dateTimeField39 = chronology35.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType28, chronology35);
        org.joda.time.DateTimeField dateTimeField41 = chronology35.hourOfDay();
        org.joda.time.Chronology chronology42 = chronology35.withUTC();
        org.joda.time.DateTime dateTime43 = mutableDateTime0.toDateTime(chronology35);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.DateTime dateTime46 = new org.joda.time.DateTime(chronology45);
        int int47 = dateTime46.getYearOfCentury();
        int int48 = dateTime46.getWeekyear();
        org.joda.time.DateTime dateTime50 = dateTime46.plus((long) 15);
        org.joda.time.LocalDateTime localDateTime51 = dateTime50.toLocalDateTime();
        org.joda.time.Instant instant52 = new org.joda.time.Instant();
        org.joda.time.Instant instant54 = instant52.withMillis(0L);
        org.joda.time.Chronology chronology55 = instant54.getChronology();
        org.joda.time.DurationField durationField56 = chronology55.eras();
        long long60 = chronology55.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField61 = chronology55.halfdayOfDay();
        org.joda.time.LocalDate localDate62 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property63 = localDate62.monthOfYear();
        org.joda.time.DateTimeField dateTimeField64 = property63.getField();
        org.joda.time.LocalDate localDate65 = property63.roundCeilingCopy();
        org.joda.time.LocalDate localDate67 = localDate65.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate69 = localDate65.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate71 = localDate69.plusWeeks((int) (byte) 10);
        org.joda.time.Instant instant73 = new org.joda.time.Instant();
        org.joda.time.Instant instant75 = instant73.withMillis(0L);
        org.joda.time.Chronology chronology76 = instant75.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.eras();
        long long81 = chronology76.add(0L, (long) 2022, (int) '4');
        org.joda.time.ReadableDuration readableDuration82 = null;
        org.joda.time.ReadableInstant readableInstant83 = null;
        org.joda.time.Period period84 = new org.joda.time.Period(readableDuration82, readableInstant83);
        int[] intArray87 = chronology76.get((org.joda.time.ReadablePeriod) period84, (long) 0, (long) 48);
        int[] intArray89 = dateTimeField61.addWrapField((org.joda.time.ReadablePartial) localDate69, 0, intArray87, 443);
        chronology35.validate((org.joda.time.ReadablePartial) localDateTime51, intArray87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime43", (mutableDateTime0.compareTo(dateTime43) == 0) == mutableDateTime0.equals(dateTime43));
    }

    @Test
    public void test447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test447");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime3.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.DateTime dateTime14 = localDateTime7.toDateTime((org.joda.time.ReadableInstant) dateTime11);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime17 = dateTime14.withZone(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) 37, dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime18.toMutableDateTime();
        mutableDateTime18.addMinutes(777);
        int int22 = mutableDateTime18.getSecondOfDay();
        boolean boolean23 = locale0.equals((java.lang.Object) int22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime14 and dateTime17", (dateTime14.compareTo(dateTime17) == 0) == dateTime14.equals(dateTime17));
    }

    @Test
    public void test448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test448");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology6);
        org.joda.time.DateTimeField dateTimeField14 = chronology6.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        long long18 = dateTimeZone15.previousTransition(100L);
        int int20 = dateTimeZone15.getStandardOffset(86403200L);
        org.joda.time.Chronology chronology21 = chronology6.withZone(dateTimeZone15);
        org.joda.time.MutableDateTime mutableDateTime22 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime22.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.set(45);
        org.joda.time.MutableDateTime mutableDateTime26 = property23.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime28 = property23.add(45);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        long long32 = dateTimeZone29.previousTransition(100L);
        int int34 = dateTimeZone29.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime35 = mutableDateTime28.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime36 = org.joda.time.LocalDateTime.now(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.plusYears(5);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.withYearOfEra(99);
        int int41 = localDateTime38.getEra();
        org.joda.time.LocalDateTime localDateTime42 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime44 = localDateTime42.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property45 = localDateTime42.hourOfDay();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime42.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType48 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str49 = dateTimeFieldType48.getName();
        int int50 = localDateTime42.indexOf(dateTimeFieldType48);
        java.lang.String str51 = dateTimeFieldType48.getName();
        java.lang.String str52 = dateTimeFieldType48.getName();
        boolean boolean53 = localDateTime38.isSupported(dateTimeFieldType48);
        int int54 = localDateTime38.getDayOfWeek();
        boolean boolean55 = dateTimeZone15.isLocalDateTimeGap(localDateTime38);
        org.joda.time.LocalTime localTime56 = new org.joda.time.LocalTime(dateTimeZone15);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime22 and dateTime35", (mutableDateTime22.compareTo(dateTime35) == 0) == mutableDateTime22.equals(dateTime35));
    }

    @Test
    public void test449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test449");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property1 = mutableDateTime0.centuryOfEra();
        mutableDateTime0.setDayOfMonth(3);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.add(62181);
        int int8 = mutableDateTime7.getHourOfDay();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration13 = duration10.withDurationAdded((long) (short) 100, (int) ' ');
        long long14 = duration13.getMillis();
        org.joda.time.Instant instant15 = new org.joda.time.Instant();
        org.joda.time.Instant instant17 = instant15.withMillis(0L);
        org.joda.time.DateTime dateTime18 = instant17.toDateTime();
        org.joda.time.Instant instant19 = new org.joda.time.Instant();
        org.joda.time.Instant instant21 = instant19.withMillis(0L);
        org.joda.time.DateTime dateTime22 = instant21.toDateTime();
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.months();
        org.joda.time.Period period26 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime22, (org.joda.time.ReadableInstant) dateTime24, periodType25);
        boolean boolean27 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime22);
        int int28 = dateTime22.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant29 = null;
        org.joda.time.ReadableInstant readableInstant30 = null;
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod32 = new org.joda.time.MutablePeriod(readableInstant29, readableInstant30, periodType31);
        org.joda.time.PeriodType periodType33 = periodType31.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration13, (org.joda.time.ReadableInstant) dateTime22, periodType31);
        mutableDateTime7.add((org.joda.time.ReadableDuration) duration13);
        mutableDateTime7.addYears(0);
        mutableDateTime7.setTime(1462885L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant17 and dateTime18", (instant17.compareTo(dateTime18) == 0) == instant17.equals(dateTime18));
    }

    @Test
    public void test450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test450");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.DateTime dateTime3 = dateTime1.plusMinutes(15);
        org.joda.time.Chronology chronology4 = dateTime1.getChronology();
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        org.joda.time.LocalTime localTime10 = org.joda.time.LocalTime.now(chronology8);
        org.joda.time.DurationField durationField11 = chronology8.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology8.hourOfDay();
        org.joda.time.DateTime dateTime13 = dateTime1.withChronology(chronology8);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.getMutableDateTime();
        boolean boolean17 = dateTime13.isBefore((org.joda.time.ReadableInstant) mutableDateTime16);
        mutableDateTime16.addWeekyears((-1));
        mutableDateTime16.addHours(26150565);
        org.joda.time.Instant instant22 = new org.joda.time.Instant();
        org.joda.time.Instant instant24 = instant22.withMillis(0L);
        org.joda.time.Chronology chronology25 = instant24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.eras();
        org.joda.time.LocalTime localTime27 = org.joda.time.LocalTime.now(chronology25);
        org.joda.time.DurationField durationField28 = chronology25.eras();
        org.joda.time.DateTimeField dateTimeField29 = chronology25.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.secondOfMinute();
        mutableDateTime16.setRounding(dateTimeField30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime16.secondOfMinute();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = property32.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime34 = property32.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime36 = property32.add(55L);
        mutableDateTime36.setDate(5052L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant5", (dateTime1.compareTo(instant5) == 0) == dateTime1.equals(instant5));
    }

    @Test
    public void test451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test451");
        java.lang.Object obj0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(obj0);
        boolean boolean3 = dateTime1.isBefore((long) 7);
        java.lang.String str4 = dateTime1.toString();
        org.joda.time.DateTime dateTime6 = dateTime1.minus((long) 7);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DateTime dateTime11 = dateTime1.toDateTime(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.era();
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime(chronology10);
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime14.copy();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime14.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.dayOfYear();
        java.util.Locale locale20 = java.util.Locale.KOREA;
        int int21 = property19.getMaximumTextLength(locale20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property19.getFieldType();
        boolean boolean23 = localDateTime13.isSupported(dateTimeFieldType22);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant7", (dateTime1.compareTo(instant7) == 0) == dateTime1.equals(instant7));
    }

    @Test
    public void test452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test452");
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration7 = duration4.withDurationAdded((long) (short) 100, (int) ' ');
        long long8 = duration7.getMillis();
        org.joda.time.Instant instant9 = new org.joda.time.Instant();
        org.joda.time.Instant instant11 = instant9.withMillis(0L);
        org.joda.time.DateTime dateTime12 = instant11.toDateTime();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.DateTime dateTime16 = instant15.toDateTime();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType19 = org.joda.time.PeriodType.months();
        org.joda.time.Period period20 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime16, (org.joda.time.ReadableInstant) dateTime18, periodType19);
        boolean boolean21 = dateTime12.isBefore((org.joda.time.ReadableInstant) dateTime16);
        int int22 = dateTime16.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        org.joda.time.PeriodType periodType27 = periodType25.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod28 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration7, (org.joda.time.ReadableInstant) dateTime16, periodType25);
        org.joda.time.Period period29 = new org.joda.time.Period(0L, 24L, periodType25);
        org.joda.time.PeriodType periodType30 = periodType25.withYearsRemoved();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period34 = duration33.toPeriod();
        org.joda.time.Period period36 = period34.minusYears((-1));
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.years();
        org.joda.time.Period period39 = new org.joda.time.Period(60000L, periodType38);
        org.joda.time.Period period40 = period36.withFields((org.joda.time.ReadablePeriod) period39);
        org.joda.time.PeriodType periodType41 = period36.getPeriodType();
        org.joda.time.PeriodType periodType42 = periodType41.withDaysRemoved();
        org.joda.time.PeriodType periodType43 = periodType41.withWeeksRemoved();
        org.joda.time.PeriodType periodType44 = periodType41.withMinutesRemoved();
        org.joda.time.Instant instant45 = new org.joda.time.Instant();
        org.joda.time.Instant instant47 = instant45.withMillis(0L);
        org.joda.time.Chronology chronology48 = instant47.getChronology();
        org.joda.time.DurationField durationField49 = chronology48.eras();
        long long53 = chronology48.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField54 = chronology48.secondOfMinute();
        boolean boolean55 = dateTimeField54.isSupported();
        org.joda.time.LocalDate localDate56 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property57 = localDate56.monthOfYear();
        int int58 = dateTimeField54.getMinimumValue((org.joda.time.ReadablePartial) localDate56);
        org.joda.time.LocalDate localDate60 = localDate56.withYearOfCentury(46);
        org.joda.time.LocalDate.Property property61 = localDate56.dayOfMonth();
        org.joda.time.Chronology chronology62 = localDate56.getChronology();
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(chronology62);
        org.joda.time.Period period64 = new org.joda.time.Period((long) 69, periodType41, chronology62);
        org.joda.time.MutablePeriod mutablePeriod65 = new org.joda.time.MutablePeriod((long) 314, periodType25, chronology62);
        org.joda.time.DateTimeField dateTimeField66 = chronology62.hourOfDay();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant11 and dateTime12", (instant11.compareTo(dateTime12) == 0) == instant11.equals(dateTime12));
    }

    @Test
    public void test453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test453");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.secondOfDay();
        int int4 = mutableDateTime0.getDayOfWeek();
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period7 = duration6.toPeriod();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration12 = duration9.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration13 = duration6.minus((org.joda.time.ReadableDuration) duration12);
        mutableDateTime0.add((org.joda.time.ReadableDuration) duration6, 19045);
        org.joda.time.Instant instant16 = new org.joda.time.Instant();
        org.joda.time.Instant instant18 = instant16.withMillis(0L);
        org.joda.time.DateTime dateTime19 = instant18.toDateTime();
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.DateTime dateTime23 = instant22.toDateTime();
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType26 = org.joda.time.PeriodType.months();
        org.joda.time.Period period27 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime23, (org.joda.time.ReadableInstant) dateTime25, periodType26);
        boolean boolean28 = dateTime19.isBefore((org.joda.time.ReadableInstant) dateTime23);
        int int29 = dateTime23.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime30 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.DateTimeField dateTimeField34 = property33.getField();
        boolean boolean36 = property33.equals((java.lang.Object) 10L);
        long long37 = property33.remainder();
        java.lang.String str38 = property33.getAsText();
        org.joda.time.LocalDateTime localDateTime39 = property33.roundCeilingCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType40 = property33.getFieldType();
        int int41 = dateTime23.get(dateTimeFieldType40);
        org.joda.time.DateTime dateTime42 = dateTime23.withLaterOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration43, readableInstant44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period51 = period49.minusSeconds((-1));
        java.lang.String str52 = period49.toString();
        org.joda.time.Period period53 = period49.toPeriod();
        org.joda.time.PeriodType periodType54 = period49.getPeriodType();
        org.joda.time.Period period55 = period45.normalizedStandard(periodType54);
        org.joda.time.Period period57 = period55.withSeconds(10);
        org.joda.time.Minutes minutes58 = period55.toStandardMinutes();
        org.joda.time.DurationFieldType[] durationFieldTypeArray59 = period55.getFieldTypes();
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.forFields(durationFieldTypeArray59);
        org.joda.time.Period period61 = duration6.toPeriodTo((org.joda.time.ReadableInstant) dateTime23, periodType60);
        java.lang.String str62 = periodType60.getName();
        org.joda.time.PeriodType periodType63 = periodType60.withSecondsRemoved();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant18 and dateTime19", (instant18.compareTo(dateTime19) == 0) == instant18.equals(dateTime19));
    }

    @Test
    public void test454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test454");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.DateTime dateTime6 = instant5.toDateTime();
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType9 = org.joda.time.PeriodType.months();
        org.joda.time.Period period10 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime6, (org.joda.time.ReadableInstant) dateTime8, periodType9);
        org.joda.time.DateTime.Property property11 = dateTime8.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = property11.getFieldType();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime0.property(dateTimeFieldType12);
        mutableDateTime0.add(1645514161062L);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime0.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime17 = property16.roundHalfEven();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime6", (instant5.compareTo(dateTime6) == 0) == instant5.equals(dateTime6));
    }

    @Test
    public void test455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test455");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration3 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str4 = duration3.toString();
        boolean boolean5 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration3);
        org.joda.time.Duration duration7 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period8 = duration7.toPeriod();
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration12 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration15 = duration12.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean16 = duration10.isLongerThan((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Duration duration17 = duration7.minus((org.joda.time.ReadableDuration) duration10);
        boolean boolean18 = duration1.isShorterThan((org.joda.time.ReadableDuration) duration17);
        long long19 = duration1.getMillis();
        org.joda.time.DateTime dateTime21 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period28 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, (org.joda.time.ReadableDuration) duration27);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(chronology29);
        int int31 = dateTime30.getSecondOfMinute();
        org.joda.time.Interval interval32 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.LocalDate localDate33 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType34 = org.joda.time.DateTimeFieldType.dayOfMonth();
        boolean boolean35 = localDate33.isSupported(dateTimeFieldType34);
        org.joda.time.LocalDate.Property property36 = localDate33.yearOfEra();
        org.joda.time.Instant instant37 = new org.joda.time.Instant();
        org.joda.time.Instant instant39 = instant37.withMillis(0L);
        org.joda.time.Duration duration41 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str42 = duration41.toString();
        org.joda.time.Instant instant43 = instant37.minus((org.joda.time.ReadableDuration) duration41);
        int int44 = property36.getDifference((org.joda.time.ReadableInstant) instant37);
        org.joda.time.Duration duration47 = new org.joda.time.Duration((long) (short) -1, (long) (-292275054));
        org.joda.time.Instant instant48 = instant37.plus((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str51 = duration50.toString();
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours54 = duration53.toStandardHours();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        int int57 = dateTime56.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration53, (org.joda.time.ReadableInstant) dateTime56);
        org.joda.time.Duration duration59 = duration50.plus((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period62 = duration61.toPeriod();
        org.joda.time.Duration duration64 = duration61.minus((long) 292278993);
        org.joda.time.MutableDateTime mutableDateTime65 = org.joda.time.MutableDateTime.now();
        mutableDateTime65.add((long) 'a');
        org.joda.time.MutableDateTime.Property property68 = mutableDateTime65.yearOfCentury();
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period71 = duration70.toPeriod();
        org.joda.time.Duration duration73 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration76 = duration73.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration77 = duration70.minus((org.joda.time.ReadableDuration) duration76);
        mutableDateTime65.add((org.joda.time.ReadableDuration) duration70);
        boolean boolean79 = duration64.isShorterThan((org.joda.time.ReadableDuration) duration70);
        boolean boolean80 = duration53.isLongerThan((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Instant instant81 = instant48.minus((org.joda.time.ReadableDuration) duration64);
        org.joda.time.Interval interval82 = duration27.toIntervalTo((org.joda.time.ReadableInstant) instant81);
        org.joda.time.Instant instant83 = new org.joda.time.Instant();
        org.joda.time.Instant instant85 = instant83.withMillis(0L);
        org.joda.time.Duration duration87 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str88 = duration87.toString();
        org.joda.time.Instant instant89 = instant83.minus((org.joda.time.ReadableDuration) duration87);
        org.joda.time.MutableDateTime mutableDateTime90 = instant83.toMutableDateTime();
        org.joda.time.MutableDateTime.Property property91 = mutableDateTime90.centuryOfEra();
        mutableDateTime90.addYears(22);
        org.joda.time.Period period94 = new org.joda.time.Period((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) mutableDateTime90);
        long long95 = duration27.getStandardDays();
        long long96 = duration27.getStandardDays();
        long long97 = duration27.getStandardSeconds();
        org.joda.time.Duration duration98 = duration1.plus((org.joda.time.ReadableDuration) duration27);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime30 and instant37", (dateTime30.compareTo(instant37) == 0) == dateTime30.equals(instant37));
    }

    @Test
    public void test456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test456");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.Duration duration2 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period3 = duration2.toPeriod();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration8 = duration5.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration9 = duration2.minus((org.joda.time.ReadableDuration) duration8);
        org.joda.time.ReadableInstant readableInstant10 = null;
        org.joda.time.Interval interval11 = duration2.toIntervalFrom(readableInstant10);
        org.joda.time.Instant instant12 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.Instant instant14 = instant12.toInstant();
        org.joda.time.MutablePeriod mutablePeriod17 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod17.clear();
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period21 = duration20.toPeriod();
        org.joda.time.Duration duration24 = duration20.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime(chronology25);
        org.joda.time.DateTime dateTime28 = dateTime26.plusMinutes(15);
        org.joda.time.Interval interval29 = duration24.toIntervalTo((org.joda.time.ReadableInstant) dateTime28);
        mutablePeriod17.setPeriod((org.joda.time.ReadableInterval) interval29);
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        int int37 = mutablePeriod17.get(durationFieldType36);
        org.joda.time.Duration duration39 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        mutableDateTime40.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime43 = mutableDateTime40.copy();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime40.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration39, (org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.Instant instant46 = new org.joda.time.Instant();
        org.joda.time.Instant instant48 = instant46.withMillis(0L);
        org.joda.time.Chronology chronology49 = instant48.getChronology();
        org.joda.time.DurationField durationField50 = chronology49.eras();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.now(chronology49);
        org.joda.time.DurationField durationField52 = chronology49.eras();
        mutablePeriod17.setPeriod((org.joda.time.ReadableDuration) duration39, chronology49);
        org.joda.time.Instant instant54 = instant14.plus((org.joda.time.ReadableDuration) duration39);
        org.joda.time.Instant instant57 = instant14.withDurationAdded((long) 62188, 26150803);
        org.joda.time.PeriodType periodType60 = null;
        org.joda.time.Period period61 = new org.joda.time.Period((long) 100, 1L, periodType60);
        org.joda.time.Period period63 = period61.minusSeconds((-1));
        java.lang.String str64 = period61.toString();
        org.joda.time.Period period66 = period61.withYears(1973);
        org.joda.time.PeriodType periodType67 = period61.getPeriodType();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration2, (org.joda.time.ReadableInstant) instant14, periodType67);
        org.joda.time.Period period69 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableDuration) duration2);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant12 and dateTime13", (instant12.compareTo(dateTime13) == 0) == instant12.equals(dateTime13));
    }

    @Test
    public void test457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test457");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.Instant instant5 = instant3.withMillis(0L);
        org.joda.time.Chronology chronology6 = instant5.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        long long11 = chronology6.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter2.withChronology(chronology6);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter12.withOffsetParsed();
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.DateTime dateTime17 = instant16.toDateTime();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType20 = org.joda.time.PeriodType.months();
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableInstant) dateTime19, periodType20);
        org.joda.time.DateTime.Property property22 = dateTime19.minuteOfDay();
        org.joda.time.DateTime dateTime23 = property22.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime25 = property22.addToCopy(953979L);
        org.joda.time.DateTime dateTime27 = dateTime25.withDayOfYear(3);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration33 = duration30.withDurationAdded((long) (short) 100, (int) ' ');
        long long34 = duration33.getMillis();
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.DateTime dateTime38 = instant37.toDateTime();
        org.joda.time.Instant instant39 = new org.joda.time.Instant();
        org.joda.time.Instant instant41 = instant39.withMillis(0L);
        org.joda.time.DateTime dateTime42 = instant41.toDateTime();
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.months();
        org.joda.time.Period period46 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime42, (org.joda.time.ReadableInstant) dateTime44, periodType45);
        boolean boolean47 = dateTime38.isBefore((org.joda.time.ReadableInstant) dateTime42);
        int int48 = dateTime42.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant49 = null;
        org.joda.time.ReadableInstant readableInstant50 = null;
        org.joda.time.PeriodType periodType51 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(readableInstant49, readableInstant50, periodType51);
        org.joda.time.PeriodType periodType53 = periodType51.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime42, periodType51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.DateTime dateTime56 = new org.joda.time.DateTime(chronology55);
        org.joda.time.DateTime dateTime58 = dateTime56.plusMinutes(15);
        org.joda.time.Chronology chronology59 = dateTime56.getChronology();
        org.joda.time.Instant instant60 = new org.joda.time.Instant();
        org.joda.time.Instant instant62 = instant60.withMillis(0L);
        org.joda.time.Chronology chronology63 = instant62.getChronology();
        org.joda.time.DurationField durationField64 = chronology63.eras();
        org.joda.time.LocalTime localTime65 = org.joda.time.LocalTime.now(chronology63);
        org.joda.time.DurationField durationField66 = chronology63.eras();
        org.joda.time.DateTimeField dateTimeField67 = chronology63.hourOfDay();
        org.joda.time.DateTime dateTime68 = dateTime56.withChronology(chronology63);
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime69.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime71 = property70.getMutableDateTime();
        boolean boolean72 = dateTime68.isBefore((org.joda.time.ReadableInstant) mutableDateTime71);
        org.joda.time.Instant instant73 = new org.joda.time.Instant();
        org.joda.time.Instant instant75 = instant73.withMillis(0L);
        org.joda.time.Chronology chronology76 = instant75.getChronology();
        org.joda.time.DurationField durationField77 = chronology76.eras();
        long long81 = chronology76.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField82 = chronology76.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField83 = chronology76.minuteOfDay();
        mutableDateTime71.setChronology(chronology76);
        org.joda.time.DateTime dateTime85 = dateTime42.toDateTime(chronology76);
        org.joda.time.LocalTime localTime86 = new org.joda.time.LocalTime((long) 99, chronology76);
        boolean boolean87 = dateTime27.equals((java.lang.Object) chronology76);
        org.joda.time.DateTimeZone dateTimeZone88 = chronology76.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter89 = dateTimeFormatter13.withZone(dateTimeZone88);
        org.joda.time.format.DateTimeParser dateTimeParser90 = dateTimeFormatter89.getParser();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime56", (instant3.compareTo(dateTime56) == 0) == instant3.equals(dateTime56));
    }

    @Test
    public void test458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test458");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now();
        mutableDateTime5.add((long) 'a');
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime5.yearOfCentury();
        mutableDateTime5.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.ReadableInstant readableInstant14 = null;
        org.joda.time.Period period15 = new org.joda.time.Period(readableDuration13, readableInstant14);
        org.joda.time.PeriodType periodType18 = null;
        org.joda.time.Period period19 = new org.joda.time.Period((long) 100, 1L, periodType18);
        org.joda.time.Period period21 = period19.minusSeconds((-1));
        java.lang.String str22 = period19.toString();
        org.joda.time.Period period23 = period19.toPeriod();
        org.joda.time.PeriodType periodType24 = period19.getPeriodType();
        org.joda.time.Period period25 = period15.normalizedStandard(periodType24);
        org.joda.time.DurationFieldType durationFieldType26 = null;
        int int27 = periodType24.indexOf(durationFieldType26);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Chronology chronology31 = instant30.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.eras();
        org.joda.time.LocalTime localTime33 = org.joda.time.LocalTime.now(chronology31);
        org.joda.time.DurationField durationField34 = chronology31.eras();
        org.joda.time.DateTimeField dateTimeField35 = chronology31.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod36 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType24, chronology31);
        org.joda.time.MutableDateTime mutableDateTime37 = mutableDateTime5.toMutableDateTime(chronology31);
        mutablePeriod2.setPeriod((long) 36946953, 960000L, chronology31);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        mutableDateTime39.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime39.copy();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.ReadableInstant readableInstant44 = null;
        org.joda.time.Period period45 = new org.joda.time.Period(readableDuration43, readableInstant44);
        org.joda.time.PeriodType periodType48 = null;
        org.joda.time.Period period49 = new org.joda.time.Period((long) 100, 1L, periodType48);
        org.joda.time.Period period51 = period49.minusSeconds((-1));
        java.lang.String str52 = period49.toString();
        org.joda.time.Period period53 = period49.toPeriod();
        org.joda.time.PeriodType periodType54 = period49.getPeriodType();
        org.joda.time.Period period55 = period45.normalizedStandard(periodType54);
        int int56 = period55.getWeeks();
        mutableDateTime42.add((org.joda.time.ReadablePeriod) period55, 36946953);
        mutablePeriod2.setPeriod((org.joda.time.ReadablePeriod) period55);
        org.joda.time.MutablePeriod mutablePeriod60 = period55.toMutablePeriod();
        org.joda.time.Period period62 = period55.minusYears(4448);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime5 and mutableDateTime37", (mutableDateTime5.compareTo(mutableDateTime37) == 0) == mutableDateTime5.equals(mutableDateTime37));
    }

    @Test
    public void test459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test459");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (byte) 1);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod(999, (int) (short) -1, 0, (int) (short) -1);
        org.joda.time.Instant instant8 = new org.joda.time.Instant();
        org.joda.time.Instant instant10 = instant8.withMillis(0L);
        org.joda.time.Chronology chronology11 = instant10.getChronology();
        org.joda.time.DurationField durationField12 = chronology11.eras();
        org.joda.time.LocalTime localTime13 = org.joda.time.LocalTime.now(chronology11);
        org.joda.time.DurationField durationField14 = chronology11.eras();
        mutablePeriod6.setPeriod((long) 999, chronology11);
        org.joda.time.Chronology chronology16 = chronology11.withUTC();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = null;
        java.lang.String str19 = mutableDateTime17.toString(dateTimeFormatter18);
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration24 = duration21.withDurationAdded((long) (short) 100, (int) ' ');
        long long25 = duration24.getMillis();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.DateTime dateTime29 = instant28.toDateTime();
        org.joda.time.Instant instant30 = new org.joda.time.Instant();
        org.joda.time.Instant instant32 = instant30.withMillis(0L);
        org.joda.time.DateTime dateTime33 = instant32.toDateTime();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.months();
        org.joda.time.Period period37 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime33, (org.joda.time.ReadableInstant) dateTime35, periodType36);
        boolean boolean38 = dateTime29.isBefore((org.joda.time.ReadableInstant) dateTime33);
        int int39 = dateTime33.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableInstant40, readableInstant41, periodType42);
        org.joda.time.PeriodType periodType44 = periodType42.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) dateTime33, periodType42);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration24, 0);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalTime localTime50 = new org.joda.time.LocalTime((long) (short) 100, chronology49);
        org.joda.time.LocalTime localTime52 = localTime50.plusSeconds((int) (byte) 10);
        org.joda.time.DateTime dateTime53 = localTime50.toDateTimeToday();
        int int54 = dateTime53.getDayOfYear();
        org.joda.time.DateTime.Property property55 = dateTime53.weekyear();
        org.joda.time.Interval interval56 = duration24.toIntervalTo((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.PeriodType periodType57 = org.joda.time.PeriodType.standard();
        org.joda.time.PeriodType periodType58 = periodType57.withMonthsRemoved();
        org.joda.time.PeriodType periodType59 = periodType58.withDaysRemoved();
        org.joda.time.PeriodType periodType60 = periodType58.withMillisRemoved();
        org.joda.time.PeriodType periodType61 = periodType60.withMonthsRemoved();
        org.joda.time.Period period62 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime1, (org.joda.time.ReadableDuration) duration24, periodType61);
        org.joda.time.DateTime dateTime64 = dateTime1.plusDays(62295);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant10 and dateTime29", (instant10.compareTo(dateTime29) == 0) == instant10.equals(dateTime29));
    }

    @Test
    public void test460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test460");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra((int) '#');
        org.joda.time.DateTime dateTime10 = dateTime5.withYear((int) 'u');
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        mutableDateTime11.setDate((long) '#');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        int int21 = localDate17.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime5.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime29 = dateTime5.plusMinutes(0);
        org.joda.time.DateTime dateTime32 = dateTime5.withDurationAdded(1645514234816L, (-3077672));
        org.joda.time.LocalTime localTime33 = dateTime32.toLocalTime();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime5 and dateTime27", (dateTime5.compareTo(dateTime27) == 0) == dateTime5.equals(dateTime27));
    }

    @Test
    public void test461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test461");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period2 = duration1.toPeriod();
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.Instant instant5 = instant3.toInstant();
        org.joda.time.MutableDateTime mutableDateTime6 = instant3.toMutableDateTime();
        org.joda.time.DateTimeField dateTimeField7 = mutableDateTime6.getRoundingField();
        org.joda.time.PeriodType periodType8 = null;
        org.joda.time.Period period9 = duration1.toPeriodTo((org.joda.time.ReadableInstant) mutableDateTime6, periodType8);
        long long10 = duration1.getMillis();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test462");
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now();
        mutableDateTime2.add((long) 'a');
        org.joda.time.Duration duration6 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str9 = duration8.toString();
        boolean boolean10 = duration6.isShorterThan((org.joda.time.ReadableDuration) duration8);
        org.joda.time.Hours hours11 = duration6.toStandardHours();
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration6, 20);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = null;
        java.lang.String str18 = dateTime15.toString(dateTimeFormatter17);
        org.joda.time.DateTime dateTime20 = dateTime15.minusMonths(22);
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.Chronology chronology24 = instant23.getChronology();
        org.joda.time.DurationField durationField25 = chronology24.eras();
        org.joda.time.DateTime dateTime26 = dateTime15.withChronology(chronology24);
        org.joda.time.Period period27 = duration6.toPeriod(chronology24);
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.Period period32 = new org.joda.time.Period(readableDuration30, readableInstant31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) 100, 1L, periodType35);
        org.joda.time.Period period38 = period36.minusSeconds((-1));
        java.lang.String str39 = period36.toString();
        org.joda.time.Period period40 = period36.toPeriod();
        org.joda.time.PeriodType periodType41 = period36.getPeriodType();
        org.joda.time.Period period42 = period32.normalizedStandard(periodType41);
        java.lang.String str43 = periodType41.getName();
        java.lang.String str44 = periodType41.toString();
        org.joda.time.PeriodType periodType45 = periodType41.withDaysRemoved();
        org.joda.time.PeriodType periodType46 = periodType45.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod47 = new org.joda.time.MutablePeriod((long) 45, 1L, periodType46);
        int[] intArray49 = chronology24.get((org.joda.time.ReadablePeriod) mutablePeriod47, 1L);
        org.joda.time.DateTimeField dateTimeField50 = chronology24.clockhourOfHalfday();
        org.joda.time.LocalTime localTime51 = org.joda.time.LocalTime.fromMillisOfDay(25L, chronology24);
        org.joda.time.Period period52 = new org.joda.time.Period((long) 2990, chronology24);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and instant21", (dateTime15.compareTo(instant21) == 0) == dateTime15.equals(instant21));
    }

    @Test
    public void test463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test463");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime0.copy();
        int int15 = mutableDateTime14.getDayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime13", (mutableDateTime0.compareTo(dateTime13) == 0) == mutableDateTime0.equals(dateTime13));
    }

    @Test
    public void test464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test464");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException4 = new java.io.IOException("");
        java.io.IOException iOException5 = new java.io.IOException((java.lang.Throwable) iOException4);
        boolean boolean6 = mutableDateTime2.equals((java.lang.Object) iOException4);
        org.joda.time.Duration duration9 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime2.add((org.joda.time.ReadableDuration) duration9, 1424);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime2.era();
        org.joda.time.Duration duration16 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration19 = duration16.withDurationAdded((long) (short) 100, (int) ' ');
        long long20 = duration19.getMillis();
        org.joda.time.Instant instant21 = new org.joda.time.Instant();
        org.joda.time.Instant instant23 = instant21.withMillis(0L);
        org.joda.time.DateTime dateTime24 = instant23.toDateTime();
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.DateTime dateTime28 = instant27.toDateTime();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType31 = org.joda.time.PeriodType.months();
        org.joda.time.Period period32 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime28, (org.joda.time.ReadableInstant) dateTime30, periodType31);
        boolean boolean33 = dateTime24.isBefore((org.joda.time.ReadableInstant) dateTime28);
        int int34 = dateTime28.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.PeriodType periodType39 = periodType37.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod40 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration19, (org.joda.time.ReadableInstant) dateTime28, periodType37);
        org.joda.time.Period period41 = new org.joda.time.Period(0L, 24L, periodType37);
        org.joda.time.Period period42 = new org.joda.time.Period(readableInstant0, (org.joda.time.ReadableInstant) mutableDateTime2, periodType37);
        boolean boolean44 = mutableDateTime2.isBefore(25200000L);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime2.minuteOfHour();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology46);
        org.joda.time.DateTime dateTime49 = dateTime47.plusMinutes(15);
        org.joda.time.Chronology chronology50 = dateTime47.getChronology();
        java.lang.String str51 = chronology50.toString();
        org.joda.time.DateTimeField dateTimeField52 = chronology50.hourOfHalfday();
        mutableDateTime2.setRounding(dateTimeField52);
        org.joda.time.MutableDateTime.Property property54 = mutableDateTime2.dayOfMonth();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant21 and dateTime47", (instant21.compareTo(dateTime47) == 0) == instant21.equals(dateTime47));
    }

    @Test
    public void test465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test465");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime.Property property8 = dateTime7.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime9 = dateTime7.toMutableDateTime();
        int int10 = dateTime7.getWeekOfWeekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        org.joda.time.DateTime dateTime14 = dateTime12.plusMinutes(15);
        org.joda.time.Chronology chronology15 = dateTime12.getChronology();
        org.joda.time.DateTime dateTime17 = dateTime12.plusHours(19045);
        org.joda.time.DateTimeZone dateTimeZone18 = dateTime17.getZone();
        org.joda.time.DateTime dateTime19 = dateTime7.toDateTime(dateTimeZone18);
        long long20 = dateTime19.getMillis();
        org.joda.time.DateTime dateTime22 = dateTime19.minusHours(26150);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime(chronology23);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMinutes(15);
        org.joda.time.Chronology chronology27 = dateTime24.getChronology();
        java.lang.String str28 = chronology27.toString();
        org.joda.time.DateTimeField dateTimeField29 = chronology27.dayOfYear();
        long long32 = dateTimeField29.add((long) 19045, (long) (-99));
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.PeriodType periodType37 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod(readableInstant35, readableInstant36, periodType37);
        org.joda.time.DurationFieldType durationFieldType40 = periodType37.getFieldType((int) (short) 0);
        java.lang.String str41 = periodType37.toString();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.Instant instant44 = instant42.withMillis(0L);
        org.joda.time.Chronology chronology45 = instant44.getChronology();
        org.joda.time.Period period46 = new org.joda.time.Period((long) 53, (long) (-1), periodType37, chronology45);
        org.joda.time.LocalDate localDate47 = org.joda.time.LocalDate.now(chronology45);
        org.joda.time.LocalDate.Property property48 = localDate47.centuryOfEra();
        org.joda.time.LocalDate localDate49 = property48.roundCeilingCopy();
        java.util.Date date50 = localDate49.toDate();
        org.joda.time.LocalDate localDate51 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property52 = localDate51.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean54 = localDate51.isSupported(dateTimeFieldType53);
        int int55 = localDate51.getDayOfYear();
        org.joda.time.Interval interval56 = localDate51.toInterval();
        int int57 = localDate49.compareTo((org.joda.time.ReadablePartial) localDate51);
        int int58 = dateTimeField29.getMaximumValue((org.joda.time.ReadablePartial) localDate49);
        int int59 = dateTime19.get(dateTimeField29);
        int int60 = dateTime19.getMinuteOfDay();
        org.joda.time.LocalDateTime localDateTime61 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime63 = localDateTime61.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime63.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.dayOfMonth();
        org.joda.time.LocalDateTime.Property property67 = localDateTime65.millisOfDay();
        int int68 = localDateTime65.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime70 = localDateTime65.plusWeeks(26309196);
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) (byte) -1, chronology72);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.plusMonths(46);
        org.joda.time.DateTimeFieldType dateTimeFieldType76 = org.joda.time.DateTimeFieldType.millisOfSecond();
        int int77 = localDateTime75.get(dateTimeFieldType76);
        org.joda.time.LocalDateTime localDateTime78 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime80 = localDateTime78.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime82 = localDateTime80.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField84 = localDateTime82.getField((int) (byte) 0);
        org.joda.time.DateTimeField[] dateTimeFieldArray85 = localDateTime82.getFields();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime82.withDayOfWeek(1);
        boolean boolean88 = localDateTime75.isEqual((org.joda.time.ReadablePartial) localDateTime82);
        org.joda.time.LocalDateTime.Property property89 = localDateTime82.millisOfDay();
        org.joda.time.LocalDateTime localDateTime90 = property89.roundFloorCopy();
        org.joda.time.DateTimeFieldType dateTimeFieldType91 = property89.getFieldType();
        org.joda.time.LocalDateTime.Property property92 = localDateTime70.property(dateTimeFieldType91);
        java.lang.String str93 = dateTimeFieldType91.getName();
        int int94 = dateTime19.get(dateTimeFieldType91);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant42", (dateTime1.compareTo(instant42) == 0) == dateTime1.equals(instant42));
    }

    @Test
    public void test466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test466");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.Instant instant2 = instant0.toInstant();
        org.joda.time.MutablePeriod mutablePeriod5 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod5.clear();
        org.joda.time.Duration duration8 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period9 = duration8.toPeriod();
        org.joda.time.Duration duration12 = duration8.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime(chronology13);
        org.joda.time.DateTime dateTime16 = dateTime14.plusMinutes(15);
        org.joda.time.Interval interval17 = duration12.toIntervalTo((org.joda.time.ReadableInstant) dateTime16);
        mutablePeriod5.setPeriod((org.joda.time.ReadableInterval) interval17);
        org.joda.time.ReadableInstant readableInstant19 = null;
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.PeriodType periodType21 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod22 = new org.joda.time.MutablePeriod(readableInstant19, readableInstant20, periodType21);
        org.joda.time.DurationFieldType durationFieldType24 = periodType21.getFieldType((int) (short) 0);
        int int25 = mutablePeriod5.get(durationFieldType24);
        org.joda.time.Duration duration27 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now();
        mutableDateTime28.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime31 = mutableDateTime28.copy();
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime28.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod33 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration27, (org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.Instant instant34 = new org.joda.time.Instant();
        org.joda.time.Instant instant36 = instant34.withMillis(0L);
        org.joda.time.Chronology chronology37 = instant36.getChronology();
        org.joda.time.DurationField durationField38 = chronology37.eras();
        org.joda.time.LocalTime localTime39 = org.joda.time.LocalTime.now(chronology37);
        org.joda.time.DurationField durationField40 = chronology37.eras();
        mutablePeriod5.setPeriod((org.joda.time.ReadableDuration) duration27, chronology37);
        org.joda.time.Instant instant42 = instant2.plus((org.joda.time.ReadableDuration) duration27);
        org.joda.time.Duration duration43 = duration27.toDuration();
        org.joda.time.DateTime dateTime45 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period48 = duration47.toPeriod();
        org.joda.time.Duration duration51 = duration47.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period52 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime45, (org.joda.time.ReadableDuration) duration51);
        org.joda.time.Instant instant53 = dateTime45.toInstant();
        org.joda.time.DateTime dateTime56 = dateTime45.withDurationAdded((long) 3, 4);
        org.joda.time.Duration duration58 = org.joda.time.Duration.standardDays((long) 26148);
        org.joda.time.Duration duration61 = duration58.withDurationAdded((long) 51, 26197957);
        org.joda.time.DateTime dateTime62 = dateTime45.minus((org.joda.time.ReadableDuration) duration58);
        org.joda.time.Duration duration64 = duration58.plus(1645514240151L);
        boolean boolean65 = duration27.isShorterThan((org.joda.time.ReadableDuration) duration58);
        long long66 = duration58.getMillis();
        org.joda.time.Duration duration68 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration70 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str71 = duration70.toString();
        boolean boolean72 = duration68.isShorterThan((org.joda.time.ReadableDuration) duration70);
        org.joda.time.Duration duration74 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period75 = duration74.toPeriod();
        org.joda.time.Duration duration78 = duration74.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration80 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration83 = duration80.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean84 = duration78.isLongerThan((org.joda.time.ReadableDuration) duration80);
        boolean boolean85 = duration70.isEqual((org.joda.time.ReadableDuration) duration80);
        org.joda.time.Duration duration87 = org.joda.time.Duration.standardMinutes(1L);
        org.joda.time.Period period88 = duration87.toPeriod();
        boolean boolean89 = duration80.isEqual((org.joda.time.ReadableDuration) duration87);
        org.joda.time.Duration duration90 = new org.joda.time.Duration((java.lang.Object) duration80);
        boolean boolean91 = duration58.isLongerThan((org.joda.time.ReadableDuration) duration90);
        long long92 = duration58.getStandardMinutes();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test467");
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableDuration1, readableInstant2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period9 = period7.minusSeconds((-1));
        java.lang.String str10 = period7.toString();
        org.joda.time.Period period11 = period7.toPeriod();
        org.joda.time.PeriodType periodType12 = period7.getPeriodType();
        org.joda.time.Period period13 = period3.normalizedStandard(periodType12);
        java.lang.String str14 = periodType12.getName();
        java.lang.String str15 = periodType12.toString();
        org.joda.time.PeriodType periodType16 = periodType12.withDaysRemoved();
        org.joda.time.PeriodType periodType17 = periodType16.withDaysRemoved();
        org.joda.time.MutablePeriod mutablePeriod20 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod20.clear();
        org.joda.time.Duration duration23 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period24 = duration23.toPeriod();
        org.joda.time.Duration duration27 = duration23.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.DateTime dateTime29 = new org.joda.time.DateTime(chronology28);
        org.joda.time.DateTime dateTime31 = dateTime29.plusMinutes(15);
        org.joda.time.Interval interval32 = duration27.toIntervalTo((org.joda.time.ReadableInstant) dateTime31);
        mutablePeriod20.setPeriod((org.joda.time.ReadableInterval) interval32);
        org.joda.time.ReadableInstant readableInstant34 = null;
        org.joda.time.ReadableInstant readableInstant35 = null;
        org.joda.time.PeriodType periodType36 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod37 = new org.joda.time.MutablePeriod(readableInstant34, readableInstant35, periodType36);
        org.joda.time.DurationFieldType durationFieldType39 = periodType36.getFieldType((int) (short) 0);
        int int40 = mutablePeriod20.get(durationFieldType39);
        org.joda.time.Duration duration42 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now();
        mutableDateTime43.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime46 = mutableDateTime43.copy();
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime43.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration42, (org.joda.time.ReadableInstant) mutableDateTime43);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.eras();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(chronology52);
        org.joda.time.DurationField durationField55 = chronology52.eras();
        mutablePeriod20.setPeriod((org.joda.time.ReadableDuration) duration42, chronology52);
        org.joda.time.DateTimeField dateTimeField57 = chronology52.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod58 = new org.joda.time.MutablePeriod(19115594284013L, periodType16, chronology52);
        java.lang.String str59 = chronology52.toString();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime29 and instant49", (dateTime29.compareTo(instant49) == 0) == dateTime29.equals(instant49));
    }

    @Test
    public void test468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test468");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime();
        org.joda.time.Instant instant7 = mutableDateTime6.toInstant();
        org.joda.time.LocalDateTime localDateTime8 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.plusYears((int) (short) 100);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusSeconds((int) (byte) 10);
        java.lang.Object obj17 = null;
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime(obj17);
        org.joda.time.Duration duration20 = org.joda.time.Duration.standardSeconds((long) 45);
        org.joda.time.Period period21 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime18, (org.joda.time.ReadableDuration) duration20);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Instant instant23 = instant7.minus((org.joda.time.ReadableDuration) duration20);
        org.joda.time.Instant instant25 = instant7.minus((long) (-100));
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((java.lang.Object) instant25);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant7", (dateTime1.compareTo(instant7) == 0) == dateTime1.equals(instant7));
    }

    @Test
    public void test469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test469");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime8 = property4.set(1);
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        int int11 = dateTime10.getYearOfCentury();
        int int12 = dateTime10.getWeekyear();
        org.joda.time.DateTime dateTime13 = dateTime10.withEarlierOffsetAtOverlap();
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.MutableDateTime mutableDateTime15 = dateTime13.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.UTC;
        boolean boolean17 = dateTimeZone16.isFixed();
        mutableDateTime15.setZoneRetainFields(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime19 = mutableDateTime8.toMutableDateTime(dateTimeZone16);
        org.joda.time.MutableDateTime mutableDateTime20 = mutableDateTime19.copy();
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime20.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime22 = property21.roundFloor();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and mutableDateTime19", (mutableDateTime0.compareTo(mutableDateTime19) == 0) == mutableDateTime0.equals(mutableDateTime19));
    }

    @Test
    public void test470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test470");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime.Property property4 = dateTime1.dayOfYear();
        org.joda.time.DateTime dateTime6 = property4.addToCopy(26256);
        org.joda.time.DateTime dateTime8 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration10 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period11 = duration10.toPeriod();
        org.joda.time.Duration duration14 = duration10.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period15 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime8, (org.joda.time.ReadableDuration) duration14);
        org.joda.time.Instant instant16 = dateTime8.toInstant();
        org.joda.time.DateTime dateTime19 = dateTime8.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant20 = dateTime19.toInstant();
        org.joda.time.DateTime dateTime22 = dateTime19.minusMillis(62266);
        org.joda.time.DateMidnight dateMidnight23 = dateTime19.toDateMidnight();
        boolean boolean24 = dateTime6.isAfter((org.joda.time.ReadableInstant) dateMidnight23);
        org.joda.time.Instant instant25 = dateTime6.toInstant();
        org.joda.time.Instant instant26 = new org.joda.time.Instant();
        org.joda.time.Instant instant28 = instant26.withMillis(0L);
        org.joda.time.Duration duration30 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period31 = duration30.toPeriod();
        org.joda.time.Duration duration34 = duration30.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant35 = instant28.plus((org.joda.time.ReadableDuration) duration34);
        long long36 = instant35.getMillis();
        org.joda.time.MutableDateTime mutableDateTime37 = instant35.toMutableDateTimeISO();
        boolean boolean38 = instant25.isEqual((org.joda.time.ReadableInstant) instant35);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant26", (dateTime1.compareTo(instant26) == 0) == dateTime1.equals(instant26));
    }

    @Test
    public void test471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test471");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime4 = dateTime1.withEarlierOffsetAtOverlap();
        java.lang.String str5 = dateTime4.toString();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime();
        org.joda.time.DateTime.Property property7 = dateTime4.minuteOfHour();
        org.joda.time.DateTime dateTime9 = dateTime4.plusMonths(37068754);
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration13 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period14 = duration13.toPeriod();
        org.joda.time.Duration duration17 = duration13.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period18 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime11, (org.joda.time.ReadableDuration) duration17);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        int int21 = dateTime20.getSecondOfMinute();
        org.joda.time.Interval interval22 = duration17.toIntervalTo((org.joda.time.ReadableInstant) dateTime20);
        org.joda.time.Duration duration23 = duration17.toDuration();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(chronology24);
        int int26 = dateTime25.getYearOfCentury();
        int int27 = dateTime25.getWeekyear();
        org.joda.time.DateTime dateTime28 = dateTime25.withEarlierOffsetAtOverlap();
        org.joda.time.DateTime.Property property29 = dateTime25.yearOfEra();
        org.joda.time.DateTime dateTime30 = property29.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime31 = property29.roundHalfEvenCopy();
        org.joda.time.Duration duration33 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours34 = duration33.toStandardHours();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime(chronology35);
        int int37 = dateTime36.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod38 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration33, (org.joda.time.ReadableInstant) dateTime36);
        mutablePeriod38.addSeconds(292278993);
        mutablePeriod38.setPeriod((long) 45, 946312L);
        org.joda.time.DateTime dateTime44 = dateTime31.minus((org.joda.time.ReadablePeriod) mutablePeriod38);
        org.joda.time.DateTime dateTime47 = dateTime31.withDurationAdded((long) 1969, (int) (short) -1);
        org.joda.time.Duration duration49 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period50 = duration49.toPeriod();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration54 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration57 = duration54.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean58 = duration52.isLongerThan((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Duration duration59 = duration49.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration61 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration64 = duration61.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean65 = duration52.equals((java.lang.Object) duration61);
        org.joda.time.Period period66 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime47, (org.joda.time.ReadableDuration) duration52);
        org.joda.time.Duration duration67 = duration23.minus((org.joda.time.ReadableDuration) duration52);
        org.joda.time.ReadableDuration readableDuration69 = null;
        org.joda.time.ReadableInstant readableInstant70 = null;
        org.joda.time.Period period71 = new org.joda.time.Period(readableDuration69, readableInstant70);
        org.joda.time.PeriodType periodType74 = null;
        org.joda.time.Period period75 = new org.joda.time.Period((long) 100, 1L, periodType74);
        org.joda.time.Period period77 = period75.minusSeconds((-1));
        java.lang.String str78 = period75.toString();
        org.joda.time.Period period79 = period75.toPeriod();
        org.joda.time.PeriodType periodType80 = period75.getPeriodType();
        org.joda.time.Period period81 = period71.normalizedStandard(periodType80);
        org.joda.time.Instant instant82 = new org.joda.time.Instant();
        org.joda.time.Instant instant84 = instant82.withMillis(0L);
        org.joda.time.Chronology chronology85 = instant84.getChronology();
        org.joda.time.DurationField durationField86 = chronology85.eras();
        long long90 = chronology85.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField91 = chronology85.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod92 = new org.joda.time.MutablePeriod(44L, periodType80, chronology85);
        org.joda.time.PeriodType periodType93 = periodType80.withWeeksRemoved();
        org.joda.time.MutablePeriod mutablePeriod94 = new org.joda.time.MutablePeriod(periodType93);
        org.joda.time.MutablePeriod mutablePeriod95 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration52, periodType93);
        org.joda.time.PeriodType periodType96 = periodType93.withSecondsRemoved();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant82", (dateTime1.compareTo(instant82) == 0) == dateTime1.equals(instant82));
    }

    @Test
    public void test472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test472");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        org.joda.time.DateTime dateTime4 = dateTime1.withSecondOfMinute(53);
        org.joda.time.DateTime dateTime6 = dateTime4.plusMillis(2022);
        int int7 = dateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime9 = dateTime6.withYear(26212118);
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.Duration duration14 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str15 = duration14.toString();
        org.joda.time.Instant instant16 = instant10.minus((org.joda.time.ReadableDuration) duration14);
        org.joda.time.MutableDateTime mutableDateTime17 = instant10.toMutableDateTime();
        mutableDateTime17.addDays(1424);
        int int20 = mutableDateTime17.getHourOfDay();
        org.joda.time.Duration duration22 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str23 = duration22.toString();
        org.joda.time.Duration duration25 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours26 = duration25.toStandardHours();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTime dateTime28 = new org.joda.time.DateTime(chronology27);
        int int29 = dateTime28.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration25, (org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.Duration duration31 = duration22.plus((org.joda.time.ReadableDuration) duration25);
        org.joda.time.ReadableInstant readableInstant36 = null;
        org.joda.time.ReadableInstant readableInstant37 = null;
        org.joda.time.PeriodType periodType38 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod(readableInstant36, readableInstant37, periodType38);
        org.joda.time.DurationFieldType durationFieldType41 = periodType38.getFieldType((int) (short) 0);
        java.lang.String str42 = periodType38.toString();
        org.joda.time.Instant instant43 = new org.joda.time.Instant();
        org.joda.time.Instant instant45 = instant43.withMillis(0L);
        org.joda.time.Chronology chronology46 = instant45.getChronology();
        org.joda.time.Period period47 = new org.joda.time.Period((long) 53, (long) (-1), periodType38, chronology46);
        org.joda.time.Period period48 = new org.joda.time.Period((long) (short) -1, (long) 26148950, periodType38);
        org.joda.time.Instant instant49 = new org.joda.time.Instant();
        org.joda.time.Instant instant51 = instant49.withMillis(0L);
        org.joda.time.Chronology chronology52 = instant51.getChronology();
        org.joda.time.DurationField durationField53 = chronology52.eras();
        org.joda.time.LocalTime localTime54 = org.joda.time.LocalTime.now(chronology52);
        org.joda.time.DurationField durationField55 = chronology52.eras();
        org.joda.time.LocalTime localTime56 = org.joda.time.LocalTime.now(chronology52);
        org.joda.time.Period period57 = duration22.toPeriod(periodType38, chronology52);
        mutableDateTime17.add((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime dateTime59 = dateTime9.minus((org.joda.time.ReadableDuration) duration22);
        org.joda.time.DateTime dateTime61 = dateTime59.minusSeconds(2544);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant10", (dateTime1.compareTo(instant10) == 0) == dateTime1.equals(instant10));
    }

    @Test
    public void test473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test473");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        java.lang.String str17 = dateTimeZone14.toString();
        java.lang.String str18 = dateTimeZone14.getID();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime localDateTime21 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField27 = localDateTime25.getField((int) (byte) 0);
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.lang.String str30 = dateTimeField27.getAsShortText((long) '4', locale29);
        java.lang.String str31 = locale29.getVariant();
        java.lang.String str32 = dateTimeZone14.getName((long) 44, locale29);
        java.util.Set<java.lang.String> strSet33 = locale29.getUnicodeLocaleAttributes();
        java.lang.String str34 = locale29.getCountry();
        java.lang.String str35 = locale29.getDisplayCountry();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test474");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property2 = localDate1.monthOfYear();
        org.joda.time.DateTimeField dateTimeField3 = property2.getField();
        org.joda.time.LocalDate localDate4 = property2.roundCeilingCopy();
        org.joda.time.LocalDate localDate6 = localDate4.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate8 = localDate4.withWeekOfWeekyear(46);
        org.joda.time.Chronology chronology9 = localDate8.getChronology();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) 26198, chronology9);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.DateTime dateTime12 = new org.joda.time.DateTime(chronology11);
        int int13 = dateTime12.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = null;
        java.lang.String str15 = dateTime12.toString(dateTimeFormatter14);
        org.joda.time.DateTime dateTime17 = dateTime12.minusMonths(22);
        org.joda.time.Instant instant18 = new org.joda.time.Instant();
        org.joda.time.Instant instant20 = instant18.withMillis(0L);
        org.joda.time.Chronology chronology21 = instant20.getChronology();
        org.joda.time.DurationField durationField22 = chronology21.eras();
        org.joda.time.DateTime dateTime23 = dateTime12.withChronology(chronology21);
        org.joda.time.MutableDateTime mutableDateTime24 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime24.centuryOfEra();
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime24.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = property26.getFieldType();
        boolean boolean28 = dateTime12.isSupported(dateTimeFieldType27);
        org.joda.time.LocalDate localDate29 = new org.joda.time.LocalDate();
        int int30 = localDate29.getDayOfMonth();
        org.joda.time.Chronology chronology31 = localDate29.getChronology();
        boolean boolean32 = dateTimeFieldType27.isSupported(chronology31);
        mutableDateTime10.setChronology(chronology31);
        org.joda.time.DateTimeField dateTimeField34 = chronology31.secondOfDay();
        long long37 = dateTimeField34.addWrapField((long) 37174539, 33489);
        long long40 = dateTimeField34.add(1167224438217600245L, 902);
        org.joda.time.DurationField durationField41 = dateTimeField34.getLeapDurationField();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime12 and instant18", (dateTime12.compareTo(instant18) == 0) == dateTime12.equals(instant18));
    }

    @Test
    public void test475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test475");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField(62151);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.DateTime dateTime9 = new org.joda.time.DateTime((long) 1, chronology8);
        int int10 = dateTime9.getMinuteOfDay();
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.ReadableInstant readableInstant13 = null;
        org.joda.time.Period period14 = new org.joda.time.Period(readableDuration12, readableInstant13);
        org.joda.time.PeriodType periodType17 = null;
        org.joda.time.Period period18 = new org.joda.time.Period((long) 100, 1L, periodType17);
        org.joda.time.Period period20 = period18.minusSeconds((-1));
        java.lang.String str21 = period18.toString();
        org.joda.time.Period period22 = period18.toPeriod();
        org.joda.time.PeriodType periodType23 = period18.getPeriodType();
        org.joda.time.Period period24 = period14.normalizedStandard(periodType23);
        org.joda.time.Instant instant25 = new org.joda.time.Instant();
        org.joda.time.Instant instant27 = instant25.withMillis(0L);
        org.joda.time.Chronology chronology28 = instant27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.eras();
        long long33 = chronology28.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField34 = chronology28.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(44L, periodType23, chronology28);
        org.joda.time.DateTimeField dateTimeField36 = chronology28.clockhourOfHalfday();
        org.joda.time.DateTime dateTime37 = dateTime9.toDateTime(chronology28);
        org.joda.time.LocalDate localDate40 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property41 = localDate40.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean43 = localDate40.isSupported(dateTimeFieldType42);
        org.joda.time.Chronology chronology44 = localDate40.getChronology();
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod((long) (byte) -1, 0L, chronology44);
        org.joda.time.MutableDateTime mutableDateTime46 = dateTime37.toMutableDateTime(chronology44);
        org.joda.time.DateTimeField dateTimeField47 = chronology44.clockhourOfHalfday();
        int int48 = mutableDateTime6.get(dateTimeField47);
        int int49 = mutableDateTime6.getMinuteOfDay();
        org.joda.time.Duration duration52 = new org.joda.time.Duration(947880L, (-229564796800L));
        mutableDateTime6.add((org.joda.time.ReadableDuration) duration52);
        java.lang.Object obj54 = null;
        boolean boolean55 = duration52.equals(obj54);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and dateTime37", (dateTime9.compareTo(dateTime37) == 0) == dateTime9.equals(dateTime37));
    }

    @Test
    public void test476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test476");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.Duration duration5 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period6 = duration5.toPeriod();
        org.joda.time.Duration duration9 = duration5.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime(chronology10);
        org.joda.time.DateTime dateTime13 = dateTime11.plusMinutes(15);
        org.joda.time.Interval interval14 = duration9.toIntervalTo((org.joda.time.ReadableInstant) dateTime13);
        mutablePeriod2.setPeriod((org.joda.time.ReadableInterval) interval14);
        org.joda.time.ReadableInstant readableInstant16 = null;
        org.joda.time.ReadableInstant readableInstant17 = null;
        org.joda.time.PeriodType periodType18 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod19 = new org.joda.time.MutablePeriod(readableInstant16, readableInstant17, periodType18);
        org.joda.time.DurationFieldType durationFieldType21 = periodType18.getFieldType((int) (short) 0);
        int int22 = mutablePeriod2.get(durationFieldType21);
        org.joda.time.Duration duration24 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime25 = org.joda.time.MutableDateTime.now();
        mutableDateTime25.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime28 = mutableDateTime25.copy();
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime25.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod30 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration24, (org.joda.time.ReadableInstant) mutableDateTime25);
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration24, chronology34);
        org.joda.time.DateTimeField dateTimeField39 = chronology34.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField40 = chronology34.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField41 = chronology34.era();
        int int42 = dateTimeField41.getMinimumValue();
        int int44 = dateTimeField41.getMinimumValue(259200001L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime11 and instant31", (dateTime11.compareTo(instant31) == 0) == dateTime11.equals(instant31));
    }

    @Test
    public void test477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test477");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime0.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime0.dayOfYear();
        java.lang.String str6 = property5.getAsText();
        org.joda.time.MutableDateTime mutableDateTime8 = property5.add((long) (short) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(36985848);
        org.joda.time.MutableDateTime mutableDateTime12 = property9.getMutableDateTime();
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.Duration duration17 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str18 = duration17.toString();
        org.joda.time.Instant instant19 = instant13.minus((org.joda.time.ReadableDuration) duration17);
        org.joda.time.MutableDateTime mutableDateTime20 = instant13.toMutableDateTimeISO();
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.PeriodType periodType23 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(readableInstant21, readableInstant22, periodType23);
        mutablePeriod24.setYears((int) '#');
        org.joda.time.Chronology chronology28 = null;
        mutablePeriod24.add((long) 1, chronology28);
        org.joda.time.ReadableInterval readableInterval30 = null;
        mutablePeriod24.setPeriod(readableInterval30);
        int int32 = mutablePeriod24.getDays();
        mutableDateTime20.add((org.joda.time.ReadablePeriod) mutablePeriod24, 5);
        org.joda.time.DurationFieldType durationFieldType35 = org.joda.time.DurationFieldType.minutes();
        boolean boolean36 = mutablePeriod24.isSupported(durationFieldType35);
        java.lang.String str37 = durationFieldType35.getName();
        mutableDateTime12.add(durationFieldType35, 503);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant13 and mutableDateTime20", (instant13.compareTo(mutableDateTime20) == 0) == instant13.equals(mutableDateTime20));
    }

    @Test
    public void test478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test478");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property1 = localDate0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField2 = property1.getField();
        org.joda.time.LocalDate localDate3 = property1.roundCeilingCopy();
        org.joda.time.LocalDate localDate5 = localDate3.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate7 = localDate3.withWeekOfWeekyear(46);
        org.joda.time.LocalDate localDate9 = localDate7.plusWeeks((int) (byte) 10);
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now();
        mutableDateTime10.add((long) 'a');
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.yearOfCentury();
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        mutableDateTime10.add((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime10.centuryOfEra();
        mutableDateTime10.addHours((int) (byte) 10);
        int int27 = mutableDateTime10.getSecondOfDay();
        org.joda.time.LocalDate localDate28 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property29 = localDate28.monthOfYear();
        org.joda.time.LocalDate.Property property30 = localDate28.dayOfMonth();
        org.joda.time.ReadableInstant readableInstant31 = null;
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.PeriodType periodType33 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(readableInstant31, readableInstant32, periodType33);
        org.joda.time.DurationFieldType durationFieldType36 = periodType33.getFieldType((int) (short) 0);
        boolean boolean37 = localDate28.isSupported(durationFieldType36);
        mutableDateTime10.add(durationFieldType36, (-292275054));
        org.joda.time.LocalDate localDate41 = localDate7.withFieldAdded(durationFieldType36, 53);
        org.joda.time.LocalDate.Property property42 = localDate7.yearOfCentury();
        int int43 = property42.getMaximumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime44 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime44.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime47 = property45.set(45);
        org.joda.time.MutableDateTime mutableDateTime48 = property45.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime50 = property45.add(45);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        long long54 = dateTimeZone51.previousTransition(100L);
        int int56 = dateTimeZone51.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime57 = mutableDateTime50.toDateTime(dateTimeZone51);
        org.joda.time.ReadableDuration readableDuration58 = null;
        org.joda.time.DateTime dateTime60 = dateTime57.withDurationAdded(readableDuration58, (int) (byte) -1);
        int int61 = property42.getDifference((org.joda.time.ReadableInstant) dateTime60);
        org.joda.time.LocalDate localDate62 = dateTime60.toLocalDate();
        int int63 = localDate62.getCenturyOfEra();
        org.joda.time.DateTimeZone dateTimeZone64 = null;
        org.joda.time.DateTime dateTime65 = localDate62.toDateTimeAtCurrentTime(dateTimeZone64);
        org.joda.time.DateTime.Property property66 = dateTime65.secondOfMinute();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime44 and dateTime57", (mutableDateTime44.compareTo(dateTime57) == 0) == mutableDateTime44.equals(dateTime57));
    }

    @Test
    public void test479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test479");
        org.joda.time.ReadableInstant readableInstant4 = null;
        org.joda.time.ReadableInstant readableInstant5 = null;
        org.joda.time.PeriodType periodType6 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod7 = new org.joda.time.MutablePeriod(readableInstant4, readableInstant5, periodType6);
        org.joda.time.DurationFieldType durationFieldType9 = periodType6.getFieldType((int) (short) 0);
        java.lang.String str10 = periodType6.toString();
        org.joda.time.Instant instant11 = new org.joda.time.Instant();
        org.joda.time.Instant instant13 = instant11.withMillis(0L);
        org.joda.time.Chronology chronology14 = instant13.getChronology();
        org.joda.time.Period period15 = new org.joda.time.Period((long) 53, (long) (-1), periodType6, chronology14);
        org.joda.time.PeriodType periodType16 = periodType6.withHoursRemoved();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now();
        mutableDateTime17.add((long) 'a');
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime17.yearOfCentury();
        mutableDateTime17.addSeconds(0);
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.ReadableInstant readableInstant26 = null;
        org.joda.time.Period period27 = new org.joda.time.Period(readableDuration25, readableInstant26);
        org.joda.time.PeriodType periodType30 = null;
        org.joda.time.Period period31 = new org.joda.time.Period((long) 100, 1L, periodType30);
        org.joda.time.Period period33 = period31.minusSeconds((-1));
        java.lang.String str34 = period31.toString();
        org.joda.time.Period period35 = period31.toPeriod();
        org.joda.time.PeriodType periodType36 = period31.getPeriodType();
        org.joda.time.Period period37 = period27.normalizedStandard(periodType36);
        org.joda.time.DurationFieldType durationFieldType38 = null;
        int int39 = periodType36.indexOf(durationFieldType38);
        org.joda.time.Instant instant40 = new org.joda.time.Instant();
        org.joda.time.Instant instant42 = instant40.withMillis(0L);
        org.joda.time.Chronology chronology43 = instant42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.eras();
        org.joda.time.LocalTime localTime45 = org.joda.time.LocalTime.now(chronology43);
        org.joda.time.DurationField durationField46 = chronology43.eras();
        org.joda.time.DateTimeField dateTimeField47 = chronology43.hourOfDay();
        org.joda.time.MutablePeriod mutablePeriod48 = new org.joda.time.MutablePeriod((long) 12, (long) 292278993, periodType36, chronology43);
        org.joda.time.MutableDateTime mutableDateTime49 = mutableDateTime17.toMutableDateTime(chronology43);
        org.joda.time.DateTimeField dateTimeField50 = chronology43.yearOfEra();
        org.joda.time.Period period51 = new org.joda.time.Period((long) 26222, periodType16, chronology43);
        org.joda.time.MutablePeriod mutablePeriod52 = new org.joda.time.MutablePeriod(periodType16);
        org.joda.time.Period period53 = new org.joda.time.Period((long) 407, periodType16);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime17 and mutableDateTime49", (mutableDateTime17.compareTo(mutableDateTime49) == 0) == mutableDateTime17.equals(mutableDateTime49));
    }

    @Test
    public void test480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test480");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.Instant instant2 = instant0.withMillis(0L);
        org.joda.time.Chronology chronology3 = instant2.getChronology();
        org.joda.time.DurationField durationField4 = chronology3.eras();
        long long8 = chronology3.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField9 = chronology3.halfdayOfDay();
        long long12 = dateTimeField9.getDifferenceAsLong((long) 48, 0L);
        int int14 = dateTimeField9.getLeapAmount(985622L);
        int int15 = dateTimeField9.getMinimumValue();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("1969-12-31");
        java.lang.String str19 = dateTimeField9.getAsText(1645514298778L, locale18);
        org.joda.time.LocalDateTime localDateTime20 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.withCenturyOfEra((int) 'a');
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.minusMillis((int) (short) -1);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.millisOfDay();
        org.joda.time.LocalDateTime localDateTime31 = property29.addWrapFieldToCopy(3);
        org.joda.time.ReadableDuration readableDuration32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.Period period34 = new org.joda.time.Period(readableDuration32, readableInstant33);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 1L, periodType37);
        org.joda.time.Period period40 = period38.minusSeconds((-1));
        java.lang.String str41 = period38.toString();
        org.joda.time.Period period42 = period38.toPeriod();
        org.joda.time.PeriodType periodType43 = period38.getPeriodType();
        org.joda.time.Period period44 = period34.normalizedStandard(periodType43);
        org.joda.time.Period period46 = period44.withSeconds(10);
        org.joda.time.Minutes minutes47 = period44.toStandardMinutes();
        org.joda.time.DurationFieldType[] durationFieldTypeArray48 = period44.getFieldTypes();
        org.joda.time.Period period50 = period44.withYears(999);
        org.joda.time.Period period52 = period50.multipliedBy(443);
        org.joda.time.Period period54 = period50.minusMonths(1439);
        org.joda.time.Period period56 = period50.minusWeeks(62170);
        org.joda.time.MutableDateTime mutableDateTime57 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime57.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime60 = property58.set(45);
        org.joda.time.MutableDateTime mutableDateTime61 = property58.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime63 = property58.add(45);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone65 = dateTimeZone64.toTimeZone();
        long long67 = dateTimeZone64.previousTransition(100L);
        int int69 = dateTimeZone64.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime70 = mutableDateTime63.toDateTime(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime71 = org.joda.time.LocalDateTime.now(dateTimeZone64);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime71.plusYears(5);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime73.withYearOfEra(99);
        org.joda.time.LocalDateTime localDateTime77 = localDateTime75.withDayOfMonth(26);
        org.joda.time.LocalDateTime.Property property78 = localDateTime77.secondOfMinute();
        org.joda.time.LocalDateTime.Property property79 = localDateTime77.weekyear();
        org.joda.time.LocalDateTime localDateTime80 = property79.roundHalfCeilingCopy();
        int int81 = localDateTime80.getDayOfWeek();
        int[] intArray82 = localDateTime80.getValues();
        boolean boolean83 = period56.equals((java.lang.Object) intArray82);
        int int84 = dateTimeField9.getMaximumValue((org.joda.time.ReadablePartial) localDateTime31, intArray82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime57 and dateTime70", (mutableDateTime57.compareTo(dateTime70) == 0) == mutableDateTime57.equals(dateTime70));
    }

    @Test
    public void test481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test481");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration2 = duration1.toDuration();
        org.joda.time.Instant instant3 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime4 = instant3.toDateTime();
        org.joda.time.Instant instant5 = instant3.toInstant();
        long long6 = instant5.getMillis();
        org.joda.time.LocalDateTime localDateTime7 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusYears((int) (short) 100);
        org.joda.time.Duration duration15 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period16 = duration15.toPeriod();
        org.joda.time.Duration duration18 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration21 = duration18.withDurationAdded((long) (short) 100, (int) ' ');
        org.joda.time.Duration duration22 = duration15.minus((org.joda.time.ReadableDuration) duration21);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime13.plus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.Instant instant25 = instant5.withDurationAdded((org.joda.time.ReadableDuration) duration15, (int) (byte) -1);
        org.joda.time.Duration duration26 = duration1.minus((org.joda.time.ReadableDuration) duration15);
        org.joda.time.MutableDateTime mutableDateTime27 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.set(45);
        org.joda.time.MutableDateTime mutableDateTime31 = property28.roundFloor();
        org.joda.time.LocalDateTime localDateTime32 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.DateTime dateTime40 = new org.joda.time.DateTime(chronology39);
        org.joda.time.DateTime dateTime42 = dateTime40.plusMinutes(15);
        org.joda.time.DateTime dateTime43 = localDateTime36.toDateTime((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime45 = localDateTime36.toDateTime(dateTimeZone44);
        org.joda.time.DateTime.Property property46 = dateTime45.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField47 = property46.getField();
        mutableDateTime31.setRounding(dateTimeField47);
        java.lang.Object obj49 = mutableDateTime31.clone();
        java.lang.String str50 = mutableDateTime31.toString();
        org.joda.time.Duration duration52 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration55 = duration52.withDurationAdded((long) (short) 100, (int) ' ');
        long long56 = duration55.getMillis();
        org.joda.time.Instant instant57 = new org.joda.time.Instant();
        org.joda.time.Instant instant59 = instant57.withMillis(0L);
        org.joda.time.DateTime dateTime60 = instant59.toDateTime();
        org.joda.time.Instant instant61 = new org.joda.time.Instant();
        org.joda.time.Instant instant63 = instant61.withMillis(0L);
        org.joda.time.DateTime dateTime64 = instant63.toDateTime();
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType67 = org.joda.time.PeriodType.months();
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime64, (org.joda.time.ReadableInstant) dateTime66, periodType67);
        boolean boolean69 = dateTime60.isBefore((org.joda.time.ReadableInstant) dateTime64);
        int int70 = dateTime64.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant71 = null;
        org.joda.time.ReadableInstant readableInstant72 = null;
        org.joda.time.PeriodType periodType73 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod74 = new org.joda.time.MutablePeriod(readableInstant71, readableInstant72, periodType73);
        org.joda.time.PeriodType periodType75 = periodType73.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod76 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration55, (org.joda.time.ReadableInstant) dateTime64, periodType73);
        org.joda.time.MutablePeriod mutablePeriod77 = new org.joda.time.MutablePeriod(periodType73);
        org.joda.time.MutablePeriod mutablePeriod78 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration15, (org.joda.time.ReadableInstant) mutableDateTime31, periodType73);
        org.joda.time.MutableDateTime.Property property79 = mutableDateTime31.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime80 = property79.roundCeiling();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant3 and dateTime4", (instant3.compareTo(dateTime4) == 0) == instant3.equals(dateTime4));
    }

    @Test
    public void test482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test482");
        org.joda.time.MutablePeriod mutablePeriod2 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod2.clear();
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) (-292275054));
        java.io.IOException iOException7 = new java.io.IOException("");
        java.io.IOException iOException8 = new java.io.IOException((java.lang.Throwable) iOException7);
        boolean boolean9 = mutableDateTime5.equals((java.lang.Object) iOException7);
        org.joda.time.Duration duration12 = new org.joda.time.Duration(0L, 946312L);
        mutableDateTime5.add((org.joda.time.ReadableDuration) duration12, 1424);
        org.joda.time.Days days15 = duration12.toStandardDays();
        org.joda.time.MutablePeriod mutablePeriod18 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod18.clear();
        org.joda.time.Duration duration21 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period22 = duration21.toPeriod();
        org.joda.time.Duration duration25 = duration21.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.Interval interval30 = duration25.toIntervalTo((org.joda.time.ReadableInstant) dateTime29);
        mutablePeriod18.setPeriod((org.joda.time.ReadableInterval) interval30);
        org.joda.time.ReadableInstant readableInstant32 = null;
        org.joda.time.ReadableInstant readableInstant33 = null;
        org.joda.time.PeriodType periodType34 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod(readableInstant32, readableInstant33, periodType34);
        org.joda.time.DurationFieldType durationFieldType37 = periodType34.getFieldType((int) (short) 0);
        int int38 = mutablePeriod18.get(durationFieldType37);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime41 = org.joda.time.MutableDateTime.now();
        mutableDateTime41.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime41.copy();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime41.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod46 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration40, (org.joda.time.ReadableInstant) mutableDateTime41);
        org.joda.time.Instant instant47 = new org.joda.time.Instant();
        org.joda.time.Instant instant49 = instant47.withMillis(0L);
        org.joda.time.Chronology chronology50 = instant49.getChronology();
        org.joda.time.DurationField durationField51 = chronology50.eras();
        org.joda.time.LocalTime localTime52 = org.joda.time.LocalTime.now(chronology50);
        org.joda.time.DurationField durationField53 = chronology50.eras();
        mutablePeriod18.setPeriod((org.joda.time.ReadableDuration) duration40, chronology50);
        org.joda.time.Duration duration56 = duration12.withDurationAdded((org.joda.time.ReadableDuration) duration40, 26148950);
        mutablePeriod2.setPeriod((org.joda.time.ReadableDuration) duration40);
        mutablePeriod2.setPeriod((long) 547820);
        org.joda.time.Period period60 = mutablePeriod2.toPeriod();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime27 and instant47", (dateTime27.compareTo(instant47) == 0) == dateTime27.equals(instant47));
    }

    @Test
    public void test483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test483");
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.MutableDateTime mutableDateTime3 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.set(45);
        org.joda.time.MutableDateTime mutableDateTime7 = property4.roundFloor();
        org.joda.time.MutableDateTime mutableDateTime9 = property4.add(45);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        long long13 = dateTimeZone10.previousTransition(100L);
        int int15 = dateTimeZone10.getStandardOffset(86403200L);
        org.joda.time.DateTime dateTime16 = mutableDateTime9.toDateTime(dateTimeZone10);
        mutableDateTime2.setZoneRetainFields(dateTimeZone10);
        org.joda.time.LocalDate localDate18 = new org.joda.time.LocalDate((-29862722304000000L), dateTimeZone10);
        org.joda.time.LocalDate.Property property19 = localDate18.weekyear();
        org.joda.time.LocalDate localDate21 = property19.addWrapFieldToCopy(7);
        boolean boolean22 = property19.isLeap();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime3 and dateTime16", (mutableDateTime3.compareTo(dateTime16) == 0) == mutableDateTime3.equals(dateTime16));
    }

    @Test
    public void test484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test484");
        org.joda.time.ReadableDuration readableDuration1 = null;
        org.joda.time.ReadableInstant readableInstant2 = null;
        org.joda.time.Period period3 = new org.joda.time.Period(readableDuration1, readableInstant2);
        org.joda.time.PeriodType periodType6 = null;
        org.joda.time.Period period7 = new org.joda.time.Period((long) 100, 1L, periodType6);
        org.joda.time.Period period9 = period7.minusSeconds((-1));
        java.lang.String str10 = period7.toString();
        org.joda.time.Period period11 = period7.toPeriod();
        org.joda.time.PeriodType periodType12 = period7.getPeriodType();
        org.joda.time.Period period13 = period3.normalizedStandard(periodType12);
        org.joda.time.Instant instant14 = new org.joda.time.Instant();
        org.joda.time.Instant instant16 = instant14.withMillis(0L);
        org.joda.time.Chronology chronology17 = instant16.getChronology();
        org.joda.time.DurationField durationField18 = chronology17.eras();
        long long22 = chronology17.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField23 = chronology17.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod24 = new org.joda.time.MutablePeriod(44L, periodType12, chronology17);
        org.joda.time.DateTimeField dateTimeField25 = chronology17.clockhourOfHalfday();
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = property27.getField();
        org.joda.time.LocalDate localDate29 = property27.withMaximumValue();
        long long31 = chronology17.set((org.joda.time.ReadablePartial) localDate29, (long) (byte) 0);
        org.joda.time.DateTime dateTime32 = localDate29.toDateTimeAtCurrentTime();
        org.joda.time.DateTime dateTime34 = dateTime32.withCenturyOfEra(100);
        org.joda.time.MutableDateTime mutableDateTime35 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime35.centuryOfEra();
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime35.dayOfWeek();
        org.joda.time.DateTimeFieldType dateTimeFieldType38 = property37.getFieldType();
        org.joda.time.MutableDateTime mutableDateTime39 = property37.getMutableDateTime();
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime39.hourOfDay();
        boolean boolean41 = dateTime32.isAfter((org.joda.time.ReadableInstant) mutableDateTime39);
        int int42 = dateTime32.getYearOfCentury();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant14 and mutableDateTime35", (instant14.compareTo(mutableDateTime35) == 0) == instant14.equals(mutableDateTime35));
    }

    @Test
    public void test485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test485");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime5.millisOfSecond();
        org.joda.time.DateTime dateTime8 = dateTime5.withCenturyOfEra((int) '#');
        org.joda.time.DateTime dateTime10 = dateTime5.withYear((int) 'u');
        org.joda.time.MutableDateTime mutableDateTime11 = org.joda.time.MutableDateTime.now();
        mutableDateTime11.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime11.copy();
        mutableDateTime11.setDate((long) '#');
        org.joda.time.LocalDate localDate17 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property18 = localDate17.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean20 = localDate17.isSupported(dateTimeFieldType19);
        int int21 = localDate17.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight23 = localDate17.toDateMidnight(dateTimeZone22);
        org.joda.time.DateTime dateTime24 = mutableDateTime11.toDateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime25 = new org.joda.time.DateTime(dateTimeZone22);
        org.joda.time.DateTime dateTime26 = org.joda.time.DateTime.now(dateTimeZone22);
        org.joda.time.DateTime dateTime27 = dateTime5.toDateTime(dateTimeZone22);
        org.joda.time.Instant instant28 = new org.joda.time.Instant();
        org.joda.time.Instant instant30 = instant28.withMillis(0L);
        org.joda.time.Duration duration32 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str33 = duration32.toString();
        org.joda.time.Instant instant34 = instant28.minus((org.joda.time.ReadableDuration) duration32);
        org.joda.time.MutablePeriod mutablePeriod35 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime5, (org.joda.time.ReadableDuration) duration32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.DateTime dateTime37 = new org.joda.time.DateTime(chronology36);
        int int38 = dateTime37.getSecondOfMinute();
        int int39 = dateTime37.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant40 = null;
        org.joda.time.ReadableInstant readableInstant41 = null;
        org.joda.time.PeriodType periodType42 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod43 = new org.joda.time.MutablePeriod(readableInstant40, readableInstant41, periodType42);
        mutablePeriod43.setYears((int) '#');
        mutablePeriod43.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime48 = dateTime37.plus((org.joda.time.ReadablePeriod) mutablePeriod43);
        org.joda.time.Duration duration50 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.now();
        mutableDateTime51.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime54 = mutableDateTime51.copy();
        org.joda.time.MutableDateTime.Property property55 = mutableDateTime51.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod56 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration50, (org.joda.time.ReadableInstant) mutableDateTime51);
        org.joda.time.DateTime dateTime58 = dateTime48.withDurationAdded((org.joda.time.ReadableDuration) duration50, 36985848);
        org.joda.time.LocalDate localDate60 = new org.joda.time.LocalDate((long) (byte) -1);
        int int61 = localDate60.getYearOfEra();
        org.joda.time.DateTimeZone dateTimeZone62 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone63 = dateTimeZone62.toTimeZone();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.UTC;
        long long66 = dateTimeZone62.getMillisKeepLocal(dateTimeZone64, (long) 44);
        org.joda.time.DateTime dateTime67 = localDate60.toDateTimeAtMidnight(dateTimeZone62);
        org.joda.time.DateTime dateTime68 = localDate60.toDateTimeAtCurrentTime();
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now();
        mutableDateTime69.add((long) 'a');
        org.joda.time.MutableDateTime.Property property72 = mutableDateTime69.yearOfCentury();
        mutableDateTime69.addWeekyears((int) (byte) 1);
        int int75 = dateTime68.compareTo((org.joda.time.ReadableInstant) mutableDateTime69);
        org.joda.time.MutableDateTime.Property property76 = mutableDateTime69.centuryOfEra();
        org.joda.time.PeriodType periodType79 = null;
        org.joda.time.Period period80 = new org.joda.time.Period((long) 100, 1L, periodType79);
        org.joda.time.Period period82 = period80.minusSeconds((-1));
        java.lang.String str83 = period80.toString();
        org.joda.time.Duration duration84 = period80.toStandardDuration();
        mutableDateTime69.add((org.joda.time.ReadableDuration) duration84, 1200);
        org.joda.time.Interval interval87 = duration50.toIntervalTo((org.joda.time.ReadableInstant) mutableDateTime69);
        mutablePeriod35.add((org.joda.time.ReadableInterval) interval87);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and dateTime25", (dateTime1.compareTo(dateTime25) == 0) == dateTime1.equals(dateTime25));
    }

    @Test
    public void test486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test486");
        org.joda.time.MutableDateTime mutableDateTime0 = org.joda.time.MutableDateTime.now();
        mutableDateTime0.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime0.copy();
        mutableDateTime0.setDate((long) '#');
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean9 = localDate6.isSupported(dateTimeFieldType8);
        int int10 = localDate6.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight12 = localDate6.toDateMidnight(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = mutableDateTime0.toDateTime(dateTimeZone11);
        org.joda.time.LocalDate localDate14 = org.joda.time.LocalDate.now(dateTimeZone11);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalTime localTime17 = new org.joda.time.LocalTime((long) (short) 100, chronology16);
        int int18 = localTime17.getMillisOfDay();
        org.joda.time.LocalTime.Property property19 = localTime17.millisOfSecond();
        org.joda.time.LocalTime localTime21 = property19.addCopy(0);
        org.joda.time.DateTimeZone dateTimeZone22 = null;
        org.joda.time.DateTime dateTime23 = localTime21.toDateTimeToday(dateTimeZone22);
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime((long) (short) 100, chronology25);
        int int27 = localTime26.getMillisOfDay();
        org.joda.time.LocalTime.Property property28 = localTime26.millisOfSecond();
        org.joda.time.DurationField durationField29 = property28.getLeapDurationField();
        org.joda.time.LocalTime localTime31 = property28.setCopy(48);
        boolean boolean32 = localTime21.isEqual((org.joda.time.ReadablePartial) localTime31);
        org.joda.time.PeriodType periodType35 = null;
        org.joda.time.Period period36 = new org.joda.time.Period((long) 100, 1L, periodType35);
        org.joda.time.Period period38 = period36.minusSeconds((-1));
        java.lang.String str39 = period36.toString();
        org.joda.time.Duration duration40 = period36.toStandardDuration();
        org.joda.time.LocalTime localTime42 = localTime31.withPeriodAdded((org.joda.time.ReadablePeriod) period36, 27);
        org.joda.time.LocalTime.Property property43 = localTime42.millisOfSecond();
        org.joda.time.LocalTime localTime45 = property43.addCopy(2810);
        org.joda.time.DateTime dateTime46 = localDate14.toDateTime(localTime45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime0 and dateTime13", (mutableDateTime0.compareTo(dateTime13) == 0) == mutableDateTime0.equals(dateTime13));
    }

    @Test
    public void test487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test487");
        org.joda.time.Period period1 = org.joda.time.Period.days(26351);
        org.joda.time.MutablePeriod mutablePeriod6 = new org.joda.time.MutablePeriod((long) (short) -1, 3155695200000L);
        mutablePeriod6.clear();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period10 = duration9.toPeriod();
        org.joda.time.Duration duration13 = duration9.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(15);
        org.joda.time.Interval interval18 = duration13.toIntervalTo((org.joda.time.ReadableInstant) dateTime17);
        mutablePeriod6.setPeriod((org.joda.time.ReadableInterval) interval18);
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21, periodType22);
        org.joda.time.DurationFieldType durationFieldType25 = periodType22.getFieldType((int) (short) 0);
        int int26 = mutablePeriod6.get(durationFieldType25);
        org.joda.time.Duration duration28 = org.joda.time.Duration.standardHours((long) 52);
        org.joda.time.MutableDateTime mutableDateTime29 = org.joda.time.MutableDateTime.now();
        mutableDateTime29.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime32 = mutableDateTime29.copy();
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime29.yearOfEra();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration28, (org.joda.time.ReadableInstant) mutableDateTime29);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.eras();
        org.joda.time.LocalTime localTime40 = org.joda.time.LocalTime.now(chronology38);
        org.joda.time.DurationField durationField41 = chronology38.eras();
        mutablePeriod6.setPeriod((org.joda.time.ReadableDuration) duration28, chronology38);
        org.joda.time.DateTimeField dateTimeField43 = chronology38.dayOfMonth();
        org.joda.time.MutablePeriod mutablePeriod44 = new org.joda.time.MutablePeriod(555370422L, 1645514161062L, chronology38);
        org.joda.time.DurationFieldType durationFieldType45 = org.joda.time.DurationFieldType.minutes();
        mutablePeriod44.set(durationFieldType45, 26175498);
        java.lang.String str48 = durationFieldType45.getName();
        boolean boolean49 = period1.isSupported(durationFieldType45);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime15 and instant35", (dateTime15.compareTo(instant35) == 0) == dateTime15.equals(instant35));
    }

    @Test
    public void test488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test488");
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime((long) 1);
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime5 = dateTime3.withZoneRetainFields(dateTimeZone4);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property7 = localDate6.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.UTC;
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDate6.toDateTimeAtCurrentTime(dateTimeZone8);
        int int11 = dateTime5.compareTo((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTime dateTime13 = dateTime10.minusWeeks(44);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime(chronology14);
        org.joda.time.DateTime dateTime17 = dateTime15.plusMinutes(15);
        org.joda.time.Chronology chronology18 = dateTime15.getChronology();
        java.lang.String str19 = chronology18.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology18.dayOfYear();
        org.joda.time.DateTime dateTime21 = dateTime10.withChronology(chronology18);
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.ReadableInstant readableInstant24 = null;
        org.joda.time.PeriodType periodType25 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod26 = new org.joda.time.MutablePeriod(readableInstant23, readableInstant24, periodType25);
        org.joda.time.DurationFieldType durationFieldType28 = periodType25.getFieldType((int) (short) 0);
        org.joda.time.PeriodType periodType29 = periodType25.withMillisRemoved();
        org.joda.time.Period period30 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime21, readableDuration22, periodType29);
        org.joda.time.Period period31 = new org.joda.time.Period(0L, periodType29);
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = null;
        org.joda.time.format.DateTimeParser dateTimeParser33 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser33);
        org.joda.time.Instant instant35 = new org.joda.time.Instant();
        org.joda.time.Instant instant37 = instant35.withMillis(0L);
        org.joda.time.Chronology chronology38 = instant37.getChronology();
        org.joda.time.DurationField durationField39 = chronology38.eras();
        long long43 = chronology38.add(0L, (long) 2022, (int) '4');
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter34.withChronology(chronology38);
        org.joda.time.MutablePeriod mutablePeriod45 = new org.joda.time.MutablePeriod(3600000L, periodType29, chronology38);
        org.joda.time.DateTimeZone dateTimeZone46 = chronology38.getZone();
        org.joda.time.MutableDateTime mutableDateTime47 = org.joda.time.MutableDateTime.now();
        mutableDateTime47.add((long) 'a');
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration53 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str54 = duration53.toString();
        boolean boolean55 = duration51.isShorterThan((org.joda.time.ReadableDuration) duration53);
        org.joda.time.Hours hours56 = duration51.toStandardHours();
        mutableDateTime47.add((org.joda.time.ReadableDuration) duration51, 20);
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str61 = duration60.toString();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours64 = duration63.toStandardHours();
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.DateTime dateTime66 = new org.joda.time.DateTime(chronology65);
        int int67 = dateTime66.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod68 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration63, (org.joda.time.ReadableInstant) dateTime66);
        org.joda.time.Duration duration69 = duration60.plus((org.joda.time.ReadableDuration) duration63);
        org.joda.time.Period period70 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime47, (org.joda.time.ReadableDuration) duration69);
        int int71 = dateTimeZone46.getOffset((org.joda.time.ReadableInstant) mutableDateTime47);
        long long73 = dateTimeZone46.previousTransition(59405L);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime10 and dateTime15", (dateTime10.compareTo(dateTime15) == 0) == dateTime10.equals(dateTime15));
    }

    @Test
    public void test489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test489");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = null;
        java.lang.String str4 = dateTime1.toString(dateTimeFormatter3);
        org.joda.time.DateTime dateTime6 = dateTime1.minusMonths(22);
        org.joda.time.Instant instant7 = new org.joda.time.Instant();
        org.joda.time.Instant instant9 = instant7.withMillis(0L);
        org.joda.time.Chronology chronology10 = instant9.getChronology();
        org.joda.time.DurationField durationField11 = chronology10.eras();
        org.joda.time.DateTime dateTime12 = dateTime1.withChronology(chronology10);
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.secondOfDay();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.hourOfHalfday();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant7", (dateTime1.compareTo(instant7) == 0) == dateTime1.equals(instant7));
    }

    @Test
    public void test490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test490");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        org.joda.time.Instant instant5 = new org.joda.time.Instant();
        org.joda.time.Instant instant7 = instant5.withMillis(0L);
        org.joda.time.Chronology chronology8 = instant7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.eras();
        long long13 = chronology8.add(0L, (long) 2022, (int) '4');
        mutablePeriod3.setPeriod((long) 58, chronology8);
        org.joda.time.DateTimeField dateTimeField15 = chronology8.weekyear();
        java.lang.String str17 = dateTimeField15.getAsText((long) (-52));
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.DateTime dateTime20 = new org.joda.time.DateTime(chronology19);
        org.joda.time.DateTime dateTime22 = dateTime20.plusMinutes(15);
        org.joda.time.Chronology chronology23 = dateTime20.getChronology();
        java.lang.String str24 = chronology23.toString();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 2022, chronology23);
        org.joda.time.LocalDateTime localDateTime26 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property29 = localDateTime26.hourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime26.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str33 = dateTimeFieldType32.getName();
        int int34 = localDateTime26.indexOf(dateTimeFieldType32);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime26.minusSeconds((int) (short) 0);
        int int37 = localDateTime36.getYearOfEra();
        int int38 = localDateTime36.size();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime36.plusHours(26177);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime25.withFields((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime40.withYear(26209);
        org.joda.time.ReadableDuration readableDuration44 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.minus(readableDuration44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withWeekyear(62187);
        int int48 = localDateTime47.getMillisOfDay();
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str52 = locale50.getExtension('a');
        java.lang.String str53 = locale50.getDisplayCountry();
        java.util.Locale.setDefault(locale50);
        java.lang.String str55 = dateTimeField15.getAsShortText((org.joda.time.ReadablePartial) localDateTime47, 1345, locale50);
        org.joda.time.LocalDateTime localDateTime56 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property59 = localDateTime56.hourOfDay();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime56.plusMillis((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType62 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        java.lang.String str63 = dateTimeFieldType62.getName();
        int int64 = localDateTime56.indexOf(dateTimeFieldType62);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime56.minusSeconds((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.plusMillis(10);
        org.joda.time.MutableDateTime mutableDateTime69 = org.joda.time.MutableDateTime.now();
        mutableDateTime69.add((long) 'a');
        org.joda.time.Instant instant72 = new org.joda.time.Instant();
        org.joda.time.Instant instant74 = instant72.withMillis(0L);
        org.joda.time.DateTime dateTime75 = instant74.toDateTime();
        org.joda.time.DateTime dateTime77 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType78 = org.joda.time.PeriodType.months();
        org.joda.time.Period period79 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime75, (org.joda.time.ReadableInstant) dateTime77, periodType78);
        org.joda.time.DateTime.Property property80 = dateTime77.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType81 = property80.getFieldType();
        org.joda.time.MutableDateTime.Property property82 = mutableDateTime69.property(dateTimeFieldType81);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime66.withField(dateTimeFieldType81, 41);
        boolean boolean85 = localDateTime47.isSupported(dateTimeFieldType81);
        int int86 = localDateTime47.getMinuteOfHour();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant5 and dateTime20", (instant5.compareTo(dateTime20) == 0) == instant5.equals(dateTime20));
    }

    @Test
    public void test491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test491");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        int int2 = dateTime1.getYearOfCentury();
        int int3 = dateTime1.getWeekyear();
        org.joda.time.DateTime dateTime5 = dateTime1.plus((long) 15);
        org.joda.time.DateTime.Property property6 = dateTime1.year();
        org.joda.time.DateTime dateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.DateTime dateTime9 = property6.addToCopy((long) 61);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardHours((-229564796800L));
        org.joda.time.Period period12 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableDuration) duration11);
        org.joda.time.Instant instant13 = new org.joda.time.Instant();
        org.joda.time.Instant instant15 = instant13.withMillis(0L);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration19 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period20 = duration19.toPeriod();
        org.joda.time.Duration duration23 = duration19.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period24 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime17, (org.joda.time.ReadableDuration) duration23);
        org.joda.time.Instant instant25 = dateTime17.toInstant();
        org.joda.time.DateTime dateTime28 = dateTime17.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant29 = dateTime28.toInstant();
        boolean boolean30 = instant13.isBefore((org.joda.time.ReadableInstant) dateTime28);
        org.joda.time.MutableDateTime mutableDateTime31 = instant13.toMutableDateTimeISO();
        org.joda.time.Instant instant32 = instant13.toInstant();
        org.joda.time.Period period33 = duration11.toPeriodTo((org.joda.time.ReadableInstant) instant13);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime1 and instant13", (dateTime1.compareTo(instant13) == 0) == dateTime1.equals(instant13));
    }

    @Test
    public void test492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test492");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        long long7 = mutableDateTime6.getMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean15 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration14);
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (byte) 0);
        long long26 = dateTimeField24.roundHalfEven((long) 1);
        int int27 = dateTime17.get(dateTimeField24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) 'a');
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getDisplayName();
        java.lang.String str38 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime32, 53, locale36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusMillis((int) (byte) 0);
        int int52 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        boolean boolean53 = duration9.equals((java.lang.Object) int52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        int int56 = dateTime55.getSecondOfMinute();
        int int57 = dateTime55.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant58, readableInstant59, periodType60);
        mutablePeriod61.setYears((int) '#');
        mutablePeriod61.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime66 = dateTime55.plus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration9);
        java.lang.Object obj69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(obj69);
        boolean boolean72 = dateTime70.isBefore((long) 7);
        java.lang.String str73 = dateTime70.toString();
        org.joda.time.DateTime dateTime75 = dateTime70.minus((long) 7);
        org.joda.time.Instant instant76 = new org.joda.time.Instant();
        org.joda.time.Instant instant78 = instant76.withMillis(0L);
        org.joda.time.Chronology chronology79 = instant78.getChronology();
        org.joda.time.DateTime dateTime80 = dateTime70.toDateTime(chronology79);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTime dateTime83 = dateTime81.minusDays(2100);
        int int84 = mutableDateTime6.compareTo((org.joda.time.ReadableInstant) dateTime81);
        mutableDateTime6.addDays((-356));
        int int87 = mutableDateTime6.getEra();
        org.joda.time.Chronology chronology88 = mutableDateTime6.getChronology();
        mutableDateTime6.setYear(937);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant76", (dateTime17.compareTo(instant76) == 0) == dateTime17.equals(instant76));
    }

    @Test
    public void test493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test493");
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.DateTime dateTime3 = new org.joda.time.DateTime(chronology2);
        int int4 = dateTime3.getYearOfCentury();
        int int5 = dateTime3.getWeekyear();
        org.joda.time.DateTime.Property property6 = dateTime3.dayOfYear();
        org.joda.time.Period period8 = org.joda.time.Period.weeks((int) (byte) 0);
        org.joda.time.Period period10 = period8.withDays(2022);
        org.joda.time.DateTime dateTime12 = dateTime3.withPeriodAdded((org.joda.time.ReadablePeriod) period10, (int) (short) 100);
        org.joda.time.DateTime dateTime13 = dateTime12.withTimeAtStartOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = org.joda.time.MutableDateTime.now();
        mutableDateTime14.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime17 = mutableDateTime14.copy();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime14.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime14.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now();
        mutableDateTime20.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime23 = mutableDateTime20.copy();
        mutableDateTime20.setDate((long) '#');
        org.joda.time.LocalDate localDate26 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property27 = localDate26.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean29 = localDate26.isSupported(dateTimeFieldType28);
        int int30 = localDate26.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight32 = localDate26.toDateMidnight(dateTimeZone31);
        org.joda.time.DateTime dateTime33 = mutableDateTime20.toDateTime(dateTimeZone31);
        org.joda.time.LocalDate localDate34 = org.joda.time.LocalDate.now(dateTimeZone31);
        org.joda.time.PeriodType periodType37 = null;
        org.joda.time.Period period38 = new org.joda.time.Period((long) 100, 1L, periodType37);
        org.joda.time.PeriodType periodType39 = period38.getPeriodType();
        boolean boolean40 = dateTimeZone31.equals((java.lang.Object) periodType39);
        mutableDateTime14.setZoneRetainFields(dateTimeZone31);
        org.joda.time.LocalDate localDate42 = new org.joda.time.LocalDate(dateTimeZone31);
        org.joda.time.DateTime dateTime43 = dateTime13.withZone(dateTimeZone31);
        int int44 = dateTime43.getMinuteOfHour();
        org.joda.time.PeriodType periodType45 = org.joda.time.PeriodType.hours();
        org.joda.time.DurationFieldType durationFieldType46 = org.joda.time.DurationFieldType.millis();
        boolean boolean47 = periodType45.isSupported(durationFieldType46);
        org.joda.time.Period period48 = new org.joda.time.Period(readableInstant1, (org.joda.time.ReadableInstant) dateTime43, periodType45);
        org.joda.time.Period period49 = new org.joda.time.Period(1237546L, periodType45);
        org.joda.time.MutablePeriod mutablePeriod54 = new org.joda.time.MutablePeriod((int) (byte) -1, (int) (byte) 1, 44, (int) ' ');
        mutablePeriod54.addDays((int) (byte) 10);
        mutablePeriod54.addMillis((int) '4');
        org.joda.time.Duration duration60 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period61 = duration60.toPeriod();
        org.joda.time.Duration duration63 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration65 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration68 = duration65.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean69 = duration63.isLongerThan((org.joda.time.ReadableDuration) duration68);
        org.joda.time.Duration duration70 = duration60.minus((org.joda.time.ReadableDuration) duration63);
        mutablePeriod54.setPeriod((org.joda.time.ReadableDuration) duration70);
        mutablePeriod54.setWeeks((int) (byte) 100);
        org.joda.time.PeriodType periodType76 = null;
        org.joda.time.Period period77 = new org.joda.time.Period((long) 100, 1L, periodType76);
        org.joda.time.Period period79 = period77.minusSeconds((-1));
        org.joda.time.Period period81 = period79.multipliedBy((int) '#');
        org.joda.time.DurationFieldType durationFieldType82 = org.joda.time.DurationFieldType.centuries();
        int int83 = period81.get(durationFieldType82);
        int int84 = mutablePeriod54.indexOf(durationFieldType82);
        org.joda.time.LocalDate localDate85 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property86 = localDate85.monthOfYear();
        org.joda.time.DateTimeField dateTimeField87 = property86.getField();
        org.joda.time.LocalDate localDate88 = property86.roundCeilingCopy();
        org.joda.time.Chronology chronology89 = localDate88.getChronology();
        org.joda.time.DateTimeZone dateTimeZone92 = org.joda.time.DateTimeZone.forOffsetHoursMinutes(53, 0);
        org.joda.time.DateTime dateTime93 = localDate88.toDateTimeAtCurrentTime(dateTimeZone92);
        org.joda.time.Chronology chronology94 = dateTime93.getChronology();
        org.joda.time.DurationField durationField95 = durationFieldType82.getField(chronology94);
        boolean boolean96 = periodType45.isSupported(durationFieldType82);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime13 and dateTime43", (dateTime13.compareTo(dateTime43) == 0) == dateTime13.equals(dateTime43));
    }

    @Test
    public void test494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test494");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property3 = localDate2.monthOfYear();
        org.joda.time.DateTimeField dateTimeField4 = property3.getField();
        org.joda.time.LocalDate localDate5 = property3.roundCeilingCopy();
        org.joda.time.LocalDate localDate7 = localDate5.withCenturyOfEra((int) (short) 1);
        org.joda.time.LocalDate localDate9 = localDate5.withWeekOfWeekyear(46);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.ReadableInstant readableInstant12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period(readableDuration11, readableInstant12);
        org.joda.time.PeriodType periodType16 = null;
        org.joda.time.Period period17 = new org.joda.time.Period((long) 100, 1L, periodType16);
        org.joda.time.Period period19 = period17.minusSeconds((-1));
        java.lang.String str20 = period17.toString();
        org.joda.time.Period period21 = period17.toPeriod();
        org.joda.time.PeriodType periodType22 = period17.getPeriodType();
        org.joda.time.Period period23 = period13.normalizedStandard(periodType22);
        org.joda.time.Instant instant24 = new org.joda.time.Instant();
        org.joda.time.Instant instant26 = instant24.withMillis(0L);
        org.joda.time.Chronology chronology27 = instant26.getChronology();
        org.joda.time.DurationField durationField28 = chronology27.eras();
        long long32 = chronology27.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField33 = chronology27.secondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod34 = new org.joda.time.MutablePeriod(44L, periodType22, chronology27);
        org.joda.time.LocalDate localDate36 = localDate9.withPeriodAdded((org.joda.time.ReadablePeriod) mutablePeriod34, (int) (byte) 1);
        org.joda.time.Chronology chronology37 = localDate36.getChronology();
        org.joda.time.Period period38 = new org.joda.time.Period(0L, chronology37);
        org.joda.time.MutableDateTime mutableDateTime39 = org.joda.time.MutableDateTime.now();
        mutableDateTime39.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime42 = mutableDateTime39.copy();
        mutableDateTime39.setDate((long) '#');
        org.joda.time.LocalDate localDate45 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property46 = localDate45.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean48 = localDate45.isSupported(dateTimeFieldType47);
        int int49 = localDate45.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight51 = localDate45.toDateMidnight(dateTimeZone50);
        org.joda.time.DateTime dateTime52 = mutableDateTime39.toDateTime(dateTimeZone50);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone50);
        org.joda.time.LocalDate localDate54 = org.joda.time.LocalDate.now(dateTimeZone50);
        org.joda.time.MutableDateTime mutableDateTime55 = org.joda.time.MutableDateTime.now();
        mutableDateTime55.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime58 = mutableDateTime55.copy();
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime55.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime60 = property59.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime61 = property59.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime63 = property59.set(1);
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTime dateTime65 = new org.joda.time.DateTime(chronology64);
        int int66 = dateTime65.getYearOfCentury();
        int int67 = dateTime65.getWeekyear();
        org.joda.time.DateTime dateTime68 = dateTime65.withEarlierOffsetAtOverlap();
        java.lang.String str69 = dateTime68.toString();
        org.joda.time.MutableDateTime mutableDateTime70 = dateTime68.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone71 = org.joda.time.DateTimeZone.UTC;
        boolean boolean72 = dateTimeZone71.isFixed();
        mutableDateTime70.setZoneRetainFields(dateTimeZone71);
        org.joda.time.MutableDateTime mutableDateTime74 = mutableDateTime63.toMutableDateTime(dateTimeZone71);
        org.joda.time.Interval interval75 = localDate54.toInterval(dateTimeZone71);
        org.joda.time.LocalDate.Property property76 = localDate54.monthOfYear();
        org.joda.time.LocalDate localDate77 = property76.roundCeilingCopy();
        org.joda.time.LocalDate localDate79 = property76.addToCopy(26275);
        long long81 = chronology37.set((org.joda.time.ReadablePartial) localDate79, (long) 41);
        org.joda.time.LocalDate localDate82 = new org.joda.time.LocalDate(26224942L, chronology37);
        org.joda.time.Instant instant84 = new org.joda.time.Instant((long) 26244343);
        boolean boolean85 = localDate82.equals((java.lang.Object) instant84);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime39 and dateTime52", (mutableDateTime39.compareTo(dateTime52) == 0) == mutableDateTime39.equals(dateTime52));
    }

    @Test
    public void test495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test495");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) 1, chronology1);
        int int3 = dateTime2.getMinuteOfDay();
        int int4 = dateTime2.getEra();
        int int5 = dateTime2.getWeekOfWeekyear();
        org.joda.time.Instant instant6 = dateTime2.toInstant();
        org.joda.time.DateTime.Property property7 = dateTime2.era();
        org.joda.time.DateTime dateTime9 = property7.addWrapFieldToCopy(58);
        org.joda.time.LocalDate localDate10 = dateTime9.toLocalDate();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalTime localTime13 = new org.joda.time.LocalTime((long) (short) 100, chronology12);
        int int14 = localTime13.getMillisOfDay();
        org.joda.time.LocalTime.Property property15 = localTime13.millisOfSecond();
        org.joda.time.DurationField durationField16 = property15.getLeapDurationField();
        java.lang.String str17 = property15.getName();
        org.joda.time.LocalTime localTime19 = property15.addWrapFieldToCopy(51);
        org.joda.time.Instant instant20 = new org.joda.time.Instant();
        org.joda.time.Instant instant22 = instant20.withMillis(0L);
        org.joda.time.DateTime dateTime24 = new org.joda.time.DateTime((long) 1);
        org.joda.time.Duration duration26 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period27 = duration26.toPeriod();
        org.joda.time.Duration duration30 = duration26.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Period period31 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime24, (org.joda.time.ReadableDuration) duration30);
        org.joda.time.Instant instant32 = dateTime24.toInstant();
        org.joda.time.DateTime dateTime35 = dateTime24.withDurationAdded((long) 3, 4);
        org.joda.time.Instant instant36 = dateTime35.toInstant();
        boolean boolean37 = instant20.isBefore((org.joda.time.ReadableInstant) dateTime35);
        org.joda.time.DateTime dateTime38 = instant20.toDateTimeISO();
        org.joda.time.Instant instant41 = instant20.withDurationAdded((-3L), 26158);
        org.joda.time.Instant instant42 = instant41.toInstant();
        int int43 = property15.compareTo((org.joda.time.ReadableInstant) instant42);
        org.joda.time.Duration duration45 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration47 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str48 = duration47.toString();
        boolean boolean49 = duration45.isShorterThan((org.joda.time.ReadableDuration) duration47);
        org.joda.time.Duration duration51 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period52 = duration51.toPeriod();
        org.joda.time.Duration duration55 = duration51.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Duration duration57 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration60 = duration57.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean61 = duration55.isLongerThan((org.joda.time.ReadableDuration) duration57);
        boolean boolean62 = duration47.isEqual((org.joda.time.ReadableDuration) duration57);
        org.joda.time.ReadableDuration readableDuration63 = null;
        org.joda.time.ReadableInstant readableInstant64 = null;
        org.joda.time.Period period65 = new org.joda.time.Period(readableDuration63, readableInstant64);
        org.joda.time.PeriodType periodType68 = null;
        org.joda.time.Period period69 = new org.joda.time.Period((long) 100, 1L, periodType68);
        org.joda.time.Period period71 = period69.minusSeconds((-1));
        java.lang.String str72 = period69.toString();
        org.joda.time.Period period73 = period69.toPeriod();
        org.joda.time.PeriodType periodType74 = period69.getPeriodType();
        org.joda.time.Period period75 = period65.normalizedStandard(periodType74);
        java.lang.String str76 = periodType74.getName();
        java.lang.String str77 = periodType74.toString();
        java.lang.String str78 = periodType74.getName();
        org.joda.time.Period period79 = duration57.toPeriod(periodType74);
        org.joda.time.Instant instant80 = instant42.minus((org.joda.time.ReadableDuration) duration57);
        org.joda.time.Instant instant81 = instant80.toInstant();
        org.joda.time.MutablePeriod mutablePeriod82 = new org.joda.time.MutablePeriod((org.joda.time.ReadableInstant) dateTime9, (org.joda.time.ReadableInstant) instant81);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime9 and instant6", (dateTime9.compareTo(instant6) == 0) == dateTime9.equals(instant6));
    }

    @Test
    public void test496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test496");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.UTC;
        java.util.Locale locale3 = java.util.Locale.GERMAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.lang.String str5 = dateTimeZone1.getName(100L, locale3);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime(948227L, dateTimeZone1);
        long long7 = mutableDateTime6.getMillis();
        org.joda.time.Duration duration9 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Duration duration11 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration14 = duration11.withDurationAdded((long) (short) 100, (int) ' ');
        boolean boolean15 = duration9.isLongerThan((org.joda.time.ReadableDuration) duration14);
        java.lang.Object obj16 = null;
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(obj16);
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.withHourOfDay(10);
        org.joda.time.DateTimeField dateTimeField24 = localDateTime22.getField((int) (byte) 0);
        long long26 = dateTimeField24.roundHalfEven((long) 1);
        int int27 = dateTime17.get(dateTimeField24);
        org.joda.time.LocalDateTime localDateTime28 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withCenturyOfEra((int) 'a');
        java.util.Locale locale36 = java.util.Locale.GERMAN;
        java.lang.String str37 = locale36.getDisplayName();
        java.lang.String str38 = dateTimeField24.getAsText((org.joda.time.ReadablePartial) localDateTime32, 53, locale36);
        org.joda.time.Duration duration40 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period41 = duration40.toPeriod();
        org.joda.time.Duration duration44 = duration40.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime32.minus((org.joda.time.ReadableDuration) duration40);
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime46.withHourOfDay(10);
        org.joda.time.LocalDateTime.Property property49 = localDateTime46.hourOfDay();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime46.plusMillis((int) (byte) 0);
        int int52 = localDateTime32.compareTo((org.joda.time.ReadablePartial) localDateTime46);
        boolean boolean53 = duration9.equals((java.lang.Object) int52);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.DateTime dateTime55 = new org.joda.time.DateTime(chronology54);
        int int56 = dateTime55.getSecondOfMinute();
        int int57 = dateTime55.getYearOfEra();
        org.joda.time.ReadableInstant readableInstant58 = null;
        org.joda.time.ReadableInstant readableInstant59 = null;
        org.joda.time.PeriodType periodType60 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod61 = new org.joda.time.MutablePeriod(readableInstant58, readableInstant59, periodType60);
        mutablePeriod61.setYears((int) '#');
        mutablePeriod61.setSeconds((int) 'a');
        org.joda.time.DateTime dateTime66 = dateTime55.plus((org.joda.time.ReadablePeriod) mutablePeriod61);
        org.joda.time.MutablePeriod mutablePeriod67 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration9, (org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.Period period68 = new org.joda.time.Period((org.joda.time.ReadableInstant) mutableDateTime6, (org.joda.time.ReadableDuration) duration9);
        java.lang.Object obj69 = null;
        org.joda.time.DateTime dateTime70 = new org.joda.time.DateTime(obj69);
        boolean boolean72 = dateTime70.isBefore((long) 7);
        java.lang.String str73 = dateTime70.toString();
        org.joda.time.DateTime dateTime75 = dateTime70.minus((long) 7);
        org.joda.time.Instant instant76 = new org.joda.time.Instant();
        org.joda.time.Instant instant78 = instant76.withMillis(0L);
        org.joda.time.Chronology chronology79 = instant78.getChronology();
        org.joda.time.DateTime dateTime80 = dateTime70.toDateTime(chronology79);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime(chronology79);
        org.joda.time.DateTime dateTime83 = dateTime81.minusDays(2100);
        int int84 = mutableDateTime6.compareTo((org.joda.time.ReadableInstant) dateTime81);
        mutableDateTime6.addSeconds((int) 'u');
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on dateTime17 and instant76", (dateTime17.compareTo(instant76) == 0) == dateTime17.equals(instant76));
    }

    @Test
    public void test497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test497");
        org.joda.time.Instant instant0 = new org.joda.time.Instant();
        org.joda.time.DateTime dateTime1 = instant0.toDateTime();
        org.joda.time.LocalDateTime localDateTime2 = org.joda.time.LocalDateTime.now();
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withHourOfDay(10);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime6.withCenturyOfEra((int) 'a');
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTime dateTime10 = new org.joda.time.DateTime(chronology9);
        org.joda.time.DateTime dateTime12 = dateTime10.plusMinutes(15);
        org.joda.time.DateTime dateTime13 = localDateTime6.toDateTime((org.joda.time.ReadableInstant) dateTime10);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateTime dateTime15 = localDateTime6.toDateTime(dateTimeZone14);
        org.joda.time.DateTime dateTime16 = dateTime1.withZoneRetainFields(dateTimeZone14);
        java.lang.String str17 = dateTimeZone14.toString();
        java.lang.String str18 = dateTimeZone14.getID();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime20 = new org.joda.time.MutableDateTime(dateTimeZone14);
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.copy();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.yearOfCentury();
        mutableDateTime21.setHourOfDay(9);
        int int28 = dateTimeZone14.getOffset((org.joda.time.ReadableInstant) mutableDateTime21);
        mutableDateTime21.setMillis((long) 62172);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime21.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime32 = property31.roundHalfCeiling();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant0 and dateTime1", (instant0.compareTo(dateTime1) == 0) == instant0.equals(dateTime1));
    }

    @Test
    public void test498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test498");
        org.joda.time.ReadableInstant readableInstant0 = null;
        org.joda.time.ReadableInstant readableInstant1 = null;
        org.joda.time.PeriodType periodType2 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod3 = new org.joda.time.MutablePeriod(readableInstant0, readableInstant1, periodType2);
        mutablePeriod3.addDays((int) '4');
        mutablePeriod3.addYears(44);
        mutablePeriod3.setSeconds(26190);
        org.joda.time.PeriodType periodType12 = null;
        org.joda.time.Period period13 = new org.joda.time.Period((long) 100, 1L, periodType12);
        org.joda.time.Period period15 = period13.minusSeconds((-1));
        java.lang.String str16 = period13.toString();
        org.joda.time.Period period17 = period13.toPeriod();
        int int18 = period17.size();
        org.joda.time.Period period20 = period17.plusSeconds(62151);
        org.joda.time.ReadableInstant readableInstant22 = null;
        org.joda.time.ReadableInstant readableInstant23 = null;
        org.joda.time.PeriodType periodType24 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod(readableInstant22, readableInstant23, periodType24);
        org.joda.time.PeriodType periodType26 = periodType24.withHoursRemoved();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Instant instant29 = new org.joda.time.Instant();
        org.joda.time.Instant instant31 = instant29.withMillis(0L);
        org.joda.time.Chronology chronology32 = instant31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.eras();
        org.joda.time.LocalTime localTime34 = org.joda.time.LocalTime.now(chronology32);
        org.joda.time.DurationField durationField35 = chronology32.eras();
        org.joda.time.DateTime dateTime36 = new org.joda.time.DateTime((long) 44, chronology32);
        org.joda.time.DateTimeField dateTimeField37 = dateTimeFieldType27.getField(chronology32);
        org.joda.time.DateTimeField dateTimeField38 = chronology32.weekOfWeekyear();
        org.joda.time.MutablePeriod mutablePeriod39 = new org.joda.time.MutablePeriod((long) (-292275054), periodType24, chronology32);
        org.joda.time.Period period40 = period20.minus((org.joda.time.ReadablePeriod) mutablePeriod39);
        int int41 = period40.getSeconds();
        org.joda.time.Instant instant42 = new org.joda.time.Instant();
        org.joda.time.MutableDateTime mutableDateTime43 = instant42.toMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime44 = instant42.toMutableDateTimeISO();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.MutableDateTime mutableDateTime46 = instant42.toMutableDateTime(chronology45);
        org.joda.time.Duration duration48 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Period period49 = duration48.toPeriod();
        org.joda.time.Duration duration52 = duration48.withDurationAdded((long) '#', (int) (short) 0);
        org.joda.time.Instant instant53 = instant42.plus((org.joda.time.ReadableDuration) duration48);
        org.joda.time.Duration duration54 = period40.toDurationFrom((org.joda.time.ReadableInstant) instant42);
        mutablePeriod3.setPeriod((org.joda.time.ReadablePeriod) period40);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant29 and mutableDateTime43", (instant29.compareTo(mutableDateTime43) == 0) == instant29.equals(mutableDateTime43));
    }

    @Test
    public void test499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test499");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        org.joda.time.Duration duration4 = duration1.withDurationAdded((long) (short) 100, (int) ' ');
        long long5 = duration4.getMillis();
        org.joda.time.Instant instant6 = new org.joda.time.Instant();
        org.joda.time.Instant instant8 = instant6.withMillis(0L);
        org.joda.time.DateTime dateTime9 = instant8.toDateTime();
        org.joda.time.Instant instant10 = new org.joda.time.Instant();
        org.joda.time.Instant instant12 = instant10.withMillis(0L);
        org.joda.time.DateTime dateTime13 = instant12.toDateTime();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) 1);
        org.joda.time.PeriodType periodType16 = org.joda.time.PeriodType.months();
        org.joda.time.Period period17 = new org.joda.time.Period((org.joda.time.ReadableInstant) dateTime13, (org.joda.time.ReadableInstant) dateTime15, periodType16);
        boolean boolean18 = dateTime9.isBefore((org.joda.time.ReadableInstant) dateTime13);
        int int19 = dateTime13.getDayOfMonth();
        org.joda.time.ReadableInstant readableInstant20 = null;
        org.joda.time.ReadableInstant readableInstant21 = null;
        org.joda.time.PeriodType periodType22 = org.joda.time.PeriodType.yearDayTime();
        org.joda.time.MutablePeriod mutablePeriod23 = new org.joda.time.MutablePeriod(readableInstant20, readableInstant21, periodType22);
        org.joda.time.PeriodType periodType24 = periodType22.withHoursRemoved();
        org.joda.time.MutablePeriod mutablePeriod25 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime13, periodType22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(chronology26);
        org.joda.time.DateTime dateTime29 = dateTime27.plusMinutes(15);
        org.joda.time.Chronology chronology30 = dateTime27.getChronology();
        org.joda.time.Instant instant31 = new org.joda.time.Instant();
        org.joda.time.Instant instant33 = instant31.withMillis(0L);
        org.joda.time.Chronology chronology34 = instant33.getChronology();
        org.joda.time.DurationField durationField35 = chronology34.eras();
        org.joda.time.LocalTime localTime36 = org.joda.time.LocalTime.now(chronology34);
        org.joda.time.DurationField durationField37 = chronology34.eras();
        org.joda.time.DateTimeField dateTimeField38 = chronology34.hourOfDay();
        org.joda.time.DateTime dateTime39 = dateTime27.withChronology(chronology34);
        org.joda.time.MutableDateTime mutableDateTime40 = org.joda.time.MutableDateTime.now();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime40.centuryOfEra();
        org.joda.time.MutableDateTime mutableDateTime42 = property41.getMutableDateTime();
        boolean boolean43 = dateTime39.isBefore((org.joda.time.ReadableInstant) mutableDateTime42);
        org.joda.time.Instant instant44 = new org.joda.time.Instant();
        org.joda.time.Instant instant46 = instant44.withMillis(0L);
        org.joda.time.Chronology chronology47 = instant46.getChronology();
        org.joda.time.DurationField durationField48 = chronology47.eras();
        long long52 = chronology47.add(0L, (long) 2022, (int) '4');
        org.joda.time.DateTimeField dateTimeField53 = chronology47.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField54 = chronology47.minuteOfDay();
        mutableDateTime42.setChronology(chronology47);
        org.joda.time.DateTime dateTime56 = dateTime13.toDateTime(chronology47);
        org.joda.time.DateTime dateTime57 = dateTime13.toDateTime();
        org.joda.time.DateTime.Property property58 = dateTime13.era();
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on instant6 and dateTime27", (instant6.compareTo(dateTime27) == 0) == instant6.equals(dateTime27));
    }

    @Test
    public void test500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "ErrorTest0.test500");
        org.joda.time.Duration duration1 = org.joda.time.Duration.standardDays((long) (byte) 1);
        java.lang.String str2 = duration1.toString();
        org.joda.time.Duration duration4 = org.joda.time.Duration.standardSeconds(100L);
        org.joda.time.Hours hours5 = duration4.toStandardHours();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(chronology6);
        int int8 = dateTime7.getSecondOfMinute();
        org.joda.time.MutablePeriod mutablePeriod9 = new org.joda.time.MutablePeriod((org.joda.time.ReadableDuration) duration4, (org.joda.time.ReadableInstant) dateTime7);
        org.joda.time.Duration duration10 = duration1.plus((org.joda.time.ReadableDuration) duration4);
        long long11 = duration4.getStandardHours();
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate.Property property13 = localDate12.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean15 = localDate12.isSupported(dateTimeFieldType14);
        int int16 = localDate12.getDayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.UTC;
        org.joda.time.DateMidnight dateMidnight18 = localDate12.toDateMidnight(dateTimeZone17);
        org.joda.time.LocalDate.Property property19 = localDate12.year();
        org.joda.time.LocalDate localDate20 = property19.roundHalfEvenCopy();
        org.joda.time.MutableDateTime mutableDateTime21 = org.joda.time.MutableDateTime.now();
        mutableDateTime21.add((long) 'a');
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime21.copy();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime26 = property25.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.roundHalfCeiling();
        org.joda.time.MutableDateTime mutableDateTime29 = property25.set(1);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.DateTime dateTime31 = new org.joda.time.DateTime(chronology30);
        int int32 = dateTime31.getYearOfCentury();
        int int33 = dateTime31.getWeekyear();
        org.joda.time.DateTime dateTime34 = dateTime31.withEarlierOffsetAtOverlap();
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.MutableDateTime mutableDateTime36 = dateTime34.toMutableDateTime();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.UTC;
        boolean boolean38 = dateTimeZone37.isFixed();
        mutableDateTime36.setZoneRetainFields(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime40 = mutableDateTime29.toMutableDateTime(dateTimeZone37);
        org.joda.time.LocalDate localDate41 = org.joda.time.LocalDate.now(dateTimeZone37);
        org.joda.time.DateTime dateTime42 = new org.joda.time.DateTime(dateTimeZone37);
        org.joda.time.DateTime dateTime43 = localDate20.toDateTimeAtCurrentTime(dateTimeZone37);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime(dateTimeZone37);
        mutableDateTime44.setWeekyear(10);
        org.joda.time.MutableDateTime.Property property47 = mutableDateTime44.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime48 = property47.roundFloor();
        org.joda.time.Interval interval49 = duration4.toIntervalFrom((org.joda.time.ReadableInstant) mutableDateTime48);
        org.junit.Assert.assertTrue("Contract failed: compareTo-equals on mutableDateTime21 and mutableDateTime40", (mutableDateTime21.compareTo(mutableDateTime40) == 0) == mutableDateTime21.equals(mutableDateTime40));
    }
}


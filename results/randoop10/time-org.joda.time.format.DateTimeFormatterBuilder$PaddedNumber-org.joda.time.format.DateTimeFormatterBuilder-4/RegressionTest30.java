import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest30 {

    public static boolean debug = false;

    @Test
    public void test15001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15001");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        org.joda.time.DateTime.Property property12 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime14 = property12.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime16 = property12.addToCopy((long) 86399999);
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder18 = builder17.clearExtensions();
        java.util.Locale locale19 = builder18.build();
        int int20 = property12.getMaximumTextLength(locale19);
        org.joda.time.tz.NameProvider nameProvider21 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale23 = new java.util.Locale("hi!");
        java.lang.String str24 = locale23.getScript();
        boolean boolean25 = locale23.hasExtensions();
        java.lang.String str28 = nameProvider21.getShortName(locale23, "minuteOfHour", "23:00:00.000");
        java.util.Locale locale29 = java.util.Locale.TAIWAN;
        java.lang.String str30 = locale29.toLanguageTag();
        java.lang.String str33 = nameProvider21.getShortName(locale29, "", "AD");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider21);
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder36 = builder35.clearExtensions();
        java.util.Locale locale37 = builder36.build();
        java.lang.String str40 = nameProvider21.getName(locale37, "DurationField[years]", "0009-10-04");
        java.lang.String str41 = locale19.getDisplayName(locale37);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime();
        mutableDateTime42.add((long) 100);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime42.dayOfYear();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (-1), chronology47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        org.joda.time.DateTime dateTime52 = localDateTime48.toDateTime(dateTimeZone50);
        java.lang.String str53 = dateTime52.toString();
        org.joda.time.DateTime dateTime55 = dateTime52.plus((long) 100);
        org.joda.time.DateTime.Property property56 = dateTime55.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration57 = null;
        org.joda.time.DateTime dateTime58 = dateTime55.plus(readableDuration57);
        int int59 = dateTime58.getDayOfMonth();
        java.util.Locale locale61 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet62 = locale61.getUnicodeLocaleAttributes();
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.lang.String str64 = locale61.getDisplayVariant(locale63);
        java.lang.String str65 = dateTime58.toString("365", locale63);
        org.joda.time.DateTime dateTime67 = dateTime58.plusMonths(1969);
        mutableDateTime42.setMillis((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.DateTimeZone dateTimeZone69 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone70 = dateTimeZone69.toTimeZone();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.LocalDateTime localDateTime73 = new org.joda.time.LocalDateTime((long) (-1), chronology72);
        boolean boolean74 = dateTimeZone69.isLocalDateTimeGap(localDateTime73);
        java.lang.String str76 = dateTimeZone69.getName((long) 4);
        mutableDateTime42.setZone(dateTimeZone69);
        java.util.Locale locale79 = java.util.Locale.getDefault();
        java.lang.String str80 = dateTimeZone69.getName((long) (-292275054), locale79);
        java.lang.String str81 = locale79.getScript();
        java.lang.String str82 = locale37.getDisplayName(locale79);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 2 + "'", int20 == 2);
        org.junit.Assert.assertNotNull(nameProvider21);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "zh-TW" + "'", str30, "zh-TW");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime52);
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str53, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "365" + "'", str65, "365");
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(dateTimeZone69);
        org.junit.Assert.assertNotNull(timeZone70);
// flaky:         org.junit.Assert.assertEquals(timeZone70.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "+00:00:00.003" + "'", str76, "+00:00:00.003");
        org.junit.Assert.assertNotNull(locale79);
// flaky:         org.junit.Assert.assertEquals(locale79.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "+00:00:00.003" + "'", str80, "+00:00:00.003");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
    }

    @Test
    public void test15002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15002");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear(23);
        int int14 = localDateTime11.getCenturyOfEra();
        int int16 = localDateTime11.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.plusMinutes(99);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusMillis(31);
        java.lang.String str21 = localDateTime20.toString();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (-1), chronology25);
        boolean boolean27 = dateTimeZone22.isLocalDateTimeGap(localDateTime26);
        java.lang.String str29 = dateTimeZone22.getName((long) 4);
        org.joda.time.DateTime dateTime30 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone22);
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime(dateTimeZone22);
        java.util.Locale.Category category36 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale37 = java.util.Locale.getDefault(category36);
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet39 = locale38.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category36, locale38);
        java.util.Locale locale41 = java.util.Locale.getDefault(category36);
        java.util.Locale locale42 = java.util.Locale.getDefault(category36);
        java.util.Locale locale43 = java.util.Locale.PRC;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = dateTimeZone22.getName(983515709L, locale42);
        boolean boolean46 = dateTimeZone22.isFixed();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1923-01-01T01:38:59.971" + "'", str21, "1923-01-01T01:38:59.971");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.003" + "'", str29, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + category36 + "' != '" + java.util.Locale.Category.FORMAT + "'", category36.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str44, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.003" + "'", str45, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
    }

    @Test
    public void test15003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15003");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendTwoDigitWeekyear((int) 'x', true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder5.appendTwoDigitYear(9, true);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatterBuilder11.toPrinter();
        boolean boolean13 = dateTimeFormatterBuilder11.canBuildFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendDayOfWeekText();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-1), chronology18);
        boolean boolean20 = dateTimeZone15.isLocalDateTimeGap(localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra((int) (byte) 10);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDateTime25.toDateTime(dateTimeZone27);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateTime.Property property31 = dateTime29.property(dateTimeFieldType30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime22.property(dateTimeFieldType30);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder14.appendDecimal(dateTimeFieldType30, 31, 92);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatterBuilder14.toFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder14.appendTwoDigitYear(26780);
        boolean boolean39 = dateTimeFormatterBuilder38.canBuildParser();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimePrinter12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test15004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15004");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusSeconds((int) (byte) 100);
        org.joda.time.LocalTime.Property property6 = localTime1.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        java.lang.String str9 = dateTimeField7.getAsText(768619512693008663L);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "8" + "'", str9, "8");
    }

    @Test
    public void test15005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15005");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        int int13 = dateTime12.getDayOfMonth();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.lang.String str19 = dateTime12.toString("365", locale17);
        org.joda.time.DateTime dateTime21 = dateTime12.plusMonths(1969);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMonthOfYear(5);
        org.joda.time.DateTime dateTime28 = dateTime21.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime24.minus(readablePeriod29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime33 = localDateTime24.withPeriodAdded(readablePeriod31, 240);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "365" + "'", str19, "365");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test15006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15006");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTime dateTime4 = localTime3.toDateTimeToday();
        org.joda.time.LocalTime.Property property5 = localTime3.hourOfDay();
        org.joda.time.LocalTime.Property property6 = localTime3.millisOfDay();
        org.joda.time.LocalTime localTime8 = localTime3.withMillisOfDay((int) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime10 = localTime8.withHourOfDay((-63));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -63 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localTime8);
    }

    @Test
    public void test15007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15007");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DurationField durationField12 = chronology9.minutes();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 292278993, chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 'a', chronology9);
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DateTimeField dateTimeField16 = chronology9.year();
        java.lang.String str18 = dateTimeField16.getAsText(82163058220800000L);
        int int20 = dateTimeField16.getMaximumValue(768619512693059538L);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "2605613" + "'", str18, "2605613");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 292278993 + "'", int20 == 292278993);
    }

    @Test
    public void test15008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15008");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        int int5 = localTime1.size();
        org.joda.time.LocalTime localTime7 = localTime1.minusMinutes(31);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalTime localTime9 = localTime1.minus(readablePeriod8);
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray10 = localTime1.getFieldTypes();
        int int11 = localTime1.size();
        org.joda.time.LocalTime localTime13 = localTime1.minusMillis(292278994);
        int int14 = localTime13.getMillisOfDay();
        int int15 = localTime13.getMillisOfSecond();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 4 + "'", int11 == 4);
        org.junit.Assert.assertNotNull(localTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53321009 + "'", int14 == 53321009);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 9 + "'", int15 == 9);
    }

    @Test
    public void test15009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15009");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        org.joda.time.DurationField durationField11 = chronology8.weeks();
        long long13 = durationField11.getMillis(8760L);
        long long15 = durationField11.getValueAsLong((long) 32);
        java.lang.String str16 = durationField11.toString();
        boolean boolean17 = durationField11.isPrecise();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 5298048000000L + "'", long13 == 5298048000000L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "DurationField[weeks]" + "'", str16, "DurationField[weeks]");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test15010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15010");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendSecondOfDay(738207);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder2.appendYearOfCentury(738207, 17259888);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (-1), chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = localDateTime8.toDateTime(dateTimeZone10);
        java.lang.String str13 = dateTime12.toString();
        org.joda.time.DateTime dateTime15 = dateTime12.plus((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int17 = dateTime15.get(dateTimeFieldType16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = localDateTime20.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime25 = localDateTime20.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDateTime localDateTime27 = localDateTime20.minus(readablePeriod26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime20.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.withWeekOfWeekyear(23);
        int int32 = localDateTime29.getCenturyOfEra();
        int int34 = localDateTime29.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime29.plusMinutes(99);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (-1), chronology38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.weekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property45 = localDateTime39.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean47 = localDateTime39.isSupported(dateTimeFieldType46);
        int int48 = localDateTime36.indexOf(dateTimeFieldType46);
        boolean boolean49 = dateTime15.isSupported(dateTimeFieldType46);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder2.appendFraction(dateTimeFieldType46, 70, 292278994);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder52.appendLiteral('a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = dateTimeFormatterBuilder52.appendWeekyear(481, 2089);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder57.appendTwoDigitYear((-68), true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str13, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 19 + "'", int32 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + (-1) + "'", int48 == (-1));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder57);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
    }

    @Test
    public void test15011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15011");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (-1), chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        boolean boolean10 = dateTimeZone0.isLocalDateTimeGap(localDateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long16 = dateTimeZone11.convertLocalToUTC(10L, false, (long) 3);
        java.lang.String str18 = dateTimeZone11.getName((long) 2022);
        long long20 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, 153713980800000L);
        int int22 = dateTimeZone0.getOffsetFromLocal(31243723997L);
        org.joda.time.DateTimeZone.setDefault(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime24 = org.joda.time.LocalDateTime.now(dateTimeZone0);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMinutes(7200002);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withYearOfEra(26);
        int int29 = localDateTime26.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 7L + "'", long16 == 7L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.003" + "'", str18, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 153713980800000L + "'", long20 == 153713980800000L);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 3 + "'", int22 == 3);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 35 + "'", int29 == 35);
    }

    @Test
    public void test15012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15012");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder4.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder4.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder4.appendMonthOfYearShortText();
        org.joda.time.format.DateTimePrinter dateTimePrinter11 = null;
        org.joda.time.format.DateTimeParser dateTimeParser12 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter11, dateTimeParser12);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = dateTimeFormatter13.withChronology(chronology21);
        org.joda.time.DateTimeField dateTimeField23 = chronology21.monthOfYear();
        org.joda.time.DateTimeField dateTimeField24 = chronology21.clockhourOfHalfday();
        org.joda.time.DurationField durationField25 = chronology21.days();
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) 1970, chronology21);
        org.joda.time.DurationField durationField27 = chronology21.hours();
        org.joda.time.DateTimeField dateTimeField28 = chronology21.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField29 = chronology21.secondOfDay();
        int int30 = dateTimeField29.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = dateTimeField29.getType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder4.appendShortText(dateTimeFieldType31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder32.appendMonthOfYearShortText();
        dateTimeFormatterBuilder33.clear();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap35 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder33.appendTimeZoneName(strMap35);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder33.appendEraText();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFormatter22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 86399 + "'", int30 == 86399);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
    }

    @Test
    public void test15013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15013");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.plusMonths((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime14 = localDateTime4.plusMinutes((int) 'a');
        int int15 = localDateTime4.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
    }

    @Test
    public void test15014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15014");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = dateTimeField10.getRangeDurationField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test15015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15015");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser3 = dateTimeFormatterBuilder2.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder4.appendFractionOfHour(292278993, 86399);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder4.appendFractionOfDay((int) (byte) 1, 35);
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime14.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration17 = null;
        mutableDateTime14.add(readableDuration17, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int21 = mutableDateTime14.get(dateTimeFieldType20);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder4.appendDecimal(dateTimeFieldType20, 105349, 17259888);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder24.appendCenturyOfEra(222, 28);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder24.appendFractionOfSecond(10, (-2937600));
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder31.appendSecondOfDay(738207);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder31.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder31.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder36.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = dateTimeFormatterBuilder40.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder40.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser45 = dateTimeFormatterBuilder40.toParser();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (-1), chronology48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTime dateTime53 = localDateTime49.toDateTime(dateTimeZone51);
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        org.joda.time.DurationField durationField55 = chronology54.hours();
        org.joda.time.DateTimeField dateTimeField56 = chronology54.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.weekyear();
        java.util.Locale locale58 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(86399999L, chronology54, locale58);
        int int62 = dateTimeParser45.parseInto(dateTimeParserBucket59, "10", 9);
        int int63 = dateTimeParser45.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = dateTimeFormatterBuilder31.append(dateTimeParser45);
        int int65 = dateTimeParser45.estimateParsedLength();
        int int66 = dateTimeParser45.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder24.appendOptional(dateTimeParser45);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder2.appendOptional(dateTimeParser45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeParser3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimePrinter41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertNotNull(dateTimeParser45);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(durationField55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + (-10) + "'", int62 == (-10));
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 23 + "'", int63 == 23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 23 + "'", int65 == 23);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 23 + "'", int66 == 23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
    }

    @Test
    public void test15016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15016");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate9 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate13 = localDate11.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate15 = localDate13.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate17 = localDate15.withYearOfEra(10);
        org.joda.time.LocalDate localDate19 = localDate15.withWeekyear(20);
        org.joda.time.LocalDate.Property property20 = localDate15.weekOfWeekyear();
        org.joda.time.LocalDate localDate21 = localDate9.withFields((org.joda.time.ReadablePartial) localDate15);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime23.setTime(100L);
        org.joda.time.MutableDateTime.Property property26 = mutableDateTime23.dayOfMonth();
        org.joda.time.Interval interval27 = property26.toInterval();
        boolean boolean28 = localDate9.equals((java.lang.Object) interval27);
        org.joda.time.LocalDate localDate30 = localDate9.withMonthOfYear(9);
        org.joda.time.LocalDate.Property property31 = localDate30.yearOfCentury();
        org.joda.time.LocalDate localDate33 = localDate30.plusDays(21);
        org.joda.time.LocalDate localDate35 = localDate33.minusWeeks(284);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(interval27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDate33);
        org.junit.Assert.assertNotNull(localDate35);
    }

    @Test
    public void test15017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15017");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        boolean boolean15 = dateTimeZone10.isLocalDateTimeGap(localDateTime14);
        long long17 = chronology9.set((org.joda.time.ReadablePartial) localDateTime14, (long) '#');
        org.joda.time.DateTimeField dateTimeField18 = chronology9.secondOfMinute();
        org.joda.time.DurationField durationField19 = dateTimeField18.getRangeDurationField();
        long long22 = durationField19.subtract(2332799999L, (long) (short) -1);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDateTime25.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfDay();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DurationField durationField33 = chronology30.minutes();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.MutableDateTime mutableDateTime36 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime36.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration39 = null;
        mutableDateTime36.add(readableDuration39, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType42 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int43 = mutableDateTime36.get(dateTimeFieldType42);
        java.lang.String str44 = dateTimeFieldType42.getName();
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime34.property(dateTimeFieldType42);
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(dateTimeZone47);
        java.util.Locale locale50 = java.util.Locale.ENGLISH;
        java.lang.String str51 = locale50.getDisplayScript();
        java.lang.String str52 = dateTimeZone47.getName((long) 5, locale50);
        org.joda.time.DateTime dateTime53 = new org.joda.time.DateTime(dateTimeZone47);
        mutableDateTime34.setZone(dateTimeZone47);
        int int55 = mutableDateTime34.getSecondOfMinute();
        mutableDateTime34.setMillis((long) 366);
        org.joda.time.MutableDateTime.Property property58 = mutableDateTime34.secondOfDay();
        org.joda.time.ReadablePeriod readablePeriod59 = null;
        mutableDateTime34.add(readablePeriod59, 2089);
        org.joda.time.Chronology chronology65 = null;
        org.joda.time.LocalDateTime localDateTime66 = new org.joda.time.LocalDateTime((long) (-1), chronology65);
        org.joda.time.LocalDateTime.Property property67 = localDateTime66.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone68 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone69 = dateTimeZone68.toTimeZone();
        org.joda.time.DateTime dateTime70 = localDateTime66.toDateTime(dateTimeZone68);
        org.joda.time.Chronology chronology71 = dateTime70.getChronology();
        org.joda.time.DateTimeField dateTimeField72 = chronology71.secondOfDay();
        org.joda.time.DurationField durationField73 = chronology71.minutes();
        org.joda.time.DurationField durationField74 = chronology71.minutes();
        org.joda.time.MutableDateTime mutableDateTime75 = new org.joda.time.MutableDateTime((long) 292278993, chronology71);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) 'a', chronology71);
        org.joda.time.DateTimeField dateTimeField77 = chronology71.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime78 = new org.joda.time.MutableDateTime(chronology71);
        org.joda.time.DurationField durationField79 = chronology71.halfdays();
        mutableDateTime34.setChronology(chronology71);
        org.joda.time.DurationField durationField81 = chronology71.centuries();
        int int82 = durationField19.compareTo(durationField81);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2332859999L + "'", long22 == 2332859999L);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeFieldType42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 0 + "'", int43 == 0);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "minuteOfHour" + "'", str44, "minuteOfHour");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.003" + "'", str52, "+00:00:00.003");
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 40 + "'", int55 == 40);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTimeZone68);
        org.junit.Assert.assertNotNull(timeZone69);
// flaky:         org.junit.Assert.assertEquals(timeZone69.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime70);
        org.junit.Assert.assertNotNull(chronology71);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(durationField73);
        org.junit.Assert.assertNotNull(durationField74);
        org.junit.Assert.assertNotNull(dateTimeField77);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + (-1) + "'", int82 == (-1));
    }

    @Test
    public void test15018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15018");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime dateTime5 = dateTime2.withDurationAdded((long) (byte) 0, 292278993);
        org.joda.time.DateMidnight dateMidnight6 = dateTime5.toDateMidnight();
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime9 = dateTime5.withDurationAdded(readableDuration7, (int) (byte) 10);
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = dateTime5.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.weekyear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        int int18 = property15.compareTo((org.joda.time.ReadableInstant) mutableDateTime17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime20.add(readableDuration21, 100);
        boolean boolean24 = mutableDateTime17.isBefore((org.joda.time.ReadableInstant) mutableDateTime20);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime20.minuteOfHour();
        org.joda.time.Interval interval26 = property25.toInterval();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime27.minuteOfHour();
        mutableDateTime27.setMillis(8760L);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime27.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        boolean boolean37 = dateTimeZone32.isLocalDateTimeGap(localDateTime36);
        int int39 = dateTimeZone32.getStandardOffset(1645514718201L);
        mutableDateTime27.setZoneRetainFields(dateTimeZone32);
        org.joda.time.MutableDateTime mutableDateTime41 = dateTime5.toMutableDateTime(dateTimeZone32);
        org.joda.time.DurationFieldType durationFieldType42 = org.joda.time.DurationFieldType.hours();
        mutableDateTime41.add(durationFieldType42, 19045);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateMidnight6);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(interval26);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 3 + "'", int39 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime41);
        org.junit.Assert.assertNotNull(durationFieldType42);
    }

    @Test
    public void test15019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15019");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withOffsetParsed();
        int int14 = dateTimeFormatter13.getDefaultYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter13.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = dateTimeFormatter15.withDefaultYear((int) (byte) -1);
        org.joda.time.Chronology chronology18 = dateTimeFormatter17.getChronology();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekyearOfCentury();
        java.lang.String str30 = chronology26.toString();
        org.joda.time.DateTimeField dateTimeField31 = chronology26.era();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter17.withChronology(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTime dateTime40 = localDateTime36.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField44 = dateTimeFieldType33.getField(chronology41);
        org.joda.time.DateTimeField dateTimeField45 = chronology41.weekyear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter32.withChronology(chronology41);
        java.lang.Appendable appendable47 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter46.printTo(appendable47, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimePrinter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeFormatter17);
        org.junit.Assert.assertNull(chronology18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str30, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
    }

    @Test
    public void test15020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15020");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime7 = property5.addCopy((int) 'u');
        org.joda.time.LocalTime localTime9 = localTime7.plusMinutes(18);
        org.joda.time.LocalTime.Property property10 = localTime7.millisOfSecond();
        org.joda.time.LocalTime localTime11 = property10.roundHalfFloorCopy();
        int int12 = localTime11.getSecondOfMinute();
        org.joda.time.LocalTime localTime14 = localTime11.minusMinutes(2);
        org.joda.time.LocalTime localTime16 = localTime11.minusHours(452);
        org.joda.time.LocalTime localTime18 = localTime11.withSecondOfMinute(20);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test15021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15021");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter4.withChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekOfWeekyear();
        int int17 = mutableDateTime1.get(dateTimeField16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.weekyearOfCentury();
        java.lang.String str29 = chronology25.toString();
        org.joda.time.DateTimeField dateTimeField30 = chronology25.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField31 = chronology25.millisOfSecond();
        org.joda.time.DurationField durationField32 = chronology25.halfdays();
        mutableDateTime1.setChronology(chronology25);
        mutableDateTime1.setMinuteOfDay(166);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 8 + "'", int17 == 8);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str29, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
    }

    @Test
    public void test15022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15022");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) 3692163384000L);
        org.joda.time.format.DateTimePrinter dateTimePrinter2 = null;
        org.joda.time.format.DateTimeParser dateTimeParser3 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter4 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter2, dateTimeParser3);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter4.withChronology(chronology12);
        org.joda.time.DateTimeField dateTimeField14 = chronology12.monthOfYear();
        org.joda.time.LocalDateTime localDateTime15 = org.joda.time.LocalDateTime.now(chronology12);
        org.joda.time.DateTimeField dateTimeField16 = chronology12.weekOfWeekyear();
        java.util.Locale locale17 = null;
        int int18 = dateTimeField16.getMaximumTextLength(locale17);
        int int20 = dateTimeField16.getMinimumValue((long) 1975);
        long long23 = dateTimeField16.addWrapField((long) 15, 59);
        java.util.Locale locale24 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str25 = locale24.getScript();
        int int26 = dateTimeField16.getMaximumTextLength(locale24);
        mutableDateTime1.setRounding(dateTimeField16);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime32.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime32.plusHours(0);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime36.minusDays(4);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (-1), chronology40);
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime41.plusYears(0);
        int int46 = localDateTime41.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime41.withFieldAdded(durationFieldType47, 0);
        boolean boolean50 = localDateTime38.isSupported(durationFieldType47);
        org.joda.time.MutableDateTime mutableDateTime51 = new org.joda.time.MutableDateTime();
        mutableDateTime51.add((long) 100);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (-1), chronology55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.DateTime dateTime60 = localDateTime56.toDateTime(dateTimeZone58);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.secondOfDay();
        org.joda.time.DurationField durationField63 = chronology61.minutes();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.weekyearOfCentury();
        java.lang.String str65 = chronology61.toString();
        mutableDateTime51.setChronology(chronology61);
        org.joda.time.DurationField durationField67 = chronology61.centuries();
        org.joda.time.DurationField durationField68 = durationFieldType47.getField(chronology61);
        org.joda.time.ReadablePeriod readablePeriod69 = null;
        long long72 = chronology61.add(readablePeriod69, 3628800015L, 45180002);
        org.joda.time.DateTimeZone dateTimeZone73 = chronology61.getZone();
        org.joda.time.MutableDateTime mutableDateTime74 = mutableDateTime1.toMutableDateTime(chronology61);
        org.joda.time.DateTimeField dateTimeField75 = chronology61.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 3628800015L + "'", long23 == 3628800015L);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 2 + "'", int26 == 2);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 19 + "'", int46 == 19);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str65, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 3628800015L + "'", long72 == 3628800015L);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(mutableDateTime74);
        org.junit.Assert.assertNotNull(dateTimeField75);
    }

    @Test
    public void test15023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15023");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = durationFieldType0.getField(chronology8);
        org.joda.time.DateTimeField dateTimeField10 = chronology8.clockhourOfDay();
        boolean boolean11 = dateTimeField10.isLenient();
        long long13 = dateTimeField10.roundFloor((long) 1924);
        java.lang.String str15 = dateTimeField10.getAsText(57L);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = dateTimeField10.getType();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-3L) + "'", long13 == (-3L));
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "24" + "'", str15, "24");
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
    }

    @Test
    public void test15024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15024");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime5.plusSeconds(18);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.yearOfCentury();
        org.joda.time.LocalDateTime.Property property10 = localDateTime8.yearOfCentury();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime15 = localDateTime8.withTime(6, 0, (-3600000), 2640271);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -3600000 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test15025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15025");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime4 = property3.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField5 = property3.getField();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundCeilingCopy();
        org.joda.time.DurationField durationField7 = property3.getLeapDurationField();
        boolean boolean8 = durationField7.isSupported();
        int int10 = durationField7.getValue(218L);
        boolean boolean11 = durationField7.isSupported();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(dateTimeField5);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test15026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15026");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear(2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (-1), chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTime dateTime36 = localDateTime32.toDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfDay();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter27.withChronology(chronology37);
        org.joda.time.Chronology chronology41 = dateTimeFormatter40.getChronology();
        java.lang.Appendable appendable42 = null;
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime();
        java.lang.Object obj44 = mutableDateTime43.clone();
        mutableDateTime43.addMinutes(2922750);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter40.printTo(appendable42, (org.joda.time.ReadableInstant) mutableDateTime43);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(obj44);
// flaky:         org.junit.Assert.assertEquals(obj44.toString(), "2022-02-22T07:33:41.041+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj44), "2022-02-22T07:33:41.041+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj44), "2022-02-22T07:33:41.041+00:00:00.003");
    }

    @Test
    public void test15027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15027");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        int int9 = property3.getMaximumShortTextLength(locale8);
        java.lang.String str10 = property3.toString();
        org.joda.time.LocalDateTime localDateTime12 = property3.setCopy(19);
        org.joda.time.LocalDateTime localDateTime13 = property3.withMaximumValue();
        int int14 = localDateTime13.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withSecondOfMinute(16);
        int int18 = localDateTime13.getDayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField20 = localDateTime13.getField(326699);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 326699");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[dayOfYear]" + "'", str10, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 31 + "'", int18 == 31);
    }

    @Test
    public void test15028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15028");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) (byte) 0);
        java.util.Date date5 = dateTime4.toDate();
        org.joda.time.LocalDate localDate6 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate localDate7 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate localDate8 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate localDate9 = org.joda.time.LocalDate.fromDateFields(date5);
        org.joda.time.LocalDate localDate10 = org.joda.time.LocalDate.fromDateFields(date5);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(date5);
// flaky:         org.junit.Assert.assertEquals(date5.toString(), "Tue Feb 22 07:33:41 GMT+00:00 2022");
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test15029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15029");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        boolean boolean18 = dateTimeZone13.isLocalDateTimeGap(localDateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        boolean boolean23 = dateTimeZone13.isLocalDateTimeGap(localDateTime21);
        long long25 = dateTimeZone13.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear(2022);
        org.joda.time.Chronology chronology29 = dateTimeFormatter26.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime30 = org.joda.time.MutableDateTime.parse("ISOChronology[+00:00:00.100]", dateTimeFormatter26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNull(chronology29);
    }

    @Test
    public void test15030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15030");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTime dateTime5 = dateTime2.withDurationAdded((long) (byte) 0, 292278993);
        org.joda.time.DateTime.Property property6 = dateTime5.minuteOfDay();
        org.joda.time.DateTime dateTime8 = property6.addWrapFieldToCopy(2);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime12 = org.joda.time.MutableDateTime.now(dateTimeZone11);
        java.util.GregorianCalendar gregorianCalendar13 = mutableDateTime12.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime15 = org.joda.time.MutableDateTime.now(dateTimeZone14);
        java.util.GregorianCalendar gregorianCalendar16 = mutableDateTime15.toGregorianCalendar();
        boolean boolean17 = mutableDateTime12.isAfter((org.joda.time.ReadableInstant) mutableDateTime15);
        org.joda.time.Chronology chronology18 = mutableDateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.yearOfCentury();
        java.util.Locale locale21 = new java.util.Locale("22:42:00.000");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket23 = new org.joda.time.format.DateTimeParserBucket(3000L, chronology18, locale21, (java.lang.Integer) 0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime24 = property6.setCopy("1969-12-31T22:59:59.940", locale21);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"1969-12-31T22:59:59.940\" for minuteOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(gregorianCalendar13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(gregorianCalendar16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertEquals(locale21.toString(), "22:42:00.000");
    }

    @Test
    public void test15031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15031");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        int int7 = property3.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime8 = property3.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = property3.withMaximumValue();
        int int10 = localDateTime9.size();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 366 + "'", int7 == 366);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
    }

    @Test
    public void test15032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15032");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DurationField durationField5 = property4.getLeapDurationField();
        org.joda.time.Interval interval6 = property4.toInterval();
        long long7 = property4.remainder();
        java.util.Locale locale9 = new java.util.Locale("hi!");
        int int10 = property4.getMaximumShortTextLength(locale9);
        java.lang.String str12 = locale9.getUnicodeLocaleType("AD");
        java.util.Locale.setDefault(category0, locale9);
        java.util.Locale locale14 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.Character> charSet15 = locale14.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = locale14.getUnicodeLocaleType("DateTimeField[yearOfEra]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: DateTimeField[yearOfEra]");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNull(durationField5);
        org.junit.Assert.assertNotNull(interval6);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 2L + "'", long7 == 2L);
        org.junit.Assert.assertEquals(locale9.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!");
        org.junit.Assert.assertNotNull(charSet15);
    }

    @Test
    public void test15033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15033");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        int int10 = localDate9.getDayOfMonth();
        org.joda.time.LocalDate.Property property11 = localDate9.weekyear();
        org.joda.time.LocalDate.Property property12 = localDate9.dayOfWeek();
        org.joda.time.LocalDate.Property property13 = localDate9.dayOfYear();
        org.joda.time.LocalDate localDate15 = localDate9.minusYears(2023);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test15034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15034");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.withMillis((-1L));
        org.joda.time.DateTime.Property property18 = dateTime17.year();
        int int19 = dateTime17.getSecondOfMinute();
        int int20 = dateTime17.getDayOfWeek();
        org.joda.time.DateTime.Property property21 = dateTime17.weekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 4 + "'", int20 == 4);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test15035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15035");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        java.lang.String str7 = localTime6.toString();
        org.joda.time.LocalTime localTime9 = localTime6.minusMillis(0);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy((int) '4');
        int int13 = localTime12.getMillisOfSecond();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean15 = localTime12.isEqual((org.joda.time.ReadablePartial) localTime14);
        org.joda.time.LocalTime localTime17 = localTime12.minusMillis(18);
        org.joda.time.Chronology chronology18 = localTime17.getChronology();
        org.joda.time.DurationField durationField19 = chronology18.millis();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.003" + "'", str7, "23:00:00.003");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(durationField19);
    }

    @Test
    public void test15036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15036");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        mutableDateTime0.add(durationFieldType3, 100);
        mutableDateTime0.addYears(10);
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime0.toMutableDateTimeISO();
        int int9 = mutableDateTime0.getDayOfYear();
        mutableDateTime0.addHours((-1));
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime0.dayOfWeek();
        org.junit.Assert.assertNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 174 + "'", int9 == 174);
        org.junit.Assert.assertNotNull(property12);
    }

    @Test
    public void test15037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15037");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        int int13 = dateTime12.getDayOfMonth();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.lang.String str19 = dateTime12.toString("365", locale17);
        org.joda.time.DateTime dateTime21 = dateTime12.plusMonths(1969);
        org.joda.time.DateTime.Property property22 = dateTime12.yearOfCentury();
        org.joda.time.DateTime dateTime24 = dateTime12.plusSeconds((-413));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "365" + "'", str19, "365");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test15038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15038");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.addWrapField((-1));
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        java.util.GregorianCalendar gregorianCalendar7 = mutableDateTime6.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        java.util.GregorianCalendar gregorianCalendar10 = mutableDateTime9.toGregorianCalendar();
        boolean boolean11 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) mutableDateTime9);
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        boolean boolean18 = dateTimeZone13.isLocalDateTimeGap(localDateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        boolean boolean23 = dateTimeZone13.isLocalDateTimeGap(localDateTime21);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        long long29 = dateTimeZone24.convertLocalToUTC(10L, false, (long) 3);
        java.lang.String str31 = dateTimeZone24.getName((long) 2022);
        long long33 = dateTimeZone13.getMillisKeepLocal(dateTimeZone24, 153713980800000L);
        long long36 = dateTimeZone24.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (-1), chronology41);
        boolean boolean43 = dateTimeZone38.isLocalDateTimeGap(localDateTime42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.weekyear();
        boolean boolean48 = dateTimeZone38.isLocalDateTimeGap(localDateTime46);
        long long50 = dateTimeZone38.nextTransition((long) 2022);
        long long52 = dateTimeZone38.convertUTCToLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime53 = org.joda.time.DateTime.now(dateTimeZone38);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (-1), chronology56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.dayOfYear();
        org.joda.time.DurationField durationField59 = property58.getLeapDurationField();
        org.joda.time.Interval interval60 = property58.toInterval();
        long long61 = property58.remainder();
        java.util.Locale locale63 = new java.util.Locale("hi!");
        int int64 = property58.getMaximumShortTextLength(locale63);
        java.lang.String str66 = locale63.getUnicodeLocaleType("AD");
        java.util.Locale locale68 = new java.util.Locale("365");
        java.lang.String str69 = locale68.getISO3Language();
        java.lang.String str70 = locale63.getDisplayScript(locale68);
        java.lang.String str71 = locale63.getDisplayScript();
        java.lang.String str72 = dateTimeZone38.getName((long) 53, locale63);
        java.lang.String str73 = dateTimeZone24.getName(2332799999L, locale63);
        java.lang.String str74 = locale63.toLanguageTag();
        java.util.Calendar calendar75 = mutableDateTime6.toCalendar(locale63);
        java.lang.Object obj76 = locale63.clone();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long29 + "' != '" + 7L + "'", long29 == 7L);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+00:00:00.003" + "'", str31, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 153713980800000L + "'", long33 == 153713980800000L);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + (-3L) + "'", long36 == (-3L));
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 2022L + "'", long50 == 2022L);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 4L + "'", long52 == 4L);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNull(durationField59);
        org.junit.Assert.assertNotNull(interval60);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 2L + "'", long61 == 2L);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals(locale68.toString(), "365");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "365" + "'", str69, "365");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.003" + "'", str72, "+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "+00:00:00.003" + "'", str73, "+00:00:00.003");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "und" + "'", str74, "und");
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=1645515221225,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=41,MILLISECOND=228,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertEquals(obj76.toString(), "hi!");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj76), "hi!");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj76), "hi!");
    }

    @Test
    public void test15039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15039");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendHourOfDay((int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder3.appendMinuteOfDay(1970);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendWeekOfWeekyear(218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder11.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder12.appendYear(22, 87647);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder15.appendFractionOfHour(209, 34);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap19 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder15.appendTimeZoneShortName(strMap19);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder15.appendMonthOfYear((int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendDayOfWeek(7);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder22.appendFractionOfSecond(412, 27214);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
    }

    @Test
    public void test15040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15040");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property16 = dateTime9.era();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime19 = dateTime17.plusSeconds(99);
        org.joda.time.DateTime dateTime21 = dateTime19.withMillisOfSecond(65);
        org.joda.time.DateTime.Property property22 = dateTime21.dayOfMonth();
        int int23 = property22.getLeapAmount();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
    }

    @Test
    public void test15041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15041");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        long long3 = dateTimeZone1.previousTransition((long) 1);
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone1);
        int int5 = localDateTime4.getWeekOfWeekyear();
        int int6 = localDateTime4.getWeekyear();
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.minusMillis(34);
        int int9 = localDateTime8.getMillisOfDay();
        org.joda.time.Chronology chronology10 = localDateTime8.getChronology();
        org.joda.time.LocalDateTime.Property property11 = localDateTime8.millisOfDay();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime8.plusMillis(46);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1970 + "'", int6 == 1970);
        org.junit.Assert.assertNotNull(localDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 69 + "'", int9 == 69);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test15042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15042");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfYear();
        org.joda.time.Chronology chronology12 = chronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        boolean boolean18 = dateTimeZone13.isLocalDateTimeGap(localDateTime17);
        long long20 = chronology12.set((org.joda.time.ReadablePartial) localDateTime17, (long) '#');
        org.joda.time.DateTimeField dateTimeField21 = chronology12.secondOfMinute();
        org.joda.time.DurationField durationField22 = chronology12.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology12);
        org.joda.time.Chronology chronology24 = dateTimeFormatter23.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = dateTimeFormatter23.print(0L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(chronology24);
    }

    @Test
    public void test15043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15043");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology11.days();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1970, chronology11);
        org.joda.time.DateTimeField dateTimeField17 = chronology11.dayOfYear();
        int int19 = dateTimeField17.get((long) 481);
        long long22 = dateTimeField17.add(1645487478201L, 26899520);
        // The following exception was thrown during execution in test generation
        try {
            long long25 = dateTimeField17.add((long) 78, (-124489785600000L));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: -124489785600000 * 86400000");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2325764015478201L + "'", long22 == 2325764015478201L);
    }

    @Test
    public void test15044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15044");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        int int13 = dateTime12.getDayOfMonth();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.lang.String str19 = dateTime12.toString("365", locale17);
        org.joda.time.DateTime dateTime21 = dateTime12.plusMonths(1969);
        org.joda.time.DateTime.Property property22 = dateTime12.yearOfCentury();
        org.joda.time.DateTime dateTime24 = dateTime12.minusMinutes(4);
        org.joda.time.DateTime dateTime26 = dateTime24.plusMonths(100);
        org.joda.time.DateTime dateTime27 = dateTime24.toDateTimeISO();
        org.joda.time.DateTime.Property property28 = dateTime27.centuryOfEra();
        org.joda.time.DateTime dateTime29 = property28.roundFloorCopy();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime29.minus(readableDuration30);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime33 = dateTime31.withHourOfDay((-86394));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -86394 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "365" + "'", str19, "365");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
    }

    @Test
    public void test15045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15045");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.DateTime dateTime11 = new org.joda.time.DateTime((java.lang.Object) dateTime9);
        org.joda.time.DateTime dateTime13 = dateTime11.plus(0L);
        org.joda.time.DateTime.Property property14 = dateTime13.centuryOfEra();
        org.joda.time.DateTime dateTime16 = dateTime13.withMillis(2426400000L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test15046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15046");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setWeekyear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.minuteOfDay();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.plus((long) 100);
        org.joda.time.DateTime dateTime16 = dateTime14.withYear(10);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter19.withChronology(chronology27);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (-1), chronology32);
        boolean boolean34 = dateTimeZone29.isLocalDateTimeGap(localDateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (-1), chronology36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.weekyear();
        boolean boolean39 = dateTimeZone29.isLocalDateTimeGap(localDateTime37);
        long long41 = dateTimeZone29.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter19.withZone(dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter42.withPivotYear(2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter44.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (-1), chronology48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTime dateTime53 = localDateTime49.toDateTime(dateTimeZone51);
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.secondOfDay();
        org.joda.time.DurationField durationField56 = chronology54.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter44.withChronology(chronology54);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTimeFormatter57.getZone();
        org.joda.time.DateTime dateTime59 = dateTime14.toDateTime(dateTimeZone58);
        boolean boolean61 = dateTime59.isEqual(2022L);
        org.joda.time.DateTime dateTime63 = dateTime59.withCenturyOfEra((int) '#');
        int int64 = dateTime59.getYearOfCentury();
        org.joda.time.DateTime dateTime66 = dateTime59.withMillisOfDay(4);
        org.joda.time.ReadableDuration readableDuration67 = null;
        org.joda.time.DateTime dateTime69 = dateTime66.withDurationAdded(readableDuration67, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType70 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime72 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime72.setTime(100L);
        org.joda.time.MutableDateTime.Property property75 = mutableDateTime72.dayOfMonth();
        int int76 = mutableDateTime72.getSecondOfDay();
        org.joda.time.Chronology chronology79 = null;
        org.joda.time.LocalDateTime localDateTime80 = new org.joda.time.LocalDateTime((long) (-1), chronology79);
        org.joda.time.LocalDateTime.Property property81 = localDateTime80.minuteOfHour();
        int int82 = localDateTime80.size();
        org.joda.time.Chronology chronology83 = localDateTime80.getChronology();
        org.joda.time.DateTime dateTime84 = new org.joda.time.DateTime((long) (byte) 100, chronology83);
        mutableDateTime72.setChronology(chronology83);
        org.joda.time.DateTimeField dateTimeField86 = chronology83.era();
        org.joda.time.DateTimeField dateTimeField87 = dateTimeFieldType70.getField(chronology83);
        boolean boolean88 = dateTime66.isSupported(dateTimeFieldType70);
        java.lang.String str89 = dateTimeFieldType70.getName();
        int int90 = mutableDateTime1.get(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str12, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long41 + "' != '" + 3L + "'", long41 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 70 + "'", int64 == 70);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTimeFieldType70);
        org.junit.Assert.assertNotNull(property75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(property81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 4 + "'", int82 == 4);
        org.junit.Assert.assertNotNull(chronology83);
        org.junit.Assert.assertNotNull(dateTimeField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "yearOfEra" + "'", str89, "yearOfEra");
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + 100 + "'", int90 == 100);
    }

    @Test
    public void test15047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15047");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        boolean boolean15 = dateTimeZone10.isLocalDateTimeGap(localDateTime14);
        long long17 = chronology9.set((org.joda.time.ReadablePartial) localDateTime14, (long) '#');
        org.joda.time.DateTimeField dateTimeField18 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.minuteOfHour();
        org.joda.time.DurationField durationField20 = chronology9.minutes();
        org.joda.time.DurationField durationField21 = chronology9.eras();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test15048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15048");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(31);
        int int3 = localDate0.getDayOfYear();
        org.joda.time.LocalDate localDate5 = localDate0.plusWeeks(19);
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.LocalDate.Property property7 = localDate0.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate9 = property7.setCopy("\ufffd\ufffd");
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"??\" for dayOfYear is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
    }

    @Test
    public void test15049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15049");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfYear(365);
        org.joda.time.LocalDate localDate13 = localDate11.withWeekOfWeekyear(46);
        java.util.Date date14 = localDate13.toDate();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Thu Nov 12 00:00:00 GMT+00:00 1970");
    }

    @Test
    public void test15050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15050");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusHours((-1));
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime12, locale16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DurationField durationField22 = property21.getLeapDurationField();
        org.joda.time.Interval interval23 = property21.toInterval();
        long long24 = property21.remainder();
        java.util.Locale locale26 = new java.util.Locale("hi!");
        int int27 = property21.getMaximumShortTextLength(locale26);
        java.lang.String str29 = locale26.getUnicodeLocaleType("AD");
        java.lang.String str30 = locale16.getDisplayVariant(locale26);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (-1), chronology36);
        boolean boolean38 = dateTimeZone33.isLocalDateTimeGap(localDateTime37);
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (-1), chronology40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.weekyear();
        boolean boolean43 = dateTimeZone33.isLocalDateTimeGap(localDateTime41);
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        long long49 = dateTimeZone44.convertLocalToUTC(10L, false, (long) 3);
        java.lang.String str51 = dateTimeZone44.getName((long) 2022);
        long long53 = dateTimeZone33.getMillisKeepLocal(dateTimeZone44, 153713980800000L);
        org.joda.time.DateTime dateTime54 = new org.joda.time.DateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime55 = org.joda.time.DateTime.now(dateTimeZone33);
        java.lang.String str56 = dateTime55.toString();
        java.util.Locale locale57 = java.util.Locale.US;
        boolean boolean58 = dateTime55.equals((java.lang.Object) locale57);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket61 = new org.joda.time.format.DateTimeParserBucket((long) (-1), chronology32, locale57, (java.lang.Integer) 241594, 86340003);
        java.lang.String str62 = locale16.getDisplayVariant(locale57);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNull(durationField22);
        org.junit.Assert.assertNotNull(interval23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 7L + "'", long49 == 7L);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "+00:00:00.003" + "'", str51, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 153713980800000L + "'", long53 == 153713980800000L);
        org.junit.Assert.assertNotNull(dateTime55);
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "2022-02-22T07:33:41.455+00:00:00.003" + "'", str56, "2022-02-22T07:33:41.455+00:00:00.003");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_US");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
    }

    @Test
    public void test15051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15051");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.plus((long) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
        java.util.Locale locale13 = java.util.Locale.GERMANY;
        java.util.Calendar calendar14 = dateTime11.toCalendar(locale13);
        org.joda.time.DateTime.Property property15 = dateTime11.yearOfCentury();
        org.joda.time.DateTime dateTime16 = property15.getDateTime();
        org.joda.time.DateTime dateTime17 = dateTime16.withLaterOffsetAtOverlap();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.DateTime dateTime19 = dateTime17.plus(readablePeriod18);
        boolean boolean20 = dateTime1.isEqual((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.ReadableDuration readableDuration21 = null;
        org.joda.time.DateTime dateTime22 = dateTime1.minus(readableDuration21);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = dateTime1.withTime(240, 26890, (-241593), 1950);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 240 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str9, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar14);
// flaky:         org.junit.Assert.assertEquals(calendar14.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(dateTime22);
    }

    @Test
    public void test15052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15052");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        org.joda.time.DateTime.Property property13 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime14 = property13.getDateTime();
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        boolean boolean16 = dateTime14.isBeforeNow();
        org.joda.time.DateTime.Property property17 = dateTime14.dayOfYear();
        org.joda.time.DateTimeField dateTimeField18 = property17.getField();
        java.lang.String str19 = dateTimeField18.getName();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "dayOfYear" + "'", str19, "dayOfYear");
    }

    @Test
    public void test15053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15053");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.plus(readableDuration22);
        org.joda.time.DateTime dateTime25 = dateTime20.minusWeeks(10);
        boolean boolean27 = dateTime20.isBefore((long) (-1));
        int int28 = dateTime20.getYearOfEra();
        org.joda.time.DateTime dateTime29 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime30 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.Chronology chronology31 = localDateTime13.getChronology();
        org.joda.time.DurationField durationField32 = chronology31.weeks();
        org.joda.time.DateTimeZone dateTimeZone33 = chronology31.getZone();
        org.joda.time.DateTimeField dateTimeField34 = chronology31.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology31);
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str21, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(chronology31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test15054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15054");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime9.minusYears(86399999);
        org.joda.time.DateTime dateTime14 = dateTime9.minusMonths(2922750);
        org.joda.time.ReadablePartial readablePartial15 = null;
        org.joda.time.DateTime dateTime16 = dateTime9.withFields(readablePartial15);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DateTimeField dateTimeField27 = chronology26.secondOfDay();
        org.joda.time.DurationField durationField28 = chronology26.minutes();
        org.joda.time.DurationField durationField29 = chronology26.minutes();
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 292278993, chronology26);
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) 'a', chronology26);
        org.joda.time.DateTimeField dateTimeField32 = chronology26.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology26);
        org.joda.time.MutableDateTime.Property property34 = mutableDateTime33.dayOfYear();
        org.joda.time.DurationField durationField35 = property34.getRangeDurationField();
        org.joda.time.MutableDateTime mutableDateTime36 = property34.roundHalfCeiling();
        org.joda.time.DateTimeField dateTimeField37 = mutableDateTime36.getRoundingField();
        org.joda.time.MutableDateTime.Property property38 = mutableDateTime36.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime40 = property38.addWrapField(29);
        boolean boolean41 = dateTime9.isBefore((org.joda.time.ReadableInstant) mutableDateTime40);
        boolean boolean42 = mutableDateTime40.isBeforeNow();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNull(dateTimeField37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test15055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15055");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.weekOfWeekyear();
        org.joda.time.DurationField durationField16 = chronology11.eras();
        org.joda.time.DateTimeField dateTimeField17 = chronology11.clockhourOfDay();
        org.joda.time.DateTime dateTime18 = new org.joda.time.DateTime((-8757071L), chronology11);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
    }

    @Test
    public void test15056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15056");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneId();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder2.appendShortText(dateTimeFieldType4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendWeekOfWeekyear(41);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder8.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatterBuilder13.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendMillisOfSecond(292278993);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendTwoDigitWeekyear(1969);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder19.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime25.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration28 = null;
        mutableDateTime25.add(readableDuration28, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int32 = mutableDateTime25.get(dateTimeFieldType31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder19.appendSignedDecimal(dateTimeFieldType31, 92, 9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder36.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder39.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter42 = dateTimeFormatterBuilder41.toPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser43 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter42, dateTimeParser43);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder45.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder45.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter50 = dateTimeFormatterBuilder49.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder49.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser54 = dateTimeFormatterBuilder49.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder19.append(dateTimePrinter42, dateTimeParser54);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = dateTimeFormatterBuilder56.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder56.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter61 = dateTimeFormatterBuilder60.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = dateTimeFormatterBuilder60.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser65 = dateTimeFormatterBuilder60.toParser();
        int int66 = dateTimeParser65.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder16.append(dateTimePrinter42, dateTimeParser65);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder5.append(dateTimePrinter42);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder69 = dateTimeFormatterBuilder68.appendTimeZoneId();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder72 = dateTimeFormatterBuilder68.appendTwoDigitWeekyear(970, false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertNotNull(dateTimePrinter42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertNotNull(dateTimePrinter50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertNotNull(dateTimeParser54);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder58);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertNotNull(dateTimePrinter61);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder64);
        org.junit.Assert.assertNotNull(dateTimeParser65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 23 + "'", int66 == 23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder69);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder72);
    }

    @Test
    public void test15057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15057");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime7 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMillis((int) (short) 0);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime7.withWeekyear(292278993);
        int int12 = localDateTime7.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property13 = localDateTime7.dayOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 53 + "'", int12 == 53);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test15058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15058");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        int int9 = property3.getMaximumShortTextLength(locale8);
        java.lang.String str10 = property3.toString();
        org.joda.time.LocalDateTime localDateTime12 = property3.setCopy(19);
        org.joda.time.LocalDateTime localDateTime13 = property3.withMaximumValue();
        int int14 = localDateTime13.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.withSecondOfMinute(16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.plusHours(40);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.plusSeconds(2922789);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.joda.time.DurationField durationField26 = property25.getLeapDurationField();
        org.joda.time.Interval interval27 = property25.toInterval();
        long long28 = property25.remainder();
        java.lang.String str29 = property25.toString();
        org.joda.time.LocalDateTime localDateTime31 = property25.setCopy((int) (short) 1);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.year();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTime dateTime39 = localDateTime35.toDateTime(dateTimeZone37);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.plus(readableDuration41);
        org.joda.time.DateTime dateTime44 = dateTime39.minusWeeks(10);
        boolean boolean46 = dateTime39.isBefore((long) (-1));
        int int47 = dateTime39.getYearOfEra();
        org.joda.time.DateTime dateTime49 = dateTime39.withYear((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType51 = dateTimeFieldType50.getRangeDurationType();
        org.joda.time.DateTime.Property property52 = dateTime49.property(dateTimeFieldType50);
        int int53 = localDateTime31.get(dateTimeFieldType50);
        org.joda.time.DateTimeFieldType dateTimeFieldType54 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType54.getDurationType();
        org.joda.time.LocalDateTime.Property property56 = localDateTime31.property(dateTimeFieldType54);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) (-1), chronology61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone65 = dateTimeZone64.toTimeZone();
        org.joda.time.DateTime dateTime66 = localDateTime62.toDateTime(dateTimeZone64);
        org.joda.time.Chronology chronology67 = dateTime66.getChronology();
        org.joda.time.DateTimeField dateTimeField68 = chronology67.secondOfDay();
        org.joda.time.DurationField durationField69 = chronology67.minutes();
        org.joda.time.DurationField durationField70 = chronology67.minutes();
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime((long) 292278993, chronology67);
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) 'a', chronology67);
        org.joda.time.DateTimeField dateTimeField73 = chronology67.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime74 = new org.joda.time.LocalDateTime((long) 20, chronology67);
        org.joda.time.DateTimeField dateTimeField75 = chronology67.dayOfWeek();
        boolean boolean76 = dateTimeFieldType54.isSupported(chronology67);
        boolean boolean77 = localDateTime19.isSupported(dateTimeFieldType54);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime19.withYearOfCentury(8);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[dayOfYear]" + "'", str10, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNull(durationField26);
        org.junit.Assert.assertNotNull(interval27);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 2L + "'", long28 == 2L);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Property[dayOfYear]" + "'", str29, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str40, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1970 + "'", int47 == 1970);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(durationFieldType51);
        org.junit.Assert.assertNotNull(property52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType54);
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(chronology67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(durationField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(localDateTime79);
    }

    @Test
    public void test15059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15059");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime9 = property5.addCopy((int) (byte) -1);
        org.joda.time.LocalTime.Property property10 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime12 = property10.addCopy((-292275054));
        org.joda.time.LocalTime.Property property13 = localTime12.millisOfSecond();
        org.joda.time.LocalTime localTime15 = property13.addCopy(1645514718201L);
        org.joda.time.LocalTime localTime16 = property13.roundFloorCopy();
        org.joda.time.LocalTime.Property property17 = localTime16.minuteOfHour();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test15060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15060");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property7.addToCopy(0);
        org.joda.time.LocalDate localDate11 = property7.roundHalfCeilingCopy();
        int int12 = localDate11.getYearOfCentury();
        org.joda.time.LocalDate localDate14 = localDate11.minusDays((-5600));
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate11.withDayOfWeek(15);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 15 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test15061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15061");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        java.lang.String str7 = localTime6.toString();
        org.joda.time.LocalTime localTime9 = localTime6.minusMillis(0);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = property10.addCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime14 = property10.setCopy((int) (short) 1);
        org.joda.time.LocalTime localTime15 = property10.withMinimumValue();
        org.joda.time.LocalTime localTime16 = property10.getLocalTime();
        org.joda.time.LocalTime localTime17 = property10.withMinimumValue();
        org.joda.time.LocalTime localTime19 = localTime17.plusSeconds(29);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.003" + "'", str7, "23:00:00.003");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test15062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15062");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(chronology7);
        org.joda.time.DateTimeField dateTimeField10 = chronology7.millisOfSecond();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatterBuilder16.toPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.plus((long) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.minus(readablePeriod32);
        org.joda.time.DateTimeZone dateTimeZone34 = dateTime33.getZone();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter19.withZone(dateTimeZone34);
        org.joda.time.tz.NameProvider nameProvider37 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale39 = new java.util.Locale("hi!");
        java.lang.String str40 = locale39.getScript();
        boolean boolean41 = locale39.hasExtensions();
        java.lang.String str44 = nameProvider37.getShortName(locale39, "minuteOfHour", "23:00:00.000");
        java.lang.String str45 = dateTimeZone34.getShortName(2022L, locale39);
        org.joda.time.Chronology chronology46 = chronology7.withZone(dateTimeZone34);
        org.joda.time.DateTime dateTime47 = new org.joda.time.DateTime(chronology46);
        java.lang.String str48 = chronology46.toString();
        org.joda.time.DateTime dateTime49 = new org.joda.time.DateTime(chronology46);
        int int50 = dateTime49.getDayOfMonth();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimePrinter17);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str27, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(nameProvider37);
        org.junit.Assert.assertEquals(locale39.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNull(str44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "+00:00:00.003" + "'", str45, "+00:00:00.003");
        org.junit.Assert.assertNotNull(chronology46);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str48, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 22 + "'", int50 == 22);
    }

    @Test
    public void test15063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15063");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.era();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (-1), chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.DurationField durationField15 = property14.getLeapDurationField();
        org.joda.time.Interval interval16 = property14.toInterval();
        long long17 = property14.remainder();
        java.util.Locale locale19 = new java.util.Locale("hi!");
        int int20 = property14.getMaximumShortTextLength(locale19);
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime22.setTime(100L);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime22.dayOfMonth();
        mutableDateTime22.addMillis((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime22.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.addWrapField(218);
        long long31 = property14.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime30);
        mutableDateTime10.setMillis((org.joda.time.ReadableInstant) mutableDateTime30);
        org.joda.time.Chronology chronology33 = mutableDateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.dayOfYear();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNull(durationField15);
        org.junit.Assert.assertNotNull(interval16);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertEquals(locale19.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 3 + "'", int20 == 3);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-6574L) + "'", long31 == (-6574L));
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
    }

    @Test
    public void test15064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15064");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear((java.lang.Integer) 292278993);
        org.joda.time.Chronology chronology14 = dateTimeFormatter11.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter11.withPivotYear(35);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatter11.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter11.withPivotYear(97);
        org.joda.time.Chronology chronology20 = dateTimeFormatter19.getChronology();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(dateTimePrinter17);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test15065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15065");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes(1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfDay();
        org.joda.time.LocalTime.Property property5 = localTime3.secondOfMinute();
        java.lang.String str6 = localTime3.toString();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "23:59:00.003" + "'", str6, "23:59:00.003");
    }

    @Test
    public void test15066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15066");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfWeek();
        java.lang.String str7 = localDate0.toString("23:00:00.000");
        org.joda.time.LocalDate localDate9 = localDate0.minusDays(1969);
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths(86399999);
        org.joda.time.LocalDate localDate13 = localDate9.plusMonths(8);
        org.joda.time.DateTime dateTime14 = localDate13.toDateTimeAtStartOfDay();
        int int15 = localDate13.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.000" + "'", str7, "23:00:00.000");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 22 + "'", int15 == 22);
    }

    @Test
    public void test15067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15067");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setWeekyear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.minuteOfDay();
        int int5 = mutableDateTime1.getWeekOfWeekyear();
        java.lang.String str6 = mutableDateTime1.toString();
        mutableDateTime1.setDayOfMonth(5);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.weekyear();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.set(69140217);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 1, chronology13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded((long) (byte) 0, 292278993);
        org.joda.time.DateMidnight dateMidnight18 = dateTime17.toDateMidnight();
        org.joda.time.format.DateTimePrinter dateTimePrinter20 = null;
        org.joda.time.format.DateTimeParser dateTimeParser21 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter22 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter20, dateTimeParser21);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDateTime25.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter22.withChronology(chronology30);
        org.joda.time.DateTimeField dateTimeField32 = chronology30.monthOfYear();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        mutableDateTime34.add((long) 100);
        org.joda.time.MutableDateTime.Property property37 = mutableDateTime34.dayOfYear();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (-1), chronology39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        org.joda.time.DateTime dateTime44 = localDateTime40.toDateTime(dateTimeZone42);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.DateTime dateTime47 = dateTime44.plus((long) 100);
        org.joda.time.DateTime.Property property48 = dateTime47.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime47.plus(readableDuration49);
        int int51 = dateTime50.getDayOfMonth();
        java.util.Locale locale53 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet54 = locale53.getUnicodeLocaleAttributes();
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.lang.String str56 = locale53.getDisplayVariant(locale55);
        java.lang.String str57 = dateTime50.toString("365", locale55);
        org.joda.time.DateTime dateTime59 = dateTime50.plusMonths(1969);
        mutableDateTime34.setMillis((org.joda.time.ReadableInstant) dateTime50);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) (-1), chronology64);
        boolean boolean66 = dateTimeZone61.isLocalDateTimeGap(localDateTime65);
        java.lang.String str68 = dateTimeZone61.getName((long) 4);
        mutableDateTime34.setZone(dateTimeZone61);
        java.util.Locale locale71 = java.util.Locale.getDefault();
        java.lang.String str72 = dateTimeZone61.getName((long) (-292275054), locale71);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket(1645514718201L, chronology30, locale71, (java.lang.Integer) 1, (int) (short) -1);
        org.joda.time.DateTimeZone dateTimeZone76 = dateTimeParserBucket75.getZone();
        org.joda.time.MutableDateTime mutableDateTime77 = dateTime17.toMutableDateTime(dateTimeZone76);
        long long78 = dateTime17.getMillis();
        boolean boolean79 = mutableDateTime11.isEqual((org.joda.time.ReadableInstant) dateTime17);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "0100-01-07T00:00:00.002+00:00:00.003" + "'", str6, "0100-01-07T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateMidnight18);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str45, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "365" + "'", str57, "365");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.003" + "'", str68, "+00:00:00.003");
        org.junit.Assert.assertNotNull(locale71);
// flaky:         org.junit.Assert.assertEquals(locale71.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "+00:00:00.003" + "'", str72, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertNotNull(mutableDateTime77);
        org.junit.Assert.assertTrue("'" + long78 + "' != '" + 1L + "'", long78 == 1L);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test15068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15068");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        int int8 = localDate2.getWeekyear();
        org.joda.time.LocalDate.Property property9 = localDate2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = localDate2.toDateTimeAtStartOfDay(dateTimeZone10);
        long long13 = dateTimeZone10.previousTransition(1645514718201L);
        org.joda.time.DateTime dateTime14 = org.joda.time.DateTime.now(dateTimeZone10);
        boolean boolean16 = dateTime14.isEqual(940397215917866L);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1645514718201L + "'", long13 == 1645514718201L);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test15069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15069");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) 4);
        int int2 = mutableDateTime1.getSecondOfDay();
        org.joda.time.MutableDateTime mutableDateTime3 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.secondOfDay();
        boolean boolean5 = mutableDateTime3.isEqualNow();
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime7.setTime(100L);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime7.dayOfMonth();
        int int11 = mutableDateTime7.getSecondOfDay();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (-1), chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.minuteOfHour();
        int int17 = localDateTime15.size();
        org.joda.time.Chronology chronology18 = localDateTime15.getChronology();
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (byte) 100, chronology18);
        mutableDateTime7.setChronology(chronology18);
        mutableDateTime7.setYear(21);
        boolean boolean23 = mutableDateTime3.isBefore((org.joda.time.ReadableInstant) mutableDateTime7);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime3.monthOfYear();
        org.joda.time.ReadableDuration readableDuration25 = null;
        mutableDateTime3.add(readableDuration25);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 4 + "'", int17 == 4);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test15070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15070");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        long long5 = dateTimeZone0.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone6 = dateTimeZone0.toTimeZone();
        int int8 = dateTimeZone0.getOffsetFromLocal((long) 292278993);
        org.joda.time.LocalTime localTime9 = org.joda.time.LocalTime.now(dateTimeZone0);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeField dateTimeField11 = localTime9.getField((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 35");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long5 + "' != '" + 7L + "'", long5 == 7L);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertNotNull(localTime9);
    }

    @Test
    public void test15071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15071");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime1.add(readablePeriod7, (int) '#');
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet11 = locale10.getUnicodeLocaleAttributes();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = localDateTime14.toDateTime(dateTimeZone16);
        java.lang.String str19 = dateTime18.toString();
        org.joda.time.DateTime dateTime21 = dateTime18.plus((long) 100);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfCentury();
        boolean boolean23 = strSet11.equals((java.lang.Object) dateTime21);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime21);
        mutableDateTime1.setMonthOfYear(8);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTime dateTime33 = localDateTime29.toDateTime(dateTimeZone31);
        java.lang.String str34 = dateTime33.toString();
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime33.plus(readableDuration35);
        org.joda.time.DateTimeZone dateTimeZone37 = dateTime36.getZone();
        java.lang.String str38 = dateTimeZone37.getID();
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime(dateTimeZone37);
        mutableDateTime1.setZone(dateTimeZone37);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (-1), chronology42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime47 = localDateTime43.toDateTime(dateTimeZone45);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.ReadableDuration readableDuration49 = null;
        org.joda.time.DateTime dateTime50 = dateTime47.plus(readableDuration49);
        org.joda.time.DateTime dateTime52 = dateTime47.minusWeeks(10);
        org.joda.time.DateTime.Property property53 = dateTime47.hourOfDay();
        org.joda.time.DateTime dateTime55 = property53.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime57 = property53.addToCopy((long) 86399999);
        java.util.Locale.Builder builder58 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder59 = builder58.clearExtensions();
        java.util.Locale locale60 = builder59.build();
        int int61 = property53.getMaximumTextLength(locale60);
        java.lang.String str62 = locale60.getDisplayCountry();
        java.util.Calendar calendar63 = mutableDateTime1.toCalendar(locale60);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str19, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str34, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "+00:00:00.003" + "'", str38, "+00:00:00.003");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str48, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 2 + "'", int61 == 2);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(calendar63);
// flaky:         org.junit.Assert.assertEquals(calendar63.toString(), "java.util.GregorianCalendar[time=18316800099,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1970,MONTH=7,WEEK_OF_YEAR=31,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=213,DAY_OF_WEEK=7,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
    }

    @Test
    public void test15072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15072");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.LocalDate localDate10 = property9.roundFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = new org.joda.time.LocalDate((java.lang.Object) property9);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test15073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15073");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekyearOfCentury();
        java.lang.String str11 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime(chronology7);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str11, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(dateTimeField12);
    }

    @Test
    public void test15074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15074");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime2.plusMonths(24);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minusWeeks(2089);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withWeekyear(3600);
        org.joda.time.LocalDateTime.Property property11 = localDateTime2.hourOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter14.withChronology(chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (-1), chronology27);
        boolean boolean29 = dateTimeZone24.isLocalDateTimeGap(localDateTime28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (-1), chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekyear();
        boolean boolean34 = dateTimeZone24.isLocalDateTimeGap(localDateTime32);
        long long36 = dateTimeZone24.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter14.withZone(dateTimeZone24);
        long long39 = dateTimeZone24.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime();
        mutableDateTime40.add((long) 100);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime40.dayOfYear();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = localDateTime46.toDateTime(dateTimeZone48);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.DateTime dateTime53 = dateTime50.plus((long) 100);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration55 = null;
        org.joda.time.DateTime dateTime56 = dateTime53.plus(readableDuration55);
        int int57 = dateTime56.getDayOfMonth();
        java.util.Locale locale59 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet60 = locale59.getUnicodeLocaleAttributes();
        java.util.Locale locale61 = java.util.Locale.GERMANY;
        java.lang.String str62 = locale59.getDisplayVariant(locale61);
        java.lang.String str63 = dateTime56.toString("365", locale61);
        org.joda.time.DateTime dateTime65 = dateTime56.plusMonths(1969);
        mutableDateTime40.setMillis((org.joda.time.ReadableInstant) dateTime56);
        int int67 = dateTimeZone24.getOffset((org.joda.time.ReadableInstant) mutableDateTime40);
        mutableDateTime40.setMillis(0L);
        long long70 = property11.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime40);
        org.joda.time.LocalDateTime localDateTime71 = property11.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime.Property property72 = localDateTime71.secondOfMinute();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3L + "'", long36 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str51, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 1 + "'", int57 == 1);
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "365" + "'", str63, "365");
        org.junit.Assert.assertNotNull(dateTime65);
// flaky:         org.junit.Assert.assertTrue("'" + int67 + "' != '" + 3 + "'", int67 == 3);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(property72);
    }

    @Test
    public void test15075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15075");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.clockhourOfHalfday();
        org.joda.time.DurationField durationField14 = dateTimeField13.getDurationField();
        long long17 = dateTimeField13.add(1645514718182L, 762261);
        boolean boolean18 = dateTimeField13.isSupported();
        java.util.Locale locale20 = new java.util.Locale("hi!");
        java.lang.String str21 = locale20.getScript();
        java.lang.String str22 = locale20.getDisplayLanguage();
        java.lang.String str23 = locale20.getDisplayCountry();
        java.lang.String str24 = locale20.getDisplayVariant();
        int int25 = dateTimeField13.getMaximumShortTextLength(locale20);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 4389654318182L + "'", long17 == 4389654318182L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertEquals(locale20.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "hi!" + "'", str22, "hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2 + "'", int25 == 2);
    }

    @Test
    public void test15076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15076");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime9.withWeekyear((int) 'x');
        org.joda.time.DateTime dateTime14 = dateTime9.minusMonths((int) (byte) -1);
        org.joda.time.DateMidnight dateMidnight15 = dateTime9.toDateMidnight();
        org.joda.time.DateTime dateTime17 = dateTime9.plusMillis(14);
        org.joda.time.DateTime dateTime19 = dateTime17.minus(1920000L);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        mutableDateTime21.add((long) 100);
        org.joda.time.Chronology chronology24 = null;
        mutableDateTime21.setChronology(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        long long28 = dateTimeZone26.previousTransition((long) 1);
        mutableDateTime21.setZone(dateTimeZone26);
        int int31 = dateTimeZone26.getOffsetFromLocal((long) (-292275054));
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(41L, dateTimeZone26);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime32.weekyear();
        int int34 = dateTime17.compareTo((org.joda.time.ReadableInstant) mutableDateTime32);
        org.joda.time.DateTime.Property property35 = dateTime17.millisOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateMidnight15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 3 + "'", int31 == 3);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(property35);
    }

    @Test
    public void test15077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15077");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withMillisOfDay(5);
        int int10 = localDateTime9.size();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withWeekOfWeekyear((int) '4');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime9.plusMinutes(25);
        org.joda.time.LocalDateTime.Property property15 = localDateTime9.monthOfYear();
        org.joda.time.LocalDateTime localDateTime16 = property15.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 4 + "'", int10 == 4);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDateTime16);
    }

    @Test
    public void test15078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15078");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withPivotYear((java.lang.Integer) 292278993);
        org.joda.time.Chronology chronology14 = dateTimeFormatter11.getChronolgy();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = dateTimeFormatter11.withPivotYear(35);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatter11.getPrinter();
        org.joda.time.format.DateTimePrinter dateTimePrinter18 = null;
        org.joda.time.format.DateTimeParser dateTimeParser19 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter18, dateTimeParser19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = localDateTime23.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter20.withChronology(chronology28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        boolean boolean35 = dateTimeZone30.isLocalDateTimeGap(localDateTime34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (-1), chronology37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.weekyear();
        boolean boolean40 = dateTimeZone30.isLocalDateTimeGap(localDateTime38);
        long long42 = dateTimeZone30.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter20.withZone(dateTimeZone30);
        long long45 = dateTimeZone30.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime();
        mutableDateTime46.add((long) 100);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime46.dayOfYear();
        org.joda.time.Chronology chronology51 = null;
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime((long) (-1), chronology51);
        org.joda.time.LocalDateTime.Property property53 = localDateTime52.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone54 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone55 = dateTimeZone54.toTimeZone();
        org.joda.time.DateTime dateTime56 = localDateTime52.toDateTime(dateTimeZone54);
        java.lang.String str57 = dateTime56.toString();
        org.joda.time.DateTime dateTime59 = dateTime56.plus((long) 100);
        org.joda.time.DateTime.Property property60 = dateTime59.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration61 = null;
        org.joda.time.DateTime dateTime62 = dateTime59.plus(readableDuration61);
        int int63 = dateTime62.getDayOfMonth();
        java.util.Locale locale65 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet66 = locale65.getUnicodeLocaleAttributes();
        java.util.Locale locale67 = java.util.Locale.GERMANY;
        java.lang.String str68 = locale65.getDisplayVariant(locale67);
        java.lang.String str69 = dateTime62.toString("365", locale67);
        org.joda.time.DateTime dateTime71 = dateTime62.plusMonths(1969);
        mutableDateTime46.setMillis((org.joda.time.ReadableInstant) dateTime62);
        int int73 = dateTimeZone30.getOffset((org.joda.time.ReadableInstant) mutableDateTime46);
        java.lang.String str74 = dateTimeZone30.getID();
        int int76 = dateTimeZone30.getStandardOffset((long) 616);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter77 = dateTimeFormatter11.withZone(dateTimeZone30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter78 = dateTimeFormatter11.withOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter80 = dateTimeFormatter78.withDefaultYear(791);
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime();
        mutableDateTime81.add((long) 100);
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime81.dayOfYear();
        int int85 = mutableDateTime81.getHourOfDay();
        // The following exception was thrown during execution in test generation
        try {
            int int88 = dateTimeFormatter80.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime81, "2022-02-22T07:27:07.063+00:00:00.003", 993);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter16);
        org.junit.Assert.assertNull(dateTimePrinter17);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 3L + "'", long42 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(property53);
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertNotNull(timeZone55);
// flaky:         org.junit.Assert.assertEquals(timeZone55.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime56);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str57, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "365" + "'", str69, "365");
        org.junit.Assert.assertNotNull(dateTime71);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 3 + "'", int73 == 3);
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "+00:00:00.003" + "'", str74, "+00:00:00.003");
// flaky:         org.junit.Assert.assertTrue("'" + int76 + "' != '" + 3 + "'", int76 == 3);
        org.junit.Assert.assertNotNull(dateTimeFormatter77);
        org.junit.Assert.assertNotNull(dateTimeFormatter78);
        org.junit.Assert.assertNotNull(dateTimeFormatter80);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + 7 + "'", int85 == 7);
    }

    @Test
    public void test15079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15079");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        org.joda.time.DateTime.Property property13 = dateTime9.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property13.getFieldType();
        org.joda.time.DateTime dateTime15 = property13.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime16 = property13.getDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis(2);
        boolean boolean19 = dateTime18.isEqualNow();
        boolean boolean20 = dateTime18.isBeforeNow();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (-1), chronology27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTime dateTime32 = localDateTime28.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter25.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime();
        mutableDateTime37.add((long) 100);
        org.joda.time.MutableDateTime.Property property40 = mutableDateTime37.dayOfYear();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (-1), chronology42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime47 = localDateTime43.toDateTime(dateTimeZone45);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.DateTime dateTime50 = dateTime47.plus((long) 100);
        org.joda.time.DateTime.Property property51 = dateTime50.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration52 = null;
        org.joda.time.DateTime dateTime53 = dateTime50.plus(readableDuration52);
        int int54 = dateTime53.getDayOfMonth();
        java.util.Locale locale56 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet57 = locale56.getUnicodeLocaleAttributes();
        java.util.Locale locale58 = java.util.Locale.GERMANY;
        java.lang.String str59 = locale56.getDisplayVariant(locale58);
        java.lang.String str60 = dateTime53.toString("365", locale58);
        org.joda.time.DateTime dateTime62 = dateTime53.plusMonths(1969);
        mutableDateTime37.setMillis((org.joda.time.ReadableInstant) dateTime53);
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone65 = dateTimeZone64.toTimeZone();
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (-1), chronology67);
        boolean boolean69 = dateTimeZone64.isLocalDateTimeGap(localDateTime68);
        java.lang.String str71 = dateTimeZone64.getName((long) 4);
        mutableDateTime37.setZone(dateTimeZone64);
        java.util.Locale locale74 = java.util.Locale.getDefault();
        java.lang.String str75 = dateTimeZone64.getName((long) (-292275054), locale74);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket78 = new org.joda.time.format.DateTimeParserBucket(1645514718201L, chronology33, locale74, (java.lang.Integer) 1, (int) (short) -1);
        org.joda.time.DateTimeField dateTimeField79 = chronology33.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime80 = org.joda.time.MutableDateTime.now(chronology33);
        org.joda.time.DateTime dateTime81 = new org.joda.time.DateTime((-291600000L), chronology33);
        org.joda.time.DurationField durationField82 = chronology33.weeks();
        org.joda.time.ReadablePeriod readablePeriod83 = null;
        long long86 = chronology33.add(readablePeriod83, (-61784008481802L), (-4861377));
        org.joda.time.DateTimeZone dateTimeZone87 = chronology33.getZone();
        org.joda.time.DateTime dateTime88 = dateTime18.withZoneRetainFields(dateTimeZone87);
        java.lang.Class<?> wildcardClass89 = dateTime18.getClass();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str48, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet57);
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "365" + "'", str60, "365");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "+00:00:00.003" + "'", str71, "+00:00:00.003");
        org.junit.Assert.assertNotNull(locale74);
// flaky:         org.junit.Assert.assertEquals(locale74.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "+00:00:00.003" + "'", str75, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTimeField79);
        org.junit.Assert.assertNotNull(mutableDateTime80);
        org.junit.Assert.assertNotNull(durationField82);
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + (-61784008481802L) + "'", long86 == (-61784008481802L));
        org.junit.Assert.assertNotNull(dateTimeZone87);
        org.junit.Assert.assertNotNull(dateTime88);
        org.junit.Assert.assertNotNull(wildcardClass89);
    }

    @Test
    public void test15080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15080");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((-9223372017043200001L));
        org.joda.time.LocalTime.Property property2 = localTime1.minuteOfHour();
        org.joda.time.Chronology chronology3 = localTime1.getChronology();
        org.junit.Assert.assertNotNull(localTime1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(chronology3);
    }

    @Test
    public void test15081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15081");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.LocalDate.Property property10 = localDate8.weekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 3, chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType14.getRangeDurationType();
        boolean boolean17 = localDate13.isSupported(durationFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate13.centuryOfEra();
        int int19 = localDate13.getEra();
        boolean boolean20 = localDate8.isAfter((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate.Property property21 = localDate8.dayOfMonth();
        int int22 = localDate8.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
    }

    @Test
    public void test15082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15082");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfWeek();
        java.lang.String str7 = localDate0.toString("23:00:00.000");
        org.joda.time.LocalDate localDate9 = localDate0.minusDays(1969);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfMonth((int) (short) 10);
        org.joda.time.LocalDate localDate12 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property14 = localDate12.property(dateTimeFieldType13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.year();
        boolean boolean16 = localDate12.isSupported(dateTimeFieldType15);
        org.joda.time.DateTime dateTime17 = localDate12.toDateTimeAtMidnight();
        boolean boolean18 = localDate9.equals((java.lang.Object) dateTime17);
        org.joda.time.LocalDate.Property property19 = localDate9.monthOfYear();
        org.joda.time.LocalDate localDate20 = property19.withMaximumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate22 = property19.setCopy(864019);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 864019 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.000" + "'", str7, "23:00:00.000");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
    }

    @Test
    public void test15083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15083");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.LocalDateTime localDateTime5 = property3.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.weekOfWeekyear();
        int[] intArray7 = localDateTime5.getValues();
        org.joda.time.LocalDateTime.Property property8 = localDateTime5.hourOfDay();
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = localDateTime14.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter11.withChronology(chronology19);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        boolean boolean26 = dateTimeZone21.isLocalDateTimeGap(localDateTime25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.weekyear();
        boolean boolean31 = dateTimeZone21.isLocalDateTimeGap(localDateTime29);
        long long33 = dateTimeZone21.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter11.withZone(dateTimeZone21);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (-1), chronology38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.DateTime dateTime43 = localDateTime39.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.secondOfDay();
        org.joda.time.DurationField durationField46 = chronology44.minutes();
        org.joda.time.DurationField durationField47 = chronology44.minutes();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime((long) 292278993, chronology44);
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) 'a', chronology44);
        org.joda.time.DurationField durationField50 = chronology44.months();
        org.joda.time.DateTimeField dateTimeField51 = chronology44.monthOfYear();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter34.withChronology(chronology44);
        java.util.Locale locale53 = dateTimeFormatter34.getLocale();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str54 = localDateTime5.toString(dateTimeFormatter34);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(intArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray7), "[1970, 1, 1, 0]");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long33 + "' != '" + 3L + "'", long33 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(durationField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNull(locale53);
    }

    @Test
    public void test15084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15084");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate7 = localDate5.minusDays(218);
        org.joda.time.LocalDate.Property property8 = localDate7.centuryOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
    }

    @Test
    public void test15085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15085");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("DE");
        org.joda.time.DateTimeZone dateTimeZone2 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone3 = dateTimeZone2.toTimeZone();
        long long7 = dateTimeZone2.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone8 = dateTimeZone2.toTimeZone();
        java.util.TimeZone.setDefault(timeZone8);
        boolean boolean10 = timeZone1.hasSameRules(timeZone8);
        int int11 = timeZone1.getRawOffset();
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter14.withChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.monthOfYear();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology22);
        java.util.Date date26 = localDateTime25.toDate();
        boolean boolean27 = timeZone1.inDaylightTime(date26);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertNotNull(dateTimeZone2);
        org.junit.Assert.assertNotNull(timeZone3);
// flaky:         org.junit.Assert.assertEquals(timeZone3.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + 7L + "'", long7 == 7L);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(date26);
// flaky:         org.junit.Assert.assertEquals(date26.toString(), "Tue Feb 22 07:33:43 GMT+00:00 2022");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test15086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15086");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayLanguage();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyearOfCentury();
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (-1), chronology14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime15.plusYears(0);
        int int20 = localDateTime19.getMinuteOfHour();
        int[] intArray26 = new int[] { 31, (byte) 1, 4, (short) 1, 18 };
        int int27 = dateTimeField12.getMinimumValue((org.joda.time.ReadablePartial) localDateTime19, intArray26);
        java.util.Locale locale29 = java.util.Locale.GERMANY;
        java.lang.String str30 = dateTimeField12.getAsText(100L, locale29);
        java.lang.String str31 = locale0.getDisplayVariant(locale29);
        java.lang.String str33 = locale29.getExtension('x');
        java.lang.String str34 = locale29.getISO3Country();
        java.util.Locale.setDefault(locale29);
        java.util.Set<java.lang.String> strSet36 = locale29.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English" + "'", str1, "English");
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(intArray26);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray26), "[31, 1, 4, 1, 18]");
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "70" + "'", str30, "70");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNull(str33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "DEU" + "'", str34, "DEU");
        org.junit.Assert.assertNotNull(strSet36);
    }

    @Test
    public void test15087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15087");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate7 = localDate3.minusYears((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate7.minusWeeks(2);
        org.joda.time.LocalDate.Property property13 = localDate7.dayOfYear();
        int int14 = property13.getLeapAmount();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test15088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15088");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendHourOfDay((int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder3.appendMonthOfYearText();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-1), chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime15 = localDateTime11.toDateTime(dateTimeZone13);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.DateTime dateTime18 = dateTime15.plus((long) 100);
        org.joda.time.DateTime.Property property19 = dateTime18.yearOfCentury();
        org.joda.time.DateTime dateTime21 = dateTime18.withWeekyear((int) 'x');
        org.joda.time.DateTime.Property property22 = dateTime18.dayOfYear();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.weekyear();
        org.joda.time.LocalDateTime localDateTime28 = localDateTime25.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime30 = localDateTime25.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime25.minus(readablePeriod31);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime25.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.withWeekOfWeekyear(23);
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime37.minusMonths(2);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-1), chronology43);
        boolean boolean45 = dateTimeZone40.isLocalDateTimeGap(localDateTime44);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime44.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property48 = localDateTime44.dayOfYear();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime44.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.LocalDateTime localDateTime53 = localDateTime44.withDurationAdded(readableDuration51, (int) 'u');
        org.joda.time.LocalDateTime localDateTime55 = localDateTime53.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType56 = org.joda.time.DateTimeFieldType.weekyear();
        int int57 = localDateTime53.indexOf(dateTimeFieldType56);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime37.withField(dateTimeFieldType56, 31);
        int int60 = localDateTime36.get(dateTimeFieldType56);
        org.joda.time.DateTime dateTime62 = dateTime18.withField(dateTimeFieldType56, 21);
        org.joda.time.DurationFieldType durationFieldType63 = dateTimeFieldType56.getDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = dateTimeFormatterBuilder3.appendShortText(dateTimeFieldType56);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder3.appendTwoDigitYear(460, true);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder69 = dateTimeFormatterBuilder67.appendSecondOfDay(27218982);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str16, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(dateTimeFieldType56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-1) + "'", int57 == (-1));
        org.junit.Assert.assertNotNull(localDateTime59);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 1923 + "'", int60 == 1923);
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(durationFieldType63);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder69);
    }

    @Test
    public void test15089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15089");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.LocalTime localTime12 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime13 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime14 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime15 = property9.withMinimumValue();
        org.joda.time.LocalTime localTime16 = property9.getLocalTime();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localTime16);
    }

    @Test
    public void test15090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15090");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMinutes((int) 'x');
        int int6 = localDateTime5.getYear();
        int int7 = localDateTime5.getYear();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.minusMillis(59);
        int int10 = localDateTime5.getMinuteOfHour();
        int int11 = localDateTime5.getMillisOfSecond();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1969 + "'", int7 == 1969);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 2 + "'", int11 == 2);
    }

    @Test
    public void test15091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15091");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        org.joda.time.DateTime dateTime4 = dateTime1.minusDays((int) (byte) 0);
        org.joda.time.DateTime dateTime6 = dateTime1.minusMinutes((int) '#');
        org.joda.time.DateTime.Property property7 = dateTime1.yearOfCentury();
        org.joda.time.DateTime dateTime9 = dateTime1.plusMonths((int) 'a');
        org.joda.time.DateTime dateTime11 = dateTime1.plusMinutes(982);
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
    }

    @Test
    public void test15092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15092");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1");
        int int2 = mutableDateTime1.getMonthOfYear();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
    }

    @Test
    public void test15093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15093");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.minuteOfHour();
        int int5 = localDateTime3.size();
        org.joda.time.Chronology chronology6 = localDateTime3.getChronology();
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime((long) (byte) 100, chronology6);
        int int8 = dateTime7.getYear();
        org.joda.time.DateTime dateTime9 = dateTime7.toDateTimeISO();
        org.joda.time.DateTime dateTime11 = dateTime7.minusMillis(82800);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusSeconds((int) (byte) 100);
        int int17 = localDateTime16.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.era();
        java.lang.String str19 = property18.getAsText();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfEvenCopy();
        java.lang.String str21 = property18.getAsShortText();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property18.getFieldType();
        org.joda.time.DateTime.Property property23 = dateTime11.property(dateTimeFieldType22);
        int int24 = property23.get();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "n. Chr." + "'", str19, "n. Chr.");
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "n. Chr." + "'", str21, "n. Chr.");
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
    }

    @Test
    public void test15094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15094");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale13.getDisplayScript();
        java.lang.String str15 = dateTimeZone10.getName((long) 5, locale13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone10);
        mutableDateTime8.setDate((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime8.millisOfSecond();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime8.yearOfEra();
        org.joda.time.MutableDateTime.Property property20 = mutableDateTime8.year();
        org.joda.time.DateTimeField dateTimeField21 = mutableDateTime8.getRoundingField();
        org.joda.time.Chronology chronology22 = mutableDateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.secondOfMinute();
        long long26 = dateTimeField23.addWrapField(25620125087L, 26866);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.003" + "'", str15, "+00:00:00.003");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNull(dateTimeField21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 25620171087L + "'", long26 == 25620171087L);
    }

    @Test
    public void test15095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15095");
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.parse("1969");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.DateTime dateTime11 = dateTime8.plus((long) 100);
        org.joda.time.DateTime.Property property12 = dateTime11.yearOfCentury();
        org.joda.time.DateTime dateTime14 = dateTime11.minusYears(86399999);
        org.joda.time.DateTime dateTime16 = dateTime14.withWeekyear((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime18.setMillisOfDay(10);
        mutableDateTime18.setMillisOfSecond((int) (short) 1);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime18.dayOfYear();
        boolean boolean24 = dateTime16.isAfter((org.joda.time.ReadableInstant) mutableDateTime18);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime18.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime27 = property25.add((int) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime29.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration32 = null;
        mutableDateTime29.add(readableDuration32, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime29.year();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime(dateTimeZone38);
        java.util.Locale locale41 = java.util.Locale.ENGLISH;
        java.lang.String str42 = locale41.getDisplayScript();
        java.lang.String str43 = dateTimeZone38.getName((long) 5, locale41);
        org.joda.time.DateTime dateTime44 = new org.joda.time.DateTime(dateTimeZone38);
        mutableDateTime36.setDate((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime36.millisOfSecond();
        mutableDateTime36.addWeekyears(0);
        mutableDateTime27.setDate((org.joda.time.ReadableInstant) mutableDateTime36);
        org.joda.time.DateTimeZone dateTimeZone50 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone51 = dateTimeZone50.toTimeZone();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (-1), chronology53);
        boolean boolean55 = dateTimeZone50.isLocalDateTimeGap(localDateTime54);
        java.lang.String str57 = dateTimeZone50.getName((long) 4);
        mutableDateTime27.setZone(dateTimeZone50);
        mutableDateTime27.setMillis(1645514718182L);
        org.joda.time.MutableDateTime mutableDateTime61 = mutableDateTime27.toMutableDateTime();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime61);
        org.joda.time.MutableDateTime mutableDateTime63 = mutableDateTime61.copy();
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str9, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(mutableDateTime27);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "+00:00:00.003" + "'", str43, "+00:00:00.003");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone50);
        org.junit.Assert.assertNotNull(timeZone51);
// flaky:         org.junit.Assert.assertEquals(timeZone51.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.003" + "'", str57, "+00:00:00.003");
        org.junit.Assert.assertNotNull(mutableDateTime61);
        org.junit.Assert.assertNotNull(mutableDateTime63);
    }

    @Test
    public void test15096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15096");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray7 = localTime6.getFieldTypes();
        org.joda.time.LocalTime localTime9 = localTime6.plusMillis((int) 'u');
        org.joda.time.LocalTime.Property property10 = localTime9.millisOfDay();
        org.joda.time.LocalTime localTime12 = property10.setCopy(3599999);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
    }

    @Test
    public void test15097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15097");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime9.minusYears(86399999);
        org.joda.time.DateTime dateTime14 = dateTime12.withWeekyear((int) (byte) 100);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime16.setMillisOfDay(10);
        mutableDateTime16.setMillisOfSecond((int) (short) 1);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime16.dayOfYear();
        boolean boolean22 = dateTime14.isAfter((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime16.yearOfCentury();
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime16.year();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime30 = localDateTime27.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime32 = localDateTime27.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.minus(readablePeriod33);
        int int35 = localDateTime27.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property36 = localDateTime27.millisOfSecond();
        long long37 = property36.remainder();
        boolean boolean38 = property24.equals((java.lang.Object) property36);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 1 + "'", int35 == 1);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
    }

    @Test
    public void test15098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15098");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("2");
        org.junit.Assert.assertNotNull(dateTime1);
    }

    @Test
    public void test15099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15099");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendHourOfHalfday(5599585);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder0.appendSecondOfDay((int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendClockhourOfDay(11);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder8.appendFractionOfHour(82800022, 292278994);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatterBuilder11.toFormatter();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
    }

    @Test
    public void test15100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15100");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime6.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 1, chronology12);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((long) (byte) 0, 292278993);
        int int17 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.LocalDateTime localDateTime18 = dateTime16.toLocalDateTime();
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime21 = property19.addWrapFieldToCopy((-31243723));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test15101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15101");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfDay();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        java.lang.String str14 = chronology10.toString();
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField17 = chronology10.clockhourOfHalfday();
        long long20 = dateTimeField17.set(2160000000L, "2");
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField17.getType();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str14, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2167200000L + "'", long20 == 2167200000L);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
    }

    @Test
    public void test15102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15102");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTime dateTime4 = localTime3.toDateTimeToday();
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfEra();
        org.joda.time.DateTime dateTime6 = property5.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime7 = property5.withMaximumValue();
        java.util.Locale locale8 = null;
        int int9 = property5.getMaximumShortTextLength(locale8);
        org.joda.time.DateTime dateTime11 = property5.addToCopy(762261);
        org.joda.time.DateTime dateTime13 = property5.setCopy("7");
        org.joda.time.DateTime dateTime14 = property5.withMinimumValue();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime18 = dateTime14.withDate(360000000, (-93320), (-68));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 360000000 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 9 + "'", int9 == 9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test15103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15103");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withMonthOfYear(1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(292278993);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYearOfEra(1971);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField22 = mutableDateTime21.getRoundingField();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.add((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime25.getZone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDateTime20.toDateTime(dateTimeZone26);
        int int29 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int30 = localDateTime13.getMillisOfDay();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime13.plus(readableDuration31);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 45180002 + "'", int30 == 45180002);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test15104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15104");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (-1), chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        boolean boolean10 = dateTimeZone0.isLocalDateTimeGap(localDateTime8);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        long long16 = dateTimeZone11.convertLocalToUTC(10L, false, (long) 3);
        java.lang.String str18 = dateTimeZone11.getName((long) 2022);
        long long20 = dateTimeZone0.getMillisKeepLocal(dateTimeZone11, 153713980800000L);
        long long23 = dateTimeZone11.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        boolean boolean30 = dateTimeZone25.isLocalDateTimeGap(localDateTime29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (-1), chronology32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.weekyear();
        boolean boolean35 = dateTimeZone25.isLocalDateTimeGap(localDateTime33);
        long long37 = dateTimeZone25.nextTransition((long) 2022);
        long long39 = dateTimeZone25.convertUTCToLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime40 = org.joda.time.DateTime.now(dateTimeZone25);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-1), chronology43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfYear();
        org.joda.time.DurationField durationField46 = property45.getLeapDurationField();
        org.joda.time.Interval interval47 = property45.toInterval();
        long long48 = property45.remainder();
        java.util.Locale locale50 = new java.util.Locale("hi!");
        int int51 = property45.getMaximumShortTextLength(locale50);
        java.lang.String str53 = locale50.getUnicodeLocaleType("AD");
        java.util.Locale locale55 = new java.util.Locale("365");
        java.lang.String str56 = locale55.getISO3Language();
        java.lang.String str57 = locale50.getDisplayScript(locale55);
        java.lang.String str58 = locale50.getDisplayScript();
        java.lang.String str59 = dateTimeZone25.getName((long) 53, locale50);
        java.lang.String str60 = dateTimeZone11.getName(2332799999L, locale50);
        boolean boolean62 = dateTimeZone11.isStandardOffset((long) 2002);
        boolean boolean64 = dateTimeZone11.isStandardOffset(56087L);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long16 + "' != '" + 7L + "'", long16 == 7L);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "+00:00:00.003" + "'", str18, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 153713980800000L + "'", long20 == 153713980800000L);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + (-3L) + "'", long23 == (-3L));
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 2022L + "'", long37 == 2022L);
// flaky:         org.junit.Assert.assertTrue("'" + long39 + "' != '" + 4L + "'", long39 == 4L);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNull(durationField46);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2L + "'", long48 == 2L);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertEquals(locale55.toString(), "365");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "365" + "'", str56, "365");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "+00:00:00.003" + "'", str59, "+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.003" + "'", str60, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
    }

    @Test
    public void test15105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15105");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        boolean boolean6 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        boolean boolean11 = dateTimeZone1.isLocalDateTimeGap(localDateTime9);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        long long17 = dateTimeZone12.convertLocalToUTC(10L, false, (long) 3);
        java.lang.String str19 = dateTimeZone12.getName((long) 2022);
        long long21 = dateTimeZone1.getMillisKeepLocal(dateTimeZone12, 153713980800000L);
        long long24 = dateTimeZone12.convertLocalToUTC(0L, false);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        boolean boolean31 = dateTimeZone26.isLocalDateTimeGap(localDateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.weekyear();
        boolean boolean36 = dateTimeZone26.isLocalDateTimeGap(localDateTime34);
        long long38 = dateTimeZone26.nextTransition((long) 2022);
        long long40 = dateTimeZone26.convertUTCToLocal((long) (byte) 1);
        org.joda.time.DateTime dateTime41 = org.joda.time.DateTime.now(dateTimeZone26);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (-1), chronology44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.dayOfYear();
        org.joda.time.DurationField durationField47 = property46.getLeapDurationField();
        org.joda.time.Interval interval48 = property46.toInterval();
        long long49 = property46.remainder();
        java.util.Locale locale51 = new java.util.Locale("hi!");
        int int52 = property46.getMaximumShortTextLength(locale51);
        java.lang.String str54 = locale51.getUnicodeLocaleType("AD");
        java.util.Locale locale56 = new java.util.Locale("365");
        java.lang.String str57 = locale56.getISO3Language();
        java.lang.String str58 = locale51.getDisplayScript(locale56);
        java.lang.String str59 = locale51.getDisplayScript();
        java.lang.String str60 = dateTimeZone26.getName((long) 53, locale51);
        java.lang.String str61 = dateTimeZone12.getName(2332799999L, locale51);
        boolean boolean63 = dateTimeZone12.isStandardOffset((long) 2002);
        int int65 = dateTimeZone12.getOffset((long) 67);
        java.util.TimeZone timeZone66 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTime dateTime67 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:27:14.516+00:00:00.003", dateTimeZone12);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7L + "'", long17 == 7L);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.003" + "'", str19, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 153713980800000L + "'", long21 == 153713980800000L);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-3L) + "'", long24 == (-3L));
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 2022L + "'", long38 == 2022L);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 4L + "'", long40 == 4L);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNull(durationField47);
        org.junit.Assert.assertNotNull(interval48);
// flaky:         org.junit.Assert.assertTrue("'" + long49 + "' != '" + 2L + "'", long49 == 2L);
        org.junit.Assert.assertEquals(locale51.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertEquals(locale56.toString(), "365");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "365" + "'", str57, "365");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "+00:00:00.003" + "'", str60, "+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "+00:00:00.003" + "'", str61, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int65 + "' != '" + 3 + "'", int65 == 3);
        org.junit.Assert.assertNotNull(timeZone66);
// flaky:         org.junit.Assert.assertEquals(timeZone66.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test15106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15106");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.LocalDate.Property property10 = localDate8.weekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 3, chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType14.getRangeDurationType();
        boolean boolean17 = localDate13.isSupported(durationFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate13.centuryOfEra();
        int int19 = localDate13.getEra();
        boolean boolean20 = localDate8.isAfter((org.joda.time.ReadablePartial) localDate13);
        int int21 = localDate8.getWeekyear();
        org.joda.time.LocalDate localDate23 = localDate8.plusWeeks(82800003);
        org.joda.time.DateMidnight dateMidnight24 = localDate23.toDateMidnight();
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDate localDate26 = localDate23.plus(readablePeriod25);
        org.joda.time.LocalDate localDate28 = localDate23.withYearOfEra(27009);
        org.joda.time.LocalDate.Property property29 = localDate23.weekyear();
        java.util.Locale locale31 = java.util.Locale.TAIWAN;
        java.lang.String str32 = locale31.toLanguageTag();
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.lang.String str34 = locale31.getDisplayScript(locale33);
        java.lang.String str35 = locale33.getDisplayName();
        java.lang.String str36 = locale33.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str37 = localDate23.toString("0016-01-01T00:59:59.999+01:00", locale33);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1999 + "'", int21 == 1999);
        org.junit.Assert.assertNotNull(localDate23);
        org.junit.Assert.assertNotNull(dateMidnight24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(localDate28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zh-TW" + "'", str32, "zh-TW");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Deutsch (Deutschland)" + "'", str35, "Deutsch (Deutschland)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test15107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15107");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear(23);
        int int14 = localDateTime11.getCenturyOfEra();
        int int16 = localDateTime11.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.plusMinutes(99);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean29 = localDateTime21.isSupported(dateTimeFieldType28);
        int int30 = localDateTime18.indexOf(dateTimeFieldType28);
        org.joda.time.LocalDateTime.Property property31 = localDateTime18.millisOfDay();
        org.joda.time.LocalDateTime.Property property32 = localDateTime18.millisOfDay();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.LocalDateTime localDateTime34 = localDateTime18.plus(readableDuration33);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime36 = localDateTime18.withWeekOfWeekyear((-1970));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -1970 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
    }

    @Test
    public void test15108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15108");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setWeekyear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.minuteOfDay();
        int int5 = mutableDateTime1.getWeekOfWeekyear();
        java.lang.Object obj6 = mutableDateTime1.clone();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime1.add(readablePeriod9);
        org.joda.time.ReadableDuration readableDuration11 = null;
        mutableDateTime1.add(readableDuration11);
        org.joda.time.Chronology chronology13 = null;
        mutableDateTime1.setChronology(chronology13);
        mutableDateTime1.setWeekOfWeekyear(17);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.setMinuteOfHour(26784584);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26784584 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "0100-01-07T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "0100-01-07T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "0100-01-07T00:00:00.002+00:00:00.003");
    }

    @Test
    public void test15109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15109");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter11.withDefaultYear(4861378);
        int int14 = dateTimeFormatter11.getDefaultYear();
        java.lang.StringBuffer stringBuffer15 = null;
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        org.joda.time.DurationField durationField20 = property19.getLeapDurationField();
        org.joda.time.Interval interval21 = property19.toInterval();
        long long22 = property19.remainder();
        java.util.Locale locale24 = new java.util.Locale("hi!");
        int int25 = property19.getMaximumShortTextLength(locale24);
        java.lang.String str26 = property19.toString();
        org.joda.time.LocalDateTime localDateTime28 = property19.setCopy(19);
        org.joda.time.LocalDateTime localDateTime29 = property19.withMaximumValue();
        int int30 = localDateTime29.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property31 = localDateTime29.dayOfMonth();
        int int32 = localDateTime29.getWeekOfWeekyear();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter11.printTo(stringBuffer15, (org.joda.time.ReadablePartial) localDateTime29);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2000 + "'", int14 == 2000);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNull(durationField20);
        org.junit.Assert.assertNotNull(interval21);
// flaky:         org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2L + "'", long22 == 2L);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 3 + "'", int25 == 3);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfYear]" + "'", str26, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 53 + "'", int30 == 53);
        org.junit.Assert.assertNotNull(property31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 53 + "'", int32 == 53);
    }

    @Test
    public void test15110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15110");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property7.addToCopy(0);
        int int11 = localDate10.getYear();
        org.joda.time.LocalDate.Property property12 = localDate10.yearOfEra();
        org.joda.time.LocalDate localDate14 = localDate10.plusMonths(23);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1970 + "'", int11 == 1970);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test15111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15111");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTime dateTime9 = dateTime6.withMinuteOfHour(16);
        org.joda.time.DateTime dateTime11 = dateTime6.plusYears(0);
        org.joda.time.DateTime dateTime13 = dateTime11.minusMonths(0);
        org.joda.time.DateTime dateTime15 = dateTime11.withYear(37);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
    }

    @Test
    public void test15112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15112");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes(1);
        org.joda.time.LocalTime localTime5 = localTime1.minusMinutes(31);
        org.joda.time.LocalTime localTime7 = localTime5.plusSeconds((-292275054));
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder8.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = dateTimeFormatterBuilder12.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder12.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime20 = localTime18.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime localTime22 = localTime18.minusSeconds((int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.halfdayOfDay();
        org.joda.time.LocalTime.Property property24 = localTime18.property(dateTimeFieldType23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder12.appendFixedSignedDecimal(dateTimeFieldType23, 18);
        org.joda.time.LocalTime.Property property27 = localTime5.property(dateTimeFieldType23);
        org.joda.time.LocalTime localTime29 = localTime5.plusSeconds(0);
        org.joda.time.LocalTime localTime31 = localTime5.plusSeconds((int) (short) 10);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimePrinter13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(localTime31);
    }

    @Test
    public void test15113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15113");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfYear();
        java.lang.String str9 = property8.getName();
        org.joda.time.LocalDateTime localDateTime11 = property8.addToCopy(1999);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readableDuration12);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime18 = localDateTime11.withTime(60049052, 5599680, 920, 26784584);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 60049052 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "dayOfYear" + "'", str9, "dayOfYear");
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
    }

    @Test
    public void test15114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15114");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime12 = localDateTime10.withMonthOfYear(4);
        int int13 = localDateTime10.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime10.plusDays(1909);
        org.joda.time.Chronology chronology16 = localDateTime15.getChronology();
        org.joda.time.LocalDateTime.Property property17 = localDateTime15.dayOfWeek();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 19 + "'", int13 == 19);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test15115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15115");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy(1924);
        org.joda.time.LocalDateTime localDateTime10 = property6.addToCopy(2000);
        int int11 = localDateTime10.getYearOfEra();
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.minusHours(16);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime15.setMillisOfDay(10);
        mutableDateTime15.setMillisOfSecond((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        mutableDateTime15.add(readablePeriod20);
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType22.getDurationType();
        mutableDateTime15.add(durationFieldType23, 18);
        java.lang.String str26 = mutableDateTime15.toString();
        org.joda.time.DurationFieldType durationFieldType27 = org.joda.time.DurationFieldType.millis();
        java.lang.String str28 = durationFieldType27.getName();
        mutableDateTime15.add(durationFieldType27, 218);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime13.withFieldAdded(durationFieldType27, 39);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = null;
        boolean boolean34 = localDateTime32.isSupported(dateTimeFieldType33);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        int int37 = mutableDateTime36.getYearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime();
        mutableDateTime38.addMillis((-292275054));
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.millisOfDay();
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime38.property(dateTimeFieldType41);
        int int43 = mutableDateTime36.get(dateTimeFieldType41);
        boolean boolean44 = localDateTime32.isSupported(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1975 + "'", int11 == 1975);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(durationFieldType23);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1971-07-01T00:00:00.001+00:00:00.003" + "'", str26, "1971-07-01T00:00:00.001+00:00:00.003");
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "millis" + "'", str28, "millis");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 22 + "'", int37 == 22);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property42);
// flaky:         org.junit.Assert.assertTrue("'" + int43 + "' != '" + 27222656 + "'", int43 == 27222656);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + true + "'", boolean44 == true);
    }

    @Test
    public void test15116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15116");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalTime localTime10 = localTime8.minus(readablePeriod9);
        org.joda.time.LocalTime localTime12 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime14 = localTime12.minusMinutes(1);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfDay();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.LocalTime localTime17 = localTime14.minus(readablePeriod16);
        int int18 = localTime8.compareTo((org.joda.time.ReadablePartial) localTime17);
        org.joda.time.DateTime dateTime19 = localTime17.toDateTimeToday();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder20.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime26.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime26.add(readableDuration29, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int33 = mutableDateTime26.get(dateTimeFieldType32);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder20.appendSignedDecimal(dateTimeFieldType32, 92, 9);
        org.joda.time.format.DateTimeParser dateTimeParser37 = dateTimeFormatterBuilder20.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder20.appendDayOfYear(30);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder39.appendMonthOfYear(99);
        boolean boolean42 = localTime17.equals((java.lang.Object) dateTimeFormatterBuilder41);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder41.appendDayOfWeekText();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeParser37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
    }

    @Test
    public void test15117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15117");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime10 = org.joda.time.MutableDateTime.now(chronology8);
        org.joda.time.DateTimeField dateTimeField11 = chronology8.clockhourOfHalfday();
        org.joda.time.DurationField durationField12 = chronology8.halfdays();
        org.joda.time.DateTimeField dateTimeField13 = chronology8.weekyearOfCentury();
        org.joda.time.DurationField durationField14 = chronology8.seconds();
        org.joda.time.DateTime dateTime15 = new org.joda.time.DateTime((long) (-2000), chronology8);
        org.joda.time.DateTimeField dateTimeField16 = chronology8.secondOfMinute();
        boolean boolean17 = dateTimeField16.isLenient();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test15118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15118");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withMillisOfDay(5);
        int int10 = localDateTime9.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property11 = localDateTime9.dayOfMonth();
        int int12 = property11.getMaximumValueOverall();
        org.joda.time.LocalDateTime localDateTime14 = property11.addToCopy((long) 60);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 31 + "'", int12 == 31);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test15119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15119");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder4.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder4.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder4.appendTwoDigitYear(1, false);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDate localDate14 = new org.joda.time.LocalDate((long) 3, chronology13);
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType15.getDurationType();
        org.joda.time.DurationFieldType durationFieldType17 = dateTimeFieldType15.getRangeDurationType();
        boolean boolean18 = localDate14.isSupported(durationFieldType17);
        org.joda.time.LocalDate.Property property19 = localDate14.centuryOfEra();
        org.joda.time.LocalDate localDate20 = property19.roundCeilingCopy();
        org.joda.time.LocalDate localDate21 = property19.getLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = property19.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder4.appendFixedDecimal(dateTimeFieldType22, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder24.appendDayOfWeek(24);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder24.appendFractionOfHour(29, 1971);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendDayOfMonth(241594);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder31.appendTwoDigitWeekyear((-118));
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertNotNull(durationFieldType17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate21);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
    }

    @Test
    public void test15120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15120");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter14.withChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.monthOfYear();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.centuryOfEra();
        long long31 = chronology22.getDateTimeMillis(27, 12, 21, 1970);
        org.joda.time.DateTimeField dateTimeField32 = chronology22.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withChronology(chronology22);
        org.joda.time.DateTimeZone dateTimeZone34 = chronology22.getZone();
        org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime(chronology22);
        org.joda.time.DateTime dateTime36 = dateTime35.toDateTimeISO();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-61284556798033L) + "'", long31 == (-61284556798033L));
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test15121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15121");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setMillisOfDay(10);
        mutableDateTime1.setMillisOfSecond((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        mutableDateTime1.add(readablePeriod6);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getDurationType();
        mutableDateTime1.add(durationFieldType9, 18);
        java.lang.String str12 = mutableDateTime1.toString();
        org.joda.time.DurationFieldType durationFieldType13 = org.joda.time.DurationFieldType.millis();
        java.lang.String str14 = durationFieldType13.getName();
        mutableDateTime1.add(durationFieldType13, 218);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.hours();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField29 = chronology26.weekyear();
        java.util.Locale locale30 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket31 = new org.joda.time.format.DateTimeParserBucket(86399999L, chronology26, locale30);
        org.joda.time.DateTime dateTime32 = new org.joda.time.DateTime(0L, chronology26);
        org.joda.time.DurationField durationField33 = durationFieldType13.getField(chronology26);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTime dateTime40 = localDateTime36.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.dayOfYear();
        org.joda.time.Chronology chronology43 = chronology41.withUTC();
        org.joda.time.DateTimeField dateTimeField44 = chronology41.era();
        org.joda.time.DateTimeField dateTimeField45 = chronology41.yearOfEra();
        org.joda.time.DurationField durationField46 = chronology41.years();
        boolean boolean47 = durationFieldType13.isSupported(chronology41);
        org.joda.time.DateTime dateTime48 = new org.joda.time.DateTime(chronology41);
        org.joda.time.Chronology chronology49 = chronology41.withUTC();
        org.joda.time.DurationField durationField50 = chronology41.millis();
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1971-07-01T00:00:00.001+00:00:00.003" + "'", str12, "1971-07-01T00:00:00.001+00:00:00.003");
        org.junit.Assert.assertNotNull(durationFieldType13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "millis" + "'", str14, "millis");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(durationField50);
    }

    @Test
    public void test15122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15122");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        boolean boolean15 = dateTimeZone10.isLocalDateTimeGap(localDateTime14);
        long long17 = chronology9.set((org.joda.time.ReadablePartial) localDateTime14, (long) '#');
        long long21 = chronology9.add(1645514718201L, 2L, 43);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (-1), chronology25);
        boolean boolean27 = dateTimeZone22.isLocalDateTimeGap(localDateTime26);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime26.withYearOfEra((int) (byte) 10);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (-1), chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTime dateTime36 = localDateTime32.toDateTime(dateTimeZone34);
        org.joda.time.DateTimeFieldType dateTimeFieldType37 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateTime.Property property38 = dateTime36.property(dateTimeFieldType37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime29.property(dateTimeFieldType37);
        org.joda.time.DateTime dateTime40 = localDateTime29.toDateTime();
        int int41 = localDateTime29.getWeekyear();
        long long43 = chronology9.set((org.joda.time.ReadablePartial) localDateTime29, (-431997978L));
        org.joda.time.DateTimeField dateTimeField44 = chronology9.yearOfEra();
        org.joda.time.LocalDateTime localDateTime45 = org.joda.time.LocalDateTime.now(chronology9);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (-1), chronology47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.weekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime53 = localDateTime48.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod54 = null;
        org.joda.time.LocalDateTime localDateTime55 = localDateTime48.minus(readablePeriod54);
        org.joda.time.LocalDateTime localDateTime57 = localDateTime48.withMonthOfYear(1);
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.plusMinutes(292278993);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) (-1), chronology61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.minuteOfHour();
        int int64 = localDateTime62.size();
        org.joda.time.Chronology chronology65 = localDateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField66 = chronology65.yearOfEra();
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (-1), chronology68);
        org.joda.time.LocalDateTime localDateTime71 = localDateTime69.minusSeconds((int) (byte) 100);
        int int72 = localDateTime71.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property73 = localDateTime71.era();
        java.lang.String str74 = property73.getAsText();
        org.joda.time.LocalDateTime localDateTime75 = property73.roundHalfEvenCopy();
        java.lang.String str76 = property73.getAsShortText();
        org.joda.time.LocalDateTime localDateTime77 = property73.withMaximumValue();
        java.util.Locale locale79 = java.util.Locale.JAPAN;
        java.lang.String str80 = dateTimeField66.getAsShortText((org.joda.time.ReadablePartial) localDateTime77, 100, locale79);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime57.withFields((org.joda.time.ReadablePartial) localDateTime77);
        org.joda.time.LocalDate localDate83 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate85 = localDate83.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate87 = localDate85.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate89 = localDate87.withYearOfEra(10);
        org.joda.time.LocalDate.Property property90 = localDate87.yearOfEra();
        org.joda.time.LocalDate localDate92 = localDate87.plusYears(738207);
        int int93 = localDate92.size();
        int int94 = localDate92.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod95 = null;
        org.joda.time.LocalDate localDate97 = localDate92.withPeriodAdded(readablePeriod95, 37);
        int[] intArray98 = localDate92.getValues();
        // The following exception was thrown during execution in test generation
        try {
            chronology9.validate((org.joda.time.ReadablePartial) localDateTime81, intArray98);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1645514718287L + "'", long21 == 1645514718287L);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFieldType37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime40);
// flaky:         org.junit.Assert.assertTrue("'" + int41 + "' != '" + 9 + "'", int41 == 9);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + (-61851599999998L) + "'", long43 == (-61851599999998L));
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 4 + "'", int64 == 4);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 3 + "'", int72 == 3);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "n. Chr." + "'", str74, "n. Chr.");
        org.junit.Assert.assertNotNull(localDateTime75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "n. Chr." + "'", str76, "n. Chr.");
        org.junit.Assert.assertNotNull(localDateTime77);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "100" + "'", str80, "100");
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(localDate85);
        org.junit.Assert.assertNotNull(localDate87);
        org.junit.Assert.assertNotNull(localDate89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(localDate92);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 3 + "'", int93 == 3);
        org.junit.Assert.assertTrue("'" + int94 + "' != '" + 4861378 + "'", int94 == 4861378);
        org.junit.Assert.assertNotNull(localDate97);
        org.junit.Assert.assertNotNull(intArray98);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray98), "[-4861377, 8, 6]");
    }

    @Test
    public void test15123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15123");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.weekyears();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DurationField durationField11 = chronology7.days();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test15124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15124");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withYearOfCentury(25);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withPeriodAdded(readablePeriod12, 218);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-1), chronology18);
        boolean boolean20 = dateTimeZone15.isLocalDateTimeGap(localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withMillisOfDay(5);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusHours((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime19.withDayOfYear(12);
        int int29 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        int int30 = localDateTime28.getMonthOfYear();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.plusYears(26866);
        org.joda.time.LocalDateTime.Property property33 = localDateTime28.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusMinutes(224);
        int int37 = localDateTime36.getMinuteOfHour();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1925-01-01T00:00:00.002" + "'", str11, "1925-01-01T00:00:00.002");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 16 + "'", int37 == 16);
    }

    @Test
    public void test15125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15125");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = dateTimeFormatter2.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter13 = dateTimeFormatter2.withOffsetParsed();
        boolean boolean14 = dateTimeFormatter13.isParser();
        java.util.Locale.Category category15 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale16 = java.util.Locale.getDefault(category15);
        java.util.Locale locale17 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet18 = locale17.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category15, locale17);
        java.util.Locale locale20 = java.util.Locale.getDefault(category15);
        java.util.Locale locale21 = java.util.Locale.getDefault(category15);
        java.util.Locale locale22 = java.util.Locale.PRC;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter13.withLocale(locale22);
        java.util.Locale locale25 = locale22.stripExtensions();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNull(dateTimePrinter12);
        org.junit.Assert.assertNotNull(dateTimeFormatter13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.FORMAT + "'", category15.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)" + "'", str23, "\u4e2d\u6587\u53f0\u6e7e\u5730\u533a)");
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_CN");
    }

    @Test
    public void test15126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15126");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withYearOfCentury(25);
        java.lang.String str11 = localDateTime10.toString();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime14 = localDateTime10.withPeriodAdded(readablePeriod12, 218);
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-1), chronology18);
        boolean boolean20 = dateTimeZone15.isLocalDateTimeGap(localDateTime19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.withMillisOfDay(5);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.plusHours((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime19.withDayOfYear(12);
        int int29 = localDateTime10.compareTo((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime28.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime32 = localDateTime28.withYear(999);
        org.joda.time.DateTime dateTime33 = localDateTime32.toDateTime();
        org.joda.time.LocalDateTime.Property property34 = localDateTime32.era();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1925-01-01T00:00:00.002" + "'", str11, "1925-01-01T00:00:00.002");
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + (-1) + "'", int29 == (-1));
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(property34);
    }

    @Test
    public void test15127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15127");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.plus((long) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfCentury();
        org.joda.time.DateTime dateTime13 = dateTime10.withWeekyear((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis(53);
        org.joda.time.DateTime dateTime17 = dateTime15.minusMinutes((int) '4');
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime19.setMillisOfDay(10);
        mutableDateTime19.setMillisOfSecond((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        mutableDateTime19.add(readablePeriod24);
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType27 = dateTimeFieldType26.getDurationType();
        mutableDateTime19.add(durationFieldType27, 18);
        org.joda.time.format.DateTimePrinter dateTimePrinter30 = null;
        org.joda.time.format.DateTimeParser dateTimeParser31 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter30, dateTimeParser31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTime dateTime39 = localDateTime35.toDateTime(dateTimeZone37);
        org.joda.time.Chronology chronology40 = dateTime39.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter32.withChronology(chronology40);
        org.joda.time.DateTimeField dateTimeField42 = chronology40.monthOfYear();
        org.joda.time.DateTimeField dateTimeField43 = chronology40.clockhourOfHalfday();
        org.joda.time.DurationField durationField44 = chronology40.days();
        org.joda.time.DurationField durationField45 = durationFieldType27.getField(chronology40);
        org.joda.time.DateTime dateTime46 = dateTime15.toDateTime(chronology40);
        org.joda.time.DurationField durationField47 = durationFieldType0.getField(chronology40);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (-1), chronology49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        org.joda.time.DateTime dateTime54 = localDateTime50.toDateTime(dateTimeZone52);
        org.joda.time.Chronology chronology55 = dateTime54.getChronology();
        org.joda.time.DateTimeField dateTimeField56 = chronology55.dayOfYear();
        org.joda.time.Chronology chronology57 = chronology55.withUTC();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) (-1), chronology61);
        boolean boolean63 = dateTimeZone58.isLocalDateTimeGap(localDateTime62);
        long long65 = chronology57.set((org.joda.time.ReadablePartial) localDateTime62, (long) '#');
        org.joda.time.DateTimeField dateTimeField66 = chronology57.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField67 = chronology57.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField68 = chronology57.millisOfDay();
        org.joda.time.DateTimeField dateTimeField69 = chronology57.era();
        org.joda.time.DateTimeField dateTimeField70 = chronology57.secondOfMinute();
        org.joda.time.DurationField durationField71 = chronology57.hours();
        org.joda.time.DurationField durationField72 = durationFieldType0.getField(chronology57);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str8, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(durationFieldType27);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(durationField47);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeField56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long65 + "' != '" + 2L + "'", long65 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField66);
        org.junit.Assert.assertNotNull(dateTimeField67);
        org.junit.Assert.assertNotNull(dateTimeField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(durationField71);
        org.junit.Assert.assertNotNull(durationField72);
    }

    @Test
    public void test15128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15128");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.minus(readablePeriod12);
        int int14 = dateTime13.getSecondOfDay();
        org.joda.time.DateTime.Property property15 = dateTime13.minuteOfDay();
        org.joda.time.DateTime dateTime16 = property15.withMinimumValue();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test15129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15129");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.plus((long) 100);
        org.joda.time.DateTime.Property property24 = dateTime20.millisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 1, chronology26);
        org.joda.time.DateTime dateTime30 = dateTime27.withDurationAdded((long) (byte) 0, 292278993);
        int int31 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime34 = dateTime30.withFieldAdded(durationFieldType32, 1969);
        org.joda.time.DateTime dateTime36 = dateTime11.withFieldAdded(durationFieldType32, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime39 = dateTime36.withPeriodAdded(readablePeriod37, (int) ' ');
        int int40 = dateTime36.getDayOfMonth();
        org.joda.time.DateTime.Property property41 = dateTime36.yearOfCentury();
        java.util.Locale.Builder builder43 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder45 = builder43.removeUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder46 = builder43.clear();
        java.util.Locale locale47 = builder46.build();
        java.lang.String str48 = locale47.getLanguage();
        java.util.Locale locale50 = new java.util.Locale("0001-01-01T00:00:00.000Z");
        java.lang.String str51 = locale47.getDisplayCountry(locale50);
        boolean boolean52 = locale47.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime53 = property41.setCopy("2022-02-22T07:25:57.543+00:00:00.003", locale47);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"2022-02-22T07:25:57.543+00:00:00.003\" for yearOfCentury is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str21, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals(locale50.toString(), "0001-01-01t00:00:00.000z");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test15130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15130");
        org.joda.time.LocalDateTime localDateTime1 = new org.joda.time.LocalDateTime((long) (-17259888));
        org.joda.time.LocalDateTime localDateTime3 = localDateTime1.plusMillis(102);
        int int4 = localDateTime3.getYear();
        org.joda.time.LocalDateTime localDateTime6 = localDateTime3.withWeekyear((int) 'a');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime8 = localDateTime3.withCenturyOfEra(292278969);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278969 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDateTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1969 + "'", int4 == 1969);
        org.junit.Assert.assertNotNull(localDateTime6);
    }

    @Test
    public void test15131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15131");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DurationField durationField11 = chronology8.minutes();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 292278993, chronology8);
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime(chronology8);
        boolean boolean15 = dateTime13.isAfter((long) 19);
        int int16 = dateTime13.getDayOfMonth();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-1), chronology18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        org.joda.time.DurationField durationField21 = property20.getLeapDurationField();
        org.joda.time.Interval interval22 = property20.toInterval();
        long long23 = property20.remainder();
        java.util.Locale locale25 = new java.util.Locale("hi!");
        int int26 = property20.getMaximumShortTextLength(locale25);
        java.lang.String str28 = locale25.getUnicodeLocaleType("AD");
        java.util.Calendar calendar29 = dateTime13.toCalendar(locale25);
        org.joda.time.DateTime dateTime30 = dateTime13.withEarlierOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone31 = dateTime30.getZone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDateTime34.toDateTime(dateTimeZone36);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.plus((long) 100);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfCentury();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Calendar calendar44 = dateTime41.toCalendar(locale43);
        int int45 = dateTime41.getMinuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime41.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property48 = dateTime41.era();
        org.joda.time.DateTime dateTime49 = property48.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime51 = dateTime49.plusSeconds(99);
        java.util.Locale locale53 = new java.util.Locale("365");
        java.lang.String str54 = locale53.getISO3Language();
        java.util.Calendar calendar55 = dateTime49.toCalendar(locale53);
        boolean boolean56 = dateTimeZone31.equals((java.lang.Object) calendar55);
        boolean boolean57 = dateTimeZone31.isFixed();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 22 + "'", int16 == 22);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNull(durationField21);
        org.junit.Assert.assertNotNull(interval22);
// flaky:         org.junit.Assert.assertTrue("'" + long23 + "' != '" + 2L + "'", long23 == 2L);
        org.junit.Assert.assertEquals(locale25.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=1645515222942,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2022,MONTH=1,WEEK_OF_YEAR=9,WEEK_OF_MONTH=4,DAY_OF_MONTH=22,DAY_OF_YEAR=53,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=4,AM_PM=0,HOUR=7,HOUR_OF_DAY=7,MINUTE=33,SECOND=42,MILLISECOND=945,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str39, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertEquals(locale53.toString(), "365");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "365" + "'", str54, "365");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=-62135596800003,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=1,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=2,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
    }

    @Test
    public void test15132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15132");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekyear();
        org.joda.time.DateTime dateTime11 = org.joda.time.DateTime.now(chronology7);
        org.joda.time.DateTime dateTime13 = dateTime11.plusYears(30);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
    }

    @Test
    public void test15133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15133");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra(10);
        org.joda.time.LocalDate.Property property8 = localDate5.weekyear();
        org.joda.time.LocalDate localDate10 = localDate5.withYearOfEra(807);
        int int11 = localDate10.getYear();
        org.joda.time.LocalDate.Property property12 = localDate10.era();
        org.joda.time.LocalDate localDate13 = property12.roundFloorCopy();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray14 = localDate13.getFieldTypes();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-806) + "'", int11 == (-806));
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray14);
    }

    @Test
    public void test15134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15134");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        org.joda.time.DateTime.Property property12 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime14 = dateTime6.withYear(0);
        org.joda.time.DateTime dateTime15 = dateTime14.withTimeAtStartOfDay();
        int int16 = dateTime15.getYearOfCentury();
        org.joda.time.DateTime dateTime18 = dateTime15.minusWeeks(1439);
        org.joda.time.DateTime dateTime20 = dateTime18.plusYears(27200120);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test15135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15135");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (-1), chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime17 = localDateTime13.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter10.withChronology(chronology18);
        org.joda.time.DateTimeField dateTimeField20 = chronology18.monthOfYear();
        org.joda.time.DateTimeField dateTimeField21 = chronology18.clockhourOfHalfday();
        org.joda.time.DurationField durationField22 = chronology18.days();
        org.joda.time.DateTime dateTime23 = dateTime7.toDateTime(chronology18);
        long long24 = dateTime7.getMillis();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        boolean boolean30 = dateTimeZone25.isLocalDateTimeGap(localDateTime29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime29.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime29.withMillisOfDay(5);
        int int35 = localDateTime34.size();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (-1), chronology37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfYear();
        org.joda.time.DurationField durationField40 = property39.getLeapDurationField();
        org.joda.time.Interval interval41 = property39.toInterval();
        long long42 = property39.remainder();
        java.lang.String str43 = property39.toString();
        org.joda.time.LocalDateTime localDateTime45 = property39.setCopy((int) (short) 1);
        int int46 = localDateTime45.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime48 = localDateTime45.plusDays((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType50 = dateTimeFieldType49.getRangeDurationType();
        int int51 = localDateTime45.get(dateTimeFieldType49);
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType49.getRangeDurationType();
        boolean boolean53 = localDateTime34.isSupported(durationFieldType52);
        org.joda.time.DateTime dateTime55 = dateTime7.withFieldAdded(durationFieldType52, (int) ' ');
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (-1), chronology57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone60 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone61 = dateTimeZone60.toTimeZone();
        org.joda.time.DateTime dateTime62 = localDateTime58.toDateTime(dateTimeZone60);
        org.joda.time.Chronology chronology63 = dateTime62.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.dayOfYear();
        org.joda.time.Chronology chronology65 = chronology63.withUTC();
        org.joda.time.DateTime dateTime66 = dateTime7.toDateTime(chronology63);
        org.joda.time.DateTime dateTime67 = dateTime7.withTimeAtStartOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 4 + "'", int35 == 4);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNull(durationField40);
        org.junit.Assert.assertNotNull(interval41);
// flaky:         org.junit.Assert.assertTrue("'" + long42 + "' != '" + 2L + "'", long42 == 2L);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "Property[dayOfYear]" + "'", str43, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 1 + "'", int46 == 1);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
        org.junit.Assert.assertNotNull(durationFieldType50);
// flaky:         org.junit.Assert.assertTrue("'" + int51 + "' != '" + 70 + "'", int51 == 70);
        org.junit.Assert.assertNotNull(durationFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeZone60);
        org.junit.Assert.assertNotNull(timeZone61);
// flaky:         org.junit.Assert.assertEquals(timeZone61.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime62);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(chronology65);
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(dateTime67);
    }

    @Test
    public void test15136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15136");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.yearOfEra();
        org.joda.time.Chronology chronology12 = chronology9.withUTC();
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-1), chronology18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime23 = localDateTime19.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.DateTimeField dateTimeField26 = chronology24.monthOfYear();
        org.joda.time.DateTimeField dateTimeField27 = chronology24.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime();
        mutableDateTime28.add((long) 100);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime28.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDateTime34.toDateTime(dateTimeZone36);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.plus((long) 100);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.plus(readableDuration43);
        int int45 = dateTime44.getDayOfMonth();
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.lang.String str50 = locale47.getDisplayVariant(locale49);
        java.lang.String str51 = dateTime44.toString("365", locale49);
        org.joda.time.DateTime dateTime53 = dateTime44.plusMonths(1969);
        mutableDateTime28.setMillis((org.joda.time.ReadableInstant) dateTime44);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone56 = dateTimeZone55.toTimeZone();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (-1), chronology58);
        boolean boolean60 = dateTimeZone55.isLocalDateTimeGap(localDateTime59);
        java.lang.String str62 = dateTimeZone55.getName((long) 4);
        mutableDateTime28.setZone(dateTimeZone55);
        java.util.Locale locale65 = java.util.Locale.getDefault();
        java.lang.String str66 = dateTimeZone55.getName((long) (-292275054), locale65);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket69 = new org.joda.time.format.DateTimeParserBucket(1645514718201L, chronology24, locale65, (java.lang.Integer) 1, (int) (short) -1);
        java.util.Locale locale70 = dateTimeParserBucket69.getLocale();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket71 = new org.joda.time.format.DateTimeParserBucket(738207L, chronology12, locale70);
        long long74 = dateTimeParserBucket71.computeMillis(false, "monthOfYear");
        int int75 = dateTimeParserBucket71.getOffset();
        org.joda.time.DateTimeZone dateTimeZone76 = dateTimeParserBucket71.getZone();
        org.joda.time.MutableDateTime mutableDateTime77 = new org.joda.time.MutableDateTime((long) 3600000, dateTimeZone76);
        int int78 = mutableDateTime77.getMonthOfYear();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str39, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "365" + "'", str51, "365");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.003" + "'", str62, "+00:00:00.003");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "+00:00:00.003" + "'", str66, "+00:00:00.003");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de_DE");
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 738207L + "'", long74 == 738207L);
        org.junit.Assert.assertTrue("'" + int75 + "' != '" + 0 + "'", int75 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone76);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + 1 + "'", int78 == 1);
    }

    @Test
    public void test15137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15137");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DurationField durationField30 = chronology27.minutes();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 292278993, chronology27);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 'a', chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField35 = chronology27.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology27.era();
        org.joda.time.DateTime dateTime37 = dateTime15.toDateTime(chronology27);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (-1), chronology39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        org.joda.time.DateTime dateTime44 = localDateTime40.toDateTime(dateTimeZone42);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.DateTime dateTime47 = dateTime44.plus((long) 100);
        org.joda.time.DateTime.Property property48 = dateTime47.yearOfCentury();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Calendar calendar50 = dateTime47.toCalendar(locale49);
        int int51 = dateTime47.getMinuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime47.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime55 = dateTime53.plus((long) (-292275054));
        org.joda.time.DateTime dateTime57 = dateTime55.plusMonths(16);
        boolean boolean58 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property59 = dateTime55.weekOfWeekyear();
        org.joda.time.DateTime dateTime61 = dateTime55.withYearOfCentury(61);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str45, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test15138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15138");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        boolean boolean18 = dateTimeZone13.isLocalDateTimeGap(localDateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        boolean boolean23 = dateTimeZone13.isLocalDateTimeGap(localDateTime21);
        long long25 = dateTimeZone13.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-1), chronology30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.DateTime dateTime35 = localDateTime31.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfYear();
        org.joda.time.Chronology chronology38 = chronology36.withUTC();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (-1), chronology42);
        boolean boolean44 = dateTimeZone39.isLocalDateTimeGap(localDateTime43);
        long long46 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '#');
        org.joda.time.DateTimeField dateTimeField47 = chronology38.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter28.withChronology(chronology38);
        org.joda.time.Chronology chronology49 = dateTimeFormatter48.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime50 = org.joda.time.DateTime.parse("2022-02-22T07:32:06.694+00:00:00.003", dateTimeFormatter48);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2L + "'", long46 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertNotNull(chronology49);
    }

    @Test
    public void test15139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15139");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear(23);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(4);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.hourOfDay();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.joda.time.Interval interval24 = property22.toInterval();
        long long25 = property22.remainder();
        java.lang.String str26 = property22.toString();
        org.joda.time.LocalDateTime localDateTime28 = property22.setCopy((int) (short) 1);
        int int29 = localDateTime28.getDayOfMonth();
        int int30 = localDateTime28.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime15.withFields((org.joda.time.ReadablePartial) localDateTime28);
        org.joda.time.Chronology chronology32 = localDateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.halfdayOfDay();
        long long35 = dateTimeField33.roundHalfEven((long) 44);
        org.joda.time.LocalTime localTime37 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime39 = localTime37.minusSeconds((int) (short) 10);
        int int40 = localTime37.getMinuteOfHour();
        org.joda.time.LocalTime.Property property41 = localTime37.hourOfDay();
        org.joda.time.LocalTime localTime42 = property41.withMaximumValue();
        org.joda.time.DateTimeFieldType[] dateTimeFieldTypeArray43 = localTime42.getFieldTypes();
        org.joda.time.LocalTime localTime45 = localTime42.plusMillis((int) 'u');
        org.joda.time.LocalTime.Property property46 = localTime45.millisOfDay();
        org.joda.time.LocalTime.Property property47 = localTime45.millisOfDay();
        org.joda.time.LocalDate localDate49 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property51 = localDate49.property(dateTimeFieldType50);
        org.joda.time.DateTimeFieldType dateTimeFieldType52 = org.joda.time.DateTimeFieldType.year();
        boolean boolean53 = localDate49.isSupported(dateTimeFieldType52);
        org.joda.time.LocalDate.Property property54 = localDate49.dayOfWeek();
        java.lang.String str56 = localDate49.toString("23:00:00.000");
        org.joda.time.LocalDate localDate58 = localDate49.minusDays(1969);
        int int59 = localDate58.getCenturyOfEra();
        int[] intArray60 = localDate58.getValues();
        org.joda.time.MutableDateTime mutableDateTime62 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField63 = mutableDateTime62.getRoundingField();
        org.joda.time.MutableDateTime.Property property64 = mutableDateTime62.dayOfWeek();
        org.joda.time.Chronology chronology66 = null;
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) (-1), chronology66);
        org.joda.time.LocalDateTime.Property property68 = localDateTime67.dayOfYear();
        org.joda.time.DurationField durationField69 = property68.getLeapDurationField();
        org.joda.time.Interval interval70 = property68.toInterval();
        long long71 = property68.remainder();
        java.util.Locale locale73 = new java.util.Locale("hi!");
        int int74 = property68.getMaximumShortTextLength(locale73);
        java.lang.String str75 = property64.getAsShortText(locale73);
        boolean boolean76 = locale73.hasExtensions();
        java.lang.String str77 = locale73.getDisplayVariant();
        java.util.Locale locale78 = locale73.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray79 = dateTimeField33.set((org.joda.time.ReadablePartial) localTime45, 6042, intArray60, "dayOfMonth", locale73);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"dayOfMonth\" for halfdayOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(interval24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2L + "'", long25 == 2L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfYear]" + "'", str26, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(dateTimeFieldTypeArray43);
        org.junit.Assert.assertNotNull(localTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeFieldType52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "23:00:00.000" + "'", str56, "23:00:00.000");
        org.junit.Assert.assertNotNull(localDate58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 20 + "'", int59 == 20);
        org.junit.Assert.assertNotNull(intArray60);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray60), "[2016, 10, 2]");
        org.junit.Assert.assertNull(dateTimeField63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property68);
        org.junit.Assert.assertNull(durationField69);
        org.junit.Assert.assertNotNull(interval70);
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + 2L + "'", long71 == 2L);
        org.junit.Assert.assertEquals(locale73.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 3 + "'", int74 == 3);
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "Tue" + "'", str75, "Tue");
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "hi!");
    }

    @Test
    public void test15140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15140");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear(10);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter14.withChronology(chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (-1), chronology27);
        boolean boolean29 = dateTimeZone24.isLocalDateTimeGap(localDateTime28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (-1), chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekyear();
        boolean boolean34 = dateTimeZone24.isLocalDateTimeGap(localDateTime32);
        long long36 = dateTimeZone24.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter14.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withPivotYear(2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter39.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-1), chronology43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        org.joda.time.DateTime dateTime48 = localDateTime44.toDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = dateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.secondOfDay();
        org.joda.time.DurationField durationField51 = chronology49.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter39.withChronology(chronology49);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeFormatter52.getZone();
        org.joda.time.DateTime dateTime54 = dateTime9.toDateTime(dateTimeZone53);
        org.joda.time.DateTime dateTime56 = dateTime54.minusHours(53);
        int int57 = dateTime56.getYearOfCentury();
        org.joda.time.DateTime dateTime59 = dateTime56.withCenturyOfEra((int) (short) 1);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3L + "'", long36 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 69 + "'", int57 == 69);
        org.junit.Assert.assertNotNull(dateTime59);
    }

    @Test
    public void test15141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15141");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        int int6 = localTime4.getMillisOfSecond();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 241 + "'", int6 == 241);
    }

    @Test
    public void test15142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15142");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime6.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int13 = mutableDateTime6.get(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType12, 92, 9);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap17);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendSecondOfMinute((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder20.appendTwoDigitWeekyear(1, false);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendLiteral('a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder23.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder26.appendWeekyear(130, 193);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
    }

    @Test
    public void test15143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15143");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfYear();
        org.joda.time.Chronology chronology12 = chronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        boolean boolean18 = dateTimeZone13.isLocalDateTimeGap(localDateTime17);
        long long20 = chronology12.set((org.joda.time.ReadablePartial) localDateTime17, (long) '#');
        org.joda.time.DateTimeField dateTimeField21 = chronology12.secondOfMinute();
        org.joda.time.DurationField durationField22 = chronology12.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology12);
        org.joda.time.Chronology chronology24 = dateTimeFormatter2.getChronology();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter2.getZone();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(chronology24);
        org.junit.Assert.assertNull(dateTimeZone25);
    }

    @Test
    public void test15144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15144");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        int int6 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9, 100);
        boolean boolean12 = mutableDateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.minuteOfHour();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.roundHalfFloor();
        mutableDateTime15.addHours((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime15.setSecondOfMinute((-2937600));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -2937600 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
    }

    @Test
    public void test15145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15145");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        int int8 = dateTimeZone4.getOffsetFromLocal((long) (byte) 10);
        long long10 = dateTimeZone4.nextTransition((long) 59);
        java.util.Locale locale14 = new java.util.Locale("", "1969-12-31T23:59:59.999Z", "1969-12-31T23:59:59.999Z");
        boolean boolean15 = dateTimeZone4.equals((java.lang.Object) "");
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(dateTimeZone16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DurationField durationField26 = chronology25.hours();
        org.joda.time.DateTimeField dateTimeField27 = chronology25.secondOfMinute();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.minusHours((-1));
        java.util.Locale locale34 = java.util.Locale.JAPANESE;
        java.lang.String str35 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime30, locale34);
        int int37 = dateTimeField27.getLeapAmount((long) (-1));
        int int38 = mutableDateTime17.get(dateTimeField27);
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (-1), chronology42);
        boolean boolean44 = dateTimeZone39.isLocalDateTimeGap(localDateTime43);
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.dayOfYear();
        org.joda.time.LocalDateTime localDateTime48 = property47.roundHalfEvenCopy();
        java.util.Locale locale49 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet50 = locale49.getUnicodeLocaleAttributes();
        java.util.Locale locale51 = java.util.Locale.GERMANY;
        java.lang.String str52 = locale49.getDisplayVariant(locale51);
        java.lang.String str53 = dateTimeField27.getAsText((org.joda.time.ReadablePartial) localDateTime48, locale49);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime48.withWeekOfWeekyear(6);
        boolean boolean56 = dateTimeZone4.isLocalDateTimeGap(localDateTime55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime55.minuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 3 + "'", int8 == 3);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 59L + "'", long10 == 59L);
        org.junit.Assert.assertEquals(locale14.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "0" + "'", str35, "0");
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 43 + "'", int38 == 43);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0" + "'", str53, "0");
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(property57);
    }

    @Test
    public void test15146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15146");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder4.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder6.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime12.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int19 = mutableDateTime12.get(dateTimeFieldType18);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder6.appendSignedDecimal(dateTimeFieldType18, 92, 9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder23.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatterBuilder28.toPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser30 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter29, dateTimeParser30);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder32.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder32.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatterBuilder36.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder36.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser41 = dateTimeFormatterBuilder36.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder6.append(dateTimePrinter29, dateTimeParser41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser41);
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime45.secondOfMinute();
        boolean boolean48 = mutableDateTime45.isBefore((long) 218);
        org.joda.time.Chronology chronology49 = mutableDateTime45.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = dateTimeFormatter43.withChronology(chronology49);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter43.withDefaultYear(218);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeFormatter52.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimePrinter29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimePrinter37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeParser41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeFormatter50);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNull(dateTimeZone53);
    }

    @Test
    public void test15147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15147");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder4.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder4.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder9.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime15.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime15.add(readableDuration18, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int22 = mutableDateTime15.get(dateTimeFieldType21);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder9.appendSignedDecimal(dateTimeFieldType21, 92, 9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder26.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatterBuilder31.toPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser33 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser33);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder35.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = dateTimeFormatterBuilder39.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder39.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatterBuilder39.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder9.append(dateTimePrinter32, dateTimeParser44);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder4.appendOptional(dateTimeParser44);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder46.appendWeekOfWeekyear(49);
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (-1), chronology52);
        boolean boolean54 = dateTimeZone49.isLocalDateTimeGap(localDateTime53);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime53.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property57 = localDateTime53.dayOfYear();
        org.joda.time.LocalDateTime localDateTime59 = localDateTime53.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration60 = null;
        org.joda.time.LocalDateTime localDateTime62 = localDateTime53.withDurationAdded(readableDuration60, (int) 'u');
        org.joda.time.LocalDateTime localDateTime64 = localDateTime62.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.weekyear();
        int int66 = localDateTime62.indexOf(dateTimeFieldType65);
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType65.getDurationType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder70 = dateTimeFormatterBuilder48.appendSignedDecimal(dateTimeFieldType65, 3, 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder72 = dateTimeFormatterBuilder70.appendSecondOfDay(28);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatterBuilder72.toFormatter();
        java.lang.Appendable appendable74 = null;
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) (-1), chronology76);
        org.joda.time.LocalDateTime localDateTime79 = localDateTime77.minusSeconds((int) (byte) 0);
        java.lang.String str80 = localDateTime77.toString();
        org.joda.time.LocalDateTime localDateTime82 = localDateTime77.plusMonths(292278993);
        org.joda.time.LocalDateTime.Property property83 = localDateTime77.dayOfWeek();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter73.printTo(appendable74, (org.joda.time.ReadablePartial) localDateTime77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimePrinter32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimePrinter40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(dateTimeParser44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + (-1) + "'", int66 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder70);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder72);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(localDateTime79);
// flaky:         org.junit.Assert.assertEquals("'" + str80 + "' != '" + "1970-01-01T00:00:00.002" + "'", str80, "1970-01-01T00:00:00.002");
        org.junit.Assert.assertNotNull(localDateTime82);
        org.junit.Assert.assertNotNull(property83);
    }

    @Test
    public void test15148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15148");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        long long27 = dateTimeZone12.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime();
        mutableDateTime28.add((long) 100);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime28.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDateTime34.toDateTime(dateTimeZone36);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.plus((long) 100);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.plus(readableDuration43);
        int int45 = dateTime44.getDayOfMonth();
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.lang.String str50 = locale47.getDisplayVariant(locale49);
        java.lang.String str51 = dateTime44.toString("365", locale49);
        org.joda.time.DateTime dateTime53 = dateTime44.plusMonths(1969);
        mutableDateTime28.setMillis((org.joda.time.ReadableInstant) dateTime44);
        int int55 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone12);
        long long58 = dateTimeZone12.nextTransition((long) 69140217);
        int int60 = dateTimeZone12.getOffsetFromLocal(1900800000L);
        org.joda.time.MutableDateTime mutableDateTime61 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str39, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "365" + "'", str51, "365");
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 69140217L + "'", long58 == 69140217L);
// flaky:         org.junit.Assert.assertTrue("'" + int60 + "' != '" + 3 + "'", int60 == 3);
        org.junit.Assert.assertNotNull(mutableDateTime61);
    }

    @Test
    public void test15149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15149");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        boolean boolean10 = dateTimeField8.isLeap(100L);
        mutableDateTime1.setRounding(dateTimeField8);
        org.joda.time.ReadableDuration readableDuration12 = null;
        mutableDateTime1.add(readableDuration12, (int) 'u');
        mutableDateTime1.addMillis(19);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime1.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime19 = property17.add((long) (byte) 10);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTime dateTime28 = localDateTime24.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DurationField durationField30 = chronology29.hours();
        org.joda.time.DateTimeField dateTimeField31 = chronology29.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.weekyear();
        java.util.Locale locale33 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket34 = new org.joda.time.format.DateTimeParserBucket(86399999L, chronology29, locale33);
        java.util.Locale locale35 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket36 = new org.joda.time.format.DateTimeParserBucket((-62135596799991L), chronology29, locale35);
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        long long40 = dateTimeZone38.previousTransition((long) 1);
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) 100, dateTimeZone38);
        int int42 = localDateTime41.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property43 = localDateTime41.yearOfEra();
        org.joda.time.LocalDateTime localDateTime44 = property43.roundHalfFloorCopy();
        java.util.Locale locale46 = new java.util.Locale("hi!");
        java.lang.String str47 = locale46.getScript();
        java.lang.String str48 = locale46.getDisplayLanguage();
        java.lang.String str49 = locale46.getDisplayCountry();
        java.lang.String str50 = locale46.getVariant();
        java.lang.String str51 = property43.getAsShortText(locale46);
        java.util.Locale locale53 = java.util.Locale.forLanguageTag("22:42:00.000");
        int int54 = property43.getMaximumShortTextLength(locale53);
        java.lang.String str55 = locale35.getDisplayScript(locale53);
        int int56 = property17.getMaximumShortTextLength(locale53);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime19);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 1 + "'", int42 == 1);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertEquals(locale46.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "hi!" + "'", str48, "hi!");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970" + "'", str51, "1970");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 9 + "'", int54 == 9);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
    }

    @Test
    public void test15150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15150");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology11.days();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1970, chronology11);
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = property18.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime20 = property18.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:01.973" + "'", str17, "1970-01-01T00:00:01.973");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime20);
    }

    @Test
    public void test15151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15151");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime13.minusHours(20);
        boolean boolean16 = dateTime15.isAfterNow();
        org.joda.time.DateTime.Property property17 = dateTime15.hourOfDay();
        long long18 = property17.remainder();
        org.joda.time.DateTime dateTime20 = property17.addToCopy(18581);
        org.joda.time.DateTime dateTime22 = property17.addWrapFieldToCopy(1996);
        org.joda.time.DateTime dateTime24 = property17.addToCopy(445);
        int int25 = dateTime24.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(property17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 2023531L + "'", long18 == 2023531L);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1970 + "'", int25 == 1970);
    }

    @Test
    public void test15152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15152");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatterBuilder7.toParser();
        int int9 = dateTimeParser8.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder4.appendOptional(dateTimeParser8);
        boolean boolean11 = dateTimeFormatterBuilder4.canBuildParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder4.appendLiteral("2922789");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = dateTimeFormatterBuilder4.toFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder4.appendPattern("86390003");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeParser8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatter14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
    }

    @Test
    public void test15153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15153");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.plus((long) 100);
        org.joda.time.DateTime.Property property11 = dateTime7.millisOfSecond();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) (short) 1, chronology13);
        org.joda.time.DateTime dateTime17 = dateTime14.withDurationAdded((long) (byte) 0, 292278993);
        int int18 = dateTime7.compareTo((org.joda.time.ReadableInstant) dateTime17);
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = null;
        org.joda.time.format.DateTimeParser dateTimeParser20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter19, dateTimeParser20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTime dateTime28 = localDateTime24.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter21.withChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.clockhourOfHalfday();
        org.joda.time.DurationField durationField33 = chronology29.days();
        org.joda.time.DateTime dateTime34 = dateTime17.toDateTime(chronology29);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime(52077600L, chronology29);
        org.joda.time.DateTimeField dateTimeField36 = chronology29.halfdayOfDay();
        java.lang.String str38 = dateTimeField36.getAsText((long) 17);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str8, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "AM" + "'", str38, "AM");
    }

    @Test
    public void test15154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15154");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime11 = dateTime9.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime11.secondOfMinute();
        org.joda.time.DateTime dateTime14 = dateTime11.minusWeeks(365);
        boolean boolean15 = dateTime11.isEqualNow();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test15155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15155");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.plus((long) 100);
        org.joda.time.DateTime.Property property24 = dateTime20.millisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 1, chronology26);
        org.joda.time.DateTime dateTime30 = dateTime27.withDurationAdded((long) (byte) 0, 292278993);
        int int31 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime34 = dateTime30.withFieldAdded(durationFieldType32, 1969);
        org.joda.time.DateTime dateTime36 = dateTime11.withFieldAdded(durationFieldType32, (int) '#');
        org.joda.time.DateTime.Property property37 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = dateTime11.minusYears((int) '4');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.withDurationAdded(readableDuration40, 20);
        org.joda.time.DateTime.Property property43 = dateTime39.hourOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = localDateTime46.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.dayOfYear();
        org.joda.time.Chronology chronology53 = chronology51.withUTC();
        org.joda.time.DurationField durationField54 = chronology51.hours();
        long long57 = durationField54.getValueAsLong((long) (byte) 100, (long) 19);
        org.joda.time.DurationFieldType durationFieldType58 = durationField54.getType();
        boolean boolean59 = property43.equals((java.lang.Object) durationField54);
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) (-1), chronology61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone65 = dateTimeZone64.toTimeZone();
        org.joda.time.DateTime dateTime66 = localDateTime62.toDateTime(dateTimeZone64);
        java.lang.String str67 = dateTime66.toString();
        org.joda.time.DateTime dateTime69 = dateTime66.plus((long) 100);
        org.joda.time.DateTime.Property property70 = dateTime69.yearOfCentury();
        java.util.Locale locale71 = java.util.Locale.GERMANY;
        java.util.Calendar calendar72 = dateTime69.toCalendar(locale71);
        int int73 = dateTime69.getMinuteOfHour();
        org.joda.time.DateTime dateTime75 = dateTime69.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime77 = dateTime75.withMillis((-1L));
        org.joda.time.DateTime dateTime79 = dateTime75.minusDays(18035000);
        long long80 = property43.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime75);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str21, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str67, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar72);
// flaky:         org.junit.Assert.assertEquals(calendar72.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 0 + "'", int73 == 0);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 15787224L + "'", long80 == 15787224L);
    }

    @Test
    public void test15156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15156");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DurationField durationField9 = chronology8.hours();
        org.joda.time.DateTimeField dateTimeField10 = chronology8.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField11 = chronology8.weekyear();
        java.util.Locale locale12 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket13 = new org.joda.time.format.DateTimeParserBucket(86399999L, chronology8, locale12);
        dateTimeParserBucket13.setOffset(738207);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        org.joda.time.DurationField durationField28 = chronology25.minutes();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 292278993, chronology25);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 'a', chronology25);
        org.joda.time.DateTimeField dateTimeField31 = chronology25.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.DateTimeField dateTimeField33 = chronology25.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField34 = chronology25.era();
        org.joda.time.DateTimeField dateTimeField35 = chronology25.weekyearOfCentury();
        boolean boolean36 = dateTimeParserBucket13.restoreState((java.lang.Object) chronology25);
        long long39 = dateTimeParserBucket13.computeMillis(false, "1969-09-21T07:28:17.066+00:00:00.003");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 85661792L + "'", long39 == 85661792L);
    }

    @Test
    public void test15157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15157");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        java.lang.String str7 = localTime6.toString();
        org.joda.time.LocalTime localTime9 = localTime6.minusMillis(0);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType11 = org.joda.time.DurationFieldType.hours();
        org.joda.time.LocalTime localTime13 = localTime9.withFieldAdded(durationFieldType11, 92);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalTime localTime15 = localTime9.minus(readablePeriod14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime18.plusYears(0);
        org.joda.time.DateTimeFieldType dateTimeFieldType23 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType24 = dateTimeFieldType23.getDurationType();
        boolean boolean25 = localDateTime18.isSupported(dateTimeFieldType23);
        // The following exception was thrown during execution in test generation
        try {
            int int26 = localTime15.get(dateTimeFieldType23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'monthOfYear' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.003" + "'", str7, "23:00:00.003");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(durationFieldType11);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType23);
        org.junit.Assert.assertNotNull(durationFieldType24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test15158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15158");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withMillisOfDay(5);
        org.joda.time.LocalDateTime.Property property10 = localDateTime4.monthOfYear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime4.withYear(5);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test15159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15159");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        int int5 = localTime1.size();
        org.joda.time.LocalTime localTime7 = localTime1.minusMinutes(31);
        org.joda.time.LocalTime.Property property8 = localTime1.millisOfSecond();
        org.joda.time.LocalTime.Property property9 = localTime1.millisOfDay();
        org.joda.time.LocalTime localTime11 = localTime1.withMillisOfDay(86100);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
    }

    @Test
    public void test15160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15160");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear(23);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusHours(92);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.minusYears(38);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.dayOfYear();
        int int19 = localDateTime15.getWeekyear();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.plus((long) 100);
        org.joda.time.DateTime.Property property30 = dateTime29.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration31 = null;
        org.joda.time.DateTime dateTime32 = dateTime29.plus(readableDuration31);
        int int33 = dateTime32.getDayOfMonth();
        java.util.Locale locale35 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet36 = locale35.getUnicodeLocaleAttributes();
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.lang.String str38 = locale35.getDisplayVariant(locale37);
        java.lang.String str39 = dateTime32.toString("365", locale37);
        org.joda.time.DateTime dateTime41 = dateTime32.plusMonths(1969);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime43.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration46 = null;
        mutableDateTime43.add(readableDuration46, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime43.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime50 = mutableDateTime43.copy();
        org.joda.time.ReadablePeriod readablePeriod51 = null;
        mutableDateTime50.add(readablePeriod51, (int) (short) 0);
        boolean boolean54 = dateTime41.isEqual((org.joda.time.ReadableInstant) mutableDateTime50);
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        mutableDateTime50.add(readablePeriod55);
        org.joda.time.MutableDateTime.Property property57 = mutableDateTime50.secondOfMinute();
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime58.minusMonths(2);
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) (-1), chronology64);
        boolean boolean66 = dateTimeZone61.isLocalDateTimeGap(localDateTime65);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime65.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property69 = localDateTime65.dayOfYear();
        org.joda.time.LocalDateTime localDateTime71 = localDateTime65.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration72 = null;
        org.joda.time.LocalDateTime localDateTime74 = localDateTime65.withDurationAdded(readableDuration72, (int) 'u');
        org.joda.time.LocalDateTime localDateTime76 = localDateTime74.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType77 = org.joda.time.DateTimeFieldType.weekyear();
        int int78 = localDateTime74.indexOf(dateTimeFieldType77);
        org.joda.time.LocalDateTime localDateTime80 = localDateTime58.withField(dateTimeFieldType77, 31);
        mutableDateTime50.set(dateTimeFieldType77, 100);
        int int83 = localDateTime15.indexOf(dateTimeFieldType77);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1922 + "'", int19 == 1922);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str27, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "365" + "'", str39, "365");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(mutableDateTime50);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDateTime71);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertNotNull(dateTimeFieldType77);
        org.junit.Assert.assertTrue("'" + int78 + "' != '" + (-1) + "'", int78 == (-1));
        org.junit.Assert.assertNotNull(localDateTime80);
        org.junit.Assert.assertTrue("'" + int83 + "' != '" + (-1) + "'", int83 == (-1));
    }

    @Test
    public void test15161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15161");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendSecondOfDay(738207);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder5.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = dateTimeFormatterBuilder9.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder9.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser14 = dateTimeFormatterBuilder9.toParser();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime22 = localDateTime18.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DurationField durationField24 = chronology23.hours();
        org.joda.time.DateTimeField dateTimeField25 = chronology23.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekyear();
        java.util.Locale locale27 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket28 = new org.joda.time.format.DateTimeParserBucket(86399999L, chronology23, locale27);
        int int31 = dateTimeParser14.parseInto(dateTimeParserBucket28, "10", 9);
        int int32 = dateTimeParser14.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder33 = dateTimeFormatterBuilder0.append(dateTimeParser14);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (-1), chronology37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime42 = localDateTime38.toDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.hours();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField46 = chronology43.weekyear();
        java.util.Locale locale47 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket48 = new org.joda.time.format.DateTimeParserBucket(86399999L, chronology43, locale47);
        java.util.Locale locale49 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket50 = new org.joda.time.format.DateTimeParserBucket((-62135596799991L), chronology43, locale49);
        long long53 = dateTimeParserBucket50.computeMillis(true, "dayOfYear");
        org.joda.time.DateTimeZone dateTimeZone54 = dateTimeParserBucket50.getZone();
        int int57 = dateTimeParser14.parseInto(dateTimeParserBucket50, "java.io.IOException: java.io.IOException: hi!", 64799999);
        org.joda.time.DateTimeZone dateTimeZone58 = dateTimeParserBucket50.getZone();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimePrinter10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeParser14);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-10) + "'", int31 == (-10));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 23 + "'", int32 == 23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder33);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertTrue("'" + long53 + "' != '" + (-62135596799994L) + "'", long53 == (-62135596799994L));
        org.junit.Assert.assertNotNull(dateTimeZone54);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + (-64800000) + "'", int57 == (-64800000));
        org.junit.Assert.assertNotNull(dateTimeZone58);
    }

    @Test
    public void test15162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15162");
        org.joda.time.LocalTime localTime0 = new org.joda.time.LocalTime();
        org.joda.time.LocalTime localTime2 = localTime0.minusHours(292278993);
        org.joda.time.LocalTime localTime4 = localTime0.minusMinutes(49);
        org.joda.time.LocalTime.Property property5 = localTime0.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.junit.Assert.assertNotNull(localTime2);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
    }

    @Test
    public void test15163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15163");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra(10);
        org.joda.time.LocalDate.Property property8 = localDate5.weekyear();
        org.joda.time.LocalDate localDate9 = property8.roundCeilingCopy();
        org.joda.time.LocalDate.Property property10 = localDate9.weekOfWeekyear();
        org.joda.time.LocalDate localDate11 = property10.getLocalDate();
        org.joda.time.LocalDate.Property property12 = localDate11.centuryOfEra();
        org.joda.time.LocalDate.Property property13 = localDate11.yearOfEra();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test15164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15164");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes(1);
        org.joda.time.LocalTime localTime5 = localTime1.minusMinutes(31);
        org.joda.time.Chronology chronology6 = localTime1.getChronology();
        org.joda.time.DurationField durationField7 = chronology6.eras();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime11 = localTime9.minusSeconds((int) (short) 10);
        int int12 = localTime9.getMinuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime14 = property13.withMaximumValue();
        boolean boolean15 = property13.isLeap();
        org.joda.time.LocalTime localTime16 = property13.roundFloorCopy();
        org.joda.time.LocalTime localTime17 = property13.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property18 = localTime17.secondOfMinute();
        org.joda.time.LocalTime localTime20 = property18.addCopy(284);
        org.joda.time.LocalTime.Property property21 = localTime20.millisOfDay();
        int[] intArray23 = chronology6.get((org.joda.time.ReadablePartial) localTime20, (-686465280000000000L));
        org.joda.time.DateTimeZone dateTimeZone24 = chronology6.getZone();
        org.joda.time.DateTimeField dateTimeField25 = chronology6.secondOfMinute();
        org.joda.time.LocalTime localTime27 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime29 = localTime27.minusSeconds((int) (short) 10);
        int int30 = localTime27.getMinuteOfHour();
        org.joda.time.LocalTime.Property property31 = localTime27.hourOfDay();
        org.joda.time.LocalTime localTime32 = property31.withMaximumValue();
        boolean boolean33 = property31.isLeap();
        org.joda.time.LocalTime localTime34 = property31.roundFloorCopy();
        org.joda.time.LocalTime.Property property35 = localTime34.minuteOfHour();
        org.joda.time.tz.NameProvider nameProvider36 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale37 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str40 = nameProvider36.getShortName(locale37, "zh-TW", "+00:00:00.003");
        boolean boolean41 = property35.equals((java.lang.Object) nameProvider36);
        org.joda.time.LocalTime localTime42 = property35.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime44 = localTime42.plusHours(0);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalTime localTime46 = localTime44.plus(readablePeriod45);
        int int47 = dateTimeField25.getMaximumValue((org.joda.time.ReadablePartial) localTime46);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertNotNull(chronology6);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(intArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray23), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localTime32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(nameProvider36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "fr_CA");
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(localTime44);
        org.junit.Assert.assertNotNull(localTime46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 59 + "'", int47 == 59);
    }

    @Test
    public void test15165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15165");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfWeek();
        java.lang.String str7 = localDate0.toString("23:00:00.000");
        org.joda.time.LocalDate localDate9 = localDate0.minusDays(1969);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfMonth((int) (short) 10);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTime dateTime13 = localDate9.toDateTime(localTime12);
        org.joda.time.DateTime.Property property14 = dateTime13.weekyear();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        long long21 = dateTimeZone16.convertLocalToUTC(10L, false, (long) 3);
        java.lang.String str23 = dateTimeZone16.getName((long) 2022);
        long long26 = dateTimeZone16.adjustOffset((-686465280000000000L), false);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((java.lang.Object) property15, dateTimeZone16);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: org.joda.time.DateTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.000" + "'", str7, "23:00:00.000");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 7L + "'", long21 == 7L);
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "+00:00:00.003" + "'", str23, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-686465280000000000L) + "'", long26 == (-686465280000000000L));
    }

    @Test
    public void test15166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15166");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = mutableDateTime1.toGregorianCalendar();
        int int3 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = null;
        org.joda.time.MutableDateTime mutableDateTime5 = mutableDateTime1.toMutableDateTime(dateTimeZone4);
        org.joda.time.MutableDateTime mutableDateTime7 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime7.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration10 = null;
        mutableDateTime7.add(readableDuration10, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime7.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime14 = mutableDateTime7.copy();
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime14.era();
        org.joda.time.MutableDateTime mutableDateTime16 = property15.roundHalfFloor();
        int int17 = mutableDateTime16.getMinuteOfHour();
        int int18 = mutableDateTime16.getSecondOfDay();
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) mutableDateTime16);
        org.joda.time.DateTimeFieldType dateTimeFieldType20 = org.joda.time.DateTimeFieldType.minuteOfDay();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.set(dateTimeFieldType20, 82860016);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82860016 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 8 + "'", int3 == 8);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType20);
    }

    @Test
    public void test15167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15167");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        java.lang.String str9 = dateTime8.toString();
        org.joda.time.ReadableDuration readableDuration10 = null;
        org.joda.time.DateTime dateTime11 = dateTime8.plus(readableDuration10);
        org.joda.time.DateTime dateTime13 = dateTime8.minusWeeks(10);
        boolean boolean15 = dateTime8.isBefore((long) (-1));
        int int16 = dateTime8.getYearOfEra();
        org.joda.time.DateTime dateTime18 = dateTime8.withYear((int) (byte) 0);
        org.joda.time.DateTime dateTime19 = dateTime8.toDateTimeISO();
        org.joda.time.DateTime dateTime21 = dateTime8.withYear((int) (short) 0);
        org.joda.time.DateTime dateTime23 = dateTime8.minusMillis(59);
        org.joda.time.format.DateTimePrinter dateTimePrinter24 = null;
        org.joda.time.format.DateTimeParser dateTimeParser25 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter24, dateTimeParser25);
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTime dateTime33 = localDateTime29.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = dateTimeFormatter26.withChronology(chronology34);
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (-1), chronology39);
        boolean boolean41 = dateTimeZone36.isLocalDateTimeGap(localDateTime40);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-1), chronology43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.weekyear();
        boolean boolean46 = dateTimeZone36.isLocalDateTimeGap(localDateTime44);
        long long48 = dateTimeZone36.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter26.withZone(dateTimeZone36);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter49.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.DateTimeZone dateTimeZone52 = dateTimeFormatter49.getZone();
        org.joda.time.DateTime dateTime53 = dateTime8.toDateTime(dateTimeZone52);
        mutableDateTime1.setDate((org.joda.time.ReadableInstant) dateTime8);
        org.joda.time.DateTime.Property property55 = dateTime8.year();
        org.joda.time.DateTime dateTime57 = property55.addWrapFieldToCopy(27);
        org.joda.time.DateTime dateTime58 = property55.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str9, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1970 + "'", int16 == 1970);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeFormatter35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 3L + "'", long48 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime58);
    }

    @Test
    public void test15168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15168");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendSecondOfDay(738207);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder0.appendFractionOfMinute(31, 32);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder6.appendTimeZoneId();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendFraction(dateTimeFieldType8, 28, (-4));
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = localDateTime14.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.DurationField durationField20 = chronology19.hours();
        org.joda.time.DateTimeField dateTimeField21 = chronology19.secondOfMinute();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.weekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.minusHours((-1));
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = dateTimeField21.getAsText((org.joda.time.ReadablePartial) localDateTime24, locale28);
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        boolean boolean35 = dateTimeZone30.isLocalDateTimeGap(localDateTime34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime34.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property38 = localDateTime34.dayOfYear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime34.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime34.withDurationAdded(readableDuration41, (int) 'u');
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType46 = org.joda.time.DateTimeFieldType.weekyear();
        int int47 = localDateTime43.indexOf(dateTimeFieldType46);
        int int48 = localDateTime24.get(dateTimeFieldType46);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder11.appendFixedSignedDecimal(dateTimeFieldType46, 59);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder11.appendPattern("");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder11.appendMillisOfDay(88);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "0" + "'", str29, "0");
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(dateTimeFieldType46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-1) + "'", int47 == (-1));
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1970 + "'", int48 == 1970);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
    }

    @Test
    public void test15169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15169");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.addWrapField((-1));
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        java.util.GregorianCalendar gregorianCalendar7 = mutableDateTime6.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        java.util.GregorianCalendar gregorianCalendar10 = mutableDateTime9.toGregorianCalendar();
        boolean boolean11 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) mutableDateTime9);
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime4.dayOfWeek();
        mutableDateTime4.setSecondOfDay(48613);
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime4.monthOfYear();
        mutableDateTime4.setYear(0);
        boolean boolean19 = mutableDateTime4.isEqualNow();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test15170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15170");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.plus((long) 100);
        org.joda.time.DateTime.Property property24 = dateTime20.millisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 1, chronology26);
        org.joda.time.DateTime dateTime30 = dateTime27.withDurationAdded((long) (byte) 0, 292278993);
        int int31 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime34 = dateTime30.withFieldAdded(durationFieldType32, 1969);
        org.joda.time.DateTime dateTime36 = dateTime11.withFieldAdded(durationFieldType32, (int) '#');
        org.joda.time.DateTime.Property property37 = dateTime11.weekOfWeekyear();
        org.joda.time.DateTime dateTime39 = dateTime11.minusYears((int) '4');
        org.joda.time.ReadableDuration readableDuration40 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.withDurationAdded(readableDuration40, 20);
        org.joda.time.DateTime.Property property43 = dateTime39.hourOfDay();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = localDateTime46.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.DateTimeField dateTimeField52 = chronology51.dayOfYear();
        org.joda.time.Chronology chronology53 = chronology51.withUTC();
        org.joda.time.DurationField durationField54 = chronology51.hours();
        long long57 = durationField54.getValueAsLong((long) (byte) 100, (long) 19);
        org.joda.time.DurationFieldType durationFieldType58 = durationField54.getType();
        boolean boolean59 = property43.equals((java.lang.Object) durationField54);
        java.lang.String str60 = property43.getAsString();
        org.joda.time.DateTime dateTime61 = property43.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime63 = dateTime61.plusYears(364);
        org.joda.time.DateTime.Property property64 = dateTime63.monthOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str21, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeField52);
        org.junit.Assert.assertNotNull(chronology53);
        org.junit.Assert.assertNotNull(durationField54);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(durationFieldType58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "0" + "'", str60, "0");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
    }

    @Test
    public void test15171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15171");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder4.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder4.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder9.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime15.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime15.add(readableDuration18, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int22 = mutableDateTime15.get(dateTimeFieldType21);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder9.appendSignedDecimal(dateTimeFieldType21, 92, 9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder26.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatterBuilder31.toPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser33 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser33);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder35.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = dateTimeFormatterBuilder39.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder39.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatterBuilder39.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder9.append(dateTimePrinter32, dateTimeParser44);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder4.appendOptional(dateTimeParser44);
        boolean boolean47 = dateTimeFormatterBuilder46.canBuildFormatter();
        org.joda.time.format.DateTimePrinter dateTimePrinter48 = null;
        org.joda.time.format.DateTimeParser dateTimeParser49 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter48, dateTimeParser49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (-1), chronology52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone56 = dateTimeZone55.toTimeZone();
        org.joda.time.DateTime dateTime57 = localDateTime53.toDateTime(dateTimeZone55);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfYear();
        org.joda.time.Chronology chronology60 = chronology58.withUTC();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) (-1), chronology64);
        boolean boolean66 = dateTimeZone61.isLocalDateTimeGap(localDateTime65);
        long long68 = chronology60.set((org.joda.time.ReadablePartial) localDateTime65, (long) '#');
        org.joda.time.DateTimeField dateTimeField69 = chronology60.secondOfMinute();
        org.joda.time.DurationField durationField70 = chronology60.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter50.withChronology(chronology60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter50.withPivotYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter50.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter50.withPivotYear((java.lang.Integer) 3);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder77 = dateTimeFormatterBuilder46.append(dateTimeFormatter50);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder79 = dateTimeFormatterBuilder46.appendMillisOfSecond(762261);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder80 = dateTimeFormatterBuilder79.appendTimeZoneShortName();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimePrinter32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimePrinter40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(dateTimeParser44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 2L + "'", long68 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder77);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder79);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder80);
    }

    @Test
    public void test15172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15172");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(31);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.minus(readablePeriod3);
        org.joda.time.LocalDate localDate6 = localDate4.plusDays(26);
        int int7 = localDate6.getDayOfMonth();
        org.joda.time.LocalDate localDate9 = localDate6.minusDays(3);
        int int10 = localDate9.size();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 18 + "'", int7 == 18);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test15173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15173");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatterBuilder5.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendMillisOfSecond(292278993);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendTimeZoneName(strMap9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder8.appendSecondOfMinute((int) 'x');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder12.appendTwoDigitWeekyear(56016, true);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.plusSeconds(18);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.plusMillis(32);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = localDateTime30.toDateTime(dateTimeZone32);
        org.joda.time.Chronology chronology35 = dateTime34.getChronology();
        org.joda.time.DateTimeField dateTimeField36 = chronology35.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology35);
        org.joda.time.DateTimeField dateTimeField38 = dateTimeFieldType27.getField(chronology35);
        boolean boolean39 = localDateTime26.isSupported(dateTimeFieldType27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder15.appendFixedSignedDecimal(dateTimeFieldType27, 72740214);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder15.appendMonthOfYearShortText();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(chronology35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
    }

    @Test
    public void test15174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15174");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        long long27 = dateTimeZone12.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime();
        mutableDateTime28.add((long) 100);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime28.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDateTime34.toDateTime(dateTimeZone36);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.plus((long) 100);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.plus(readableDuration43);
        int int45 = dateTime44.getDayOfMonth();
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.lang.String str50 = locale47.getDisplayVariant(locale49);
        java.lang.String str51 = dateTime44.toString("365", locale49);
        org.joda.time.DateTime dateTime53 = dateTime44.plusMonths(1969);
        mutableDateTime28.setMillis((org.joda.time.ReadableInstant) dateTime44);
        int int55 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) mutableDateTime28);
        mutableDateTime28.setMillis(0L);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime28.setMinuteOfDay(36816432);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 36816432 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str39, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "365" + "'", str51, "365");
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
    }

    @Test
    public void test15175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15175");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property3 = localDate1.property(dateTimeFieldType2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        boolean boolean5 = localDate1.isSupported(dateTimeFieldType4);
        org.joda.time.LocalDate.Property property6 = localDate1.dayOfWeek();
        java.lang.String str8 = localDate1.toString("23:00:00.000");
        org.joda.time.LocalDate localDate10 = localDate1.minusDays(1969);
        org.joda.time.Chronology chronology11 = localDate1.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.hourOfDay();
        org.joda.time.DurationField durationField13 = chronology11.eras();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale14.toLanguageTag();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale14.getDisplayScript(locale16);
        java.lang.String str18 = locale16.getDisplayName();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket(3692163384000L, chronology11, locale16);
        int int20 = dateTimeParserBucket19.getOffset();
        org.joda.time.Chronology chronology21 = dateTimeParserBucket19.getChronology();
        dateTimeParserBucket19.setPivotYear((java.lang.Integer) 91295);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "23:00:00.000" + "'", str8, "23:00:00.000");
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "zh-TW" + "'", str15, "zh-TW");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "German (Germany)" + "'", str18, "German (Germany)");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(chronology21);
    }

    @Test
    public void test15176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15176");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = dateTimeZone1.getName((long) 5, locale4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime8 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime7.withHourOfDay(16);
        org.joda.time.DateTime dateTime12 = dateTime7.plusYears((int) (byte) 1);
        org.joda.time.DateTime.Property property13 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime14 = property13.roundCeilingCopy();
        org.joda.time.DateTime dateTime15 = property13.withMaximumValue();
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime17 = dateTime15.minus(readablePeriod16);
        org.joda.time.YearMonthDay yearMonthDay18 = dateTime15.toYearMonthDay();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.003" + "'", str6, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(yearMonthDay18);
    }

    @Test
    public void test15177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15177");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setWeekyear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundCeiling();
        mutableDateTime6.add((long) 42);
        mutableDateTime6.addWeeks(575);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime6.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime12 = mutableDateTime6.copy();
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.monthOfYear();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test15178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15178");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfEvenCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.dayOfYear();
        org.joda.time.LocalDate localDate11 = localDate8.minusWeeks((-806));
        org.joda.time.LocalDate.Property property12 = localDate8.weekOfWeekyear();
        org.joda.time.LocalDate localDate14 = property12.addToCopy(999);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDate14);
    }

    @Test
    public void test15179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15179");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property7.addToCopy((int) ' ');
        org.joda.time.LocalDate localDate11 = property7.withMinimumValue();
        org.joda.time.DateTimeField dateTimeField12 = property7.getField();
        org.joda.time.LocalDate localDate13 = property7.roundFloorCopy();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test15180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15180");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime7 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime9 = property3.addToCopy((long) 1999);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears(791);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
    }

    @Test
    public void test15181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15181");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.Instant instant7 = mutableDateTime1.toInstant();
        int int8 = mutableDateTime1.getHourOfDay();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundFloor();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (-1), chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime17 = localDateTime13.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.dayOfYear();
        org.joda.time.Chronology chronology20 = chronology18.withUTC();
        mutableDateTime10.setChronology(chronology20);
        org.junit.Assert.assertNotNull(instant7);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(chronology20);
    }

    @Test
    public void test15182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15182");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime6.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int13 = mutableDateTime6.get(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType12, 92, 9);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap17);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder18.appendFractionOfHour(1969, (int) (byte) 0);
        boolean boolean22 = dateTimeFormatterBuilder21.canBuildFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder21.appendFractionOfMinute((int) '4', 82800002);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder21.appendCenturyOfEra(17, 625);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
    }

    @Test
    public void test15183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15183");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        boolean boolean13 = dateTime6.isBefore((long) (-1));
        int int14 = dateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime16 = dateTime6.withYear((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime6.withDayOfYear((int) '#');
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DurationField durationField23 = property22.getLeapDurationField();
        org.joda.time.Interval interval24 = property22.toInterval();
        long long25 = property22.remainder();
        java.lang.String str26 = property22.toString();
        org.joda.time.LocalDateTime localDateTime28 = property22.setCopy((int) (short) 1);
        int int29 = localDateTime28.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.plusDays((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getRangeDurationType();
        int int34 = localDateTime28.get(dateTimeFieldType32);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (-1), chronology36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        org.joda.time.DateTime dateTime41 = localDateTime37.toDateTime(dateTimeZone39);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfDay();
        org.joda.time.DurationField durationField44 = chronology42.minutes();
        org.joda.time.DateTimeField dateTimeField45 = chronology42.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField46 = dateTimeFieldType32.getField(chronology42);
        org.joda.time.DateTimeZone dateTimeZone47 = chronology42.getZone();
        org.joda.time.DateTimeField dateTimeField48 = chronology42.halfdayOfDay();
        org.joda.time.DateTimeField dateTimeField49 = chronology42.weekyearOfCentury();
        org.joda.time.DateTime dateTime50 = dateTime18.withChronology(chronology42);
        org.joda.time.ReadableDuration readableDuration51 = null;
        org.joda.time.DateTime dateTime52 = dateTime50.plus(readableDuration51);
        org.joda.time.DateTime dateTime54 = dateTime50.minusMillis(18);
        int int55 = dateTime50.getWeekOfWeekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNull(durationField23);
        org.junit.Assert.assertNotNull(interval24);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 2L + "'", long25 == 2L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Property[dayOfYear]" + "'", str26, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 70 + "'", int34 == 70);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 6 + "'", int55 == 6);
    }

    @Test
    public void test15184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15184");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate7 = localDate3.minusYears((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate7.withMonthOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate14 = localDate12.minusMonths((int) (byte) -1);
        org.joda.time.LocalDate.Property property15 = localDate14.weekOfWeekyear();
        org.joda.time.LocalDate localDate16 = property15.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate17 = property15.roundFloorCopy();
        org.joda.time.LocalDate localDate19 = property15.addWrapFieldToCopy(640);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(localDate19);
    }

    @Test
    public void test15185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15185");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        org.joda.time.LocalDateTime localDateTime7 = property3.withMaximumValue();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (-1), chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTime dateTime14 = localDateTime10.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime17 = org.joda.time.MutableDateTime.now(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = chronology15.millisOfSecond();
        java.lang.String str19 = chronology15.toString();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.weekyearOfCentury();
        boolean boolean21 = property3.equals((java.lang.Object) chronology15);
        org.joda.time.Chronology chronology22 = chronology15.withUTC();
        org.joda.time.DateTimeField dateTimeField23 = chronology15.secondOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(mutableDateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str19, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
    }

    @Test
    public void test15186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15186");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        org.joda.time.DateTime.Property property3 = dateTime1.minuteOfDay();
        int int4 = dateTime1.getYear();
        org.joda.time.ReadableDuration readableDuration5 = null;
        org.joda.time.DateTime dateTime6 = dateTime1.minus(readableDuration5);
        org.joda.time.ReadableDuration readableDuration7 = null;
        org.joda.time.DateTime dateTime8 = dateTime6.plus(readableDuration7);
        org.joda.time.DateTime.Property property9 = dateTime6.minuteOfHour();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = dateTimeFormatterBuilder15.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder15.appendSecondOfMinute(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder18.appendFixedDecimal(dateTimeFieldType19, (int) ' ');
        boolean boolean22 = dateTime6.isSupported(dateTimeFieldType19);
        org.joda.time.DateTime dateTime24 = dateTime6.plusYears((-241593));
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 2022 + "'", int4 == 2022);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimePrinter16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test15187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15187");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.plus((long) 100);
        org.joda.time.DateTime.Property property24 = dateTime20.millisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 1, chronology26);
        org.joda.time.DateTime dateTime30 = dateTime27.withDurationAdded((long) (byte) 0, 292278993);
        int int31 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DurationFieldType durationFieldType32 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime34 = dateTime30.withFieldAdded(durationFieldType32, 1969);
        org.joda.time.DateTime dateTime36 = dateTime11.withFieldAdded(durationFieldType32, (int) '#');
        org.joda.time.DateTime dateTime37 = dateTime11.toDateTime();
        org.joda.time.DateTime dateTime39 = dateTime37.minusHours((-6400));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str21, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
    }

    @Test
    public void test15188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15188");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        boolean boolean13 = dateTime6.isBefore((long) (-1));
        int int14 = dateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime16 = dateTime6.withYear((int) (byte) 0);
        org.joda.time.DateTime dateTime18 = dateTime6.withDayOfYear((int) '#');
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = null;
        org.joda.time.format.DateTimeParser dateTimeParser20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter19, dateTimeParser20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTime dateTime28 = localDateTime24.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter21.withChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.DateTime dateTime36 = dateTime18.toDateTime(chronology29);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.DateTime dateTime38 = dateTime18.minus(readablePeriod37);
        org.joda.time.DateTime.Property property39 = dateTime38.hourOfDay();
        org.joda.time.DateTime dateTime41 = property39.addToCopy((-3626754L));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTime41);
    }

    @Test
    public void test15189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15189");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.addWrapField((-1));
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime6 = org.joda.time.MutableDateTime.now(dateTimeZone5);
        java.util.GregorianCalendar gregorianCalendar7 = mutableDateTime6.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime9 = org.joda.time.MutableDateTime.now(dateTimeZone8);
        java.util.GregorianCalendar gregorianCalendar10 = mutableDateTime9.toGregorianCalendar();
        boolean boolean11 = mutableDateTime6.isAfter((org.joda.time.ReadableInstant) mutableDateTime9);
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) mutableDateTime6);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime6.minuteOfHour();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime6.era();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(gregorianCalendar7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(gregorianCalendar10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test15190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15190");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.lang.String str7 = property3.toString();
        org.joda.time.LocalDateTime localDateTime9 = property3.setCopy((int) (short) 1);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plus(readablePeriod11);
        int int13 = localDateTime9.getYearOfCentury();
        int int14 = localDateTime9.getYear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime9.minusMillis(86340003);
        org.joda.time.DateTime dateTime17 = localDateTime16.toDateTime();
        org.joda.time.DateTime dateTime19 = dateTime17.minusYears(301970);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfYear]" + "'", str7, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 70 + "'", int13 == 70);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test15191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15191");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfDay();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DurationField durationField13 = chronology10.minutes();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 292278993, chronology10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 'a', chronology10);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 20, chronology10);
        org.joda.time.Chronology chronology18 = chronology10.withUTC();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minus(readablePeriod27);
        int int29 = localDateTime21.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime21.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withYearOfEra(31);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime31.minusMinutes((int) (byte) 0);
        org.joda.time.DateTime dateTime36 = localDateTime35.toDateTime();
        org.joda.time.LocalDateTime.Property property37 = localDateTime35.dayOfWeek();
        int int38 = localDateTime35.size();
        long long40 = chronology10.set((org.joda.time.ReadablePartial) localDateTime35, 0L);
        long long44 = chronology10.add((long) 451, 86400000L, 5599565);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 4 + "'", int38 == 4);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-61157376000001L) + "'", long40 == (-61157376000001L));
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 483802416000451L + "'", long44 == 483802416000451L);
    }

    @Test
    public void test15192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15192");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime11 = property9.addCopy(48613);
        org.joda.time.LocalTime localTime12 = property9.withMaximumValue();
        java.util.Locale locale16 = new java.util.Locale("DateTimeField[clockhourOfDay]", "taiwan", "1970-01-01t00:00:00.002");
        int int17 = property9.getMaximumTextLength(locale16);
        org.joda.time.LocalTime localTime18 = property9.roundFloorCopy();
        int int19 = property9.get();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertEquals(locale16.toString(), "datetimefield[clockhourofday]_TAIWAN_1970-01-01t00:00:00.002");
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
    }

    @Test
    public void test15193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15193");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = dateTimeZone1.getName((long) 5, locale4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime9 = dateTime7.plusWeeks(4861378);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) dateTime7);
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(0);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.003" + "'", str6, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test15194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15194");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale11 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str14 = nameProvider10.getShortName(locale11, "zh-TW", "+00:00:00.003");
        boolean boolean15 = property9.equals((java.lang.Object) nameProvider10);
        org.joda.time.LocalTime localTime17 = property9.addCopy(3);
        int int18 = property9.getMinimumValueOverall();
        org.joda.time.LocalTime localTime20 = property9.addWrapFieldToCopy(174);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "fr_CA");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNotNull(localTime20);
    }

    @Test
    public void test15195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15195");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusMinutes(1);
        org.joda.time.LocalTime.Property property4 = localTime3.millisOfDay();
        org.joda.time.LocalTime.Property property5 = localTime3.secondOfMinute();
        org.joda.time.DurationField durationField6 = property5.getDurationField();
        int int9 = durationField6.getValue(300000L, 363L);
        long long12 = durationField6.getMillis((-86398029), 0L);
        long long14 = durationField6.getMillis(27108149);
        int int16 = durationField6.getValue((long) 243582);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(durationField6);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 300 + "'", int9 == 300);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-86398029000L) + "'", long12 == (-86398029000L));
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 27108149000L + "'", long14 == 27108149000L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 243 + "'", int16 == 243);
    }

    @Test
    public void test15196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15196");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime0.setChronology(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        long long7 = dateTimeZone5.previousTransition((long) 1);
        mutableDateTime0.setZone(dateTimeZone5);
        java.lang.String str9 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.monthOfYear();
        org.joda.time.DateTimeField dateTimeField11 = property10.getField();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:33:44.568+00:00:00.003" + "'", str9, "2022-02-22T07:33:44.568+00:00:00.003");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeField11);
    }

    @Test
    public void test15197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15197");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology2 = null;
        mutableDateTime1.setChronology(chronology2);
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.DateTimeField dateTimeField6 = dateTimeFieldType4.getField(chronology5);
        mutableDateTime1.setRounding(dateTimeField6, (int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime((long) (short) -1);
        long long11 = mutableDateTime10.getMillis();
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime10);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime10.minuteOfDay();
        org.joda.time.DurationField durationField14 = property13.getDurationField();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.getMutableDateTime();
        org.joda.time.Instant instant16 = mutableDateTime15.toInstant();
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeField6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(instant16);
    }

    @Test
    public void test15198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15198");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.eras();
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.plus((long) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfCentury();
        org.joda.time.DateTime dateTime13 = dateTime10.withWeekyear((int) 'x');
        org.joda.time.DateTime dateTime15 = dateTime13.minusMillis(53);
        org.joda.time.ReadablePeriod readablePeriod16 = null;
        org.joda.time.DateTime dateTime18 = dateTime13.withPeriodAdded(readablePeriod16, (int) (short) 1);
        org.joda.time.DateTime.Property property19 = dateTime13.yearOfCentury();
        org.joda.time.Chronology chronology20 = dateTime13.getChronology();
        java.lang.String str21 = chronology20.toString();
        boolean boolean22 = durationFieldType0.isSupported(chronology20);
        org.joda.time.DateTimeField dateTimeField23 = chronology20.minuteOfDay();
        org.joda.time.DurationField durationField24 = chronology20.hours();
        org.joda.time.DurationField durationField25 = chronology20.minutes();
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str8, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(chronology20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str21, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(durationField24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test15199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15199");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime9 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime11 = localTime9.withMillisOfDay((int) (short) 10);
        org.joda.time.Chronology chronology12 = localTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField14 = chronology12.millisOfDay();
        org.joda.time.DateTimeField dateTimeField15 = chronology12.era();
        org.joda.time.DateTimeField dateTimeField16 = chronology12.secondOfMinute();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
    }

    @Test
    public void test15200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15200");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology11.days();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1970, chronology11);
        org.joda.time.DateTimeField dateTimeField17 = chronology11.dayOfYear();
        org.joda.time.DurationField durationField18 = chronology11.weeks();
        long long22 = chronology11.add((long) 2922750, (long) 5599803, 0);
        org.joda.time.DateTimeField dateTimeField23 = chronology11.year();
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) 11);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withCenturyOfEra((int) (short) 100);
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.weekyear();
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod36 = null;
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.minus(readablePeriod36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime30.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime41 = localDateTime39.withWeekOfWeekyear(23);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime41.minus(readablePeriod42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime43.plusMonths(4);
        org.joda.time.LocalDateTime.Property property46 = localDateTime43.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property47 = localDateTime43.hourOfDay();
        int[] intArray48 = localDateTime43.getValues();
        chronology11.validate((org.joda.time.ReadablePartial) localDateTime25, intArray48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime25.millisOfDay();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 2922750L + "'", long22 == 2922750L);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(intArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray48), "[1923, 6, 4, 2]");
        org.junit.Assert.assertNotNull(property50);
    }

    @Test
    public void test15201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15201");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DurationField durationField10 = chronology7.minutes();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.yearOfCentury();
        org.joda.time.DurationField durationField13 = dateTimeField12.getLeapDurationField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNull(durationField13);
    }

    @Test
    public void test15202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15202");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.plus((long) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(10);
        int int16 = property3.getDifference((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime18 = property3.setCopy((int) '4');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfEra(1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withDate(9, 8, 10);
        org.joda.time.LocalDateTime.Property property25 = localDateTime18.minuteOfHour();
        java.lang.String str26 = property25.getName();
        org.joda.time.LocalDateTime localDateTime28 = property25.addToCopy((int) (short) -1);
        org.joda.time.LocalDateTime localDateTime29 = property25.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str11, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "minuteOfHour" + "'", str26, "minuteOfHour");
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test15203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15203");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime13.toMutableDateTime(chronology21);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime23.yearOfEra();
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime23.centuryOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
    }

    @Test
    public void test15204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15204");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder4.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder4.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendSecondOfDay(15);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (-1), chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime17 = localDateTime13.toDateTime(dateTimeZone15);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.plus((long) 100);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Calendar calendar23 = dateTime20.toCalendar(locale22);
        org.joda.time.DateTime.Property property24 = dateTime20.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property24.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder8.appendFraction(dateTimeFieldType25, (int) '#', 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder8.appendWeekyear(60049052, 26);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDateTime34.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField40 = chronology39.secondOfDay();
        org.joda.time.DurationField durationField41 = chronology39.minutes();
        org.joda.time.DateTimeField dateTimeField42 = chronology39.weekyearOfCentury();
        java.lang.String str43 = chronology39.toString();
        org.joda.time.DateTimeField dateTimeField44 = chronology39.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField45 = chronology39.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField46 = chronology39.dayOfMonth();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) (-1), chronology50);
        boolean boolean52 = dateTimeZone47.isLocalDateTimeGap(localDateTime51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property55 = localDateTime51.dayOfYear();
        org.joda.time.LocalDateTime localDateTime57 = localDateTime51.minusHours((int) 'a');
        org.joda.time.LocalDateTime localDateTime59 = localDateTime57.withMonthOfYear(4);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.minuteOfHour();
        org.joda.time.DateTimeZone dateTimeZone63 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime(dateTimeZone63);
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.lang.String str67 = locale66.getDisplayScript();
        java.lang.String str68 = dateTimeZone63.getName((long) 5, locale66);
        java.lang.String str69 = locale66.getScript();
        java.lang.String str70 = locale66.getScript();
        java.lang.String str71 = localDateTime59.toString("23:00:00.003", locale66);
        int int72 = dateTimeField46.getMaximumTextLength(locale66);
        long long74 = dateTimeField46.roundHalfFloor(2332799999L);
        int int76 = dateTimeField46.getMinimumValue(111600000L);
        boolean boolean77 = dateTimeField46.isLenient();
        org.joda.time.DateTimeFieldType dateTimeFieldType78 = dateTimeField46.getType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder81 = dateTimeFormatterBuilder8.appendFraction(dateTimeFieldType78, 82800120, 469);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder84 = dateTimeFormatterBuilder8.appendTwoDigitWeekyear(59, false);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str18, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTimeField42);
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str43, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(localDateTime57);
        org.junit.Assert.assertNotNull(localDateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone63);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "+00:00:00.003" + "'", str68, "+00:00:00.003");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "23:00:00.003" + "'", str71, "23:00:00.003");
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 2 + "'", int72 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long74 + "' != '" + 2332799997L + "'", long74 == 2332799997L);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1 + "'", int76 == 1);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(dateTimeFieldType78);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder81);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder84);
    }

    @Test
    public void test15205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15205");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendHourOfHalfday(5599585);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder0.appendSecondOfDay((int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder0.appendMonthOfYear(762261);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder10.appendDecimal(dateTimeFieldType11, 97, (int) (short) -1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder10.appendTwoDigitYear(97);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendClockhourOfHalfday(807);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
    }

    @Test
    public void test15206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15206");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(21L);
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.forOffsetHours((int) (byte) 100);
        mutableDateTime1.setZoneRetainFields(dateTimeZone3);
        org.joda.time.LocalTime localTime5 = org.joda.time.LocalTime.now(dateTimeZone3);
        java.lang.String str6 = dateTimeZone3.getID();
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(localTime5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+100:00" + "'", str6, "+100:00");
    }

    @Test
    public void test15207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15207");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DurationField durationField12 = chronology9.minutes();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 292278993, chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 'a', chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.DateTimeField dateTimeField17 = chronology9.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField18 = chronology9.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType22 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime21.set(dateTimeFieldType22, (-292275054));
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime21.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType26 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.DateTimeField dateTimeField28 = dateTimeFieldType26.getField(chronology27);
        boolean boolean30 = dateTimeField28.isLeap(100L);
        mutableDateTime21.setRounding(dateTimeField28);
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        boolean boolean37 = dateTimeZone32.isLocalDateTimeGap(localDateTime36);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property40 = localDateTime36.dayOfYear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime36.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.LocalDateTime localDateTime45 = localDateTime36.withDurationAdded(readableDuration43, (int) 'u');
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withMonthOfYear(10);
        java.util.Locale locale48 = java.util.Locale.JAPANESE;
        java.lang.String str49 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime45, locale48);
        java.lang.String str50 = dateTimeField18.getAsShortText((int) (byte) 100, locale48);
        long long52 = dateTimeField18.roundHalfCeiling((long) (-292275054));
        boolean boolean54 = dateTimeField18.isLeap((-3L));
        java.util.Locale.Category category56 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (-1), chronology58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.dayOfYear();
        org.joda.time.DurationField durationField61 = property60.getLeapDurationField();
        org.joda.time.Interval interval62 = property60.toInterval();
        long long63 = property60.remainder();
        java.util.Locale locale65 = new java.util.Locale("hi!");
        int int66 = property60.getMaximumShortTextLength(locale65);
        java.lang.String str68 = locale65.getUnicodeLocaleType("AD");
        java.util.Locale.setDefault(category56, locale65);
        java.util.Locale locale70 = java.util.Locale.getDefault(category56);
        java.util.Locale locale71 = java.util.Locale.getDefault(category56);
        java.util.Locale locale72 = java.util.Locale.getDefault(category56);
        java.lang.String str73 = dateTimeField18.getAsText((-686465280086400000L), locale72);
        java.util.Set<java.lang.String> strSet74 = locale72.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeFieldType22);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeFieldType26);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970" + "'", str49, "1970");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "100" + "'", str50, "100");
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + (-292260003L) + "'", long52 == (-292260003L));
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + category56 + "' != '" + java.util.Locale.Category.FORMAT + "'", category56.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNull(durationField61);
        org.junit.Assert.assertNotNull(interval62);
// flaky:         org.junit.Assert.assertTrue("'" + long63 + "' != '" + 2L + "'", long63 == 2L);
        org.junit.Assert.assertEquals(locale65.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 3 + "'", int66 == 3);
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "0" + "'", str73, "0");
        org.junit.Assert.assertNotNull(strSet74);
    }

    @Test
    public void test15208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15208");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        boolean boolean15 = dateTimeZone10.isLocalDateTimeGap(localDateTime14);
        long long17 = chronology9.set((org.joda.time.ReadablePartial) localDateTime14, (long) '#');
        org.joda.time.DateTimeField dateTimeField18 = chronology9.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology9.halfdayOfDay();
        org.joda.time.DurationField durationField21 = chronology9.months();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test15209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15209");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withDurationAdded(readableDuration11, (int) 'u');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.weekyear();
        int int17 = localDateTime13.indexOf(dateTimeFieldType16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime13.minusYears((int) 'u');
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.withYear(6);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.hourOfDay();
        org.joda.time.LocalDateTime.Property property23 = localDateTime21.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime24 = property23.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime26 = property23.setCopy((int) (byte) 1);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
    }

    @Test
    public void test15210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15210");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder1.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder3.appendTimeZoneId();
        org.joda.time.DateTimeFieldType dateTimeFieldType5 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendShortText(dateTimeFieldType5);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendWeekOfWeekyear(41);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder8.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser13 = dateTimeFormatterBuilder12.toParser();
        int int14 = dateTimeParser13.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder8.appendOptional(dateTimeParser13);
        org.joda.time.format.DateTimePrinter dateTimePrinter16 = dateTimeFormatterBuilder8.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder17.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder19.appendTimeZoneId();
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder19.appendShortText(dateTimeFieldType21);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendWeekOfWeekyear(41);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder22.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder22.appendYearOfCentury(19, 8);
        org.joda.time.format.DateTimeParser dateTimeParser29 = dateTimeFormatterBuilder28.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder0.append(dateTimePrinter16, dateTimeParser29);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder31.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder34.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatterBuilder36.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder36.appendMillisOfSecond(292278993);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder39.appendTwoDigitWeekyear(1969);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder39.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder42.appendFractionOfHour(26821932, 4);
        org.joda.time.format.DateTimeParser dateTimeParser46 = dateTimeFormatterBuilder45.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder30.append(dateTimeParser46);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap48 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder47.appendTimeZoneName(strMap48);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder49.appendTwoDigitWeekyear(453);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeParser13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimePrinter16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeParser29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimePrinter37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeParser46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
    }

    @Test
    public void test15211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15211");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime11.set(dateTimeFieldType12, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime11.add(readablePeriod15, 4);
        int int18 = mutableDateTime11.getMillisOfDay();
        long long19 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime11);
        java.lang.String str20 = property9.toString();
        org.joda.time.LocalTime localTime22 = property9.addWrapFieldToCopy(59);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime24.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime24.add(readableDuration27, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType30 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int31 = mutableDateTime24.get(dateTimeFieldType30);
        java.lang.String str32 = dateTimeFieldType30.getName();
        boolean boolean33 = localTime22.isSupported(dateTimeFieldType30);
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField35 = mutableDateTime34.getRoundingField();
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime34.dayOfWeek();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (-1), chronology38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfYear();
        org.joda.time.DurationField durationField41 = property40.getLeapDurationField();
        org.joda.time.Interval interval42 = property40.toInterval();
        long long43 = property40.remainder();
        java.util.Locale locale45 = new java.util.Locale("hi!");
        int int46 = property40.getMaximumShortTextLength(locale45);
        java.lang.String str47 = property36.getAsShortText(locale45);
        org.joda.time.MutableDateTime mutableDateTime48 = property36.roundHalfFloor();
        mutableDateTime48.addYears((int) (byte) 0);
        java.lang.String str51 = mutableDateTime48.toString();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (-1), chronology53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone56 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone57 = dateTimeZone56.toTimeZone();
        org.joda.time.DateTime dateTime58 = localDateTime54.toDateTime(dateTimeZone56);
        java.lang.String str59 = dateTime58.toString();
        org.joda.time.DateTime dateTime61 = dateTime58.plus((long) 100);
        org.joda.time.DateTime.Property property62 = dateTime61.yearOfCentury();
        org.joda.time.DateTime dateTime63 = dateTime61.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property64 = dateTime63.secondOfMinute();
        org.joda.time.DateTime.Property property65 = dateTime63.minuteOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = property65.getFieldType();
        boolean boolean67 = mutableDateTime48.isSupported(dateTimeFieldType66);
        org.joda.time.DurationFieldType durationFieldType68 = dateTimeFieldType66.getDurationType();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime70 = localTime22.withField(dateTimeFieldType66, 1950);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1950 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 153722866950720L + "'", long19 == 153722866950720L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[minuteOfHour]" + "'", str20, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(localTime22);
        org.junit.Assert.assertNotNull(dateTimeFieldType30);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "minuteOfHour" + "'", str32, "minuteOfHour");
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNull(dateTimeField35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertNotNull(interval42);
// flaky:         org.junit.Assert.assertTrue("'" + long43 + "' != '" + 2L + "'", long43 == 2L);
        org.junit.Assert.assertEquals(locale45.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 3 + "'", int46 == 3);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "Tue" + "'", str47, "Tue");
        org.junit.Assert.assertNotNull(mutableDateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "2022-02-22T00:00:00.000+00:00:00.003" + "'", str51, "2022-02-22T00:00:00.000+00:00:00.003");
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTimeZone56);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime58);
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str59, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(property65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + true + "'", boolean67 == true);
        org.junit.Assert.assertNotNull(durationFieldType68);
    }

    @Test
    public void test15212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15212");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.yearOfEra();
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime10 = property8.add(1067493370);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime10.era();
        mutableDateTime10.setTime(1099235520L);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test15213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15213");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear(2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withDefaultYear(25);
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter29.getParser();
        int int33 = dateTimeFormatter29.getDefaultYear();
        org.joda.time.format.DateTimePrinter dateTimePrinter34 = dateTimeFormatter29.getPrinter();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter29.withPivotYear((java.lang.Integer) 26853);
        org.joda.time.Chronology chronology37 = dateTimeFormatter36.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate39 = dateTimeFormatter36.parseLocalDate("1380");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(dateTimeParser32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 2000 + "'", int33 == 2000);
        org.junit.Assert.assertNull(dateTimePrinter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNull(chronology37);
    }

    @Test
    public void test15214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15214");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime9 = property5.roundHalfEvenCopy();
        java.util.Locale locale11 = new java.util.Locale("365");
        java.lang.String str12 = locale11.getISO3Language();
        int int13 = property5.getMaximumShortTextLength(locale11);
        org.joda.time.LocalTime localTime14 = property5.roundFloorCopy();
        org.joda.time.LocalTime localTime15 = property5.getLocalTime();
        org.joda.time.Chronology chronology16 = localTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.clockhourOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = dateTimeField17.getType();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertEquals(locale11.toString(), "365");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "365" + "'", str12, "365");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
    }

    @Test
    public void test15215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15215");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra(10);
        org.joda.time.LocalDate.Property property8 = localDate5.yearOfEra();
        org.joda.time.LocalDate localDate10 = localDate5.plusYears(738207);
        int int11 = localDate10.size();
        int int12 = localDate10.getYearOfEra();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate15 = localDate10.withPeriodAdded(readablePeriod13, 37);
        org.joda.time.LocalDate.Property property16 = localDate15.era();
        org.joda.time.LocalDate localDate18 = localDate15.plusWeeks(9);
        org.joda.time.LocalDate localDate20 = localDate15.withWeekOfWeekyear(44);
        org.joda.time.LocalDate.Property property21 = localDate20.weekOfWeekyear();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 4861378 + "'", int12 == 4861378);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(localDate18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test15216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15216");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        int int9 = property3.getMaximumShortTextLength(locale8);
        java.lang.String str10 = property3.toString();
        org.joda.time.LocalDateTime localDateTime12 = property3.setCopy(19);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime14 = property13.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime15 = property13.withMinimumValue();
        org.joda.time.LocalDateTime localDateTime16 = property13.roundHalfCeilingCopy();
        int int17 = localDateTime16.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[dayOfYear]" + "'", str10, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
    }

    @Test
    public void test15217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15217");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        org.joda.time.DateTime.Property property3 = dateTime1.minuteOfDay();
        org.joda.time.DateTime.Property property4 = dateTime1.millisOfSecond();
        org.joda.time.LocalDate localDate5 = dateTime1.toLocalDate();
        org.joda.time.DateTime dateTime6 = dateTime1.toDateTime();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
    }

    @Test
    public void test15218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15218");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.LocalTime localTime12 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime13 = property9.getLocalTime();
        org.joda.time.DateTimeField dateTimeField14 = property9.getField();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime16 = property9.setCopy(412);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 412 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
    }

    @Test
    public void test15219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15219");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.minus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusHours((int) (byte) -1);
        org.joda.time.DateTime dateTime17 = dateTime13.plusYears(2022);
        boolean boolean18 = dateTime17.isAfterNow();
        java.lang.String str19 = dateTime17.toString();
        org.joda.time.DateTime dateTime21 = dateTime17.minusWeeks(4861378);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.DateTime dateTime23 = dateTime17.toDateTime(chronology22);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "3992-01-01T00:00:00.102+00:00:00.003" + "'", str19, "3992-01-01T00:00:00.102+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test15220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15220");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfWeek();
        java.lang.String str7 = localDate0.toString("23:00:00.000");
        org.joda.time.LocalDate localDate9 = localDate0.minusDays(1969);
        org.joda.time.DateTime dateTime10 = localDate9.toDateTimeAtStartOfDay();
        org.joda.time.DateTime.Property property11 = dateTime10.year();
        org.joda.time.DateTime dateTime12 = property11.getDateTime();
        org.joda.time.DateTime dateTime14 = dateTime12.plusYears(210);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.000" + "'", str7, "23:00:00.000");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test15221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15221");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        org.joda.time.DateTime.Property property13 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime14 = property13.getDateTime();
        org.joda.time.DateTime dateTime15 = dateTime14.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime17 = dateTime15.withWeekyear(2000);
        boolean boolean18 = dateTime15.isAfterNow();
        org.joda.time.DateTime.Property property19 = dateTime15.weekyear();
        org.joda.time.DateTime dateTime20 = property19.getDateTime();
        org.joda.time.DateMidnight dateMidnight21 = dateTime20.toDateMidnight();
        org.joda.time.LocalDateTime localDateTime22 = dateTime20.toLocalDateTime();
        org.joda.time.DateTime.Property property23 = dateTime20.weekyear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateMidnight21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
    }

    @Test
    public void test15222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15222");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2, 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        java.lang.String str15 = chronology14.toString();
        mutableDateTime1.setChronology(chronology14);
        org.joda.time.Instant instant17 = mutableDateTime1.toInstant();
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime1.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime20 = property18.addWrapField(26877485);
        java.lang.String str21 = property18.getName();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(instant17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "weekOfWeekyear" + "'", str21, "weekOfWeekyear");
    }

    @Test
    public void test15223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15223");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        int int13 = dateTime12.getDayOfMonth();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.lang.String str19 = dateTime12.toString("365", locale17);
        org.joda.time.DateTime dateTime21 = dateTime12.plusMonths(1969);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMonthOfYear(5);
        org.joda.time.DateTime dateTime28 = dateTime21.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTime dateTime30 = dateTime21.minusYears(1);
        org.joda.time.DateTime dateTime32 = dateTime21.plusMillis(22);
        org.joda.time.DateTime.Property property33 = dateTime21.secondOfDay();
        org.joda.time.DateTime dateTime34 = property33.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime36 = property33.addToCopy(2023531L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "365" + "'", str19, "365");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
    }

    @Test
    public void test15224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15224");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        int int6 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9, 100);
        boolean boolean12 = mutableDateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.minuteOfHour();
        org.joda.time.Interval interval14 = property13.toInterval();
        org.joda.time.MutableDateTime mutableDateTime15 = property13.roundHalfFloor();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime15.minuteOfHour();
        mutableDateTime15.setMillis(8760L);
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime15.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        boolean boolean25 = dateTimeZone20.isLocalDateTimeGap(localDateTime24);
        int int27 = dateTimeZone20.getStandardOffset(1645514718201L);
        mutableDateTime15.setZoneRetainFields(dateTimeZone20);
        org.joda.time.MutableDateTime.Property property29 = mutableDateTime15.centuryOfEra();
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (-1), chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTime dateTime36 = localDateTime32.toDateTime(dateTimeZone34);
        java.lang.String str37 = dateTime36.toString();
        org.joda.time.DateTime dateTime39 = dateTime36.plus((long) 100);
        org.joda.time.DateTime.Property property40 = dateTime39.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration41 = null;
        org.joda.time.DateTime dateTime42 = dateTime39.plus(readableDuration41);
        int int43 = dateTime42.getDayOfMonth();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet46 = locale45.getUnicodeLocaleAttributes();
        java.util.Locale locale47 = java.util.Locale.GERMANY;
        java.lang.String str48 = locale45.getDisplayVariant(locale47);
        java.lang.String str49 = dateTime42.toString("365", locale47);
        org.joda.time.DateTime dateTime51 = dateTime42.plusMonths(1969);
        java.util.Date date52 = dateTime51.toDate();
        org.joda.time.MutableDateTime mutableDateTime53 = dateTime51.toMutableDateTimeISO();
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (-1), chronology55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.DateTime dateTime60 = localDateTime56.toDateTime(dateTimeZone58);
        java.lang.String str61 = dateTime60.toString();
        org.joda.time.DateTime dateTime63 = dateTime60.plus((long) 100);
        org.joda.time.DateTime.Property property64 = dateTime63.yearOfCentury();
        java.util.Locale locale65 = java.util.Locale.GERMANY;
        java.util.Calendar calendar66 = dateTime63.toCalendar(locale65);
        org.joda.time.DateTime.Property property67 = dateTime63.yearOfCentury();
        org.joda.time.DateTime dateTime68 = property67.getDateTime();
        org.joda.time.DateTime dateTime69 = dateTime68.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime71 = dateTime69.withWeekyear(2000);
        boolean boolean72 = dateTime69.isAfterNow();
        org.joda.time.DateTime dateTime74 = dateTime69.plusSeconds(218);
        org.joda.time.DateTimeZone dateTimeZone75 = null;
        org.joda.time.DateTime dateTime76 = dateTime69.withZone(dateTimeZone75);
        org.joda.time.DateTime.Property property77 = dateTime69.weekyear();
        org.joda.time.DateTime dateTime79 = dateTime69.withDayOfYear(15);
        org.joda.time.DateTimeZone dateTimeZone80 = dateTime69.getZone();
        org.joda.time.LocalDateTime localDateTime81 = org.joda.time.LocalDateTime.now(dateTimeZone80);
        mutableDateTime53.setZone(dateTimeZone80);
        boolean boolean83 = property29.equals((java.lang.Object) mutableDateTime53);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(interval14);
        org.junit.Assert.assertNotNull(mutableDateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str37, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 1 + "'", int43 == 1);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "365" + "'", str49, "365");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(date52);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Mon Feb 01 00:00:00 GMT 2134");
        org.junit.Assert.assertNotNull(mutableDateTime53);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime60);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str61, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar66);
// flaky:         org.junit.Assert.assertEquals(calendar66.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertNotNull(dateTime68);
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(dateTime71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test15225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15225");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        int int10 = localDateTime2.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime12.withYearOfEra(31);
        org.joda.time.LocalDateTime localDateTime16 = localDateTime12.minusMinutes((int) (byte) 0);
        int[] intArray17 = localDateTime16.getValues();
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYearOfEra(21753218);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minus(readablePeriod20);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(intArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray17), "[32, 1, 1, 2]");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test15226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15226");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear(10);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter14.withChronology(chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (-1), chronology27);
        boolean boolean29 = dateTimeZone24.isLocalDateTimeGap(localDateTime28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (-1), chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekyear();
        boolean boolean34 = dateTimeZone24.isLocalDateTimeGap(localDateTime32);
        long long36 = dateTimeZone24.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter14.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withPivotYear(2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter39.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-1), chronology43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        org.joda.time.DateTime dateTime48 = localDateTime44.toDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = dateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.secondOfDay();
        org.joda.time.DurationField durationField51 = chronology49.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter39.withChronology(chronology49);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeFormatter52.getZone();
        org.joda.time.DateTime dateTime54 = dateTime9.toDateTime(dateTimeZone53);
        boolean boolean56 = dateTime54.isEqual(2022L);
        org.joda.time.DateTime dateTime58 = dateTime54.withCenturyOfEra((int) '#');
        int int59 = dateTime54.getYearOfCentury();
        org.joda.time.DateTime dateTime61 = dateTime54.withMillisOfDay(4);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.DateTime dateTime64 = dateTime61.withDurationAdded(readableDuration62, (int) (byte) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime67 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime67.setTime(100L);
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime67.dayOfMonth();
        int int71 = mutableDateTime67.getSecondOfDay();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) (-1), chronology74);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.minuteOfHour();
        int int77 = localDateTime75.size();
        org.joda.time.Chronology chronology78 = localDateTime75.getChronology();
        org.joda.time.DateTime dateTime79 = new org.joda.time.DateTime((long) (byte) 100, chronology78);
        mutableDateTime67.setChronology(chronology78);
        org.joda.time.DateTimeField dateTimeField81 = chronology78.era();
        org.joda.time.DateTimeField dateTimeField82 = dateTimeFieldType65.getField(chronology78);
        boolean boolean83 = dateTime61.isSupported(dateTimeFieldType65);
        java.lang.String str84 = dateTimeFieldType65.getName();
        org.joda.time.DurationFieldType durationFieldType85 = dateTimeFieldType65.getDurationType();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3L + "'", long36 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 70 + "'", int59 == 70);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTime64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertTrue("'" + int71 + "' != '" + 0 + "'", int71 == 0);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertTrue("'" + int77 + "' != '" + 4 + "'", int77 == 4);
        org.junit.Assert.assertNotNull(chronology78);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "yearOfEra" + "'", str84, "yearOfEra");
        org.junit.Assert.assertNotNull(durationFieldType85);
    }

    @Test
    public void test15227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15227");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.plus((long) 100);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.plus(readableDuration15);
        int int17 = dateTime16.getDayOfMonth();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.lang.String str23 = dateTime16.toString("365", locale21);
        org.joda.time.DateTime dateTime25 = dateTime16.plusMonths(1969);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = mutableDateTime0.toDateTime();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime0.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime30 = property28.addWrapField(738207);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime30.centuryOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str11, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "365" + "'", str23, "365");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(mutableDateTime30);
        org.junit.Assert.assertNotNull(property31);
    }

    @Test
    public void test15228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15228");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear(23);
        int int14 = localDateTime11.getCenturyOfEra();
        int int16 = localDateTime11.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.plusMinutes(99);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property27 = localDateTime21.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean29 = localDateTime21.isSupported(dateTimeFieldType28);
        int int30 = localDateTime18.indexOf(dateTimeFieldType28);
        org.joda.time.LocalDateTime.Property property31 = localDateTime18.millisOfDay();
        int int32 = property31.getMinimumValue();
        org.joda.time.LocalDateTime localDateTime33 = property31.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test15229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15229");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property7.addToCopy((int) ' ');
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(2);
        org.joda.time.LocalDate.Property property13 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = property13.getLocalDate();
        org.joda.time.LocalDate localDate16 = property13.roundHalfCeilingCopy();
        org.joda.time.DateMidnight dateMidnight17 = localDate16.toDateMidnight();
        org.joda.time.Chronology chronology18 = localDate16.getChronology();
        org.joda.time.DateTimeField dateTimeField19 = chronology18.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            long long23 = chronology18.add((-9223371985507200003L), 569067462144000072L, (-1726068));
            org.junit.Assert.fail("Expected exception of type java.lang.ArithmeticException; message: Multiplication overflows a long: 569067462144000072 * -1726068");
        } catch (java.lang.ArithmeticException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(dateMidnight17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test15230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15230");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyear();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(86399999L, chronology9, locale13);
        java.util.Locale locale15 = java.util.Locale.TRADITIONAL_CHINESE;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket16 = new org.joda.time.format.DateTimeParserBucket((-62135596799991L), chronology9, locale15);
        long long18 = dateTimeParserBucket16.computeMillis(true);
        java.lang.Integer int19 = dateTimeParserBucket16.getPivotYear();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-62135596799994L) + "'", long18 == (-62135596799994L));
        org.junit.Assert.assertNull(int19);
    }

    @Test
    public void test15231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15231");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        org.joda.time.DateTime.Property property12 = dateTime6.hourOfDay();
        org.joda.time.DateTime dateTime14 = property12.addWrapFieldToCopy(0);
        org.joda.time.DateTime dateTime16 = property12.addToCopy((long) 86399999);
        java.lang.String str17 = property12.toString();
        org.joda.time.DateTime dateTime18 = property12.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Property[hourOfDay]" + "'", str17, "Property[hourOfDay]");
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test15232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15232");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.DateTime dateTime13 = dateTime11.withHourOfDay(1);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        org.joda.time.Chronology chronology21 = dateTime20.getChronology();
        org.joda.time.DateTimeField dateTimeField22 = chronology21.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime13.toMutableDateTime(chronology21);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology26 = null;
        mutableDateTime25.setChronology(chronology26);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType28.getField(chronology29);
        mutableDateTime25.setRounding(dateTimeField30, (int) (short) 1);
        boolean boolean33 = mutableDateTime23.equals((java.lang.Object) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime34 = mutableDateTime23.copy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(mutableDateTime34);
    }

    @Test
    public void test15233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15233");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType6 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.DateTimeField dateTimeField8 = dateTimeFieldType6.getField(chronology7);
        boolean boolean10 = dateTimeField8.isLeap(100L);
        mutableDateTime1.setRounding(dateTimeField8);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime16.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property20 = localDateTime16.dayOfYear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime16.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration23 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime16.withDurationAdded(readableDuration23, (int) 'u');
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMonthOfYear(10);
        java.util.Locale locale28 = java.util.Locale.JAPANESE;
        java.lang.String str29 = dateTimeField8.getAsText((org.joda.time.ReadablePartial) localDateTime25, locale28);
        java.util.Locale locale31 = java.util.Locale.US;
        java.util.Locale.setDefault(locale31);
        java.lang.String str33 = dateTimeField8.getAsShortText(0L, locale31);
        java.lang.String str35 = dateTimeField8.getAsShortText((long) 100);
        org.joda.time.DurationField durationField36 = dateTimeField8.getLeapDurationField();
        org.joda.time.tz.NameProvider nameProvider39 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale41 = new java.util.Locale("hi!");
        java.lang.String str42 = locale41.getScript();
        boolean boolean43 = locale41.hasExtensions();
        java.lang.String str46 = nameProvider39.getShortName(locale41, "minuteOfHour", "23:00:00.000");
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.lang.String str48 = locale47.toLanguageTag();
        java.lang.String str51 = nameProvider39.getShortName(locale47, "", "AD");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider39);
        java.util.Locale.Builder builder53 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder54 = builder53.clearExtensions();
        java.util.Locale locale55 = builder54.build();
        java.lang.String str58 = nameProvider39.getName(locale55, "DurationField[years]", "0009-10-04");
        java.util.Locale locale60 = java.util.Locale.forLanguageTag("2022-02-22T07:25:22.845Z");
        java.lang.String str61 = locale55.getDisplayVariant(locale60);
        java.util.Locale.Category category62 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale63 = java.util.Locale.getDefault(category62);
        java.util.Locale locale64 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet65 = locale64.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category62, locale64);
        java.util.Locale locale67 = java.util.Locale.getDefault(category62);
        java.util.Locale locale68 = java.util.Locale.getDefault(category62);
        java.util.Locale locale69 = java.util.Locale.UK;
        java.util.Locale.setDefault(category62, locale69);
        java.lang.String str71 = locale55.getDisplayVariant(locale69);
        // The following exception was thrown during execution in test generation
        try {
            long long72 = dateTimeField8.set(2177429688000L, "-5599584-01-01", locale55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"-5599584-01-01\" for year is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeFieldType6);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970" + "'", str29, "1970");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970" + "'", str33, "1970");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970" + "'", str35, "1970");
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(nameProvider39);
        org.junit.Assert.assertEquals(locale41.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "zh-TW" + "'", str48, "zh-TW");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertNull(str58);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertTrue("'" + category62 + "' != '" + java.util.Locale.Category.FORMAT + "'", category62.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
    }

    @Test
    public void test15234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15234");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfWeek();
        java.lang.String str7 = localDate0.toString("23:00:00.000");
        org.joda.time.LocalDate localDate9 = localDate0.minusDays(1969);
        org.joda.time.LocalDate localDate11 = localDate9.minusMonths(86399999);
        java.util.Date date12 = localDate9.toDate();
        org.joda.time.ReadablePeriod readablePeriod13 = null;
        org.joda.time.LocalDate localDate14 = localDate9.minus(readablePeriod13);
        org.joda.time.LocalDate localDate16 = localDate14.withYearOfEra(26780);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime18.setTime(100L);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfMonth();
        mutableDateTime18.addMillis((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime18.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        mutableDateTime18.setZoneRetainFields(dateTimeZone26);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime(dateTimeZone26);
        boolean boolean29 = dateTimeZone26.isFixed();
        org.joda.time.DateTime dateTime30 = localDate16.toDateTimeAtMidnight(dateTimeZone26);
        int int31 = localDate16.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.000" + "'", str7, "23:00:00.000");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(date12);
// flaky:         org.junit.Assert.assertEquals(date12.toString(), "Sun Oct 02 00:00:00 GMT 2016");
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 10 + "'", int31 == 10);
    }

    @Test
    public void test15235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15235");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate9 = property7.addWrapFieldToCopy(1971);
        org.joda.time.LocalDate.Property property10 = localDate9.monthOfYear();
        org.joda.time.LocalDate localDate12 = property10.addToCopy(82800);
        org.joda.time.LocalDate localDate13 = property10.roundHalfFloorCopy();
        int int14 = localDate13.size();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(localDate13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
    }

    @Test
    public void test15236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15236");
        org.joda.time.DurationFieldType durationFieldType0 = org.joda.time.DurationFieldType.seconds();
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.LocalDateTime localDateTime14 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.DateTimeField dateTimeField15 = chronology11.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField16 = chronology11.millisOfSecond();
        long long20 = chronology11.add(99L, (long) 366, 92);
        org.joda.time.DateTimeField dateTimeField21 = chronology11.millisOfSecond();
        org.joda.time.DurationField durationField22 = durationFieldType0.getField(chronology11);
        org.junit.Assert.assertNotNull(durationFieldType0);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 33771L + "'", long20 == 33771L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
    }

    @Test
    public void test15237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15237");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder0.appendHourOfHalfday(23);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap7 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder0.appendTimeZoneName(strMap7);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder9.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder12.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = dateTimeFormatterBuilder14.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder14.appendMillisOfSecond(292278993);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder17.appendTwoDigitWeekyear(1969);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder20.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime26 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime26.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration29 = null;
        mutableDateTime26.add(readableDuration29, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int33 = mutableDateTime26.get(dateTimeFieldType32);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder20.appendSignedDecimal(dateTimeFieldType32, 92, 9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder37.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder40.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatterBuilder42.toPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser44 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter45 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter43, dateTimeParser44);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder46.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder46.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = dateTimeFormatterBuilder50.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder50.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser55 = dateTimeFormatterBuilder50.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder20.append(dateTimePrinter43, dateTimeParser55);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = dateTimeFormatterBuilder57.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder57.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = dateTimeFormatterBuilder61.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder61.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser66 = dateTimeFormatterBuilder61.toParser();
        int int67 = dateTimeParser66.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder17.append(dateTimePrinter43, dateTimeParser66);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder69 = dateTimeFormatterBuilder8.append(dateTimePrinter43);
        org.joda.time.format.DateTimePrinter dateTimePrinter70 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder73 = dateTimeFormatterBuilder71.appendSecondOfDay(738207);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder74 = dateTimeFormatterBuilder71.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder75 = dateTimeFormatterBuilder71.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder76 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder78 = dateTimeFormatterBuilder76.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder80 = dateTimeFormatterBuilder76.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter81 = dateTimeFormatterBuilder80.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder84 = dateTimeFormatterBuilder80.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder86 = dateTimeFormatterBuilder84.appendSecondOfDay(15);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder88 = dateTimeFormatterBuilder84.appendLiteral('4');
        org.joda.time.format.DateTimeParser dateTimeParser89 = dateTimeFormatterBuilder84.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder90 = dateTimeFormatterBuilder71.appendOptional(dateTimeParser89);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter91 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter70, dateTimeParser89);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter43, dateTimeParser89);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimePrinter15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimePrinter51);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertNotNull(dateTimeParser55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertNotNull(dateTimePrinter62);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder65);
        org.junit.Assert.assertNotNull(dateTimeParser66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 23 + "'", int67 == 23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder69);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder73);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder74);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder75);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder78);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder80);
        org.junit.Assert.assertNotNull(dateTimePrinter81);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder84);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder86);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder88);
        org.junit.Assert.assertNotNull(dateTimeParser89);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder90);
    }

    @Test
    public void test15238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15238");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setYear((int) '#');
        mutableDateTime1.addSeconds((int) (short) 1);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime12.secondOfMinute();
        boolean boolean15 = mutableDateTime12.isBefore((long) 218);
        org.joda.time.Chronology chronology16 = mutableDateTime12.getChronology();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-1), chronology18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime23 = localDateTime19.toDateTime(dateTimeZone21);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTime dateTime26 = dateTime23.plus((long) 100);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfCentury();
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.util.Calendar calendar29 = dateTime26.toCalendar(locale28);
        int int30 = dateTime26.getMinuteOfHour();
        org.joda.time.DateTime dateTime32 = dateTime26.plusMinutes(99);
        boolean boolean34 = dateTime26.isEqual((long) 292278993);
        java.util.Locale locale35 = java.util.Locale.TAIWAN;
        java.lang.String str36 = locale35.toLanguageTag();
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.lang.String str38 = locale35.getDisplayScript(locale37);
        java.lang.String str39 = locale37.getVariant();
        java.util.Calendar calendar40 = dateTime26.toCalendar(locale37);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket43 = new org.joda.time.format.DateTimeParserBucket(31589352000L, chronology16, locale37, (java.lang.Integer) 21, 51);
        mutableDateTime1.setChronology(chronology16);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime1.dayOfMonth();
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime1.secondOfDay();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) (-1), chronology50);
        boolean boolean52 = dateTimeZone47.isLocalDateTimeGap(localDateTime51);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime51.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime56 = localDateTime51.withMillisOfDay(5);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime56.minusMonths(2922750);
        int int59 = property46.compareTo((org.joda.time.ReadablePartial) localDateTime56);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str24, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "zh-TW" + "'", str36, "zh-TW");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(calendar40);
// flaky:         org.junit.Assert.assertEquals(calendar40.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(localDateTime56);
        org.junit.Assert.assertNotNull(localDateTime58);
// flaky:         org.junit.Assert.assertTrue("'" + int59 + "' != '" + 1 + "'", int59 == 1);
    }

    @Test
    public void test15239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15239");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfWeek();
        java.lang.String str7 = localDate0.toString("23:00:00.000");
        org.joda.time.LocalDate localDate9 = localDate0.minusDays(1969);
        org.joda.time.Chronology chronology10 = localDate0.getChronology();
        org.joda.time.LocalDate.Property property11 = localDate0.yearOfEra();
        java.lang.String str12 = localDate0.toString();
        int int13 = localDate0.getDayOfYear();
        org.joda.time.LocalDate localDate15 = localDate0.minusYears(0);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.000" + "'", str7, "23:00:00.000");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "2022-02-22" + "'", str12, "2022-02-22");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 53 + "'", int13 == 53);
        org.junit.Assert.assertNotNull(localDate15);
    }

    @Test
    public void test15240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15240");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime6.millisOfSecond();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = new org.joda.time.DateTime((long) (short) 1, chronology12);
        org.joda.time.DateTime dateTime16 = dateTime13.withDurationAdded((long) (byte) 0, 292278993);
        int int17 = dateTime6.compareTo((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DurationFieldType durationFieldType18 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime20 = dateTime16.withFieldAdded(durationFieldType18, 1969);
        int int21 = dateTime20.getMonthOfYear();
        org.joda.time.DateTime dateTime23 = dateTime20.plusDays(7);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime20);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1) + "'", int17 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
    }

    @Test
    public void test15241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15241");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder1.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = dateTimeFormatterBuilder6.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder6.appendSecondOfMinute(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType10 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder9.appendFixedDecimal(dateTimeFieldType10, (int) ' ');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder9.appendYearOfEra(23, (int) (byte) -1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder19.appendYear(1975, 284);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder19.appendHourOfHalfday(17259888);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatterBuilder24.toFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder26.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatterBuilder31.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder31.appendMillisOfSecond(292278993);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.secondOfMinute();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder34.appendFraction(dateTimeFieldType35, 864019, 52);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = dateTimeFormatterBuilder39.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder41.appendTimeZoneId();
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder44 = dateTimeFormatterBuilder41.appendShortText(dateTimeFieldType43);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder44.appendWeekOfWeekyear(41);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder46.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder48.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser51 = dateTimeFormatterBuilder50.toParser();
        int int52 = dateTimeParser51.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder46.appendOptional(dateTimeParser51);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder34.appendOptional(dateTimeParser51);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder24.appendOptional(dateTimeParser51);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = dateTimeFormatterBuilder9.append(dateTimeParser51);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = dateTimeFormatterBuilder57.appendSecondOfDay(738207);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder57.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder57.appendTimeZoneShortName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = dateTimeFormatterBuilder62.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder66 = dateTimeFormatterBuilder62.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter67 = dateTimeFormatterBuilder66.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder70 = dateTimeFormatterBuilder66.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser71 = dateTimeFormatterBuilder66.toParser();
        org.joda.time.Chronology chronology74 = null;
        org.joda.time.LocalDateTime localDateTime75 = new org.joda.time.LocalDateTime((long) (-1), chronology74);
        org.joda.time.LocalDateTime.Property property76 = localDateTime75.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone78 = dateTimeZone77.toTimeZone();
        org.joda.time.DateTime dateTime79 = localDateTime75.toDateTime(dateTimeZone77);
        org.joda.time.Chronology chronology80 = dateTime79.getChronology();
        org.joda.time.DurationField durationField81 = chronology80.hours();
        org.joda.time.DateTimeField dateTimeField82 = chronology80.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField83 = chronology80.weekyear();
        java.util.Locale locale84 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket85 = new org.joda.time.format.DateTimeParserBucket(86399999L, chronology80, locale84);
        int int88 = dateTimeParser71.parseInto(dateTimeParserBucket85, "10", 9);
        int int89 = dateTimeParser71.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder90 = dateTimeFormatterBuilder57.append(dateTimeParser71);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder91 = dateTimeFormatterBuilder9.append(dateTimeParser71);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder93 = dateTimeFormatterBuilder9.appendMinuteOfDay(19045);
        boolean boolean94 = locale0.equals((java.lang.Object) dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimePrinter7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFieldType10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimePrinter32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeParser51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 3 + "'", int52 == 3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder56);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder66);
        org.junit.Assert.assertNotNull(dateTimePrinter67);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder70);
        org.junit.Assert.assertNotNull(dateTimeParser71);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime79);
        org.junit.Assert.assertNotNull(chronology80);
        org.junit.Assert.assertNotNull(durationField81);
        org.junit.Assert.assertNotNull(dateTimeField82);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + int88 + "' != '" + (-10) + "'", int88 == (-10));
        org.junit.Assert.assertTrue("'" + int89 + "' != '" + 23 + "'", int89 == 23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder90);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder91);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder93);
        org.junit.Assert.assertTrue("'" + boolean94 + "' != '" + false + "'", boolean94 == false);
    }

    @Test
    public void test15242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15242");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.dayOfYear();
        org.joda.time.DurationField durationField11 = chronology9.eras();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField13 = chronology9.monthOfYear();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DurationField durationField19 = property18.getLeapDurationField();
        org.joda.time.Interval interval20 = property18.toInterval();
        long long21 = property18.remainder();
        java.util.Locale locale23 = new java.util.Locale("hi!");
        int int24 = property18.getMaximumShortTextLength(locale23);
        java.lang.String str25 = locale23.getDisplayScript();
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = locale23.getDisplayVariant(locale26);
        java.lang.String str28 = dateTimeField13.getAsShortText((long) 1067493370, locale26);
        long long30 = dateTimeField13.remainder(56087L);
        long long32 = dateTimeField13.roundHalfEven(82800019L);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNull(durationField19);
        org.junit.Assert.assertNotNull(interval20);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 3 + "'", int24 == 3);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Jan" + "'", str28, "Jan");
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 56087L + "'", long30 == 56087L);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
    }

    @Test
    public void test15243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15243");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime11 = dateTime9.withLaterOffsetAtOverlap();
        org.joda.time.DateTime.Property property12 = dateTime11.secondOfMinute();
        org.joda.time.DateTime.Property property13 = dateTime11.minuteOfDay();
        int int14 = property13.getMinimumValueOverall();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test15244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15244");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder1.appendLiteral("DateTimeField[millisOfDay]");
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        boolean boolean21 = dateTimeZone16.isLocalDateTimeGap(localDateTime20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.weekyear();
        boolean boolean26 = dateTimeZone16.isLocalDateTimeGap(localDateTime24);
        long long28 = dateTimeZone16.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter6.withZone(dateTimeZone16);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withPivotYear(2022);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder3.append(dateTimeFormatter31);
        boolean boolean33 = dateTimeFormatter31.isOffsetParsed();
        java.util.Locale locale36 = new java.util.Locale("2022", "0001-01-01T00:00:00.000Z");
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter31.withLocale(locale36);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime38 = org.joda.time.LocalTime.parse("1971-07-01T00:00:00.001+01:00", dateTimeFormatter37);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long28 + "' != '" + 3L + "'", long28 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertEquals(locale36.toString(), "2022_0001-01-01T00:00:00.000Z");
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
    }

    @Test
    public void test15245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15245");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTime dateTime11 = dateTime6.minusWeeks(10);
        boolean boolean13 = dateTime6.isBefore((long) (-1));
        int int14 = dateTime6.getYearOfEra();
        org.joda.time.DateTime dateTime16 = dateTime6.withYear((int) (byte) 0);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getRangeDurationType();
        org.joda.time.DateTime.Property property19 = dateTime16.property(dateTimeFieldType17);
        org.joda.time.DateTime dateTime20 = property19.roundFloorCopy();
        org.joda.time.DateTime dateTime21 = property19.roundFloorCopy();
        org.joda.time.DateTime.Property property22 = dateTime21.weekyear();
        org.joda.time.DateTime dateTime23 = dateTime21.toDateTimeISO();
        org.joda.time.DateTime dateTime25 = dateTime23.minus((long) 87647);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1970 + "'", int14 == 1970);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test15246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15246");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        org.joda.time.DateTime dateTime8 = dateTime7.withEarlierOffsetAtOverlap();
        boolean boolean9 = dateTime7.isAfterNow();
        org.joda.time.Chronology chronology10 = dateTime7.getChronology();
        org.joda.time.DateTime dateTime12 = dateTime7.minusMonths(21);
        int int13 = dateTime7.getMonthOfYear();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
    }

    @Test
    public void test15247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15247");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.LocalTime localTime12 = property9.addNoWrapToCopy((int) (byte) 1);
        org.joda.time.LocalTime localTime14 = property9.addCopy((int) ' ');
        org.joda.time.LocalTime.Property property15 = localTime14.minuteOfHour();
        org.joda.time.LocalTime localTime17 = property15.addCopy(0);
        org.joda.time.LocalTime localTime18 = property15.getLocalTime();
        org.joda.time.LocalTime localTime19 = property15.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test15248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15248");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.lang.String str7 = property3.toString();
        java.lang.String str8 = property3.getAsText();
        boolean boolean9 = property3.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property3.setCopy(27);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.hourOfDay();
        java.lang.String str13 = localDateTime11.toString();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.withMinuteOfHour(4);
        java.lang.String str16 = localDateTime15.toString();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.LocalDateTime localDateTime18 = localDateTime15.minus(readableDuration17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.dayOfYear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.plusDays((-93320));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfYear]" + "'", str7, "Property[dayOfYear]");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "1970-01-27T00:00:00.002" + "'", str13, "1970-01-27T00:00:00.002");
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-27T00:04:00.002" + "'", str16, "1970-01-27T00:04:00.002");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test15249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15249");
        java.util.Locale locale2 = new java.util.Locale("", "millis");
        java.lang.String str3 = locale2.toLanguageTag();
        java.lang.String str4 = locale2.getDisplayName();
        java.lang.String str5 = locale2.getDisplayScript();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (-1), chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.weekyear();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime14 = property12.addToCopy(69);
        java.util.Locale locale16 = new java.util.Locale("hi!");
        java.lang.String str17 = locale16.getScript();
        java.lang.String str18 = locale16.getDisplayLanguage();
        java.lang.String str19 = locale16.getDisplayVariant();
        java.lang.String str20 = property12.getAsText(locale16);
        java.lang.String str21 = locale2.getDisplayScript(locale16);
        boolean boolean22 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "_MILLIS");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "und" + "'", str3, "und");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "MILLIS" + "'", str4, "MILLIS");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals(locale16.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "1" + "'", str20, "1");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test15250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15250");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime9.withWeekyear((int) 'x');
        org.joda.time.DateTime dateTime14 = dateTime12.minusMillis(53);
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.DateTime dateTime17 = dateTime12.withPeriodAdded(readablePeriod15, (int) (short) 1);
        org.joda.time.DateTime.Property property18 = dateTime12.yearOfCentury();
        int int19 = dateTime12.getCenturyOfEra();
        org.joda.time.DateTime dateTime20 = dateTime12.toDateTime();
        org.joda.time.DurationFieldType durationFieldType21 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTime dateTime28 = localDateTime24.toDateTime(dateTimeZone26);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.plus((long) 100);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfCentury();
        org.joda.time.DateTime dateTime34 = dateTime31.withWeekyear((int) 'x');
        org.joda.time.DateTime dateTime36 = dateTime34.minusMillis(53);
        org.joda.time.DateTime dateTime38 = dateTime36.minusMinutes((int) '4');
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime40.setMillisOfDay(10);
        mutableDateTime40.setMillisOfSecond((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        mutableDateTime40.add(readablePeriod45);
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType48 = dateTimeFieldType47.getDurationType();
        mutableDateTime40.add(durationFieldType48, 18);
        org.joda.time.format.DateTimePrinter dateTimePrinter51 = null;
        org.joda.time.format.DateTimeParser dateTimeParser52 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter51, dateTimeParser52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (-1), chronology55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.DateTime dateTime60 = localDateTime56.toDateTime(dateTimeZone58);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter62 = dateTimeFormatter53.withChronology(chronology61);
        org.joda.time.DateTimeField dateTimeField63 = chronology61.monthOfYear();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.clockhourOfHalfday();
        org.joda.time.DurationField durationField65 = chronology61.days();
        org.joda.time.DurationField durationField66 = durationFieldType48.getField(chronology61);
        org.joda.time.DateTime dateTime67 = dateTime36.toDateTime(chronology61);
        org.joda.time.DurationField durationField68 = durationFieldType21.getField(chronology61);
        org.joda.time.DateTime dateTime69 = dateTime20.withChronology(chronology61);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(durationFieldType21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str29, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(durationFieldType48);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeFormatter62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(durationField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(dateTime67);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTime69);
    }

    @Test
    public void test15251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15251");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime0.setChronology(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        long long7 = dateTimeZone5.previousTransition((long) 1);
        mutableDateTime0.setZone(dateTimeZone5);
        java.lang.String str9 = mutableDateTime0.toString();
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime0.millisOfDay();
        java.lang.Object obj11 = null;
        boolean boolean12 = mutableDateTime0.equals(obj11);
        java.lang.Object obj13 = mutableDateTime0.clone();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime0.setMonthOfYear(202000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 202000 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "2022-02-22T07:33:45.578+00:00:00.003" + "'", str9, "2022-02-22T07:33:45.578+00:00:00.003");
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(obj13);
// flaky:         org.junit.Assert.assertEquals(obj13.toString(), "2022-02-22T07:33:45.578+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj13), "2022-02-22T07:33:45.578+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj13), "2022-02-22T07:33:45.578+00:00:00.003");
    }

    @Test
    public void test15252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15252");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime9 = property5.addCopy((int) (byte) -1);
        org.joda.time.LocalTime.Property property10 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime12 = property10.addCopy((-292275054));
        org.joda.time.LocalTime localTime14 = property10.addCopy(1272824542);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test15253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15253");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        boolean boolean15 = dateTimeZone10.isLocalDateTimeGap(localDateTime14);
        long long17 = chronology9.set((org.joda.time.ReadablePartial) localDateTime14, (long) '#');
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.clockhourOfDay();
        boolean boolean19 = localDateTime14.isSupported(dateTimeFieldType18);
        org.joda.time.Chronology chronology20 = localDateTime14.getChronology();
        org.joda.time.LocalDateTime.Property property21 = localDateTime14.yearOfEra();
        org.joda.time.LocalDateTime localDateTime22 = property21.getLocalDateTime();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime24.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration27 = null;
        mutableDateTime24.add(readableDuration27, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime24.dayOfMonth();
        mutableDateTime24.setMillisOfDay((int) (short) 0);
        org.joda.time.MutableDateTime.Property property33 = mutableDateTime24.era();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.forOffsetHours((-4));
        mutableDateTime24.setZoneRetainFields(dateTimeZone35);
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        org.joda.time.Chronology chronology40 = null;
        org.joda.time.LocalDateTime localDateTime41 = new org.joda.time.LocalDateTime((long) (-1), chronology40);
        boolean boolean42 = dateTimeZone37.isLocalDateTimeGap(localDateTime41);
        org.joda.time.LocalDateTime localDateTime44 = localDateTime41.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property45 = localDateTime41.dayOfYear();
        org.joda.time.LocalDateTime localDateTime47 = localDateTime41.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration48 = null;
        org.joda.time.LocalDateTime localDateTime50 = localDateTime41.withDurationAdded(readableDuration48, (int) 'u');
        org.joda.time.LocalDateTime localDateTime52 = localDateTime50.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.weekyear();
        int int54 = localDateTime50.indexOf(dateTimeFieldType53);
        org.joda.time.DurationFieldType durationFieldType55 = dateTimeFieldType53.getDurationType();
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime24.property(dateTimeFieldType53);
        mutableDateTime24.setMillis(31243724000L);
        int int59 = property21.getDifference((org.joda.time.ReadableInstant) mutableDateTime24);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + (-1) + "'", int54 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
    }

    @Test
    public void test15254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15254");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfMonth();
        int int7 = localDateTime5.getHourOfDay();
        int int8 = localDateTime5.size();
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime11 = localDateTime5.withPeriodAdded(readablePeriod9, (int) 'u');
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.secondOfMinute();
        int int13 = localDateTime11.getMinuteOfHour();
        org.joda.time.ReadableDuration readableDuration14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minus(readableDuration14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfMonth(417);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 417 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test15255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15255");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        java.lang.String str7 = localTime6.toString();
        org.joda.time.LocalTime localTime9 = localTime6.minusMillis(0);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = localTime9.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalTime localTime14 = localTime12.withMillisOfSecond(16);
        org.joda.time.LocalTime localTime16 = localTime12.withMillisOfDay((int) 'u');
        org.joda.time.DateTime dateTime17 = localTime12.toDateTimeToday();
        int int18 = localTime12.getSecondOfMinute();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.003" + "'", str7, "23:00:00.003");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test15256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15256");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.LocalTime localTime12 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime13 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime14 = property9.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalTime localTime17 = localTime14.withPeriodAdded(readablePeriod15, 44);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(localTime17);
    }

    @Test
    public void test15257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15257");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setWeekyear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.minuteOfDay();
        int int5 = mutableDateTime1.getWeekOfWeekyear();
        java.lang.Object obj6 = mutableDateTime1.clone();
        org.joda.time.ReadableDuration readableDuration7 = null;
        mutableDateTime1.add(readableDuration7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime1.add(readablePeriod9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatterBuilder16.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendMillisOfSecond(292278993);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTwoDigitWeekyear(1969);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder19.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendDayOfYear((int) '#');
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTime dateTime31 = localDateTime27.toDateTime(dateTimeZone29);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.DateTime dateTime34 = dateTime31.plus((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType35 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int36 = dateTime34.get(dateTimeFieldType35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (-1), chronology38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.weekyear();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime39.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime44 = localDateTime39.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod45 = null;
        org.joda.time.LocalDateTime localDateTime46 = localDateTime39.minus(readablePeriod45);
        org.joda.time.LocalDateTime localDateTime48 = localDateTime39.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime50 = localDateTime48.withWeekOfWeekyear(23);
        int int51 = localDateTime48.getCenturyOfEra();
        int int53 = localDateTime48.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime55 = localDateTime48.plusMinutes(99);
        org.joda.time.Chronology chronology57 = null;
        org.joda.time.LocalDateTime localDateTime58 = new org.joda.time.LocalDateTime((long) (-1), chronology57);
        org.joda.time.LocalDateTime.Property property59 = localDateTime58.weekyear();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime58.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime63 = localDateTime58.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property64 = localDateTime58.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean66 = localDateTime58.isSupported(dateTimeFieldType65);
        int int67 = localDateTime55.indexOf(dateTimeFieldType65);
        boolean boolean68 = dateTime34.isSupported(dateTimeFieldType65);
        java.lang.String str69 = dateTimeFieldType65.getName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = dateTimeFormatterBuilder22.appendFixedDecimal(dateTimeFieldType65, 9);
        org.joda.time.DurationFieldType durationFieldType72 = dateTimeFieldType65.getRangeDurationType();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime1.set(dateTimeFieldType65, 297878821);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 297878821 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(obj6);
// flaky:         org.junit.Assert.assertEquals(obj6.toString(), "0100-01-07T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj6), "0100-01-07T00:00:00.002+00:00:00.003");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj6), "0100-01-07T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimePrinter17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str32, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTimeFieldType35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 4 + "'", int36 == 4);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(localDateTime44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 19 + "'", int51 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime63);
        org.junit.Assert.assertNotNull(property64);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + true + "'", boolean66 == true);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "minuteOfDay" + "'", str69, "minuteOfDay");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder71);
        org.junit.Assert.assertNotNull(durationFieldType72);
    }

    @Test
    public void test15258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15258");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property7.addToCopy((int) ' ');
        org.joda.time.LocalDate localDate11 = property7.withMinimumValue();
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDate localDate13 = localDate11.minus(readablePeriod12);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate13);
    }

    @Test
    public void test15259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15259");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.lang.String str7 = property3.toString();
        org.joda.time.LocalDateTime localDateTime9 = property3.setCopy((int) (short) 1);
        int int10 = localDateTime9.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusDays((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getRangeDurationType();
        int int15 = localDateTime9.get(dateTimeFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime22 = localDateTime18.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.DateTimeZone dateTimeZone28 = chronology23.getZone();
        org.joda.time.DateTimeField dateTimeField29 = chronology23.yearOfCentury();
        org.joda.time.DurationField durationField30 = chronology23.years();
        org.joda.time.DateTimeZone dateTimeZone31 = chronology23.getZone();
        long long33 = dateTimeZone31.nextTransition((-58853985074955L));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfYear]" + "'", str7, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70 + "'", int15 == 70);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + (-58853985074955L) + "'", long33 == (-58853985074955L));
    }

    @Test
    public void test15260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15260");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property16 = dateTime9.era();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField18 = property16.getField();
        org.joda.time.DateTime dateTime19 = property16.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime20 = property16.getDateTime();
        org.joda.time.DateTime.Property property21 = dateTime20.dayOfYear();
        int int22 = property21.getMinimumValueOverall();
        org.joda.time.DateTime dateTime23 = property21.roundHalfEvenCopy();
        org.joda.time.DateTime.Property property24 = dateTime23.secondOfDay();
        org.joda.time.DateTime dateTime25 = property24.roundCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test15261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15261");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = dateTimeZone1.getName((long) 5, locale4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime9 = dateTime7.plusWeeks(4861378);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.addWrapField((-1));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime14.add(readablePeriod15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-1), chronology18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime23 = localDateTime19.toDateTime(dateTimeZone21);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.ReadableDuration readableDuration25 = null;
        org.joda.time.DateTime dateTime26 = dateTime23.plus(readableDuration25);
        org.joda.time.DateTime dateTime28 = dateTime23.minusWeeks(10);
        mutableDateTime14.setMillis((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime.Property property30 = dateTime23.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        boolean boolean36 = dateTimeZone31.isLocalDateTimeGap(localDateTime35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (-1), chronology38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.weekyear();
        boolean boolean41 = dateTimeZone31.isLocalDateTimeGap(localDateTime39);
        org.joda.time.DateTime dateTime42 = dateTime23.withZoneRetainFields(dateTimeZone31);
        boolean boolean43 = dateTime7.isEqual((org.joda.time.ReadableInstant) dateTime23);
        org.joda.time.DateTime dateTime45 = dateTime7.plusSeconds(14);
        org.joda.time.DateTime dateTime47 = org.joda.time.DateTime.parse("2022-02-22");
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.DateTime dateTime49 = dateTime47.plus(readablePeriod48);
        int int50 = dateTime45.compareTo((org.joda.time.ReadableInstant) dateTime47);
        org.joda.time.DateTime.Property property51 = dateTime45.weekyear();
        java.lang.String str52 = property51.getAsText();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.003" + "'", str6, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str24, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 1 + "'", int50 == 1);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "2022" + "'", str52, "2022");
    }

    @Test
    public void test15262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15262");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        boolean boolean8 = property7.isLeap();
        org.joda.time.LocalDate localDate9 = property7.roundHalfFloorCopy();
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate12 = localDate9.withPeriodAdded(readablePeriod10, (int) (short) 0);
        org.joda.time.DateTimeZone dateTimeZone13 = null;
        org.joda.time.DateTime dateTime14 = localDate9.toDateTimeAtMidnight(dateTimeZone13);
        int int15 = localDate9.getYearOfEra();
        org.joda.time.LocalDate localDate17 = localDate9.plusWeeks(2);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTimeFieldType dateTimeFieldType19 = localDate17.getFieldType(59077736);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 59077736");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 2000 + "'", int15 == 2000);
        org.junit.Assert.assertNotNull(localDate17);
    }

    @Test
    public void test15263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15263");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        int int8 = localDate2.getWeekyear();
        org.joda.time.LocalDate.Property property9 = localDate2.weekOfWeekyear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.DateTime dateTime11 = localDate2.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.ReadableDuration readableDuration12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.plus(readableDuration12);
        org.joda.time.DateTimeZone dateTimeZone14 = dateTime11.getZone();
        org.joda.time.DateTime.Property property15 = dateTime11.yearOfCentury();
        java.lang.String str16 = property15.getAsShortText();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "70" + "'", str16, "70");
    }

    @Test
    public void test15264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15264");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property16 = dateTime9.era();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        int int18 = dateTime17.getEra();
        int int19 = dateTime17.getEra();
        org.joda.time.DateTime dateTime21 = dateTime17.plusDays(17259888);
        org.joda.time.DateTime.Property property22 = dateTime17.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField23 = property22.getField();
        org.joda.time.DateTime dateTime24 = property22.roundHalfFloorCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(dateTime24);
    }

    @Test
    public void test15265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15265");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.ReadableDuration readableDuration8 = null;
        org.joda.time.DateTime dateTime9 = dateTime6.plus(readableDuration8);
        org.joda.time.DateTimeZone dateTimeZone10 = dateTime9.getZone();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.minus(readableDuration11);
        org.joda.time.DateTime dateTime13 = dateTime9.toDateTime();
        org.joda.time.ReadableInstant readableInstant14 = null;
        boolean boolean15 = dateTime13.isBefore(readableInstant14);
        org.joda.time.DateTime dateTime16 = dateTime13.toDateTime();
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime18.setTime(100L);
        org.joda.time.MutableDateTime.Property property21 = mutableDateTime18.dayOfMonth();
        int int22 = mutableDateTime18.getSecondOfDay();
        org.joda.time.Chronology chronology25 = null;
        org.joda.time.LocalDateTime localDateTime26 = new org.joda.time.LocalDateTime((long) (-1), chronology25);
        org.joda.time.LocalDateTime.Property property27 = localDateTime26.minuteOfHour();
        int int28 = localDateTime26.size();
        org.joda.time.Chronology chronology29 = localDateTime26.getChronology();
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime((long) (byte) 100, chronology29);
        mutableDateTime18.setChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField32 = chronology29.secondOfMinute();
        org.joda.time.DateTime dateTime33 = dateTime16.withChronology(chronology29);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTime33);
    }

    @Test
    public void test15266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15266");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DurationField durationField12 = chronology9.minutes();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 292278993, chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 'a', chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime(chronology9);
        org.joda.time.DurationField durationField17 = chronology9.halfdays();
        long long20 = durationField17.subtract((long) '#', 92);
        long long22 = durationField17.getMillis((long) 2922750);
        long long25 = durationField17.add((long) 3, 2332799999L);
        long long28 = durationField17.getMillis((long) 43, 133200024L);
        boolean boolean29 = durationField17.isSupported();
        long long30 = durationField17.getUnitMillis();
        int int33 = durationField17.getDifference(0L, (-3591240L));
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-3974399965L) + "'", long20 == (-3974399965L));
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 126262800000000L + "'", long22 == 126262800000000L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100776959956800003L + "'", long25 == 100776959956800003L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1857600000L + "'", long28 == 1857600000L);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 43200000L + "'", long30 == 43200000L);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 0 + "'", int33 == 0);
    }

    @Test
    public void test15267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15267");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DurationField durationField7 = property6.getLeapDurationField();
        org.joda.time.Interval interval8 = property6.toInterval();
        long long9 = property6.remainder();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        int int12 = property6.getMaximumShortTextLength(locale11);
        java.lang.String str13 = property2.getAsShortText(locale11);
        org.joda.time.MutableDateTime mutableDateTime14 = property2.roundHalfFloor();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        int int17 = dateTimeZone15.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.DateTime dateTime18 = mutableDateTime14.toDateTime(dateTimeZone15);
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = null;
        org.joda.time.format.DateTimeParser dateTimeParser20 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter19, dateTimeParser20);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTime dateTime28 = localDateTime24.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter21.withChronology(chronology29);
        org.joda.time.DateTimeField dateTimeField31 = chronology29.monthOfYear();
        org.joda.time.DateTimeField dateTimeField32 = chronology29.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField33 = chronology29.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField34 = chronology29.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology29);
        int int36 = mutableDateTime35.getDayOfWeek();
        boolean boolean37 = mutableDateTime14.isBefore((org.joda.time.ReadableInstant) mutableDateTime35);
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime35.setWeekOfWeekyear(1947);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1947 for weekOfWeekyear must be in the range [1,52]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNull(dateTimeField1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(interval8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2L + "'", long9 == 2L);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Tue" + "'", str13, "Tue");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 3 + "'", int17 == 3);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 2 + "'", int36 == 2);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
    }

    @Test
    public void test15268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15268");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfWeek();
        java.lang.String str7 = localDate0.toString("23:00:00.000");
        org.joda.time.LocalDate localDate9 = localDate0.minusDays(1969);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfMonth((int) (short) 10);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTime dateTime13 = localDate9.toDateTime(localTime12);
        org.joda.time.DateTime.Property property14 = dateTime13.weekyear();
        org.joda.time.DateTime.Property property15 = dateTime13.secondOfMinute();
        org.joda.time.DateTime dateTime16 = property15.getDateTime();
        org.joda.time.DateTime dateTime17 = property15.roundHalfEvenCopy();
        int int18 = dateTime17.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.000" + "'", str7, "23:00:00.000");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 16 + "'", int18 == 16);
    }

    @Test
    public void test15269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15269");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekyearOfCentury();
        java.lang.String str11 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.clockhourOfHalfday();
        int int14 = dateTimeField12.getMinimumValue((long) 82800100);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str11, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
    }

    @Test
    public void test15270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15270");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate.Property property10 = localDate9.weekyear();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test15271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15271");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfYear();
        org.joda.time.Chronology chronology12 = chronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        boolean boolean18 = dateTimeZone13.isLocalDateTimeGap(localDateTime17);
        long long20 = chronology12.set((org.joda.time.ReadablePartial) localDateTime17, (long) '#');
        org.joda.time.DateTimeField dateTimeField21 = chronology12.secondOfMinute();
        org.joda.time.DurationField durationField22 = chronology12.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology12);
        org.joda.time.format.DateTimeParser dateTimeParser24 = dateTimeFormatter23.getParser();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTime dateTime31 = localDateTime27.toDateTime(dateTimeZone29);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.hours();
        org.joda.time.DurationField durationField34 = chronology32.weekyears();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekOfWeekyear();
        long long38 = dateTimeField35.getDifferenceAsLong(16L, (long) 59);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField40 = mutableDateTime39.getRoundingField();
        org.joda.time.MutableDateTime.Property property41 = mutableDateTime39.dayOfWeek();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-1), chronology43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfYear();
        org.joda.time.DurationField durationField46 = property45.getLeapDurationField();
        org.joda.time.Interval interval47 = property45.toInterval();
        long long48 = property45.remainder();
        java.util.Locale locale50 = new java.util.Locale("hi!");
        int int51 = property45.getMaximumShortTextLength(locale50);
        java.lang.String str52 = property41.getAsShortText(locale50);
        boolean boolean53 = locale50.hasExtensions();
        int int54 = dateTimeField35.getMaximumShortTextLength(locale50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter55 = dateTimeFormatter23.withLocale(locale50);
        java.util.Locale locale56 = dateTimeFormatter23.getLocale();
        boolean boolean57 = dateTimeFormatter23.isOffsetParsed();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(dateTimeParser24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNull(dateTimeField40);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNull(durationField46);
        org.junit.Assert.assertNotNull(interval47);
// flaky:         org.junit.Assert.assertTrue("'" + long48 + "' != '" + 2L + "'", long48 == 2L);
        org.junit.Assert.assertEquals(locale50.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 3 + "'", int51 == 3);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "Tue" + "'", str52, "Tue");
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 2 + "'", int54 == 2);
        org.junit.Assert.assertNotNull(dateTimeFormatter55);
        org.junit.Assert.assertNull(locale56);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
    }

    @Test
    public void test15272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15272");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(29);
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime7 = org.joda.time.MutableDateTime.now(dateTimeZone6);
        java.util.TimeZone timeZone8 = dateTimeZone6.toTimeZone();
        long long11 = dateTimeZone6.convertLocalToUTC((long) 1970, true);
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime(dateTimeZone6);
        int int13 = localDateTime5.compareTo((org.joda.time.ReadablePartial) localDateTime12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime12.millisOfDay();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1967L + "'", long11 == 1967L);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test15273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15273");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("zho");
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.secondOfDay();
        org.joda.time.DurationField durationField14 = chronology12.minutes();
        org.joda.time.DurationField durationField15 = chronology12.minutes();
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime((long) 292278993, chronology12);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) 'a', chronology12);
        org.joda.time.DateTimeField dateTimeField18 = chronology12.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime(chronology12);
        org.joda.time.DateTimeField dateTimeField20 = chronology12.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology12.era();
        org.joda.time.DateTimeField dateTimeField22 = chronology12.weekyearOfCentury();
        long long25 = dateTimeField22.getDifferenceAsLong(86399999L, 31556952000L);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        boolean boolean31 = dateTimeZone26.isLocalDateTimeGap(localDateTime30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime30.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime30.withMillisOfDay(5);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime30.plusHours((int) (short) 1);
        org.joda.time.LocalDateTime localDateTime39 = localDateTime30.withDayOfYear(12);
        java.util.Locale.Builder builder40 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder41 = builder40.clearExtensions();
        java.util.Locale locale42 = builder41.build();
        java.util.Locale.Builder builder43 = builder41.clear();
        java.util.Locale.Builder builder45 = builder41.setScript("");
        java.util.Locale locale46 = builder45.build();
        java.lang.String str47 = dateTimeField22.getAsText((org.joda.time.ReadablePartial) localDateTime30, locale46);
        java.util.Locale.Builder builder48 = builder2.setLocale(locale46);
        java.util.Locale.Builder builder49 = builder2.clear();
        java.util.Locale locale50 = builder2.build();
        java.util.Locale locale51 = builder2.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "70" + "'", str47, "70");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "");
    }

    @Test
    public void test15274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15274");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setMillisOfDay(10);
        mutableDateTime1.setMillisOfSecond((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime7 = property6.roundHalfEven();
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.DateTimeField dateTimeField10 = dateTimeFieldType8.getField(chronology9);
        boolean boolean12 = dateTimeField10.isLeap(100L);
        long long15 = dateTimeField10.set(100L, 1975);
        mutableDateTime7.setRounding(dateTimeField10);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime7.era();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime7.setDayOfMonth(1855);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1855 for dayOfMonth must be in the range [1,31]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 157766400100L + "'", long15 == 157766400100L);
        org.junit.Assert.assertNotNull(property17);
    }

    @Test
    public void test15275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15275");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        int int9 = dateTimeZone5.getOffsetFromLocal((long) (byte) 10);
        long long13 = dateTimeZone5.convertLocalToUTC((long) 366, false, 2177429688000L);
        org.joda.time.DateTime dateTime14 = new org.joda.time.DateTime((long) 86399999, dateTimeZone5);
        org.joda.time.DateTime dateTime16 = dateTime14.plusDays(152);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + 363L + "'", long13 == 363L);
        org.junit.Assert.assertNotNull(dateTime16);
    }

    @Test
    public void test15276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15276");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra(10);
        org.joda.time.LocalDate.Property property8 = localDate5.year();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        org.joda.time.LocalDate localDate10 = property8.getLocalDate();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate12 = localDate10.withYearOfCentury(366);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 366 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(localDate10);
    }

    @Test
    public void test15277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15277");
        java.util.TimeZone timeZone1 = java.util.TimeZone.getTimeZone("1969-12-31T23:59:59.999");
        timeZone1.setRawOffset(616);
        boolean boolean4 = timeZone1.observesDaylightTime();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forTimeZone(timeZone1);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-1), chronology10);
        boolean boolean12 = dateTimeZone7.isLocalDateTimeGap(localDateTime11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (-1), chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.weekyear();
        boolean boolean17 = dateTimeZone7.isLocalDateTimeGap(localDateTime15);
        boolean boolean19 = dateTimeZone7.isStandardOffset(86399999L);
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime(100L, dateTimeZone7);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.monthOfYear();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.weekyear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime29 = localDateTime24.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod30 = null;
        org.joda.time.LocalDateTime localDateTime31 = localDateTime24.minus(readablePeriod30);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime24.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withWeekOfWeekyear(23);
        int int36 = localDateTime33.getCenturyOfEra();
        int int38 = localDateTime33.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.plusMinutes(99);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (-1), chronology42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.weekyear();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime43.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime48 = localDateTime43.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property49 = localDateTime43.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType50 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean51 = localDateTime43.isSupported(dateTimeFieldType50);
        int int52 = localDateTime40.indexOf(dateTimeFieldType50);
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (-1), chronology54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.plusDays(29);
        org.joda.time.LocalDateTime localDateTime60 = localDateTime55.minusDays(21);
        org.joda.time.DateTimeFieldType dateTimeFieldType61 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType62 = dateTimeFieldType61.getRangeDurationType();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) (-1), chronology64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone68 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTime dateTime69 = localDateTime65.toDateTime(dateTimeZone67);
        org.joda.time.Chronology chronology70 = dateTime69.getChronology();
        org.joda.time.DateTimeField dateTimeField71 = chronology70.secondOfDay();
        org.joda.time.DurationField durationField72 = durationFieldType62.getField(chronology70);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime60.withFieldAdded(durationFieldType62, 18);
        org.joda.time.LocalDateTime localDateTime76 = localDateTime40.withFieldAdded(durationFieldType62, 12);
        boolean boolean77 = localDateTime20.isSupported(durationFieldType62);
        java.util.Date date78 = localDateTime20.toDate();
        boolean boolean79 = timeZone1.inDaylightTime(date78);
        org.junit.Assert.assertNotNull(timeZone1);
        org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "Greenwich Mean Time");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 19 + "'", int36 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(localDateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTimeFieldType50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(dateTimeFieldType61);
        org.junit.Assert.assertNotNull(durationFieldType62);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(chronology70);
        org.junit.Assert.assertNotNull(dateTimeField71);
        org.junit.Assert.assertNotNull(durationField72);
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(localDateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
        org.junit.Assert.assertNotNull(date78);
// flaky:         org.junit.Assert.assertEquals(date78.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
    }

    @Test
    public void test15278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15278");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.lang.String str7 = property3.toString();
        java.lang.String str8 = property3.getAsText();
        boolean boolean9 = property3.isLeap();
        org.joda.time.LocalDateTime localDateTime11 = property3.setCopy(27);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.centuryOfEra();
        int int13 = property12.getMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = property12.roundHalfFloorCopy();
        java.util.Locale locale18 = new java.util.Locale("English", "1925-01-01T00:00:00.002");
        java.lang.String str19 = localDateTime14.toString("00:00:00.000", locale18);
        int int20 = localDateTime14.getWeekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime14.plusMinutes(24);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime14.minusHours((-22));
        org.joda.time.LocalDateTime localDateTime26 = localDateTime14.plusYears(5599680);
        int int27 = localDateTime26.getYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfYear]" + "'", str7, "Property[dayOfYear]");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1" + "'", str8, "1");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2922789 + "'", int13 == 2922789);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertEquals(locale18.toString(), "english_1925-01-01T00:00:00.002");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "00:00:00.000" + "'", str19, "00:00:00.000");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1999 + "'", int20 == 1999);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 5601680 + "'", int27 == 5601680);
    }

    @Test
    public void test15279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15279");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate7 = localDate5.withYearOfEra(10);
        org.joda.time.LocalDate.Property property8 = localDate5.year();
        org.joda.time.DateTimeField dateTimeField9 = property8.getField();
        long long12 = dateTimeField9.getDifferenceAsLong((long) 738207, 2403780717657600120L);
        boolean boolean13 = dateTimeField9.isSupported();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-76172778L) + "'", long12 == (-76172778L));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test15280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15280");
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime4.setMillisOfDay(10);
        mutableDateTime4.setMillisOfSecond((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        mutableDateTime4.add(readablePeriod9);
        org.joda.time.DateTimeFieldType dateTimeFieldType11 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType12 = dateTimeFieldType11.getDurationType();
        mutableDateTime4.add(durationFieldType12, 18);
        org.joda.time.format.DateTimePrinter dateTimePrinter15 = null;
        org.joda.time.format.DateTimeParser dateTimeParser16 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter17 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter15, dateTimeParser16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter17.withChronology(chronology25);
        org.joda.time.DateTimeField dateTimeField27 = chronology25.monthOfYear();
        org.joda.time.DateTimeField dateTimeField28 = chronology25.clockhourOfHalfday();
        org.joda.time.DurationField durationField29 = chronology25.days();
        org.joda.time.DurationField durationField30 = durationFieldType12.getField(chronology25);
        org.joda.time.DurationFieldType durationFieldType31 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTime dateTime40 = localDateTime36.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.secondOfDay();
        org.joda.time.DurationField durationField43 = chronology41.minutes();
        org.joda.time.DurationField durationField44 = chronology41.minutes();
        org.joda.time.MutableDateTime mutableDateTime45 = new org.joda.time.MutableDateTime((long) 292278993, chronology41);
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) 'a', chronology41);
        org.joda.time.DateTimeField dateTimeField47 = chronology41.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime48 = new org.joda.time.MutableDateTime(chronology41);
        org.joda.time.DateTimeField dateTimeField49 = chronology41.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField50 = chronology41.minuteOfHour();
        org.joda.time.DurationField durationField51 = durationFieldType31.getField(chronology41);
        org.joda.time.DurationField durationField52 = durationFieldType12.getField(chronology41);
        java.util.Locale locale53 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale53);
        java.lang.String str55 = locale53.getDisplayVariant();
        java.util.Set<java.lang.String> strSet56 = locale53.getUnicodeLocaleKeys();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket59 = new org.joda.time.format.DateTimeParserBucket(3938L, chronology41, locale53, (java.lang.Integer) 15, 23);
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime(1997L, chronology41);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((long) 240, chronology41);
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime(chronology41);
        org.joda.time.LocalDateTime localDateTime63 = new org.joda.time.LocalDateTime(chronology41);
        org.junit.Assert.assertNotNull(dateTimeFieldType11);
        org.junit.Assert.assertNotNull(durationFieldType12);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationFieldType31);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(durationField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(strSet56);
    }

    @Test
    public void test15281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15281");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar5 = mutableDateTime4.toGregorianCalendar();
        boolean boolean6 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.Chronology chronology7 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-1), chronology10);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.minusSeconds((int) (byte) 100);
        int int14 = localDateTime13.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.era();
        java.lang.String str16 = property15.getAsText();
        org.joda.time.LocalDateTime localDateTime17 = property15.roundHalfEvenCopy();
        java.lang.String str18 = property15.getAsShortText();
        org.joda.time.LocalDateTime localDateTime19 = property15.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.hourOfDay();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.plusMonths(10);
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        boolean boolean28 = dateTimeZone23.isLocalDateTimeGap(localDateTime27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-1), chronology30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekyear();
        boolean boolean33 = dateTimeZone23.isLocalDateTimeGap(localDateTime31);
        org.joda.time.LocalDateTime.Property property34 = localDateTime31.millisOfDay();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusYears((int) (byte) 10);
        int int37 = localDateTime36.getDayOfYear();
        int[] intArray38 = localDateTime36.getValues();
        int int39 = dateTimeField8.getMaximumValue((org.joda.time.ReadablePartial) localDateTime19, intArray38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime19.yearOfEra();
        org.joda.time.LocalDateTime localDateTime42 = property40.addWrapFieldToCopy(11);
        int int43 = localDateTime42.getYearOfEra();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "AD" + "'", str16, "AD");
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "AD" + "'", str18, "AD");
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1 + "'", int37 == 1);
        org.junit.Assert.assertNotNull(intArray38);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray38), "[1980, 1, 1, 2]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 99 + "'", int39 == 99);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 12 + "'", int43 == 12);
    }

    @Test
    public void test15282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15282");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.weekOfWeekyear();
        java.util.Locale locale15 = null;
        int int16 = dateTimeField14.getMaximumTextLength(locale15);
        int int18 = dateTimeField14.getMinimumValue((long) 1975);
        long long21 = dateTimeField14.addWrapField((long) 15, 59);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str23 = locale22.getScript();
        int int24 = dateTimeField14.getMaximumTextLength(locale22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTime dateTime31 = localDateTime27.toDateTime(dateTimeZone29);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime27.minusMillis(1);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.minus(readablePeriod42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime36.withMonthOfYear(1);
        int[] intArray46 = localDateTime36.getValues();
        int int47 = dateTimeField14.getMinimumValue((org.joda.time.ReadablePartial) localDateTime27, intArray46);
        org.joda.time.MutableDateTime mutableDateTime49 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField50 = mutableDateTime49.getRoundingField();
        org.joda.time.MutableDateTime.Property property51 = mutableDateTime49.dayOfWeek();
        org.joda.time.Chronology chronology53 = null;
        org.joda.time.LocalDateTime localDateTime54 = new org.joda.time.LocalDateTime((long) (-1), chronology53);
        org.joda.time.LocalDateTime.Property property55 = localDateTime54.dayOfYear();
        org.joda.time.DurationField durationField56 = property55.getLeapDurationField();
        org.joda.time.Interval interval57 = property55.toInterval();
        long long58 = property55.remainder();
        java.util.Locale locale60 = new java.util.Locale("hi!");
        int int61 = property55.getMaximumShortTextLength(locale60);
        java.lang.String str62 = property51.getAsShortText(locale60);
        boolean boolean63 = locale60.hasExtensions();
        java.util.Locale locale67 = new java.util.Locale("", "1969-12-31T23:59:59.999Z", "1969-12-31T23:59:59.999Z");
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleAttributes();
        java.lang.String str70 = locale68.getDisplayCountry();
        java.lang.String str71 = locale67.getDisplayScript(locale68);
        java.lang.String str72 = locale60.getDisplayCountry(locale68);
        java.lang.String str73 = dateTimeField14.getAsText(1980518L, locale68);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 2 + "'", int16 == 2);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3628800015L + "'", long21 == 3628800015L);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2 + "'", int24 == 2);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(intArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[1970, 1, 1, 2]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
        org.junit.Assert.assertNull(dateTimeField50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNull(durationField56);
        org.junit.Assert.assertNotNull(interval57);
// flaky:         org.junit.Assert.assertTrue("'" + long58 + "' != '" + 2L + "'", long58 == 2L);
        org.junit.Assert.assertEquals(locale60.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 3 + "'", int61 == 3);
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "Tue" + "'", str62, "Tue");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertEquals(locale67.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "Taiwan" + "'", str70, "Taiwan");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1" + "'", str73, "1");
    }

    @Test
    public void test15283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15283");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DurationField durationField10 = chronology9.hours();
        org.joda.time.DateTimeField dateTimeField11 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField12 = chronology9.weekyear();
        java.util.Locale locale13 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket14 = new org.joda.time.format.DateTimeParserBucket(86399999L, chronology9, locale13);
        org.joda.time.DurationField durationField15 = chronology9.millis();
        java.util.Locale.Builder builder16 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder16.clearExtensions();
        java.util.Locale locale18 = builder16.build();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket19 = new org.joda.time.format.DateTimeParserBucket((long) 4, chronology9, locale18);
        org.joda.time.DurationField durationField20 = chronology9.seconds();
        org.joda.time.DateTimeField dateTimeField21 = chronology9.era();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(durationField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
    }

    @Test
    public void test15284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15284");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtCurrentTime();
        org.joda.time.LocalDate localDate8 = localDate0.withWeekOfWeekyear(19);
        org.joda.time.LocalDate localDate10 = localDate0.withDayOfYear(240);
        org.joda.time.LocalDate localDate12 = localDate10.plusYears(598);
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test15285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15285");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        mutableDateTime0.addWeekyears(19045);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology9 = null;
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime((long) (-1), chronology9);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.DateTime dateTime14 = localDateTime10.toDateTime(dateTimeZone12);
        org.joda.time.Chronology chronology15 = dateTime14.getChronology();
        org.joda.time.DateTimeField dateTimeField16 = chronology15.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology15);
        org.joda.time.DateTimeField dateTimeField18 = dateTimeFieldType7.getField(chronology15);
        org.joda.time.DateTimeField dateTimeField19 = chronology15.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField20 = chronology15.minuteOfDay();
        org.joda.time.DurationField durationField21 = chronology15.weekyears();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime(41L, chronology15);
        org.joda.time.DateTime dateTime23 = new org.joda.time.DateTime((-27265806143999900L), chronology15);
        mutableDateTime0.setTime((org.joda.time.ReadableInstant) dateTime23);
        org.junit.Assert.assertNull(dateTimeField1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
    }

    @Test
    public void test15286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15286");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder3.appendHourOfDay((int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder3.appendMinuteOfDay(1970);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendWeekOfWeekyear(218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder11.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder11.appendTwoDigitYear(9, false);
        org.joda.time.MutableDateTime mutableDateTime16 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField17 = mutableDateTime16.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType18.getDurationType();
        mutableDateTime16.add(durationFieldType19, 100);
        mutableDateTime16.addYears(10);
        org.joda.time.MutableDateTime mutableDateTime24 = mutableDateTime16.toMutableDateTimeISO();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTime dateTime31 = localDateTime27.toDateTime(dateTimeZone29);
        java.lang.String str32 = dateTime31.toString();
        org.joda.time.ReadableDuration readableDuration33 = null;
        org.joda.time.DateTime dateTime34 = dateTime31.plus(readableDuration33);
        org.joda.time.ReadableDuration readableDuration35 = null;
        org.joda.time.DateTime dateTime36 = dateTime31.plus(readableDuration35);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder37.appendSecondOfDay(738207);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder39.appendYearOfCentury(738207, 17259888);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (-1), chronology44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTime dateTime49 = localDateTime45.toDateTime(dateTimeZone47);
        java.lang.String str50 = dateTime49.toString();
        org.joda.time.DateTime dateTime52 = dateTime49.plus((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType53 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int54 = dateTime52.get(dateTimeFieldType53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (-1), chronology56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.weekyear();
        org.joda.time.LocalDateTime localDateTime60 = localDateTime57.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime62 = localDateTime57.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod63 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime57.minus(readablePeriod63);
        org.joda.time.LocalDateTime localDateTime66 = localDateTime57.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime66.withWeekOfWeekyear(23);
        int int69 = localDateTime66.getCenturyOfEra();
        int int71 = localDateTime66.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime73 = localDateTime66.plusMinutes(99);
        org.joda.time.Chronology chronology75 = null;
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((long) (-1), chronology75);
        org.joda.time.LocalDateTime.Property property77 = localDateTime76.weekyear();
        org.joda.time.LocalDateTime localDateTime79 = localDateTime76.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime81 = localDateTime76.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property82 = localDateTime76.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType83 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean84 = localDateTime76.isSupported(dateTimeFieldType83);
        int int85 = localDateTime73.indexOf(dateTimeFieldType83);
        boolean boolean86 = dateTime52.isSupported(dateTimeFieldType83);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder89 = dateTimeFormatterBuilder39.appendFraction(dateTimeFieldType83, 70, 292278994);
        org.joda.time.DateTime dateTime91 = dateTime36.withField(dateTimeFieldType83, 20);
        int int92 = mutableDateTime16.get(dateTimeFieldType83);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder93 = dateTimeFormatterBuilder11.appendShortText(dateTimeFieldType83);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder96 = dateTimeFormatterBuilder11.appendYear((-292275054), 86399999);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder12);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNull(dateTimeField17);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(mutableDateTime24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str32, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime49);
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str50, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTimeFieldType53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 4 + "'", int54 == 4);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 19 + "'", int69 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int71 + "' != '" + 1 + "'", int71 == 1);
        org.junit.Assert.assertNotNull(localDateTime73);
        org.junit.Assert.assertNotNull(property77);
        org.junit.Assert.assertNotNull(localDateTime79);
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTimeFieldType83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertTrue("'" + int85 + "' != '" + (-1) + "'", int85 == (-1));
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder89);
        org.junit.Assert.assertNotNull(dateTime91);
// flaky:         org.junit.Assert.assertTrue("'" + int92 + "' != '" + 453 + "'", int92 == 453);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder93);
    }

    @Test
    public void test15287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15287");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfYear();
        org.joda.time.Chronology chronology12 = chronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        boolean boolean18 = dateTimeZone13.isLocalDateTimeGap(localDateTime17);
        long long20 = chronology12.set((org.joda.time.ReadablePartial) localDateTime17, (long) '#');
        org.joda.time.DateTimeField dateTimeField21 = chronology12.secondOfMinute();
        org.joda.time.DurationField durationField22 = chronology12.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology12);
        java.util.Locale locale24 = dateTimeFormatter2.getLocale();
        org.joda.time.DateTimeZone dateTimeZone25 = dateTimeFormatter2.getZone();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNull(locale24);
        org.junit.Assert.assertNull(dateTimeZone25);
    }

    @Test
    public void test15288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15288");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        java.util.GregorianCalendar gregorianCalendar2 = mutableDateTime1.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime4 = org.joda.time.MutableDateTime.now(dateTimeZone3);
        java.util.GregorianCalendar gregorianCalendar5 = mutableDateTime4.toGregorianCalendar();
        boolean boolean6 = mutableDateTime1.isAfter((org.joda.time.ReadableInstant) mutableDateTime4);
        org.joda.time.Chronology chronology7 = mutableDateTime1.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.yearOfCentury();
        org.joda.time.LocalTime localTime11 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime13 = localTime11.minusSeconds((int) (short) 10);
        int int14 = localTime11.getMinuteOfHour();
        org.joda.time.LocalTime.Property property15 = localTime11.hourOfDay();
        org.joda.time.LocalTime localTime16 = property15.withMaximumValue();
        boolean boolean17 = property15.isLeap();
        java.util.Locale locale21 = new java.util.Locale("", "1969-12-31T23:59:59.999Z", "1969-12-31T23:59:59.999Z");
        java.lang.String str22 = property15.getAsShortText(locale21);
        java.util.Locale.Builder builder23 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder24 = builder23.clearExtensions();
        java.util.Locale locale25 = builder23.build();
        java.lang.String str26 = locale21.getDisplayLanguage(locale25);
        java.lang.String str27 = dateTimeField8.getAsText((long) 4, locale21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str29 = locale21.getUnicodeLocaleType("2022-02-22T07:28:28.905+00:00:00.003");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: 2022-02-22T07:28:28.905+00:00:00.003");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(gregorianCalendar2);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(gregorianCalendar5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals(locale21.toString(), "_1969-12-31T23:59:59.999Z_1969-12-31T23:59:59.999Z");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "0" + "'", str22, "0");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "70" + "'", str27, "70");
    }

    @Test
    public void test15289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15289");
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter9.withChronology(chronology17);
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        boolean boolean24 = dateTimeZone19.isLocalDateTimeGap(localDateTime23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        boolean boolean29 = dateTimeZone19.isLocalDateTimeGap(localDateTime27);
        long long31 = dateTimeZone19.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter32 = dateTimeFormatter9.withZone(dateTimeZone19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter32.withPivotYear(2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter36 = dateTimeFormatter34.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (-1), chronology38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.DateTime dateTime43 = localDateTime39.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.DateTimeField dateTimeField45 = chronology44.secondOfDay();
        org.joda.time.DurationField durationField46 = chronology44.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = dateTimeFormatter34.withChronology(chronology44);
        boolean boolean48 = dateTimeFormatter47.isOffsetParsed();
        java.util.Locale locale49 = dateTimeFormatter47.getLocale();
        org.joda.time.Chronology chronology50 = dateTimeFormatter47.getChronology();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime(3600134, 487, 326, 218, 86082003, 3060000, 625, chronology50);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 218 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + 3L + "'", long31 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter32);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeFormatter36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(durationField46);
        org.junit.Assert.assertNotNull(dateTimeFormatter47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNull(locale49);
        org.junit.Assert.assertNotNull(chronology50);
    }

    @Test
    public void test15290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15290");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder2.appendTimeZoneId();
        org.joda.time.DateTimeFieldType dateTimeFieldType4 = org.joda.time.DateTimeFieldType.secondOfDay();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder2.appendShortText(dateTimeFieldType4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendWeekOfWeekyear(41);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder7.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder7.appendFractionOfDay(3, 15);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder7.appendWeekOfWeekyear(0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendCenturyOfEra(65, 23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendMinuteOfDay(23);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatterBuilder16.toFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder16.appendFractionOfSecond((-1970), 118);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFieldType4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
    }

    @Test
    public void test15291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15291");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(153722866425120L);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfMonth();
        org.joda.time.LocalDate localDate4 = property2.addWrapFieldToCopy((int) (short) 0);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
    }

    @Test
    public void test15292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15292");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(100L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfWeek();
        org.joda.time.format.DateTimePrinter dateTimePrinter7 = null;
        org.joda.time.format.DateTimeParser dateTimeParser8 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter7, dateTimeParser8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter18 = dateTimeFormatter9.withChronology(chronology17);
        org.joda.time.DateTimeField dateTimeField19 = chronology17.monthOfYear();
        org.joda.time.DateTimeField dateTimeField20 = chronology17.clockhourOfHalfday();
        org.joda.time.DurationField durationField21 = chronology17.days();
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) 1970, chronology17);
        org.joda.time.DurationField durationField23 = chronology17.hours();
        org.joda.time.DateTimeField dateTimeField24 = chronology17.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField25 = chronology17.secondOfDay();
        int int26 = dateTimeField25.getMaximumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = dateTimeField25.getType();
        mutableDateTime4.set(dateTimeFieldType27, 34);
        org.joda.time.MutableDateTime mutableDateTime30 = mutableDateTime4.toMutableDateTime();
        java.lang.String str31 = mutableDateTime30.toString();
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeFormatter18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 86399 + "'", int26 == 86399);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertNotNull(mutableDateTime30);
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "1970-01-01T00:00:34.103+00:00:00.003" + "'", str31, "1970-01-01T00:00:34.103+00:00:00.003");
    }

    @Test
    public void test15293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15293");
        org.joda.time.Chronology chronology0 = null;
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime(chronology0);
        org.joda.time.LocalDate localDate2 = dateTime1.toLocalDate();
        org.joda.time.DateTime.Property property3 = dateTime1.minuteOfDay();
        org.joda.time.DateTime.Property property4 = dateTime1.millisOfSecond();
        org.joda.time.LocalDate localDate5 = dateTime1.toLocalDate();
        int int6 = dateTime1.getDayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime8 = dateTime1.withMillisOfDay((-4001));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -4001 for millisOfDay must be in the range [0,86399999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 53 + "'", int6 == 53);
    }

    @Test
    public void test15294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15294");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.lang.String str7 = property3.toString();
        org.joda.time.LocalDateTime localDateTime9 = property3.setCopy((int) (short) 1);
        int int10 = localDateTime9.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plusDays((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType13 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType14 = dateTimeFieldType13.getRangeDurationType();
        int int15 = localDateTime9.get(dateTimeFieldType13);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime22 = localDateTime18.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.DateTimeField dateTimeField24 = chronology23.secondOfDay();
        org.joda.time.DurationField durationField25 = chronology23.minutes();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField27 = dateTimeFieldType13.getField(chronology23);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = dateTimeField27.getType();
        boolean boolean29 = dateTimeField27.isSupported();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Property[dayOfYear]" + "'", str7, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(dateTimeFieldType13);
        org.junit.Assert.assertNotNull(durationFieldType14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 70 + "'", int15 == 70);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
    }

    @Test
    public void test15295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15295");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear(2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withPivotYear((int) (short) 10);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter29.withDefaultYear(25);
        org.joda.time.format.DateTimeParser dateTimeParser32 = dateTimeFormatter29.getParser();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = dateTimeFormatter29.print((long) 446);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNull(dateTimeParser32);
    }

    @Test
    public void test15296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15296");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder4.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder4.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendSecondOfDay(15);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (-1), chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime17 = localDateTime13.toDateTime(dateTimeZone15);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.plus((long) 100);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Calendar calendar23 = dateTime20.toCalendar(locale22);
        org.joda.time.DateTime.Property property24 = dateTime20.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property24.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder8.appendFraction(dateTimeFieldType25, (int) '#', 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder28.appendSecondOfMinute(41);
        org.joda.time.DateTimeFieldType dateTimeFieldType31 = org.joda.time.DateTimeFieldType.millisOfSecond();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder28.appendSignedDecimal(dateTimeFieldType31, 284, (int) (byte) 0);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder28.appendYearOfCentury(864019, 26753);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder28.appendFractionOfMinute(13, 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str18, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFieldType31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
    }

    @Test
    public void test15297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15297");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        org.joda.time.MutableDateTime mutableDateTime18 = dateTime15.toMutableDateTimeISO();
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField30 = dateTimeFieldType19.getField(chronology27);
        org.joda.time.DateTimeField dateTimeField31 = chronology27.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField32 = chronology27.secondOfMinute();
        mutableDateTime18.setChronology(chronology27);
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime(chronology27);
        int int35 = dateTime34.getDayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 2 + "'", int35 == 2);
    }

    @Test
    public void test15298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15298");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfYear();
        org.joda.time.Chronology chronology12 = chronology10.withUTC();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        boolean boolean18 = dateTimeZone13.isLocalDateTimeGap(localDateTime17);
        long long20 = chronology12.set((org.joda.time.ReadablePartial) localDateTime17, (long) '#');
        org.joda.time.DateTimeField dateTimeField21 = chronology12.secondOfMinute();
        org.joda.time.DurationField durationField22 = chronology12.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter2.withChronology(chronology12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withPivotYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter2.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter26.withOffsetParsed();
        boolean boolean28 = dateTimeFormatter26.isOffsetParsed();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = dateTimeFormatter26.print(946684799997L);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + 2L + "'", long20 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test15299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15299");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime6.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int13 = mutableDateTime6.get(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType12, 92, 9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder17.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder20.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = dateTimeFormatterBuilder22.toPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder26.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter31 = dateTimeFormatterBuilder30.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder30.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser35 = dateTimeFormatterBuilder30.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder0.append(dateTimePrinter23, dateTimeParser35);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder36.appendTwoDigitYear(1975, false);
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = null;
        org.joda.time.format.DateTimeParser dateTimeParser41 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter40, dateTimeParser41);
        org.joda.time.Chronology chronology44 = null;
        org.joda.time.LocalDateTime localDateTime45 = new org.joda.time.LocalDateTime((long) (-1), chronology44);
        org.joda.time.LocalDateTime.Property property46 = localDateTime45.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone48 = dateTimeZone47.toTimeZone();
        org.joda.time.DateTime dateTime49 = localDateTime45.toDateTime(dateTimeZone47);
        org.joda.time.Chronology chronology50 = dateTime49.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter42.withChronology(chronology50);
        java.util.Locale locale54 = new java.util.Locale("", "millis");
        java.lang.String str55 = locale54.toLanguageTag();
        java.lang.String str56 = locale54.getDisplayName();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter57 = dateTimeFormatter42.withLocale(locale54);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = dateTimeFormatterBuilder39.append(dateTimeFormatter42);
        org.joda.time.Chronology chronology59 = dateTimeFormatter42.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter61 = dateTimeFormatter42.withPivotYear(0);
        org.joda.time.MutableDateTime mutableDateTime64 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime64.setTime(100L);
        org.joda.time.MutableDateTime.Property property67 = mutableDateTime64.dayOfMonth();
        int int68 = mutableDateTime64.getSecondOfDay();
        org.joda.time.Chronology chronology71 = null;
        org.joda.time.LocalDateTime localDateTime72 = new org.joda.time.LocalDateTime((long) (-1), chronology71);
        org.joda.time.LocalDateTime.Property property73 = localDateTime72.minuteOfHour();
        int int74 = localDateTime72.size();
        org.joda.time.Chronology chronology75 = localDateTime72.getChronology();
        org.joda.time.DateTime dateTime76 = new org.joda.time.DateTime((long) (byte) 100, chronology75);
        mutableDateTime64.setChronology(chronology75);
        java.util.Locale locale78 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket79 = new org.joda.time.format.DateTimeParserBucket(8760L, chronology75, locale78);
        org.joda.time.MutableDateTime mutableDateTime81 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime81.addYears((int) 'x');
        org.joda.time.MutableDateTime.Property property84 = mutableDateTime81.minuteOfDay();
        mutableDateTime81.addWeekyears((int) 'x');
        org.joda.time.ReadableDuration readableDuration87 = null;
        mutableDateTime81.add(readableDuration87, (-1));
        boolean boolean90 = dateTimeParserBucket79.restoreState((java.lang.Object) (-1));
        java.util.Locale locale91 = dateTimeParserBucket79.getLocale();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter92 = dateTimeFormatter42.withLocale(locale91);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter94 = dateTimeFormatter92.withPivotYear((java.lang.Integer) (-10));
        java.util.Locale locale95 = dateTimeFormatter92.getLocale();
        java.lang.Integer int96 = dateTimeFormatter92.getPivotYear();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimePrinter23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimePrinter31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeParser35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertNotNull(timeZone48);
// flaky:         org.junit.Assert.assertEquals(timeZone48.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(chronology50);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
        org.junit.Assert.assertEquals(locale54.toString(), "_MILLIS");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "und" + "'", str55, "und");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "MILLIS" + "'", str56, "MILLIS");
        org.junit.Assert.assertNotNull(dateTimeFormatter57);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder58);
        org.junit.Assert.assertNull(chronology59);
        org.junit.Assert.assertNotNull(dateTimeFormatter61);
        org.junit.Assert.assertNotNull(property67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 4 + "'", int74 == 4);
        org.junit.Assert.assertNotNull(chronology75);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + false + "'", boolean90 == false);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertNotNull(dateTimeFormatter92);
        org.junit.Assert.assertNotNull(dateTimeFormatter94);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "");
        org.junit.Assert.assertNull(int96);
    }

    @Test
    public void test15300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15300");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.minus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime9.minusHours((int) (short) -1);
        org.joda.time.DateTime.Property property16 = dateTime9.dayOfWeek();
        org.joda.time.DurationField durationField17 = property16.getDurationField();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationField17);
    }

    @Test
    public void test15301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15301");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.minus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfCentury(25);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(1);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMinutes((-1));
        org.joda.time.DateTime dateTime21 = dateTime15.plusYears(22);
        org.joda.time.DateTime.Property property22 = dateTime21.yearOfCentury();
        int int23 = dateTime21.getYear();
        org.joda.time.DateTime.Property property24 = dateTime21.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1947 + "'", int23 == 1947);
        org.junit.Assert.assertNotNull(property24);
    }

    @Test
    public void test15302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15302");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusHours((-1));
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime12, locale16);
        java.lang.String str18 = dateTimeField9.getName();
        int int20 = dateTimeField9.getMinimumValue((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = dateTimeField9.getType();
        org.joda.time.format.DateTimePrinter dateTimePrinter23 = null;
        org.joda.time.format.DateTimeParser dateTimeParser24 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter23, dateTimeParser24);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (-1), chronology27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTime dateTime32 = localDateTime28.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = dateTimeFormatter25.withChronology(chronology33);
        org.joda.time.DateTimeField dateTimeField35 = chronology33.monthOfYear();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.clockhourOfHalfday();
        org.joda.time.DurationField durationField37 = chronology33.days();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) 1970, chronology33);
        java.lang.String str39 = localDateTime38.toString();
        org.joda.time.Chronology chronology40 = localDateTime38.getChronology();
        org.joda.time.DateTimeField dateTimeField41 = dateTimeFieldType21.getField(chronology40);
        java.lang.String str42 = dateTimeFieldType21.getName();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "secondOfMinute" + "'", str18, "secondOfMinute");
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeFormatter34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(durationField37);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:01.973" + "'", str39, "1970-01-01T00:00:01.973");
        org.junit.Assert.assertNotNull(chronology40);
        org.junit.Assert.assertNotNull(dateTimeField41);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "secondOfMinute" + "'", str42, "secondOfMinute");
    }

    @Test
    public void test15303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15303");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        int int5 = localTime1.size();
        org.joda.time.LocalTime localTime7 = localTime1.minusMinutes(31);
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime11 = localTime9.minusSeconds((int) (short) 10);
        int int12 = localTime9.getMinuteOfHour();
        int int13 = localTime9.size();
        org.joda.time.LocalTime localTime15 = localTime9.minusMinutes(31);
        int int16 = localTime1.compareTo((org.joda.time.ReadablePartial) localTime15);
        org.joda.time.LocalTime.Property property17 = localTime15.secondOfMinute();
        org.joda.time.LocalTime localTime18 = property17.roundFloorCopy();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(localTime7);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
        org.junit.Assert.assertNotNull(localTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1) + "'", int16 == (-1));
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(localTime18);
    }

    @Test
    public void test15304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15304");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime9.withWeekyear((int) 'x');
        org.joda.time.DateTime dateTime14 = dateTime9.minusMonths((int) (byte) -1);
        org.joda.time.DateTime.Property property15 = dateTime14.centuryOfEra();
        org.joda.time.DateTime dateTime16 = property15.roundHalfCeilingCopy();
        int int17 = property15.get();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 19 + "'", int17 == 19);
    }

    @Test
    public void test15305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15305");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.add((long) (short) 100);
        mutableDateTime4.addMillis(5599585);
        mutableDateTime4.setSecondOfDay(53325);
        org.junit.Assert.assertNull(dateTimeField1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
    }

    @Test
    public void test15306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15306");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (-1), chronology32);
        boolean boolean34 = dateTimeZone29.isLocalDateTimeGap(localDateTime33);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (-1), chronology36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.weekyear();
        boolean boolean39 = dateTimeZone29.isLocalDateTimeGap(localDateTime37);
        boolean boolean41 = dateTimeZone29.isStandardOffset(86399999L);
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime(100L, dateTimeZone29);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = dateTimeFormatter25.withZone(dateTimeZone29);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = localDateTime46.toDateTime(dateTimeZone48);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.DateTime dateTime53 = dateTime50.plus((long) 100);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfCentury();
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.util.Calendar calendar56 = dateTime53.toCalendar(locale55);
        int int57 = dateTime53.getMinuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime53.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property60 = dateTime53.era();
        org.joda.time.DateTime dateTime61 = property60.roundHalfFloorCopy();
        int int62 = dateTimeZone29.getOffset((org.joda.time.ReadableInstant) dateTime61);
        org.joda.time.MutableDateTime mutableDateTime63 = new org.joda.time.MutableDateTime(dateTimeZone29);
        org.joda.time.ReadableDuration readableDuration64 = null;
        mutableDateTime63.add(readableDuration64, (-5600));
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatter43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str51, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
// flaky:         org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
    }

    @Test
    public void test15307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15307");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        java.lang.String str12 = dateTimeField10.getAsShortText(0L);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property15 = localDate13.property(dateTimeFieldType14);
        org.joda.time.DateTimeFieldType dateTimeFieldType16 = org.joda.time.DateTimeFieldType.year();
        boolean boolean17 = localDate13.isSupported(dateTimeFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate13.era();
        org.joda.time.LocalDate localDate20 = localDate13.minusMonths(2000);
        org.joda.time.LocalDate.Property property21 = localDate20.weekOfWeekyear();
        org.joda.time.LocalDate.Property property22 = localDate20.centuryOfEra();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        int int26 = dateTimeZone23.getOffset(1645514718182L);
        org.joda.time.DateTime dateTime27 = localDate20.toDateTimeAtStartOfDay(dateTimeZone23);
        int int28 = localDate20.getCenturyOfEra();
        org.joda.time.LocalDate localDate30 = localDate20.minusWeeks(3);
        java.util.Locale locale33 = new java.util.Locale("1970-01-01T00:00:00.099Z");
        boolean boolean34 = locale33.hasExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = dateTimeField10.getAsText((org.joda.time.ReadablePartial) localDate20, 60, locale33);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 60");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "AD" + "'", str12, "AD");
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 18 + "'", int28 == 18);
        org.junit.Assert.assertNotNull(localDate30);
        org.junit.Assert.assertEquals(locale33.toString(), "1970-01-01t00:00:00.099z");
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test15308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15308");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime0.dayOfWeek();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DurationField durationField7 = property6.getLeapDurationField();
        org.joda.time.Interval interval8 = property6.toInterval();
        long long9 = property6.remainder();
        java.util.Locale locale11 = new java.util.Locale("hi!");
        int int12 = property6.getMaximumShortTextLength(locale11);
        java.lang.String str13 = property2.getAsShortText(locale11);
        org.joda.time.MutableDateTime mutableDateTime14 = property2.roundHalfFloor();
        mutableDateTime14.addYears((int) (byte) 0);
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.forOffsetMillis(27);
        java.lang.String str20 = dateTimeZone18.getNameKey((long) 120);
        mutableDateTime14.setZone(dateTimeZone18);
        mutableDateTime14.addSeconds(88);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime14.dayOfWeek();
        int int25 = mutableDateTime14.getWeekyear();
        org.junit.Assert.assertNull(dateTimeField1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNull(durationField7);
        org.junit.Assert.assertNotNull(interval8);
// flaky:         org.junit.Assert.assertTrue("'" + long9 + "' != '" + 2L + "'", long9 == 2L);
        org.junit.Assert.assertEquals(locale11.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 3 + "'", int12 == 3);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Tue" + "'", str13, "Tue");
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 2022 + "'", int25 == 2022);
    }

    @Test
    public void test15309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15309");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate(10L);
        org.joda.time.LocalDate.Property property2 = localDate1.dayOfYear();
        org.joda.time.LocalDate localDate3 = property2.getLocalDate();
        org.joda.time.LocalDate localDate4 = property2.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate6 = property2.addWrapFieldToCopy(222);
        org.joda.time.LocalDate.Property property7 = localDate6.dayOfWeek();
        org.joda.time.DateTimeField dateTimeField8 = property7.getField();
        org.joda.time.LocalDate localDate9 = property7.roundHalfFloorCopy();
        int int10 = property7.get();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 2 + "'", int10 == 2);
    }

    @Test
    public void test15310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15310");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor2 = strSet1.iterator();
        java.lang.String[] strArray6 = new java.lang.String[] { "1969-12-31T23:59:59.999Z", "365", "1969-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList7 = new java.util.ArrayList<java.lang.String>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList7, strArray6);
        boolean boolean9 = strSet1.containsAll((java.util.Collection<java.lang.String>) strList7);
        java.lang.Object[] objArray10 = strSet1.toArray();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (-1), chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.weekyear();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime13.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property19 = localDateTime13.weekOfWeekyear();
        int int20 = localDateTime13.getSecondOfMinute();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime13.minusSeconds(1969);
        org.joda.time.LocalDateTime.Property property23 = localDateTime13.millisOfDay();
        org.joda.time.DateTimeFieldType dateTimeFieldType24 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDateTime.Property property25 = localDateTime13.property(dateTimeFieldType24);
        boolean boolean26 = strSet1.equals((java.lang.Object) property25);
        org.joda.time.LocalDateTime localDateTime27 = property25.roundHalfEvenCopy();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(strItor2);
        org.junit.Assert.assertNotNull(strArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(objArray10);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray10), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray10), "[]");
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(property19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeFieldType24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(localDateTime27);
    }

    @Test
    public void test15311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15311");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime(dateTimeZone0);
        int int7 = localDateTime6.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime6.minusSeconds(466640);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 7 + "'", int7 == 7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test15312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15312");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) (byte) 1);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate10 = localDate8.plusWeeks((-292275054));
        int int11 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate8);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfCentury();
        org.joda.time.DateTime dateTime13 = localDate8.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime14 = localDate8.toDateTimeAtMidnight();
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate17 = localDate8.withField(dateTimeFieldType15, 418);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field must not be null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278993 + "'", int11 == 292278993);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime14);
    }

    @Test
    public void test15313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15313");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        int int18 = dateTime15.getDayOfMonth();
        org.joda.time.DateMidnight dateMidnight19 = dateTime15.toDateMidnight();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime15.withDayOfWeek(53);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 53 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateMidnight19);
    }

    @Test
    public void test15314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15314");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter14.withChronology(chronology22);
        org.joda.time.DateTimeField dateTimeField24 = chronology22.monthOfYear();
        org.joda.time.LocalDateTime localDateTime25 = org.joda.time.LocalDateTime.now(chronology22);
        org.joda.time.DateTimeField dateTimeField26 = chronology22.centuryOfEra();
        long long31 = chronology22.getDateTimeMillis(27, 12, 21, 1970);
        org.joda.time.DateTimeField dateTimeField32 = chronology22.minuteOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter2.withChronology(chronology22);
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.getDefault(category34);
        java.util.Locale locale36 = java.util.Locale.getDefault(category34);
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.util.Locale.setDefault(category34, locale37);
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (-1), chronology41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone44 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone45 = dateTimeZone44.toTimeZone();
        org.joda.time.DateTime dateTime46 = localDateTime42.toDateTime(dateTimeZone44);
        java.util.Locale locale48 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet49 = locale48.getUnicodeLocaleAttributes();
        java.util.Locale locale50 = java.util.Locale.GERMANY;
        java.lang.String str51 = locale48.getDisplayVariant(locale50);
        java.lang.String str52 = dateTimeZone44.getShortName((-62135596800000L), locale48);
        java.util.Set<java.lang.String> strSet53 = locale48.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category34, locale48);
        java.util.Locale locale55 = java.util.Locale.getDefault(category34);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter33.withLocale(locale55);
        org.joda.time.Chronology chronology57 = dateTimeFormatter33.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter58 = dateTimeFormatter33.withZoneUTC();
        java.util.Locale locale59 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter60 = dateTimeFormatter33.withLocale(locale59);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeField24);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(dateTimeField26);
// flaky:         org.junit.Assert.assertTrue("'" + long31 + "' != '" + (-61284556798033L) + "'", long31 == (-61284556798033L));
        org.junit.Assert.assertNotNull(dateTimeField32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeZone44);
        org.junit.Assert.assertNotNull(timeZone45);
// flaky:         org.junit.Assert.assertEquals(timeZone45.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "+00:00:00.003" + "'", str52, "+00:00:00.003");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeFormatter58);
        org.junit.Assert.assertNotNull(dateTimeFormatter60);
    }

    @Test
    public void test15315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15315");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime4 = property3.roundHalfFloorCopy();
        boolean boolean5 = property3.isLeap();
        org.joda.time.LocalDateTime localDateTime6 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime7 = property3.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime8 = property3.roundHalfCeilingCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime8);
    }

    @Test
    public void test15316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15316");
        org.joda.time.DurationFieldType durationFieldType1 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DurationField durationField10 = durationFieldType1.getField(chronology9);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        mutableDateTime11.add((long) 100);
        org.joda.time.Chronology chronology14 = null;
        mutableDateTime11.setChronology(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        long long18 = dateTimeZone16.previousTransition((long) 1);
        mutableDateTime11.setZone(dateTimeZone16);
        int int20 = mutableDateTime11.getSecondOfMinute();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = localDateTime23.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfDay();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.yearOfEra();
        mutableDateTime11.setChronology(chronology28);
        org.joda.time.DurationField durationField32 = durationFieldType1.getField(chronology28);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime(3692163384000L, chronology28);
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.weekyear();
        org.joda.time.LocalDateTime localDateTime39 = localDateTime36.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime41 = localDateTime36.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod42 = null;
        org.joda.time.LocalDateTime localDateTime43 = localDateTime36.minus(readablePeriod42);
        org.joda.time.LocalDateTime localDateTime45 = localDateTime36.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime45.withWeekOfWeekyear(23);
        org.joda.time.ReadablePeriod readablePeriod48 = null;
        org.joda.time.LocalDateTime localDateTime49 = localDateTime47.minus(readablePeriod48);
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plusMonths(4);
        org.joda.time.LocalDateTime.Property property52 = localDateTime49.hourOfDay();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (-1), chronology54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.dayOfYear();
        org.joda.time.DurationField durationField57 = property56.getLeapDurationField();
        org.joda.time.Interval interval58 = property56.toInterval();
        long long59 = property56.remainder();
        java.lang.String str60 = property56.toString();
        org.joda.time.LocalDateTime localDateTime62 = property56.setCopy((int) (short) 1);
        int int63 = localDateTime62.getDayOfMonth();
        int int64 = localDateTime62.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime49.withFields((org.joda.time.ReadablePartial) localDateTime62);
        org.joda.time.Chronology chronology66 = localDateTime62.getChronology();
        org.joda.time.LocalDateTime localDateTime68 = localDateTime62.plusYears(2089);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime62.minusYears(2022);
        long long72 = chronology28.set((org.joda.time.ReadablePartial) localDateTime62, (-15724800000L));
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 46 + "'", int20 == 46);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertNotNull(localDateTime45);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNull(durationField57);
        org.junit.Assert.assertNotNull(interval58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2L + "'", long59 == 2L);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Property[dayOfYear]" + "'", str60, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 1 + "'", int63 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(chronology66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
// flaky:         org.junit.Assert.assertTrue("'" + long72 + "' != '" + (-1L) + "'", long72 == (-1L));
    }

    @Test
    public void test15317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15317");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTime dateTime4 = localTime3.toDateTimeToday();
        org.joda.time.LocalTime.Property property5 = localTime3.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMinimumValue();
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime(dateTimeZone11);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.plus((long) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusSeconds(0);
        org.joda.time.DateTime dateTime20 = dateTime18.withHourOfDay(1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = localDateTime23.toDateTime(dateTimeZone25);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.plus((long) 100);
        org.joda.time.DateTime.Property property31 = dateTime27.millisOfSecond();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.DateTime dateTime34 = new org.joda.time.DateTime((long) (short) 1, chronology33);
        org.joda.time.DateTime dateTime37 = dateTime34.withDurationAdded((long) (byte) 0, 292278993);
        int int38 = dateTime27.compareTo((org.joda.time.ReadableInstant) dateTime37);
        org.joda.time.DurationFieldType durationFieldType39 = org.joda.time.DurationFieldType.millis();
        org.joda.time.DateTime dateTime41 = dateTime37.withFieldAdded(durationFieldType39, 1969);
        org.joda.time.DateTime dateTime43 = dateTime18.withFieldAdded(durationFieldType39, (int) '#');
        org.joda.time.DateTime.Property property44 = dateTime18.weekOfWeekyear();
        org.joda.time.DateTime dateTime46 = dateTime18.minusYears((int) '4');
        org.joda.time.DateTime dateTime48 = dateTime46.withYear(3);
        org.joda.time.MutableDateTime mutableDateTime49 = dateTime48.toMutableDateTime();
        org.joda.time.DateTime dateTime50 = dateTime48.toDateTime();
        org.joda.time.format.DateTimePrinter dateTimePrinter52 = null;
        org.joda.time.format.DateTimeParser dateTimeParser53 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter52, dateTimeParser53);
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (-1), chronology56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone59 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone60 = dateTimeZone59.toTimeZone();
        org.joda.time.DateTime dateTime61 = localDateTime57.toDateTime(dateTimeZone59);
        org.joda.time.Chronology chronology62 = dateTime61.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter63 = dateTimeFormatter54.withChronology(chronology62);
        org.joda.time.DateTimeField dateTimeField64 = chronology62.monthOfYear();
        org.joda.time.DateTimeField dateTimeField65 = chronology62.clockhourOfHalfday();
        org.joda.time.DurationField durationField66 = chronology62.days();
        org.joda.time.LocalDateTime localDateTime67 = new org.joda.time.LocalDateTime((long) 1970, chronology62);
        org.joda.time.DurationField durationField68 = chronology62.hours();
        org.joda.time.DateTimeField dateTimeField69 = chronology62.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField70 = chronology62.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime71 = dateTime48.toMutableDateTime(chronology62);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate72 = new org.joda.time.LocalDate((java.lang.Object) property5, chronology62);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalTime$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str14, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str28, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + (-1) + "'", int38 == (-1));
        org.junit.Assert.assertNotNull(durationFieldType39);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(mutableDateTime49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNotNull(dateTimeZone59);
        org.junit.Assert.assertNotNull(timeZone60);
// flaky:         org.junit.Assert.assertEquals(timeZone60.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(chronology62);
        org.junit.Assert.assertNotNull(dateTimeFormatter63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField68);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(mutableDateTime71);
    }

    @Test
    public void test15318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15318");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime localDateTime9 = localDateTime4.withYear(1);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime4.withYearOfCentury(9);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plus(readablePeriod12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime11.minusMinutes(209);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test15319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15319");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.minus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfCentury(25);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(1);
        org.joda.time.DateTime dateTime19 = dateTime15.withYearOfCentury(34);
        org.joda.time.DateTime.Property property20 = dateTime19.dayOfWeek();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property20);
    }

    @Test
    public void test15320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15320");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(31);
        org.joda.time.ReadablePeriod readablePeriod3 = null;
        org.joda.time.LocalDate localDate4 = localDate2.minus(readablePeriod3);
        org.joda.time.DateMidnight dateMidnight5 = localDate4.toDateMidnight();
        org.joda.time.LocalDate.Property property6 = localDate4.yearOfEra();
        org.joda.time.LocalDate localDate8 = localDate4.minusDays(1999);
        org.joda.time.LocalDate.Property property9 = localDate4.weekyear();
        int int10 = localDate4.size();
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(dateMidnight5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 3 + "'", int10 == 3);
    }

    @Test
    public void test15321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15321");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTime dateTime4 = localTime3.toDateTimeToday();
        org.joda.time.DateTime.Property property5 = dateTime4.yearOfEra();
        org.joda.time.MutableDateTime mutableDateTime6 = dateTime4.toMutableDateTime();
        java.lang.String str7 = mutableDateTime6.toString();
        org.joda.time.MutableDateTime.Property property8 = mutableDateTime6.weekOfWeekyear();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime6.hourOfDay();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale14.getDisplayScript();
        java.lang.String str16 = dateTimeZone11.getName((long) 5, locale14);
        java.lang.String str17 = locale14.getScript();
        java.lang.String str18 = locale14.getScript();
        java.lang.String str19 = locale14.getLanguage();
        java.lang.String str20 = locale14.getDisplayName();
        java.lang.String str21 = locale14.getISO3Country();
        java.lang.String str22 = property9.getAsShortText(locale14);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(mutableDateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "2022-02-22T07:33:46.702+00:00:00.003" + "'", str7, "2022-02-22T07:33:46.702+00:00:00.003");
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.003" + "'", str16, "+00:00:00.003");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en" + "'", str19, "en");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "7" + "'", str22, "7");
    }

    @Test
    public void test15322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15322");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.roundHalfCeilingCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate11 = localDate9.plusYears((-631152919));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -631150919 for year must be in the range [-292275054,292278993]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
    }

    @Test
    public void test15323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15323");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property16 = dateTime9.era();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime9.plus(readableDuration17);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime20 = dateTime9.withDayOfWeek(274);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 274 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test15324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15324");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder4.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder4.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder9.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime15.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime15.add(readableDuration18, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int22 = mutableDateTime15.get(dateTimeFieldType21);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder9.appendSignedDecimal(dateTimeFieldType21, 92, 9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder26.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatterBuilder31.toPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser33 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser33);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder35.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = dateTimeFormatterBuilder39.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder39.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatterBuilder39.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder9.append(dateTimePrinter32, dateTimeParser44);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder4.appendOptional(dateTimeParser44);
        boolean boolean47 = dateTimeFormatterBuilder46.canBuildFormatter();
        org.joda.time.format.DateTimePrinter dateTimePrinter48 = null;
        org.joda.time.format.DateTimeParser dateTimeParser49 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter50 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter48, dateTimeParser49);
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.LocalDateTime localDateTime53 = new org.joda.time.LocalDateTime((long) (-1), chronology52);
        org.joda.time.LocalDateTime.Property property54 = localDateTime53.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone56 = dateTimeZone55.toTimeZone();
        org.joda.time.DateTime dateTime57 = localDateTime53.toDateTime(dateTimeZone55);
        org.joda.time.Chronology chronology58 = dateTime57.getChronology();
        org.joda.time.DateTimeField dateTimeField59 = chronology58.dayOfYear();
        org.joda.time.Chronology chronology60 = chronology58.withUTC();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) (-1), chronology64);
        boolean boolean66 = dateTimeZone61.isLocalDateTimeGap(localDateTime65);
        long long68 = chronology60.set((org.joda.time.ReadablePartial) localDateTime65, (long) '#');
        org.joda.time.DateTimeField dateTimeField69 = chronology60.secondOfMinute();
        org.joda.time.DurationField durationField70 = chronology60.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter50.withChronology(chronology60);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter73 = dateTimeFormatter50.withPivotYear((int) (short) 100);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter50.withZoneUTC();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter50.withPivotYear((java.lang.Integer) 3);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder77 = dateTimeFormatterBuilder46.append(dateTimeFormatter50);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder79 = dateTimeFormatterBuilder46.appendDayOfYear(76);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder81 = dateTimeFormatterBuilder46.appendDayOfWeek(61);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder82 = dateTimeFormatterBuilder81.appendEraText();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimePrinter32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimePrinter40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(dateTimeParser44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(chronology58);
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(chronology60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long68 + "' != '" + 2L + "'", long68 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField69);
        org.junit.Assert.assertNotNull(durationField70);
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimeFormatter73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder77);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder79);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder81);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder82);
    }

    @Test
    public void test15325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15325");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendEraText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder5.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatterBuilder7.toParser();
        int int9 = dateTimeParser8.estimateParsedLength();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder4.appendOptional(dateTimeParser8);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder4.appendCenturyOfEra((int) (short) 0, 284);
        boolean boolean14 = dateTimeFormatterBuilder4.canBuildParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder4.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = dateTimeFormatterBuilder21.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder21.appendMillisOfSecond(292278993);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder24.appendTwoDigitWeekyear(1969);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder24.appendTimeZoneName();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder27.appendDayOfYear((int) '#');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder27.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder27.appendMinuteOfHour(287);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder27.appendDayOfMonth(1975);
        org.joda.time.format.DateTimeParser dateTimeParser35 = dateTimeFormatterBuilder27.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder4.appendOptional(dateTimeParser35);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder4.appendPattern("0117-01-01T00:00:00.102+00:00:00.003");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeParser8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimePrinter22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeParser35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
    }

    @Test
    public void test15326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15326");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.weekyears();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekOfWeekyear();
        java.lang.String str11 = dateTimeField10.getName();
        long long13 = dateTimeField10.roundHalfCeiling((long) 53325);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "weekOfWeekyear" + "'", str11, "weekOfWeekyear");
// flaky:         org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-259200003L) + "'", long13 == (-259200003L));
    }

    @Test
    public void test15327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15327");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        int int5 = localDateTime4.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property6 = localDateTime4.era();
        java.lang.String str7 = property6.getAsText();
        org.joda.time.LocalDateTime localDateTime8 = property6.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = property6.roundCeilingCopy();
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime9.plus(readablePeriod11);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 3 + "'", int5 == 3);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "AD" + "'", str7, "AD");
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test15328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15328");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatterBuilder5.toPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser7 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter8 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser7);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder9.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = dateTimeFormatterBuilder13.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder15.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder15.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime21.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration24 = null;
        mutableDateTime21.add(readableDuration24, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int28 = mutableDateTime21.get(dateTimeFieldType27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder15.appendSignedDecimal(dateTimeFieldType27, 92, 9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder32.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter38 = dateTimeFormatterBuilder37.toPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser39 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter38, dateTimeParser39);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder41 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder41.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder41.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter46 = dateTimeFormatterBuilder45.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder45.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser50 = dateTimeFormatterBuilder45.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder51 = dateTimeFormatterBuilder15.append(dateTimePrinter38, dateTimeParser50);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser50);
        int int53 = dateTimeParser50.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter54 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser50);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = dateTimeFormatterBuilder55.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = dateTimeFormatterBuilder55.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime61.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration64 = null;
        mutableDateTime61.add(readableDuration64, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int68 = mutableDateTime61.get(dateTimeFieldType67);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder71 = dateTimeFormatterBuilder55.appendSignedDecimal(dateTimeFieldType67, 92, 9);
        org.joda.time.format.DateTimeParser dateTimeParser72 = dateTimeFormatterBuilder55.toParser();
        int int73 = dateTimeParser72.estimateParsedLength();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter6, dateTimeParser72);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter76 = dateTimeFormatter74.withPivotYear(77);
        org.joda.time.format.DateTimeParser dateTimeParser77 = dateTimeFormatter74.getParser();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimePrinter14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimePrinter38);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimePrinter46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertNotNull(dateTimeParser50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder51);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 23 + "'", int53 == 23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder57);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder59);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
// flaky:         org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder71);
        org.junit.Assert.assertNotNull(dateTimeParser72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 5599680 + "'", int73 == 5599680);
        org.junit.Assert.assertNotNull(dateTimeFormatter76);
        org.junit.Assert.assertNotNull(dateTimeParser77);
    }

    @Test
    public void test15329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15329");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.weekyears();
        long long10 = durationField9.getUnitMillis();
        long long12 = durationField9.getValueAsLong((long) 999);
        long long14 = durationField9.getMillis((long) 129);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 31556952000L + "'", long10 == 31556952000L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 4070846808000L + "'", long14 == 4070846808000L);
    }

    @Test
    public void test15330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15330");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekyearOfCentury();
        java.lang.String str11 = chronology7.toString();
        org.joda.time.DateTimeField dateTimeField12 = chronology7.secondOfDay();
        java.util.Locale locale13 = null;
        int int14 = dateTimeField12.getMaximumShortTextLength(locale13);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str11, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 5 + "'", int14 == 5);
    }

    @Test
    public void test15331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15331");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear(23);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime16 = localDateTime14.minusMonths(2);
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        boolean boolean22 = dateTimeZone17.isLocalDateTimeGap(localDateTime21);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property25 = localDateTime21.dayOfYear();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime21.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime21.withDurationAdded(readableDuration28, (int) 'u');
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.weekyear();
        int int34 = localDateTime30.indexOf(dateTimeFieldType33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime14.withField(dateTimeFieldType33, 31);
        int int37 = localDateTime13.get(dateTimeFieldType33);
        org.joda.time.LocalDateTime.Property property38 = localDateTime13.monthOfYear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime13.minusDays((int) (byte) -1);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.minusWeeks(673);
        int int43 = localDateTime40.size();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + (-1) + "'", int34 == (-1));
        org.junit.Assert.assertNotNull(localDateTime36);
// flaky:         org.junit.Assert.assertTrue("'" + int37 + "' != '" + 1923 + "'", int37 == 1923);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 4 + "'", int43 == 4);
    }

    @Test
    public void test15332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15332");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DurationField durationField10 = chronology7.minutes();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DateTimeField dateTimeField12 = chronology7.yearOfCentury();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.yearOfCentury();
        org.joda.time.ReadablePartial readablePartial14 = null;
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = null;
        org.joda.time.format.DateTimeParser dateTimeParser18 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter17, dateTimeParser18);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter19.withChronology(chronology27);
        org.joda.time.DateTimeField dateTimeField29 = chronology27.monthOfYear();
        org.joda.time.DateTimeField dateTimeField30 = chronology27.clockhourOfHalfday();
        org.joda.time.DurationField durationField31 = chronology27.days();
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 1970, chronology27);
        org.joda.time.DurationField durationField33 = chronology27.hours();
        org.joda.time.DateTimeZone dateTimeZone34 = chronology27.getZone();
        org.joda.time.DateTimeField dateTimeField35 = chronology27.millisOfDay();
        java.lang.String str36 = dateTimeField35.getName();
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (-17259888));
        org.joda.time.LocalDateTime localDateTime40 = localDateTime38.plusMillis(102);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.plusDays(4861378);
        org.joda.time.format.DateTimePrinter dateTimePrinter45 = null;
        org.joda.time.format.DateTimeParser dateTimeParser46 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter47 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter45, dateTimeParser46);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (-1), chronology49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone52 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone53 = dateTimeZone52.toTimeZone();
        org.joda.time.DateTime dateTime54 = localDateTime50.toDateTime(dateTimeZone52);
        org.joda.time.Chronology chronology55 = dateTime54.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter56 = dateTimeFormatter47.withChronology(chronology55);
        org.joda.time.DateTimeField dateTimeField57 = chronology55.monthOfYear();
        org.joda.time.DateTimeField dateTimeField58 = chronology55.clockhourOfHalfday();
        org.joda.time.DurationField durationField59 = chronology55.days();
        org.joda.time.LocalDateTime localDateTime60 = new org.joda.time.LocalDateTime((long) 1970, chronology55);
        java.lang.String str61 = localDateTime60.toString();
        org.joda.time.LocalDateTime.Property property62 = localDateTime60.weekyear();
        int[] intArray63 = localDateTime60.getValues();
        int[] intArray65 = dateTimeField35.add((org.joda.time.ReadablePartial) localDateTime42, 784, intArray63, 0);
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray67 = dateTimeField13.add(readablePartial14, 3, intArray63, (-98));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 1875 for yearOfCentury must be in the range [0,99]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "millisOfDay" + "'", str36, "millisOfDay");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(dateTimeZone52);
        org.junit.Assert.assertNotNull(timeZone53);
// flaky:         org.junit.Assert.assertEquals(timeZone53.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(chronology55);
        org.junit.Assert.assertNotNull(dateTimeFormatter56);
        org.junit.Assert.assertNotNull(dateTimeField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertNotNull(durationField59);
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "1970-01-01T00:00:01.973" + "'", str61, "1970-01-01T00:00:01.973");
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(intArray63);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray63), "[1970, 1, 1, 1875]");
        org.junit.Assert.assertNotNull(intArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray65), "[1970, 1, 1, 1875]");
    }

    @Test
    public void test15333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15333");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property7.addToCopy((int) ' ');
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(2);
        org.joda.time.LocalDate.Property property13 = localDate10.yearOfCentury();
        org.joda.time.LocalDate localDate14 = property13.roundHalfFloorCopy();
        org.joda.time.LocalDate localDate15 = property13.getLocalDate();
        org.joda.time.LocalDate localDate17 = localDate15.plusDays(287);
        int int18 = localDate15.getEra();
        org.joda.time.DateTime dateTime19 = localDate15.toDateTimeAtMidnight();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDate14);
        org.junit.Assert.assertNotNull(localDate15);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test15334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15334");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.DateTime dateTime10 = dateTime7.plus((long) 100);
        org.joda.time.DateTime.Property property11 = dateTime10.yearOfCentury();
        java.util.Locale locale12 = java.util.Locale.GERMANY;
        java.util.Calendar calendar13 = dateTime10.toCalendar(locale12);
        int int14 = dateTime10.getMinuteOfHour();
        org.joda.time.DateTime dateTime16 = dateTime10.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property17 = dateTime10.era();
        boolean boolean19 = dateTime10.isEqual((long) 100);
        org.joda.time.DateTime dateTime20 = dateTime10.toDateTime();
        org.joda.time.DateTime dateTime22 = dateTime20.withYear(292278993);
        org.joda.time.DateTime dateTime23 = dateTime22.withEarlierOffsetAtOverlap();
        int int24 = dateTime22.getCenturyOfEra();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        org.joda.time.LocalDateTime.Property property30 = localDateTime29.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone31 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone32 = dateTimeZone31.toTimeZone();
        org.joda.time.DateTime dateTime33 = localDateTime29.toDateTime(dateTimeZone31);
        org.joda.time.Chronology chronology34 = dateTime33.getChronology();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.secondOfDay();
        org.joda.time.DurationField durationField36 = chronology34.minutes();
        org.joda.time.DurationField durationField37 = chronology34.minutes();
        org.joda.time.MutableDateTime mutableDateTime38 = new org.joda.time.MutableDateTime((long) 292278993, chronology34);
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) 'a', chronology34);
        org.joda.time.DurationField durationField40 = chronology34.halfdays();
        org.joda.time.DurationField durationField41 = chronology34.centuries();
        org.joda.time.MutableDateTime mutableDateTime42 = dateTime22.toMutableDateTime(chronology34);
        org.joda.time.DateTimeField dateTimeField43 = chronology34.millisOfSecond();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = localDateTime46.toDateTime(dateTimeZone48);
        java.lang.String str51 = dateTime50.toString();
        org.joda.time.DateTime dateTime53 = dateTime50.plus((long) 100);
        org.joda.time.DateTime.Property property54 = dateTime53.yearOfCentury();
        java.util.Locale locale55 = java.util.Locale.GERMANY;
        java.util.Calendar calendar56 = dateTime53.toCalendar(locale55);
        int int57 = dateTime53.getMinuteOfHour();
        org.joda.time.DateTime dateTime59 = dateTime53.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property60 = dateTime53.era();
        org.joda.time.DateTime dateTime61 = property60.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField62 = property60.getField();
        java.util.Locale locale63 = java.util.Locale.FRANCE;
        java.lang.String str64 = property60.getAsShortText(locale63);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket((-1483222860001L), chronology34, locale63);
        org.joda.time.DurationField durationField66 = chronology34.seconds();
        org.joda.time.MutableDateTime mutableDateTime67 = org.joda.time.MutableDateTime.now(chronology34);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str8, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar13);
// flaky:         org.junit.Assert.assertEquals(calendar13.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 2922789 + "'", int24 == 2922789);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTimeZone31);
        org.junit.Assert.assertNotNull(timeZone32);
// flaky:         org.junit.Assert.assertEquals(timeZone32.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(mutableDateTime42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str51, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(property54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar56);
// flaky:         org.junit.Assert.assertEquals(calendar56.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTime61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "ap. J.-C." + "'", str64, "ap. J.-C.");
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(mutableDateTime67);
    }

    @Test
    public void test15335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15335");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder4.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder4.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendSecondOfDay(15);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (-1), chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime17 = localDateTime13.toDateTime(dateTimeZone15);
        java.lang.String str18 = dateTime17.toString();
        org.joda.time.DateTime dateTime20 = dateTime17.plus((long) 100);
        org.joda.time.DateTime.Property property21 = dateTime20.yearOfCentury();
        java.util.Locale locale22 = java.util.Locale.GERMANY;
        java.util.Calendar calendar23 = dateTime20.toCalendar(locale22);
        org.joda.time.DateTime.Property property24 = dateTime20.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = property24.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder8.appendFraction(dateTimeFieldType25, (int) '#', 31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder30 = dateTimeFormatterBuilder28.appendSecondOfMinute(41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatterBuilder28.toFormatter();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDateTime34.toDateTime(dateTimeZone36);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.plus((long) 100);
        org.joda.time.DateTime dateTime43 = dateTime41.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod44 = null;
        org.joda.time.DateTime dateTime45 = dateTime41.minus(readablePeriod44);
        org.joda.time.DateTimeZone dateTimeZone46 = dateTime45.getZone();
        int int47 = dateTime45.getWeekOfWeekyear();
        java.lang.String str48 = dateTimeFormatter31.print((org.joda.time.ReadableInstant) dateTime45);
        boolean boolean49 = dateTimeFormatter31.isOffsetParsed();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter51 = dateTimeFormatter31.withDefaultYear(22);
        java.lang.StringBuffer stringBuffer52 = null;
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter31.printTo(stringBuffer52, 31525395048000L);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str18, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar23);
// flaky:         org.junit.Assert.assertEquals(calendar23.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder30);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str39, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTime45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 1 + "'", int47 == 1);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "10270001700000000000000000000000000000000000000000000000000000000000000000000000000" + "'", str48, "10270001700000000000000000000000000000000000000000000000000000000000000000000000000");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeFormatter51);
    }

    @Test
    public void test15336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15336");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.DateTimeField dateTimeField14 = chronology10.centuryOfEra();
        long long19 = chronology10.getDateTimeMillis(27, 12, 21, 1970);
        org.joda.time.DateTimeField dateTimeField20 = chronology10.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology10.era();
        org.joda.time.DurationField durationField22 = chronology10.eras();
        org.joda.time.DateTimeField dateTimeField23 = chronology10.weekOfWeekyear();
        boolean boolean24 = dateTimeField23.isSupported();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeField14);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-61284556798033L) + "'", long19 == (-61284556798033L));
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test15337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15337");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType1 = dateTimeFieldType0.getDurationType();
        org.joda.time.Chronology chronology2 = null;
        boolean boolean3 = durationFieldType1.isSupported(chronology2);
        org.joda.time.format.DateTimePrinter dateTimePrinter4 = null;
        org.joda.time.format.DateTimeParser dateTimeParser5 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter6 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter4, dateTimeParser5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = dateTimeFormatter6.withChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField16 = chronology14.monthOfYear();
        org.joda.time.DateTimeField dateTimeField17 = chronology14.clockhourOfHalfday();
        java.lang.String str18 = chronology14.toString();
        org.joda.time.DurationField durationField19 = durationFieldType1.getField(chronology14);
        org.joda.time.DateTimeField dateTimeField20 = chronology14.hourOfHalfday();
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(durationFieldType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeFormatter15);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(dateTimeField17);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str18, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test15338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15338");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clearExtensions();
        java.util.Locale locale2 = builder1.build();
        java.util.Locale.Builder builder3 = builder1.clear();
        java.util.Locale.Builder builder4 = builder1.clearExtensions();
        java.util.Locale.Builder builder6 = builder1.removeUnicodeLocaleAttribute("2022");
        org.joda.time.tz.NameProvider nameProvider7 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale8 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale.Category category9 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale10 = java.util.Locale.getDefault(category9);
        java.lang.String str11 = locale8.getDisplayName(locale10);
        java.lang.String str14 = nameProvider7.getName(locale10, "0", "monthOfYear");
        java.util.Locale.Builder builder15 = builder1.setLocale(locale10);
        java.util.Locale locale16 = builder15.build();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.DateTime dateTime19 = new org.joda.time.DateTime((long) (short) 1, chronology18);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone22);
        org.joda.time.DateTime dateTime24 = dateTime19.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.weekyear();
        org.joda.time.LocalDateTime localDateTime29 = property28.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField30 = property28.getField();
        int int32 = dateTimeField30.getMaximumValue(100L);
        org.joda.time.DurationField durationField33 = dateTimeField30.getLeapDurationField();
        int int34 = dateTime19.get(dateTimeField30);
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime36 = org.joda.time.MutableDateTime.now(dateTimeZone35);
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (-1), chronology38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.DateTime dateTime43 = localDateTime39.toDateTime(dateTimeZone41);
        org.joda.time.Chronology chronology44 = dateTime43.getChronology();
        org.joda.time.DurationField durationField45 = chronology44.hours();
        org.joda.time.DateTimeField dateTimeField46 = chronology44.secondOfMinute();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (-1), chronology48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.weekyear();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.minusHours((-1));
        java.util.Locale locale53 = java.util.Locale.JAPANESE;
        java.lang.String str54 = dateTimeField46.getAsText((org.joda.time.ReadablePartial) localDateTime49, locale53);
        int int56 = dateTimeField46.getLeapAmount((long) (-1));
        int int57 = mutableDateTime36.get(dateTimeField46);
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) (-1), chronology61);
        boolean boolean63 = dateTimeZone58.isLocalDateTimeGap(localDateTime62);
        org.joda.time.LocalDateTime localDateTime65 = localDateTime62.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property66 = localDateTime62.dayOfYear();
        org.joda.time.LocalDateTime localDateTime67 = property66.roundHalfEvenCopy();
        java.util.Locale locale68 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet69 = locale68.getUnicodeLocaleAttributes();
        java.util.Locale locale70 = java.util.Locale.GERMANY;
        java.lang.String str71 = locale68.getDisplayVariant(locale70);
        java.lang.String str72 = dateTimeField46.getAsText((org.joda.time.ReadablePartial) localDateTime67, locale68);
        int int73 = dateTimeField30.getMaximumShortTextLength(locale68);
        java.util.Locale.Builder builder74 = builder15.setLocale(locale68);
        java.util.Locale locale75 = builder74.build();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(nameProvider7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.FORMAT + "'", category9.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u4e2d\u6587\u53f0\u7063)" + "'", str11, "\u4e2d\u6587\u53f0\u7063)");
        org.junit.Assert.assertNull(str14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 292278993 + "'", int32 == 292278993);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1970 + "'", int34 == 1970);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(chronology44);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertNotNull(dateTimeField46);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "0" + "'", str54, "0");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int57 + "' != '" + 47 + "'", int57 == 47);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(localDateTime67);
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "0" + "'", str72, "0");
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 9 + "'", int73 == 9);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
    }

    @Test
    public void test15339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15339");
        org.joda.time.DateTime dateTime1 = new org.joda.time.DateTime((long) (-1));
        org.joda.time.DateTime dateTime3 = dateTime1.plusWeeks(5);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.secondOfDay();
        org.joda.time.DurationField durationField13 = chronology11.minutes();
        org.joda.time.DurationField durationField14 = chronology11.minutes();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime(chronology11);
        org.joda.time.MutableDateTime mutableDateTime16 = dateTime3.toMutableDateTime(chronology11);
        org.joda.time.LocalDateTime localDateTime17 = org.joda.time.LocalDateTime.now(chronology11);
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plus(readablePeriod18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime17.weekOfWeekyear();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder21.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder21.appendHourOfHalfday(5599585);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder21.appendSecondOfDay((int) 'a');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder21.appendLiteral('4');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder21.appendMonthOfYear(762261);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder31.appendDecimal(dateTimeFieldType32, 97, (int) (short) -1);
        boolean boolean36 = localDateTime17.isSupported(dateTimeFieldType32);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder37.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder40.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter43 = dateTimeFormatterBuilder42.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder42.appendMillisOfSecond(292278993);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder45.appendTwoDigitWeekyear(1969);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder48 = dateTimeFormatterBuilder45.appendTimeZoneName();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap49 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = dateTimeFormatterBuilder48.appendTimeZoneName(strMap49);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder53 = dateTimeFormatterBuilder48.appendFractionOfDay(446, 64);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder48.appendMonthOfYear(3600);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder56 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder59 = dateTimeFormatterBuilder56.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder59.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter62 = dateTimeFormatterBuilder61.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder64 = dateTimeFormatterBuilder61.appendMillisOfSecond(292278993);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder66 = dateTimeFormatterBuilder64.appendTwoDigitWeekyear(1969);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder67 = dateTimeFormatterBuilder64.appendTimeZoneName();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap68 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder69 = dateTimeFormatterBuilder67.appendTimeZoneName(strMap68);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder72 = dateTimeFormatterBuilder67.appendFractionOfDay(446, 64);
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder76 = dateTimeFormatterBuilder67.appendFraction(dateTimeFieldType73, 822, 3);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) (-1), chronology78);
        org.joda.time.LocalDateTime.Property property80 = localDateTime79.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone81 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone82 = dateTimeZone81.toTimeZone();
        org.joda.time.DateTime dateTime83 = localDateTime79.toDateTime(dateTimeZone81);
        org.joda.time.Chronology chronology84 = dateTime83.getChronology();
        org.joda.time.DateTimeField dateTimeField85 = chronology84.secondOfDay();
        org.joda.time.DurationField durationField86 = chronology84.minutes();
        org.joda.time.DateTimeField dateTimeField87 = chronology84.weekyearOfCentury();
        org.joda.time.DurationField durationField88 = chronology84.seconds();
        org.joda.time.DateTimeField dateTimeField89 = dateTimeFieldType73.getField(chronology84);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder90 = dateTimeFormatterBuilder55.appendShortText(dateTimeFieldType73);
        org.joda.time.LocalDateTime localDateTime92 = localDateTime17.withField(dateTimeFieldType73, 10);
        org.junit.Assert.assertNotNull(dateTime3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimePrinter43);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder48);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder50);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder53);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder59);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertNotNull(dateTimePrinter62);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder64);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder66);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder67);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder69);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder72);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder76);
        org.junit.Assert.assertNotNull(property80);
        org.junit.Assert.assertNotNull(dateTimeZone81);
        org.junit.Assert.assertNotNull(timeZone82);
// flaky:         org.junit.Assert.assertEquals(timeZone82.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(chronology84);
        org.junit.Assert.assertNotNull(dateTimeField85);
        org.junit.Assert.assertNotNull(durationField86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(durationField88);
        org.junit.Assert.assertNotNull(dateTimeField89);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder90);
        org.junit.Assert.assertNotNull(localDateTime92);
    }

    @Test
    public void test15340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15340");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        int int6 = property3.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime8 = org.joda.time.MutableDateTime.now(dateTimeZone7);
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime8.add(readableDuration9, 100);
        boolean boolean12 = mutableDateTime5.isBefore((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.MutableDateTime.Property property13 = mutableDateTime8.era();
        org.joda.time.MutableDateTime mutableDateTime14 = property13.roundCeiling();
        int int15 = property13.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime16 = property13.roundHalfCeiling();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime16);
    }

    @Test
    public void test15341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15341");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime3.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.addWrapField((-1));
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        mutableDateTime6.add(readablePeriod7);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-1), chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime15 = localDateTime11.toDateTime(dateTimeZone13);
        java.lang.String str16 = dateTime15.toString();
        org.joda.time.ReadableDuration readableDuration17 = null;
        org.joda.time.DateTime dateTime18 = dateTime15.plus(readableDuration17);
        org.joda.time.DateTime dateTime20 = dateTime15.minusWeeks(10);
        mutableDateTime6.setMillis((org.joda.time.ReadableInstant) dateTime15);
        org.joda.time.DateTime.Property property22 = dateTime15.monthOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        boolean boolean28 = dateTimeZone23.isLocalDateTimeGap(localDateTime27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-1), chronology30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekyear();
        boolean boolean33 = dateTimeZone23.isLocalDateTimeGap(localDateTime31);
        org.joda.time.DateTime dateTime34 = dateTime15.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime dateTime35 = mutableDateTime1.toDateTime(dateTimeZone23);
        org.joda.time.MutableDateTime.Property property36 = mutableDateTime1.hourOfDay();
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str16, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(dateTime34);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
    }

    @Test
    public void test15342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15342");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime8 = property6.addToCopy(69);
        org.joda.time.DateTime dateTime9 = localDateTime8.toDateTime();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime8.minusDays(5599585);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.weekyear();
        org.joda.time.LocalDateTime localDateTime14 = localDateTime11.plusHours(120);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.weekyear();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime22 = localDateTime17.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod23 = null;
        org.joda.time.LocalDateTime localDateTime24 = localDateTime17.minus(readablePeriod23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime17.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime28 = localDateTime26.withWeekOfWeekyear(23);
        org.joda.time.ReadablePeriod readablePeriod29 = null;
        org.joda.time.LocalDateTime localDateTime30 = localDateTime28.minus(readablePeriod29);
        org.joda.time.LocalDateTime localDateTime32 = localDateTime30.plusMonths(4);
        org.joda.time.LocalDateTime.Property property33 = localDateTime30.hourOfDay();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.DurationField durationField38 = property37.getLeapDurationField();
        org.joda.time.Interval interval39 = property37.toInterval();
        long long40 = property37.remainder();
        java.lang.String str41 = property37.toString();
        org.joda.time.LocalDateTime localDateTime43 = property37.setCopy((int) (short) 1);
        int int44 = localDateTime43.getDayOfMonth();
        int int45 = localDateTime43.getHourOfDay();
        org.joda.time.LocalDateTime localDateTime46 = localDateTime30.withFields((org.joda.time.ReadablePartial) localDateTime43);
        org.joda.time.DurationFieldType durationFieldType47 = org.joda.time.DurationFieldType.millis();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime43.withFieldAdded(durationFieldType47, 39);
        org.joda.time.ReadablePeriod readablePeriod50 = null;
        org.joda.time.LocalDateTime localDateTime51 = localDateTime49.plus(readablePeriod50);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder55 = dateTimeFormatterBuilder52.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder57 = dateTimeFormatterBuilder55.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter58 = dateTimeFormatterBuilder57.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder60 = dateTimeFormatterBuilder57.appendMillisOfSecond(292278993);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder62 = dateTimeFormatterBuilder60.appendTwoDigitWeekyear(1969);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder63 = dateTimeFormatterBuilder60.appendTimeZoneName();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap64 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder65 = dateTimeFormatterBuilder63.appendTimeZoneName(strMap64);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder68 = dateTimeFormatterBuilder63.appendFractionOfDay(446, 64);
        org.joda.time.DateTimeFieldType dateTimeFieldType69 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder72 = dateTimeFormatterBuilder63.appendFraction(dateTimeFieldType69, 822, 3);
        int int73 = localDateTime51.get(dateTimeFieldType69);
        org.joda.time.LocalDateTime localDateTime75 = localDateTime11.withField(dateTimeFieldType69, 849);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNull(durationField38);
        org.junit.Assert.assertNotNull(interval39);
// flaky:         org.junit.Assert.assertTrue("'" + long40 + "' != '" + 2L + "'", long40 == 2L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Property[dayOfYear]" + "'", str41, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(durationFieldType47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder57);
        org.junit.Assert.assertNotNull(dateTimePrinter58);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder60);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder62);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder63);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder65);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder68);
        org.junit.Assert.assertNotNull(dateTimeFieldType69);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder72);
// flaky:         org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1970 + "'", int73 == 1970);
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test15343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15343");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = dateTimeZone1.getName((long) 5, locale4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime9 = dateTime7.plusWeeks(4861378);
        org.joda.time.LocalDate localDate10 = new org.joda.time.LocalDate((java.lang.Object) dateTime7);
        int int11 = localDate10.size();
        org.joda.time.LocalDate.Property property12 = localDate10.dayOfMonth();
        org.joda.time.Interval interval13 = localDate10.toInterval();
        org.joda.time.LocalDate.Property property14 = localDate10.weekyear();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate16 = localDate10.withCenturyOfEra(3540000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 3540000 for centuryOfEra must be in the range [0,2922789]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.003" + "'", str6, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(property14);
    }

    @Test
    public void test15344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15344");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime10 = localDateTime4.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime4.withDurationAdded(readableDuration11, (int) 'u');
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.withMonthOfYear(10);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.minusDays(40);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime17.plusMinutes(11);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(localDateTime19);
    }

    @Test
    public void test15345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15345");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        org.joda.time.ReadableDuration readableDuration2 = null;
        mutableDateTime1.add(readableDuration2, 100);
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        org.joda.time.Chronology chronology12 = dateTime11.getChronology();
        org.joda.time.DateTimeField dateTimeField13 = chronology12.dayOfYear();
        org.joda.time.Chronology chronology14 = chronology12.withUTC();
        java.lang.String str15 = chronology14.toString();
        mutableDateTime1.setChronology(chronology14);
        org.joda.time.DateTimeField dateTimeField17 = chronology14.halfdayOfDay();
        org.joda.time.tz.NameProvider nameProvider19 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale21 = new java.util.Locale("hi!");
        java.lang.String str22 = locale21.getScript();
        boolean boolean23 = locale21.hasExtensions();
        java.lang.String str26 = nameProvider19.getShortName(locale21, "minuteOfHour", "23:00:00.000");
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.lang.String str28 = locale27.toLanguageTag();
        java.lang.String str31 = nameProvider19.getShortName(locale27, "", "AD");
        java.util.Locale locale34 = new java.util.Locale("356", "1970-01-01t00:00:00.002_1924");
        java.lang.String str37 = nameProvider19.getName(locale34, "+32:00", "clockhourOfDay");
        java.util.Locale locale40 = new java.util.Locale("zh_TW", "DateTimeField[year]");
        java.util.Locale locale41 = java.util.Locale.TAIWAN;
        java.lang.String str42 = locale41.getScript();
        java.util.Locale locale43 = locale41.stripExtensions();
        java.lang.String str44 = locale40.getDisplayLanguage(locale43);
        java.lang.String str45 = locale34.getDisplayName(locale43);
        java.lang.String str46 = dateTimeField17.getAsShortText(255601971L, locale34);
        java.util.Locale.Builder builder47 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder48 = builder47.clearExtensions();
        java.util.Locale locale49 = builder48.build();
        java.util.Locale.Builder builder50 = builder48.clear();
        java.util.Locale.Builder builder52 = builder48.setScript("");
        java.util.Locale locale53 = builder52.build();
        java.util.Locale locale55 = new java.util.Locale("hi!");
        java.lang.String str56 = locale55.getScript();
        java.util.Locale locale57 = locale55.stripExtensions();
        java.lang.String str58 = locale55.getDisplayName();
        java.lang.String str59 = locale53.getDisplayName(locale55);
        int int60 = dateTimeField17.getMaximumShortTextLength(locale55);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(chronology12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ISOChronology[UTC]" + "'", str15, "ISOChronology[UTC]");
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(nameProvider19);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zh-TW" + "'", str28, "zh-TW");
        org.junit.Assert.assertNull(str31);
        org.junit.Assert.assertEquals(locale34.toString(), "356_1970-01-01T00:00:00.002_1924");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertEquals(locale40.toString(), "zh_tw_DATETIMEFIELD[YEAR]");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "zh_tw" + "'", str44, "zh_tw");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "356 (1970-01-01T00:00:00.002_1924)" + "'", str45, "356 (1970-01-01T00:00:00.002_1924)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "PM" + "'", str46, "PM");
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "");
        org.junit.Assert.assertEquals(locale55.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi!" + "'", str58, "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 2 + "'", int60 == 2);
    }

    @Test
    public void test15346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15346");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate8 = localDate3.withPeriodAdded(readablePeriod6, 9);
        org.joda.time.LocalDate.Property property9 = localDate8.weekOfWeekyear();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime17 = localDateTime12.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.millisOfSecond();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime24 = localDateTime21.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime26 = localDateTime21.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod27 = null;
        org.joda.time.LocalDateTime localDateTime28 = localDateTime21.minus(readablePeriod27);
        org.joda.time.LocalDateTime localDateTime30 = localDateTime21.withYearOfCentury(23);
        int int31 = localDateTime12.compareTo((org.joda.time.ReadablePartial) localDateTime21);
        org.joda.time.LocalDateTime localDateTime33 = localDateTime12.minusWeeks(99);
        // The following exception was thrown during execution in test generation
        try {
            boolean boolean34 = localDate8.isAfter((org.joda.time.ReadablePartial) localDateTime33);
            org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException; message: ReadablePartial objects must have matching field types");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertNotNull(localDateTime28);
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(localDateTime33);
    }

    @Test
    public void test15347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15347");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DurationField durationField12 = chronology9.minutes();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 292278993, chronology9);
        org.joda.time.DateTimeField dateTimeField14 = chronology9.minuteOfDay();
        org.joda.time.DurationField durationField15 = chronology9.days();
        org.joda.time.DurationField durationField16 = chronology9.weekyears();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-1), chronology18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime23 = localDateTime19.toDateTime(dateTimeZone21);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTime dateTime26 = dateTime23.plus((long) 100);
        org.joda.time.DateTime.Property property27 = dateTime26.yearOfCentury();
        java.util.Locale locale28 = java.util.Locale.GERMANY;
        java.util.Calendar calendar29 = dateTime26.toCalendar(locale28);
        org.joda.time.DateTime.Property property30 = dateTime26.yearOfCentury();
        org.joda.time.DateTime dateTime31 = property30.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime33 = property30.addWrapFieldToCopy(2922750);
        java.util.Locale.Category category34 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale35 = java.util.Locale.getDefault(category34);
        java.util.Locale locale36 = java.util.Locale.getDefault(category34);
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Set<java.lang.Character> charSet38 = locale37.getExtensionKeys();
        java.util.Locale.setDefault(category34, locale37);
        java.lang.String str40 = property30.getAsShortText(locale37);
        org.joda.time.MutableDateTime mutableDateTime42 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType43 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime42.set(dateTimeFieldType43, (-292275054));
        org.joda.time.MutableDateTime.Property property46 = mutableDateTime42.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.DateTimeField dateTimeField49 = dateTimeFieldType47.getField(chronology48);
        boolean boolean51 = dateTimeField49.isLeap(100L);
        mutableDateTime42.setRounding(dateTimeField49);
        org.joda.time.tz.NameProvider nameProvider54 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale56 = new java.util.Locale("hi!");
        java.lang.String str57 = locale56.getScript();
        boolean boolean58 = locale56.hasExtensions();
        java.lang.String str61 = nameProvider54.getShortName(locale56, "minuteOfHour", "23:00:00.000");
        java.util.Locale locale62 = java.util.Locale.TAIWAN;
        java.lang.String str63 = locale62.toLanguageTag();
        java.lang.String str66 = nameProvider54.getShortName(locale62, "", "AD");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider54);
        java.util.Locale.Builder builder68 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder69 = builder68.clearExtensions();
        java.util.Locale locale70 = builder69.build();
        java.lang.String str73 = nameProvider54.getName(locale70, "DurationField[years]", "0009-10-04");
        java.util.Locale locale75 = java.util.Locale.forLanguageTag("2022-02-22T07:25:22.845Z");
        java.lang.String str76 = locale70.getDisplayVariant(locale75);
        java.lang.String str77 = dateTimeField49.getAsShortText(2332799999L, locale75);
        java.lang.String str78 = locale37.getDisplayScript(locale75);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket81 = new org.joda.time.format.DateTimeParserBucket((long) 5599, chronology9, locale37, (java.lang.Integer) 29, 82800022);
        // The following exception was thrown during execution in test generation
        try {
            long long86 = chronology9.getDateTimeMillis(747115, 232, 27218982, 1855);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 232 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str24, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar29);
// flaky:         org.junit.Assert.assertEquals(calendar29.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + category34 + "' != '" + java.util.Locale.Category.FORMAT + "'", category34.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "70" + "'", str40, "70");
        org.junit.Assert.assertNotNull(dateTimeFieldType43);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(dateTimeField49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(nameProvider54);
        org.junit.Assert.assertEquals(locale56.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNull(str61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "zh-TW" + "'", str63, "zh-TW");
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "");
        org.junit.Assert.assertNull(str73);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "1970" + "'", str77, "1970");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
    }

    @Test
    public void test15348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15348");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        int int9 = property3.getMaximumShortTextLength(locale8);
        java.lang.String str10 = property3.toString();
        org.joda.time.LocalDateTime localDateTime12 = property3.setCopy(19);
        org.joda.time.LocalDateTime localDateTime13 = property3.withMinimumValue();
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.yearOfCentury();
        org.joda.time.LocalDateTime localDateTime16 = property14.addToCopy(54038L);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime16.withYear(292278969);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[dayOfYear]" + "'", str10, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(localDateTime16);
        org.junit.Assert.assertNotNull(localDateTime18);
    }

    @Test
    public void test15349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15349");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DurationField durationField10 = chronology7.minutes();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime13.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime13.add(readableDuration16, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int20 = mutableDateTime13.get(dateTimeFieldType19);
        java.lang.String str21 = dateTimeFieldType19.getName();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.property(dateTimeFieldType19);
        org.joda.time.DurationFieldType durationFieldType23 = dateTimeFieldType19.getDurationType();
        org.joda.time.Chronology chronology24 = null;
        boolean boolean25 = durationFieldType23.isSupported(chronology24);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "minuteOfHour" + "'", str21, "minuteOfHour");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(durationFieldType23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
    }

    @Test
    public void test15350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15350");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.LocalDate localDate4 = localDate0.minusWeeks((int) (short) 100);
        org.joda.time.LocalDate.Property property5 = localDate4.weekOfWeekyear();
        org.joda.time.LocalDate localDate6 = property5.withMinimumValue();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localDate6);
    }

    @Test
    public void test15351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15351");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        mutableDateTime15.add((long) 100);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime15.dayOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.plus((long) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.plus(readableDuration30);
        int int32 = dateTime31.getDayOfMonth();
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        java.lang.String str38 = dateTime31.toString("365", locale36);
        org.joda.time.DateTime dateTime40 = dateTime31.plusMonths(1969);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        boolean boolean47 = dateTimeZone42.isLocalDateTimeGap(localDateTime46);
        java.lang.String str49 = dateTimeZone42.getName((long) 4);
        mutableDateTime15.setZone(dateTimeZone42);
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.lang.String str53 = dateTimeZone42.getName((long) (-292275054), locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(1645514718201L, chronology11, locale52, (java.lang.Integer) 1, (int) (short) -1);
        org.joda.time.Chronology chronology57 = dateTimeParserBucket56.getChronology();
        org.joda.time.DateTimeZone dateTimeZone58 = dateTimeParserBucket56.getZone();
        java.lang.Integer int59 = dateTimeParserBucket56.getOffsetInteger();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str26, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "365" + "'", str38, "365");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.003" + "'", str49, "+00:00:00.003");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.003" + "'", str53, "+00:00:00.003");
        org.junit.Assert.assertNotNull(chronology57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNull(int59);
    }

    @Test
    public void test15352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15352");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone1 = dateTimeZone0.toTimeZone();
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        boolean boolean5 = dateTimeZone0.isLocalDateTimeGap(localDateTime4);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime4.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property8 = localDateTime4.dayOfYear();
        org.joda.time.LocalDateTime localDateTime9 = property8.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime11 = localDateTime9.plusYears(3);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime13 = org.joda.time.MutableDateTime.now(dateTimeZone12);
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime13.add(readableDuration14, 100);
        java.util.Date date17 = mutableDateTime13.toDate();
        org.joda.time.LocalDateTime localDateTime18 = org.joda.time.LocalDateTime.fromDateFields(date17);
        org.joda.time.LocalDateTime localDateTime19 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime18);
        int int20 = localDateTime18.getDayOfMonth();
        org.joda.time.LocalDateTime.Property property21 = localDateTime18.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime25 = localDateTime18.withDate((-17259888), 999, 0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 999 for monthOfYear must be in the range [1,12]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(timeZone1);
// flaky:         org.junit.Assert.assertEquals(timeZone1.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(date17);
// flaky:         org.junit.Assert.assertEquals(date17.toString(), "Tue Feb 22 07:33:47 GMT 2022");
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 22 + "'", int20 == 22);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test15353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15353");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfHalfday();
        org.joda.time.DurationField durationField15 = chronology11.days();
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) 1970, chronology11);
        java.lang.String str17 = localDateTime16.toString();
        org.joda.time.LocalDateTime.Property property18 = localDateTime16.weekyear();
        org.joda.time.LocalDateTime localDateTime19 = property18.getLocalDateTime();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime19.minusWeeks(807);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.withYearOfEra(59);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusSeconds(2013);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime23.minusWeeks(5602021);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusWeeks(51);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date30 = localDateTime27.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -27 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "1970-01-01T00:00:01.973" + "'", str17, "1970-01-01T00:00:01.973");
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test15354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15354");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DateTimeField dateTimeField9 = chronology7.secondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.weekyear();
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.minusHours((-1));
        java.util.Locale locale16 = java.util.Locale.JAPANESE;
        java.lang.String str17 = dateTimeField9.getAsText((org.joda.time.ReadablePartial) localDateTime12, locale16);
        int int19 = dateTimeField9.getLeapAmount((long) (-1));
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DurationField durationField25 = property24.getLeapDurationField();
        org.joda.time.Interval interval26 = property24.toInterval();
        long long27 = property24.remainder();
        java.util.Locale locale29 = new java.util.Locale("hi!");
        int int30 = property24.getMaximumShortTextLength(locale29);
        java.lang.String str32 = locale29.getUnicodeLocaleType("AD");
        java.util.Locale locale34 = new java.util.Locale("365");
        java.lang.String str35 = locale34.getISO3Language();
        java.lang.String str36 = locale29.getDisplayScript(locale34);
        java.lang.String str37 = dateTimeField9.getAsShortText((-27082775779199900L), locale34);
        org.joda.time.MutableDateTime mutableDateTime39 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime39.setTime(100L);
        org.joda.time.MutableDateTime.Property property42 = mutableDateTime39.dayOfMonth();
        mutableDateTime39.addMillis((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property45 = mutableDateTime39.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone47 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        mutableDateTime39.setZoneRetainFields(dateTimeZone47);
        int int50 = dateTimeZone47.getStandardOffset(59875200000L);
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((java.lang.Object) str37, dateTimeZone47);
        java.util.Date date52 = localDateTime51.toDate();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "0" + "'", str17, "0");
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNull(durationField25);
        org.junit.Assert.assertNotNull(interval26);
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 2L + "'", long27 == 2L);
        org.junit.Assert.assertEquals(locale29.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 3 + "'", int30 == 3);
        org.junit.Assert.assertNull(str32);
        org.junit.Assert.assertEquals(locale34.toString(), "365");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "365" + "'", str35, "365");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "0" + "'", str37, "0");
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 100 + "'", int50 == 100);
        org.junit.Assert.assertNotNull(date52);
// flaky:         org.junit.Assert.assertEquals(date52.toString(), "Thu Jan 01 00:00:00 GMT 1");
    }

    @Test
    public void test15355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15355");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder4.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder4.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendSecondOfDay(15);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder8.appendFractionOfMinute(2089, 82800022);
        org.joda.time.format.DateTimePrinter dateTimePrinter14 = null;
        org.joda.time.format.DateTimeParser dateTimeParser15 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter16 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter14, dateTimeParser15);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-1), chronology18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime23 = localDateTime19.toDateTime(dateTimeZone21);
        org.joda.time.Chronology chronology24 = dateTime23.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter16.withChronology(chronology24);
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        boolean boolean31 = dateTimeZone26.isLocalDateTimeGap(localDateTime30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.weekyear();
        boolean boolean36 = dateTimeZone26.isLocalDateTimeGap(localDateTime34);
        long long38 = dateTimeZone26.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter16.withZone(dateTimeZone26);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter39.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder13.append(dateTimeFormatter39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter39.withDefaultYear(25);
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime46.addYears((int) 'x');
        org.joda.time.MutableDateTime.Property property49 = mutableDateTime46.minuteOfDay();
        boolean boolean50 = property49.isLeap();
        int int51 = property49.getMinimumValueOverall();
        org.joda.time.MutableDateTime mutableDateTime52 = property49.roundFloor();
        org.joda.time.Interval interval53 = property49.toInterval();
        org.joda.time.MutableDateTime mutableDateTime54 = property49.roundFloor();
        mutableDateTime54.addWeekyears(46800000);
        // The following exception was thrown during execution in test generation
        try {
            int int59 = dateTimeFormatter39.parseInto((org.joda.time.ReadWritableInstant) mutableDateTime54, "2022-02-22T07:33:44.568+00:00:00.003", (-241593));
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long38 + "' != '" + 3L + "'", long38 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime52);
        org.junit.Assert.assertNotNull(interval53);
        org.junit.Assert.assertNotNull(mutableDateTime54);
    }

    @Test
    public void test15356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15356");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfWeek();
        java.lang.String str7 = localDate0.toString("23:00:00.000");
        org.joda.time.LocalDate localDate9 = localDate0.minusDays(1969);
        org.joda.time.LocalDate localDate11 = localDate9.withDayOfMonth((int) (short) 10);
        org.joda.time.LocalTime localTime12 = null;
        org.joda.time.DateTime dateTime13 = localDate9.toDateTime(localTime12);
        org.joda.time.DateTime.Property property14 = dateTime13.minuteOfDay();
        org.joda.time.DateTime.Property property15 = dateTime13.yearOfCentury();
        boolean boolean16 = dateTime13.isEqualNow();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime21 = dateTime13.withTime(0, 5599, 1971, 55);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 5599 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.000" + "'", str7, "23:00:00.000");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test15357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15357");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        mutableDateTime6.add((long) 100);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-1), chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime15 = localDateTime11.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfDay();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekyearOfCentury();
        java.lang.String str20 = chronology16.toString();
        mutableDateTime6.setChronology(chronology16);
        org.joda.time.DurationField durationField22 = chronology16.centuries();
        org.joda.time.DurationField durationField23 = chronology16.months();
        boolean boolean24 = localDateTime5.equals((java.lang.Object) chronology16);
        org.joda.time.DurationField durationField25 = chronology16.weeks();
        int int27 = durationField25.getValue((-1469923200001L));
        boolean boolean28 = durationField25.isPrecise();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str20, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-2430) + "'", int27 == (-2430));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
    }

    @Test
    public void test15358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15358");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime6 = localDateTime4.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime4.plusHours(0);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime8.minusDays(4);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (-1), chronology12);
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime13.plusYears(0);
        int int18 = localDateTime13.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType19 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime13.withFieldAdded(durationFieldType19, 0);
        boolean boolean22 = localDateTime10.isSupported(durationFieldType19);
        org.joda.time.MutableDateTime mutableDateTime23 = new org.joda.time.MutableDateTime();
        mutableDateTime23.add((long) 100);
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (-1), chronology27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTime dateTime32 = localDateTime28.toDateTime(dateTimeZone30);
        org.joda.time.Chronology chronology33 = dateTime32.getChronology();
        org.joda.time.DateTimeField dateTimeField34 = chronology33.secondOfDay();
        org.joda.time.DurationField durationField35 = chronology33.minutes();
        org.joda.time.DateTimeField dateTimeField36 = chronology33.weekyearOfCentury();
        java.lang.String str37 = chronology33.toString();
        mutableDateTime23.setChronology(chronology33);
        org.joda.time.DurationField durationField39 = chronology33.centuries();
        org.joda.time.DurationField durationField40 = durationFieldType19.getField(chronology33);
        org.joda.time.ReadablePeriod readablePeriod41 = null;
        long long44 = chronology33.add(readablePeriod41, 3628800015L, 45180002);
        org.joda.time.DurationField durationField45 = chronology33.hours();
        long long48 = durationField45.subtract(99L, 604800000L);
        java.lang.String str49 = durationField45.getName();
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertNotNull(localDateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 19 + "'", int18 == 19);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(chronology33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(durationField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str37, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 3628800015L + "'", long44 == 3628800015L);
        org.junit.Assert.assertNotNull(durationField45);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + (-2177279999999901L) + "'", long48 == (-2177279999999901L));
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "hours" + "'", str49, "hours");
    }

    @Test
    public void test15359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15359");
        org.joda.time.DateTime dateTime1 = org.joda.time.DateTime.parse("1970-01-27T00:00:00.002");
        java.util.Date date2 = dateTime1.toDate();
        org.joda.time.LocalDateTime localDateTime3 = org.joda.time.LocalDateTime.fromDateFields(date2);
        org.junit.Assert.assertNotNull(dateTime1);
        org.junit.Assert.assertNotNull(date2);
// flaky:         org.junit.Assert.assertEquals(date2.toString(), "Mon Jan 26 23:59:59 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime3);
    }

    @Test
    public void test15360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15360");
        org.joda.time.LocalTime localTime1 = org.joda.time.LocalTime.fromMillisOfDay((-1468885475260800000L));
        org.junit.Assert.assertNotNull(localTime1);
    }

    @Test
    public void test15361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15361");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.plusDays(29);
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.minusDays(21);
        org.joda.time.DateTimeFieldType dateTimeFieldType8 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType9 = dateTimeFieldType8.getRangeDurationType();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfDay();
        org.joda.time.DurationField durationField19 = durationFieldType9.getField(chronology17);
        org.joda.time.LocalDateTime localDateTime21 = localDateTime7.withFieldAdded(durationFieldType9, 18);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        org.joda.time.LocalDateTime localDateTime23 = property22.roundCeilingCopy();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder24.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder24.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatterBuilder28.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder28.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder32.appendSecondOfDay(15);
        org.joda.time.format.DateTimePrinter dateTimePrinter35 = dateTimeFormatterBuilder32.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder32.appendYearOfCentury(5, 30);
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime40.addYears((int) 'x');
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime40.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime44 = mutableDateTime40.copy();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime46.setMillisOfDay(10);
        mutableDateTime46.setMillisOfSecond((int) (short) 1);
        boolean boolean51 = mutableDateTime44.isBefore((org.joda.time.ReadableInstant) mutableDateTime46);
        org.joda.time.LocalDateTime localDateTime52 = new org.joda.time.LocalDateTime();
        org.joda.time.LocalDateTime localDateTime54 = localDateTime52.minusMonths(2);
        org.joda.time.DateTimeZone dateTimeZone55 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone56 = dateTimeZone55.toTimeZone();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (-1), chronology58);
        boolean boolean60 = dateTimeZone55.isLocalDateTimeGap(localDateTime59);
        org.joda.time.LocalDateTime localDateTime62 = localDateTime59.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property63 = localDateTime59.dayOfYear();
        org.joda.time.LocalDateTime localDateTime65 = localDateTime59.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration66 = null;
        org.joda.time.LocalDateTime localDateTime68 = localDateTime59.withDurationAdded(readableDuration66, (int) 'u');
        org.joda.time.LocalDateTime localDateTime70 = localDateTime68.withMonthOfYear(10);
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.weekyear();
        int int72 = localDateTime68.indexOf(dateTimeFieldType71);
        org.joda.time.LocalDateTime localDateTime74 = localDateTime52.withField(dateTimeFieldType71, 31);
        mutableDateTime46.set(dateTimeFieldType71, (int) (short) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder77 = dateTimeFormatterBuilder38.appendShortText(dateTimeFieldType71);
        boolean boolean78 = localDateTime23.isSupported(dateTimeFieldType71);
        org.joda.time.LocalDateTime.Property property79 = localDateTime23.centuryOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(dateTimeFieldType8);
        org.junit.Assert.assertNotNull(durationFieldType9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimePrinter29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimePrinter35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeZone55);
        org.junit.Assert.assertNotNull(timeZone56);
// flaky:         org.junit.Assert.assertEquals(timeZone56.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNotNull(localDateTime62);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(localDateTime65);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + (-1) + "'", int72 == (-1));
        org.junit.Assert.assertNotNull(localDateTime74);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder77);
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + true + "'", boolean78 == true);
        org.junit.Assert.assertNotNull(property79);
    }

    @Test
    public void test15362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15362");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property7.addToCopy((int) ' ');
        org.joda.time.LocalDate localDate11 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate12 = property7.roundFloorCopy();
        org.joda.time.LocalDate.Property property13 = localDate12.era();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate15 = property13.addToCopy(86100);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: eras field is unsupported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(property13);
    }

    @Test
    public void test15363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15363");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.LocalDate localDate3 = property2.withMinimumValue();
        int int4 = localDate3.getWeekyear();
        int int5 = localDate3.getYearOfCentury();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-292275054) + "'", int4 == (-292275054));
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 54 + "'", int5 == 54);
    }

    @Test
    public void test15364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15364");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder4.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder6.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder6.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime12.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration15 = null;
        mutableDateTime12.add(readableDuration15, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType18 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int19 = mutableDateTime12.get(dateTimeFieldType18);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder6.appendSignedDecimal(dateTimeFieldType18, 92, 9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = dateTimeFormatterBuilder23.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = dateTimeFormatterBuilder28.toPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser30 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter29, dateTimeParser30);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder34 = dateTimeFormatterBuilder32.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder32.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter37 = dateTimeFormatterBuilder36.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder40 = dateTimeFormatterBuilder36.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser41 = dateTimeFormatterBuilder36.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder6.append(dateTimePrinter29, dateTimeParser41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter5, dateTimeParser41);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter43.withOffsetParsed();
        org.joda.time.Chronology chronology45 = dateTimeFormatter43.getChronolgy();
        // The following exception was thrown during execution in test generation
        try {
            long long47 = dateTimeFormatter43.parseMillis("1853-01-10");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"1853-01-10\" is malformed at \"3-01-10\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFieldType18);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder26);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(dateTimePrinter29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder34);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimePrinter37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder40);
        org.junit.Assert.assertNotNull(dateTimeParser41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNull(chronology45);
    }

    @Test
    public void test15365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15365");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.weekyears();
        org.joda.time.DurationField durationField10 = chronology7.months();
        long long11 = durationField10.getUnitMillis();
        long long13 = durationField10.getValueAsLong((-518400018L));
        // The following exception was thrown during execution in test generation
        try {
            long long16 = durationField10.subtract(9467085600000000L, 311036416115L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Magnitude of add amount is too large: -311036416115");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2629746000L + "'", long11 == 2629746000L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
    }

    @Test
    public void test15366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15366");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.LocalDate.Property property10 = localDate8.weekOfWeekyear();
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 3, chronology12);
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType15 = dateTimeFieldType14.getDurationType();
        org.joda.time.DurationFieldType durationFieldType16 = dateTimeFieldType14.getRangeDurationType();
        boolean boolean17 = localDate13.isSupported(durationFieldType16);
        org.joda.time.LocalDate.Property property18 = localDate13.centuryOfEra();
        int int19 = localDate13.getEra();
        boolean boolean20 = localDate8.isAfter((org.joda.time.ReadablePartial) localDate13);
        org.joda.time.LocalDate.Property property21 = localDate8.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = localDate8.toString("2022-02-22T07:28:28.905+00:00:00.003");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(durationFieldType15);
        org.junit.Assert.assertNotNull(durationFieldType16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
    }

    @Test
    public void test15367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15367");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone2 = dateTimeZone1.toTimeZone();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        boolean boolean6 = dateTimeZone1.isLocalDateTimeGap(localDateTime5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.weekyear();
        boolean boolean11 = dateTimeZone1.isLocalDateTimeGap(localDateTime9);
        boolean boolean13 = dateTimeZone1.isStandardOffset(86399999L);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime(100L, dateTimeZone1);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.monthOfYear();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.weekyear();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime18.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime23 = localDateTime18.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod24 = null;
        org.joda.time.LocalDateTime localDateTime25 = localDateTime18.minus(readablePeriod24);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.withWeekOfWeekyear(23);
        int int30 = localDateTime27.getCenturyOfEra();
        int int32 = localDateTime27.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime34 = localDateTime27.plusMinutes(99);
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (-1), chronology36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.weekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime37.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean45 = localDateTime37.isSupported(dateTimeFieldType44);
        int int46 = localDateTime34.indexOf(dateTimeFieldType44);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (-1), chronology48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime52 = localDateTime49.plusDays(29);
        org.joda.time.LocalDateTime localDateTime54 = localDateTime49.minusDays(21);
        org.joda.time.DateTimeFieldType dateTimeFieldType55 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType56 = dateTimeFieldType55.getRangeDurationType();
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (-1), chronology58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.DateTime dateTime63 = localDateTime59.toDateTime(dateTimeZone61);
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.secondOfDay();
        org.joda.time.DurationField durationField66 = durationFieldType56.getField(chronology64);
        org.joda.time.LocalDateTime localDateTime68 = localDateTime54.withFieldAdded(durationFieldType56, 18);
        org.joda.time.LocalDateTime localDateTime70 = localDateTime34.withFieldAdded(durationFieldType56, 12);
        boolean boolean71 = localDateTime14.isSupported(durationFieldType56);
        java.util.Date date72 = localDateTime14.toDate();
        java.util.Date date73 = localDateTime14.toDate();
        org.joda.time.ReadablePeriod readablePeriod74 = null;
        org.joda.time.LocalDateTime localDateTime75 = localDateTime14.minus(readablePeriod74);
        // The following exception was thrown during execution in test generation
        try {
            int int77 = localDateTime75.getValue(60049052);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 60049052");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(timeZone2);
// flaky:         org.junit.Assert.assertEquals(timeZone2.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 19 + "'", int30 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + (-1) + "'", int46 == (-1));
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(localDateTime52);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeFieldType55);
        org.junit.Assert.assertNotNull(durationFieldType56);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(localDateTime68);
        org.junit.Assert.assertNotNull(localDateTime70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(date72);
// flaky:         org.junit.Assert.assertEquals(date72.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(date73);
// flaky:         org.junit.Assert.assertEquals(date73.toString(), "Thu Jan 01 00:00:00 GMT 1970");
        org.junit.Assert.assertNotNull(localDateTime75);
    }

    @Test
    public void test15368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15368");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime6.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime6.copy();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.era();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfYear();
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        boolean boolean30 = dateTimeZone25.isLocalDateTimeGap(localDateTime29);
        long long32 = chronology24.set((org.joda.time.ReadablePartial) localDateTime29, (long) '#');
        org.joda.time.DateTimeField dateTimeField33 = chronology24.secondOfMinute();
        org.joda.time.DurationField durationField34 = dateTimeField33.getRangeDurationField();
        mutableDateTime13.setRounding(dateTimeField33);
        org.joda.time.DurationField durationField36 = dateTimeField33.getRangeDurationField();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (-1), chronology38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfYear();
        org.joda.time.DurationField durationField41 = property40.getLeapDurationField();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-1), chronology43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        org.joda.time.DateTime dateTime48 = localDateTime44.toDateTime(dateTimeZone46);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.DateTime dateTime51 = dateTime48.plus((long) 100);
        org.joda.time.DateTime.Property property52 = dateTime51.yearOfCentury();
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.util.Calendar calendar54 = dateTime51.toCalendar(locale53);
        int int55 = dateTime51.getMinuteOfHour();
        org.joda.time.DateTime dateTime57 = dateTime51.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime59 = dateTime57.withMillis((-1L));
        long long60 = property40.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.LocalDateTime localDateTime61 = property40.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) (-1), chronology64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone68 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTime dateTime69 = localDateTime65.toDateTime(dateTimeZone67);
        java.lang.String str70 = dateTime69.toString();
        org.joda.time.DateTime dateTime72 = dateTime69.plus((long) 100);
        org.joda.time.DateTime.Property property73 = dateTime72.yearOfCentury();
        java.util.Locale locale74 = java.util.Locale.GERMANY;
        java.util.Calendar calendar75 = dateTime72.toCalendar(locale74);
        int int76 = dateTime72.getMinuteOfHour();
        org.joda.time.DateTime dateTime78 = dateTime72.plusMinutes(99);
        boolean boolean80 = dateTime72.isEqual((long) 292278993);
        java.util.Locale locale81 = java.util.Locale.TAIWAN;
        java.lang.String str82 = locale81.toLanguageTag();
        java.util.Locale locale83 = java.util.Locale.GERMANY;
        java.lang.String str84 = locale81.getDisplayScript(locale83);
        java.lang.String str85 = locale83.getVariant();
        java.util.Calendar calendar86 = dateTime72.toCalendar(locale83);
        java.lang.String str87 = locale83.getLanguage();
        java.lang.String str88 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime61, 421, locale83);
        java.util.Set<java.lang.String> strSet89 = locale83.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder90 = builder3.setLocale(locale83);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder92 = builder90.setVariant("1975-05-23T23:59:59.999Z");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: 1975-05-23T23:59:59.999Z [at index 5]");
        } catch (java.util.IllformedLocaleException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str49, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 676793L + "'", long60 == 676793L);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str70, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "zh-TW" + "'", str82, "zh-TW");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(calendar86);
// flaky:         org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "de" + "'", str87, "de");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "421" + "'", str88, "421");
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(builder90);
    }

    @Test
    public void test15369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15369");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendSecondOfDay(738207);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder2.appendYearOfCentury(738207, 17259888);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder2.appendDayOfWeekShortText();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter7 = dateTimeFormatterBuilder2.toFormatter();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime9 = dateTimeFormatter7.parseLocalTime("2000-01-01");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Invalid format: \"2000-01-01\" is malformed at \"-01-01\"");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatter7);
    }

    @Test
    public void test15370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15370");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.yearOfEra();
        int int6 = mutableDateTime1.getRoundingMode();
        long long7 = mutableDateTime1.getMillis();
        org.joda.time.LocalTime localTime9 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime11 = localTime9.minusSeconds((int) (short) 10);
        int int12 = localTime9.getMinuteOfHour();
        org.joda.time.LocalTime.Property property13 = localTime9.hourOfDay();
        org.joda.time.LocalTime localTime14 = property13.withMaximumValue();
        org.joda.time.DateTime dateTime15 = localTime14.toDateTimeToday();
        org.joda.time.LocalTime.Property property16 = localTime14.minuteOfHour();
        org.joda.time.DurationField durationField17 = property16.getDurationField();
        org.joda.time.LocalTime localTime18 = property16.withMaximumValue();
        org.joda.time.LocalTime localTime20 = localTime18.plusMillis(1969);
        org.joda.time.Chronology chronology21 = localTime20.getChronology();
        org.joda.time.MutableDateTime mutableDateTime22 = mutableDateTime1.toMutableDateTime(chronology21);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-9223372017043200001L) + "'", long7 == (-9223372017043200001L));
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(localTime18);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertNotNull(chronology21);
        org.junit.Assert.assertNotNull(mutableDateTime22);
    }

    @Test
    public void test15371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15371");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.DateTimeField dateTimeField12 = chronology11.dayOfYear();
        org.joda.time.Chronology chronology13 = chronology11.withUTC();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        boolean boolean19 = dateTimeZone14.isLocalDateTimeGap(localDateTime18);
        long long21 = chronology13.set((org.joda.time.ReadablePartial) localDateTime18, (long) '#');
        org.joda.time.DateTimeField dateTimeField22 = chronology13.secondOfMinute();
        org.joda.time.DurationField durationField23 = chronology13.days();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter3.withChronology(chronology13);
        org.joda.time.DurationField durationField25 = chronology13.halfdays();
        org.joda.time.DateTime dateTime26 = new org.joda.time.DateTime((long) 292278994, chronology13);
        org.joda.time.ReadablePartial readablePartial27 = null;
        // The following exception was thrown during execution in test generation
        try {
            int[] intArray29 = chronology13.get(readablePartial27, (long) (-86398029));
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long21 + "' != '" + 2L + "'", long21 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(durationField25);
    }

    @Test
    public void test15372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15372");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.DateTime dateTime12 = dateTime9.withWeekyear((int) 'x');
        org.joda.time.DateTime dateTime14 = dateTime12.plusWeeks((int) (byte) 0);
        int int15 = dateTime12.getEra();
        org.joda.time.DateTime.Property property16 = dateTime12.dayOfMonth();
        org.joda.time.DateTime dateTime18 = dateTime12.withCenturyOfEra(2000);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
    }

    @Test
    public void test15373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15373");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.DateTime dateTime4 = localTime3.toDateTimeToday();
        org.joda.time.LocalTime localTime6 = localTime3.withHourOfDay(18);
        org.joda.time.LocalTime.Property property7 = localTime6.millisOfSecond();
        org.joda.time.LocalTime localTime8 = property7.withMinimumValue();
        org.joda.time.DurationField durationField9 = property7.getLeapDurationField();
        org.joda.time.LocalTime localTime10 = property7.roundFloorCopy();
        org.joda.time.LocalTime localTime11 = property7.withMaximumValue();
        int int12 = localTime11.getMinuteOfHour();
        org.joda.time.LocalTime localTime14 = localTime11.plusHours((-19045));
        org.joda.time.tz.NameProvider nameProvider16 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale18 = new java.util.Locale("hi!");
        java.lang.String str19 = locale18.getScript();
        boolean boolean20 = locale18.hasExtensions();
        java.lang.String str23 = nameProvider16.getShortName(locale18, "minuteOfHour", "23:00:00.000");
        java.util.Locale locale25 = new java.util.Locale("365");
        java.lang.String str26 = locale18.getDisplayName(locale25);
        java.lang.String str28 = locale18.getExtension('u');
        java.lang.String str29 = localTime14.toString("5170", locale18);
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(dateTime4);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 33 + "'", int12 == 33);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(nameProvider16);
        org.junit.Assert.assertEquals(locale18.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(str23);
        org.junit.Assert.assertEquals(locale25.toString(), "365");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "hi!" + "'", str26, "hi!");
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "5170" + "'", str29, "5170");
    }

    @Test
    public void test15374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15374");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        int int6 = localTime1.size();
        int int7 = localTime1.getMinuteOfHour();
        org.joda.time.Chronology chronology8 = localTime1.getChronology();
        org.joda.time.tz.NameProvider nameProvider10 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale12 = new java.util.Locale("hi!");
        java.lang.String str13 = locale12.getScript();
        boolean boolean14 = locale12.hasExtensions();
        java.lang.String str17 = nameProvider10.getShortName(locale12, "minuteOfHour", "23:00:00.000");
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale18.toLanguageTag();
        java.lang.String str22 = nameProvider10.getShortName(locale18, "", "AD");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider10);
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder25 = builder24.clearExtensions();
        java.util.Locale locale26 = builder25.build();
        java.lang.String str29 = nameProvider10.getName(locale26, "DurationField[years]", "0009-10-04");
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale30.toLanguageTag();
        java.lang.String str34 = nameProvider10.getShortName(locale30, "1969-12-31T23:59:59.999", "199070-01-01");
        java.lang.String str35 = localTime1.toString("07:26:00.064", locale30);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 4 + "'", int6 == 4);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(nameProvider10);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh-TW" + "'", str19, "zh-TW");
        org.junit.Assert.assertNull(str22);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zh-TW" + "'", str31, "zh-TW");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "07:26:00.064" + "'", str35, "07:26:00.064");
    }

    @Test
    public void test15375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15375");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.LocalTime localTime10 = property9.roundHalfCeilingCopy();
        org.joda.time.DateTimeField dateTimeField11 = property9.getField();
        org.joda.time.LocalTime localTime12 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime13 = property9.roundFloorCopy();
        org.joda.time.LocalTime localTime14 = property9.withMaximumValue();
        java.lang.String str15 = property9.getAsShortText();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime13);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "0" + "'", str15, "0");
    }

    @Test
    public void test15376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15376");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.LocalTime localTime8 = property5.addWrapFieldToCopy(23);
        org.joda.time.LocalTime localTime10 = property5.addWrapFieldToCopy((int) (byte) 100);
        org.joda.time.LocalTime.Property property11 = localTime10.hourOfDay();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test15377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15377");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.secondOfDay();
        org.joda.time.DurationField durationField10 = chronology8.minutes();
        org.joda.time.DurationField durationField11 = chronology8.minutes();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((long) 292278993, chronology8);
        org.joda.time.DateTimeField dateTimeField13 = chronology8.minuteOfDay();
        org.joda.time.DurationField durationField14 = chronology8.days();
        long long16 = durationField14.getMillis(22);
        long long19 = durationField14.getValueAsLong((long) 59, (long) 18);
        int int21 = durationField14.getValue(1645514718198L);
        int int24 = durationField14.getDifference((long) 32, 4401540000L);
        boolean boolean25 = durationField14.isPrecise();
        org.joda.time.DurationFieldType durationFieldType26 = durationField14.getType();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1900800000L + "'", long16 == 1900800000L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 19045 + "'", int21 == 19045);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + (-50) + "'", int24 == (-50));
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(durationFieldType26);
    }

    @Test
    public void test15378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15378");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        int int13 = dateTime12.getDayOfMonth();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.lang.String str19 = dateTime12.toString("365", locale17);
        org.joda.time.DateTime dateTime21 = dateTime12.plusMonths(1969);
        org.joda.time.DateTime dateTime22 = dateTime12.withLaterOffsetAtOverlap();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        boolean boolean28 = dateTimeZone23.isLocalDateTimeGap(localDateTime27);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (-1), chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone34 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone35 = dateTimeZone34.toTimeZone();
        org.joda.time.DateTime dateTime36 = localDateTime32.toDateTime(dateTimeZone34);
        org.joda.time.Chronology chronology37 = dateTime36.getChronology();
        org.joda.time.DateTimeField dateTimeField38 = chronology37.secondOfDay();
        org.joda.time.DurationField durationField39 = chronology37.minutes();
        org.joda.time.DurationField durationField40 = chronology37.minutes();
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(chronology37);
        org.joda.time.MutableDateTime mutableDateTime43 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime43.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration46 = null;
        mutableDateTime43.add(readableDuration46, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType49 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int50 = mutableDateTime43.get(dateTimeFieldType49);
        java.lang.String str51 = dateTimeFieldType49.getName();
        org.joda.time.MutableDateTime.Property property52 = mutableDateTime41.property(dateTimeFieldType49);
        org.joda.time.MutableDateTime mutableDateTime54 = property52.add((long) 1975);
        java.util.Locale locale55 = java.util.Locale.CHINESE;
        int int56 = property52.getMaximumTextLength(locale55);
        java.lang.String str57 = dateTimeZone23.getShortName((long) 1975, locale55);
        org.joda.time.DateTime dateTime58 = dateTime22.withZoneRetainFields(dateTimeZone23);
        org.joda.time.DateTime.Property property59 = dateTime22.monthOfYear();
        int int60 = dateTime22.getCenturyOfEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "365" + "'", str19, "365");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertNotNull(dateTimeZone34);
        org.junit.Assert.assertNotNull(timeZone35);
// flaky:         org.junit.Assert.assertEquals(timeZone35.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(chronology37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(durationField39);
        org.junit.Assert.assertNotNull(durationField40);
        org.junit.Assert.assertNotNull(dateTimeFieldType49);
// flaky:         org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "minuteOfHour" + "'", str51, "minuteOfHour");
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 2 + "'", int56 == 2);
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "+00:00:00.003" + "'", str57, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 19 + "'", int60 == 19);
    }

    @Test
    public void test15379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15379");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.yearOfEra();
        mutableDateTime1.setYear((int) '#');
        mutableDateTime1.setYear(292278993);
        org.joda.time.MutableDateTime.Property property10 = mutableDateTime1.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField11 = mutableDateTime1.getRoundingField();
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime1.millisOfSecond();
        org.joda.time.MutableDateTime mutableDateTime14 = property12.add(2);
        org.joda.time.MutableDateTime mutableDateTime16 = property12.addWrapField(3600);
        org.joda.time.MutableDateTime mutableDateTime18 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime18.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration21 = null;
        mutableDateTime18.add(readableDuration21, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property24 = mutableDateTime18.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime25 = mutableDateTime18.copy();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (-1), chronology27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone30 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone31 = dateTimeZone30.toTimeZone();
        org.joda.time.DateTime dateTime32 = localDateTime28.toDateTime(dateTimeZone30);
        java.lang.String str33 = dateTime32.toString();
        org.joda.time.DateTime dateTime35 = dateTime32.plus((long) 100);
        org.joda.time.DateTime.Property property36 = dateTime35.yearOfCentury();
        java.util.Locale locale37 = java.util.Locale.GERMANY;
        java.util.Calendar calendar38 = dateTime35.toCalendar(locale37);
        int int39 = dateTime35.getMinuteOfHour();
        org.joda.time.DateTime dateTime41 = dateTime35.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property42 = dateTime35.era();
        org.joda.time.DateTime dateTime43 = property42.roundHalfEvenCopy();
        int int44 = dateTime43.getEra();
        int int45 = dateTime43.getEra();
        mutableDateTime25.setTime((org.joda.time.ReadableInstant) dateTime43);
        mutableDateTime25.setDate((long) 22);
        mutableDateTime16.setTime((org.joda.time.ReadableInstant) mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime14);
        org.junit.Assert.assertNotNull(mutableDateTime16);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTimeZone30);
        org.junit.Assert.assertNotNull(timeZone31);
// flaky:         org.junit.Assert.assertEquals(timeZone31.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime32);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str33, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar38);
// flaky:         org.junit.Assert.assertEquals(calendar38.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 0 + "'", int39 == 0);
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + 1 + "'", int44 == 1);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
    }

    @Test
    public void test15380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15380");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.DateTimeFieldType dateTimeFieldType7 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DateTime.Property property8 = dateTime6.property(dateTimeFieldType7);
        org.joda.time.DateTime dateTime10 = dateTime6.plusYears(2);
        org.joda.time.DateTime dateTime12 = dateTime10.plusYears(284);
        org.joda.time.DateTime dateTime14 = dateTime12.withMillisOfDay(21);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.minuteOfHour();
        int int19 = localDateTime17.size();
        org.joda.time.Chronology chronology20 = localDateTime17.getChronology();
        org.joda.time.DateTimeField dateTimeField21 = chronology20.yearOfEra();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime localDateTime26 = localDateTime24.minusSeconds((int) (byte) 100);
        int int27 = localDateTime26.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property28 = localDateTime26.era();
        java.lang.String str29 = property28.getAsText();
        org.joda.time.LocalDateTime localDateTime30 = property28.roundHalfEvenCopy();
        java.lang.String str31 = property28.getAsShortText();
        org.joda.time.LocalDateTime localDateTime32 = property28.withMaximumValue();
        java.util.Locale locale34 = java.util.Locale.JAPAN;
        java.lang.String str35 = dateTimeField21.getAsShortText((org.joda.time.ReadablePartial) localDateTime32, 100, locale34);
        java.util.Locale.Builder builder37 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder37.clearExtensions();
        java.util.Locale locale39 = builder38.build();
        java.lang.String str40 = dateTimeField21.getAsShortText(978265512000L, locale39);
        java.util.Calendar calendar41 = dateTime14.toCalendar(locale39);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(dateTimeFieldType7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 4 + "'", int19 == 4);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 3 + "'", int27 == 3);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "AD" + "'", str29, "AD");
        org.junit.Assert.assertNotNull(localDateTime30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "AD" + "'", str31, "AD");
        org.junit.Assert.assertNotNull(localDateTime32);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "100" + "'", str35, "100");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "2000" + "'", str40, "2000");
        org.junit.Assert.assertNotNull(calendar41);
// flaky:         org.junit.Assert.assertEquals(calendar41.toString(), "java.util.GregorianCalendar[time=9025257600018,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2256,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=3,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=21,ZONE_OFFSET=3,DST_OFFSET=0]");
    }

    @Test
    public void test15381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15381");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DurationField durationField30 = chronology27.minutes();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 292278993, chronology27);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 'a', chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField35 = chronology27.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology27.era();
        org.joda.time.DateTime dateTime37 = dateTime15.toDateTime(chronology27);
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (-1), chronology39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        org.joda.time.DateTime dateTime44 = localDateTime40.toDateTime(dateTimeZone42);
        java.lang.String str45 = dateTime44.toString();
        org.joda.time.DateTime dateTime47 = dateTime44.plus((long) 100);
        org.joda.time.DateTime.Property property48 = dateTime47.yearOfCentury();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.util.Calendar calendar50 = dateTime47.toCalendar(locale49);
        int int51 = dateTime47.getMinuteOfHour();
        org.joda.time.DateTime dateTime53 = dateTime47.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime55 = dateTime53.plus((long) (-292275054));
        org.joda.time.DateTime dateTime57 = dateTime55.plusMonths(16);
        boolean boolean58 = dateTime15.isBefore((org.joda.time.ReadableInstant) dateTime55);
        org.joda.time.DateTime.Property property59 = dateTime55.weekOfWeekyear();
        org.joda.time.DateTimeField dateTimeField60 = property59.getField();
        org.joda.time.DateTime dateTime61 = property59.roundFloorCopy();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime44);
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str45, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar50);
// flaky:         org.junit.Assert.assertEquals(calendar50.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(dateTime55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTime61);
    }

    @Test
    public void test15382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15382");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatterBuilder5.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendSecondOfMinute(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder8.appendFixedDecimal(dateTimeFieldType9, (int) ' ');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendSecondOfDay(12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendYearOfCentury(575, 1969);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder13.appendDayOfMonth(448);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendClockhourOfHalfday(0);
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        long long27 = dateTimeZone22.convertLocalToUTC(10L, false, (long) 3);
        java.util.TimeZone timeZone28 = dateTimeZone22.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone22);
        org.joda.time.LocalTime localTime30 = new org.joda.time.LocalTime(92233081382400032L, dateTimeZone22);
        java.lang.String str32 = dateTimeZone22.getShortName((long) 92);
        long long34 = dateTimeZone22.previousTransition(1654160368062L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime35 = new org.joda.time.DateTime((java.lang.Object) 0, dateTimeZone22);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertTrue("'" + long27 + "' != '" + 7L + "'", long27 == 7L);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "+00:00:00.003" + "'", str32, "+00:00:00.003");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1654160368062L + "'", long34 == 1654160368062L);
    }

    @Test
    public void test15383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15383");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        org.joda.time.Chronology chronology8 = dateTime7.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.dayOfYear();
        org.joda.time.Chronology chronology10 = chronology8.withUTC();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.dayOfYear();
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (short) -1, chronology10);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.millisOfDay();
        org.joda.time.LocalDateTime localDateTime15 = property13.addWrapFieldToCopy(0);
        int int16 = property13.getLeapAmount();
        java.util.Locale locale18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime19 = property13.setCopy("22:39:00.000", locale18);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value \"22:39:00.000\" for millisOfDay is not supported");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test15384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15384");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        int int3 = dateTimeZone1.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime(100L, dateTimeZone1);
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.dayOfWeek();
        org.joda.time.DateTime dateTime6 = mutableDateTime4.toDateTimeISO();
        mutableDateTime4.addWeekyears(91);
        org.joda.time.format.DateTimePrinter dateTimePrinter9 = null;
        org.joda.time.format.DateTimeParser dateTimeParser10 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter9, dateTimeParser10);
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        org.joda.time.LocalDateTime.Property property15 = localDateTime14.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone17 = dateTimeZone16.toTimeZone();
        org.joda.time.DateTime dateTime18 = localDateTime14.toDateTime(dateTimeZone16);
        org.joda.time.Chronology chronology19 = dateTime18.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter20 = dateTimeFormatter11.withChronology(chronology19);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter20.withOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter22 = null;
        org.joda.time.format.DateTimeParser dateTimeParser23 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter22, dateTimeParser23);
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTime dateTime31 = localDateTime27.toDateTime(dateTimeZone29);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter33 = dateTimeFormatter24.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField34 = chronology32.monthOfYear();
        org.joda.time.LocalDateTime localDateTime35 = org.joda.time.LocalDateTime.now(chronology32);
        org.joda.time.DateTimeField dateTimeField36 = chronology32.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField37 = chronology32.millisOfSecond();
        long long41 = chronology32.add(99L, (long) 366, 92);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter42 = dateTimeFormatter20.withChronology(chronology32);
        org.joda.time.DateTimeField dateTimeField43 = chronology32.dayOfMonth();
        org.joda.time.DateTimeField dateTimeField44 = chronology32.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime4.setRounding(dateTimeField44, 2089);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 2089");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 3 + "'", int3 == 3);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(timeZone17);
// flaky:         org.junit.Assert.assertEquals(timeZone17.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeFormatter20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeFormatter33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 33771L + "'", long41 == 33771L);
        org.junit.Assert.assertNotNull(dateTimeFormatter42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(dateTimeField44);
    }

    @Test
    public void test15385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15385");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) (short) 0);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime();
        mutableDateTime6.add((long) 100);
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-1), chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime15 = localDateTime11.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DateTimeField dateTimeField17 = chronology16.secondOfDay();
        org.joda.time.DurationField durationField18 = chronology16.minutes();
        org.joda.time.DateTimeField dateTimeField19 = chronology16.weekyearOfCentury();
        java.lang.String str20 = chronology16.toString();
        mutableDateTime6.setChronology(chronology16);
        org.joda.time.DurationField durationField22 = chronology16.centuries();
        org.joda.time.DurationField durationField23 = chronology16.months();
        boolean boolean24 = localDateTime5.equals((java.lang.Object) chronology16);
        org.joda.time.DurationField durationField25 = chronology16.weeks();
        org.joda.time.DateTimeField dateTimeField26 = chronology16.year();
        org.joda.time.DateTimeField dateTimeField27 = chronology16.yearOfCentury();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeField17);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str20, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(durationField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(dateTimeField27);
    }

    @Test
    public void test15386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15386");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        org.joda.time.LocalDate localDate10 = property7.withMaximumValue();
        org.joda.time.LocalDate localDate12 = property7.addWrapFieldToCopy(69);
        int int13 = localDate12.getYearOfEra();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 3, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType17.getRangeDurationType();
        boolean boolean20 = localDate16.isSupported(durationFieldType19);
        org.joda.time.LocalDate.Property property21 = localDate16.centuryOfEra();
        org.joda.time.LocalDate localDate22 = property21.roundHalfEvenCopy();
        org.joda.time.LocalDate localDate24 = localDate22.plusDays((int) '#');
        org.joda.time.LocalDate localDate25 = localDate12.withFields((org.joda.time.ReadablePartial) localDate22);
        org.joda.time.ReadablePeriod readablePeriod26 = null;
        org.joda.time.LocalDate localDate27 = localDate25.plus(readablePeriod26);
        org.joda.time.LocalDate.Property property28 = localDate27.weekOfWeekyear();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDate localDate31 = new org.joda.time.LocalDate((long) 3, chronology30);
        org.joda.time.DateTimeFieldType dateTimeFieldType32 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType33 = dateTimeFieldType32.getDurationType();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType32.getRangeDurationType();
        boolean boolean35 = localDate31.isSupported(durationFieldType34);
        org.joda.time.LocalDate.Property property36 = localDate31.centuryOfEra();
        org.joda.time.LocalDate localDate37 = property36.roundCeilingCopy();
        org.joda.time.LocalDate localDate38 = property36.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime41 = new org.joda.time.MutableDateTime(dateTimeZone40);
        org.joda.time.DateTime dateTime42 = localDate38.toDateTimeAtCurrentTime(dateTimeZone40);
        org.joda.time.DateTime dateTime44 = dateTime42.plus((long) 2000);
        org.joda.time.DateTime dateTime46 = dateTime42.minusMonths(3);
        org.joda.time.DateTimeZone dateTimeZone47 = dateTime42.getZone();
        java.lang.String str48 = dateTimeZone47.getID();
        org.joda.time.Interval interval49 = localDate27.toInterval(dateTimeZone47);
        org.joda.time.LocalDate localDate51 = localDate27.minusDays(116700000);
        // The following exception was thrown during execution in test generation
        try {
            int int53 = localDate27.getValue(449);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 449");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 8870 + "'", int13 == 8870);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(localDate27);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeFieldType32);
        org.junit.Assert.assertNotNull(durationFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDate37);
        org.junit.Assert.assertNotNull(localDate38);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(dateTimeZone47);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "+00:00:00.003" + "'", str48, "+00:00:00.003");
        org.junit.Assert.assertNotNull(interval49);
        org.junit.Assert.assertNotNull(localDate51);
    }

    @Test
    public void test15387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15387");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        java.lang.String str7 = localTime6.toString();
        org.joda.time.LocalTime localTime9 = localTime6.minusMillis(0);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = property10.addNoWrapToCopy((int) '4');
        int int13 = localTime12.getMillisOfSecond();
        org.joda.time.LocalTime localTime14 = org.joda.time.LocalTime.MIDNIGHT;
        boolean boolean15 = localTime12.isEqual((org.joda.time.ReadablePartial) localTime14);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime17 = localTime14.withSecondOfMinute(292278994);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 292278994 for secondOfMinute must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.003" + "'", str7, "23:00:00.003");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 3 + "'", int13 == 3);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test15388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15388");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setMillisOfDay(10);
        mutableDateTime1.addMonths(292278993);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.millisOfSecond();
        org.joda.time.DateTime dateTime7 = mutableDateTime1.toDateTime();
        long long8 = dateTime7.getMillis();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertTrue("'" + long8 + "' != '" + 768619512720000007L + "'", long8 == 768619512720000007L);
    }

    @Test
    public void test15389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15389");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfDay();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DurationField durationField13 = chronology10.minutes();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 292278993, chronology10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 'a', chronology10);
        org.joda.time.DurationField durationField16 = chronology10.halfdays();
        org.joda.time.DurationField durationField17 = chronology10.centuries();
        org.joda.time.Chronology chronology18 = chronology10.withUTC();
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime(1971117L, chronology10);
        org.joda.time.DateTimeField dateTimeField20 = chronology10.monthOfYear();
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime(chronology10);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeField20);
    }

    @Test
    public void test15390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15390");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime1.set(dateTimeFieldType2, (-292275054));
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime1.yearOfEra();
        int int6 = mutableDateTime1.getWeekOfWeekyear();
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime10 = property7.add(1996);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 52 + "'", int6 == 52);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(mutableDateTime10);
    }

    @Test
    public void test15391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15391");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DurationField durationField8 = chronology7.hours();
        org.joda.time.DurationField durationField9 = chronology7.weekyears();
        org.joda.time.MutableDateTime mutableDateTime10 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.DurationField durationField11 = chronology7.minutes();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(durationField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField11);
    }

    @Test
    public void test15392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15392");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withMonthOfYear(1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(292278993);
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        int int16 = dateTimeZone14.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime20 = localDateTime17.withYearOfEra(1971);
        org.joda.time.MutableDateTime mutableDateTime21 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField22 = mutableDateTime21.getRoundingField();
        org.joda.time.MutableDateTime.Property property23 = mutableDateTime21.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime25 = property23.add((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone26 = mutableDateTime25.getZone();
        org.joda.time.MutableDateTime mutableDateTime27 = new org.joda.time.MutableDateTime(dateTimeZone26);
        org.joda.time.DateTime dateTime28 = localDateTime20.toDateTime(dateTimeZone26);
        int int29 = localDateTime13.compareTo((org.joda.time.ReadablePartial) localDateTime20);
        int int30 = localDateTime13.getYearOfCentury();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 3 + "'", int16 == 3);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNull(dateTimeField22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(mutableDateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 25 + "'", int30 == 25);
    }

    @Test
    public void test15393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15393");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setWeekyear((int) (byte) 100);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime5 = property4.roundHalfEven();
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime5.monthOfYear();
        org.joda.time.DateTimeField dateTimeField7 = property6.getField();
        org.joda.time.MutableDateTime mutableDateTime8 = property6.roundHalfFloor();
        org.joda.time.LocalTime localTime10 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime12 = localTime10.minusMinutes(1);
        org.joda.time.LocalTime localTime14 = localTime10.minusMinutes(31);
        org.joda.time.Chronology chronology15 = localTime10.getChronology();
        org.joda.time.DurationField durationField16 = chronology15.eras();
        org.joda.time.LocalTime localTime18 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime20 = localTime18.minusSeconds((int) (short) 10);
        int int21 = localTime18.getMinuteOfHour();
        org.joda.time.LocalTime.Property property22 = localTime18.hourOfDay();
        org.joda.time.LocalTime localTime23 = property22.withMaximumValue();
        boolean boolean24 = property22.isLeap();
        org.joda.time.LocalTime localTime25 = property22.roundFloorCopy();
        org.joda.time.LocalTime localTime26 = property22.roundHalfEvenCopy();
        org.joda.time.LocalTime.Property property27 = localTime26.secondOfMinute();
        org.joda.time.LocalTime localTime29 = property27.addCopy(284);
        org.joda.time.LocalTime.Property property30 = localTime29.millisOfDay();
        int[] intArray32 = chronology15.get((org.joda.time.ReadablePartial) localTime29, (-686465280000000000L));
        org.joda.time.DateTimeZone dateTimeZone33 = chronology15.getZone();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        long long36 = dateTimeZone33.previousTransition(292278367L);
        mutableDateTime8.setZoneRetainFields(dateTimeZone33);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(chronology15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(localTime20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(localTime23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(localTime29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(intArray32);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray32), "[0, 0, 0, 0]");
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 292278367L + "'", long36 == 292278367L);
    }

    @Test
    public void test15394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15394");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime9 = property5.addWrapFieldToCopy(21);
        org.joda.time.LocalTime localTime11 = property5.addCopy(15);
        org.joda.time.LocalTime localTime12 = property5.roundCeilingCopy();
        org.joda.time.LocalTime localTime14 = property5.addCopy((long) 78);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) 78);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No instant converter found for type: java.lang.Integer");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
    }

    @Test
    public void test15395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15395");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        java.util.Date date1 = localDate0.toDate();
        int int2 = localDate0.getEra();
        java.lang.String str3 = localDate0.toString();
        org.joda.time.LocalDate.Property property4 = localDate0.weekOfWeekyear();
        org.joda.time.LocalDate localDate5 = property4.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate7 = localDate5.plusWeeks(60102);
        org.junit.Assert.assertNotNull(date1);
// flaky:         org.junit.Assert.assertEquals(date1.toString(), "Tue Feb 22 00:00:00 GMT 2022");
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1 + "'", int2 == 1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "2022-02-22" + "'", str3, "2022-02-22");
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
    }

    @Test
    public void test15396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15396");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.LocalDate.Property property5 = localDate0.dayOfWeek();
        java.lang.String str7 = localDate0.toString("23:00:00.000");
        org.joda.time.LocalDate localDate9 = localDate0.minusDays(1969);
        org.joda.time.Chronology chronology10 = localDate0.getChronology();
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime12.addYears((int) 'x');
        org.joda.time.DateTimeFieldType dateTimeFieldType15 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.MutableDateTime.Property property16 = mutableDateTime12.property(dateTimeFieldType15);
        boolean boolean17 = localDate0.isSupported(dateTimeFieldType15);
        org.joda.time.LocalDate.Property property18 = localDate0.centuryOfEra();
        org.joda.time.LocalDate localDate20 = property18.setCopy(0);
        org.joda.time.LocalDate localDate22 = property18.addToCopy(365);
        int int23 = localDate22.getDayOfYear();
        org.joda.time.LocalDate.Property property24 = localDate22.year();
        org.joda.time.DateTimeZone dateTimeZone28 = org.joda.time.DateTimeZone.forOffsetHours(99);
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) 222, dateTimeZone28);
        org.joda.time.MutableDateTime mutableDateTime30 = new org.joda.time.MutableDateTime((long) 5599680, dateTimeZone28);
        java.lang.String str31 = dateTimeZone28.toString();
        java.lang.String str33 = dateTimeZone28.getShortName(973567L);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate34 = new org.joda.time.LocalDate((java.lang.Object) property24, dateTimeZone28);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: org.joda.time.LocalDate$Property");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.000" + "'", str7, "23:00:00.000");
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFieldType15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(localDate20);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 53 + "'", int23 == 53);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "+99:00" + "'", str31, "+99:00");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "+99:00" + "'", str33, "+99:00");
    }

    @Test
    public void test15397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15397");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime localDateTime4 = localDateTime2.minusMillis(26784584);
        int int5 = localDateTime2.size();
        org.joda.time.Chronology chronology7 = null;
        org.joda.time.LocalDateTime localDateTime8 = new org.joda.time.LocalDateTime((long) (-1), chronology7);
        org.joda.time.LocalDateTime.Property property9 = localDateTime8.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.DateTime dateTime12 = localDateTime8.toDateTime(dateTimeZone10);
        org.joda.time.Chronology chronology13 = dateTime12.getChronology();
        org.joda.time.DateTimeField dateTimeField14 = chronology13.secondOfDay();
        org.joda.time.DurationField durationField15 = chronology13.minutes();
        org.joda.time.DurationField durationField16 = chronology13.minutes();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology13);
        org.joda.time.MutableDateTime mutableDateTime19 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime19.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration22 = null;
        mutableDateTime19.add(readableDuration22, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType25 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int26 = mutableDateTime19.get(dateTimeFieldType25);
        java.lang.String str27 = dateTimeFieldType25.getName();
        org.joda.time.MutableDateTime.Property property28 = mutableDateTime17.property(dateTimeFieldType25);
        java.lang.String str29 = dateTimeFieldType25.toString();
        int int30 = localDateTime2.get(dateTimeFieldType25);
        org.junit.Assert.assertNotNull(localDateTime4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 4 + "'", int5 == 4);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeFieldType25);
// flaky:         org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "minuteOfHour" + "'", str27, "minuteOfHour");
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "minuteOfHour" + "'", str29, "minuteOfHour");
// flaky:         org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test15398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15398");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime8 = property5.roundCeilingCopy();
        int int10 = localTime8.getValue(3);
        org.joda.time.LocalTime localTime12 = localTime8.minusHours((int) 'a');
        org.joda.time.LocalTime localTime14 = localTime8.minusHours(91295);
        java.lang.String str16 = localTime14.toString("82800");
        org.joda.time.ReadablePeriod readablePeriod17 = null;
        org.joda.time.LocalTime localTime19 = localTime14.withPeriodAdded(readablePeriod17, 487);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "82800" + "'", str16, "82800");
        org.junit.Assert.assertNotNull(localTime19);
    }

    @Test
    public void test15399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15399");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.secondOfMinute();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime4);
        int int7 = mutableDateTime1.getHourOfDay();
        mutableDateTime1.setMillis(26084L);
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.lang.String str15 = locale14.getDisplayScript();
        java.lang.String str16 = dateTimeZone11.getName((long) 5, locale14);
        org.joda.time.DateTime dateTime17 = new org.joda.time.DateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime19 = dateTime17.plusWeeks(4861378);
        org.joda.time.LocalDate localDate20 = new org.joda.time.LocalDate((java.lang.Object) dateTime17);
        org.joda.time.YearMonthDay yearMonthDay21 = dateTime17.toYearMonthDay();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime(dateTimeZone23);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.lang.String str27 = locale26.getDisplayScript();
        java.lang.String str28 = dateTimeZone23.getName((long) 5, locale26);
        org.joda.time.DateTime dateTime29 = dateTime17.toDateTime(dateTimeZone23);
        org.joda.time.DateTime dateTime30 = mutableDateTime1.toDateTime(dateTimeZone23);
        boolean boolean31 = mutableDateTime1.isAfterNow();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property5);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "+00:00:00.003" + "'", str16, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(yearMonthDay21);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "+00:00:00.003" + "'", str28, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test15400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15400");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.year();
        org.joda.time.MutableDateTime mutableDateTime8 = property7.roundFloor();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(dateTimeZone10);
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.lang.String str14 = locale13.getDisplayScript();
        java.lang.String str15 = dateTimeZone10.getName((long) 5, locale13);
        org.joda.time.DateTime dateTime16 = new org.joda.time.DateTime(dateTimeZone10);
        mutableDateTime8.setDate((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime19 = dateTime16.withSecondOfMinute((int) (byte) 1);
        org.joda.time.DateTimeZone dateTimeZone20 = dateTime16.getZone();
        org.joda.time.DateTime dateTime22 = dateTime16.minusYears(81540000);
        org.joda.time.DateTime.Property property23 = dateTime22.era();
        org.joda.time.DateTime dateTime25 = dateTime22.minus(1980518L);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "+00:00:00.003" + "'", str15, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTime25);
    }

    @Test
    public void test15401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15401");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        org.joda.time.DateTime.Property property13 = dateTime9.yearOfCentury();
        org.joda.time.DateTimeFieldType dateTimeFieldType14 = property13.getFieldType();
        org.joda.time.DateTime dateTime15 = property13.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime16 = property13.getDateTime();
        org.joda.time.DateTime dateTime18 = dateTime16.plusMillis(2);
        boolean boolean19 = dateTime18.isEqualNow();
        boolean boolean20 = dateTime18.isBeforeNow();
        int int21 = dateTime18.getEra();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeFieldType14);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test15402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15402");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setTime(100L);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.addMillis((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(218);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime();
        mutableDateTime11.add((long) 100);
        org.joda.time.Chronology chronology14 = null;
        mutableDateTime11.setChronology(chronology14);
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.getDefault();
        long long18 = dateTimeZone16.previousTransition((long) 1);
        mutableDateTime11.setZone(dateTimeZone16);
        mutableDateTime9.setZone(dateTimeZone16);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        boolean boolean26 = dateTimeZone21.isLocalDateTimeGap(localDateTime25);
        int int28 = dateTimeZone21.getStandardOffset(1645514718201L);
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime(dateTimeZone21);
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime29.era();
        int int31 = mutableDateTime29.getYearOfCentury();
        boolean boolean32 = mutableDateTime9.isAfter((org.joda.time.ReadableInstant) mutableDateTime29);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 3 + "'", int28 == 3);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 22 + "'", int31 == 22);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test15403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15403");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfDay();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DurationField durationField13 = chronology10.minutes();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 292278993, chronology10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 'a', chronology10);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(chronology10);
        org.joda.time.DurationField durationField18 = chronology10.halfdays();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        org.joda.time.Chronology chronology26 = dateTime25.getChronology();
        org.joda.time.DurationField durationField27 = chronology26.hours();
        org.joda.time.DateTimeField dateTimeField28 = chronology26.secondOfMinute();
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-1), chronology30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.minusHours((-1));
        java.util.Locale locale35 = java.util.Locale.JAPANESE;
        java.lang.String str36 = dateTimeField28.getAsText((org.joda.time.ReadablePartial) localDateTime31, locale35);
        int int38 = dateTimeField28.getLeapAmount((long) (-1));
        org.joda.time.Chronology chronology41 = null;
        org.joda.time.LocalDateTime localDateTime42 = new org.joda.time.LocalDateTime((long) (-1), chronology41);
        org.joda.time.LocalDateTime.Property property43 = localDateTime42.dayOfYear();
        org.joda.time.DurationField durationField44 = property43.getLeapDurationField();
        org.joda.time.Interval interval45 = property43.toInterval();
        long long46 = property43.remainder();
        java.util.Locale locale48 = new java.util.Locale("hi!");
        int int49 = property43.getMaximumShortTextLength(locale48);
        java.lang.String str51 = locale48.getUnicodeLocaleType("AD");
        java.util.Locale locale53 = new java.util.Locale("365");
        java.lang.String str54 = locale53.getISO3Language();
        java.lang.String str55 = locale48.getDisplayScript(locale53);
        java.lang.String str56 = dateTimeField28.getAsShortText((-27082775779199900L), locale53);
        java.lang.String str57 = locale53.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket58 = new org.joda.time.format.DateTimeParserBucket(126316799999L, chronology10, locale53);
        org.joda.time.DateTimeField dateTimeField59 = chronology10.millisOfSecond();
        org.joda.time.LocalDateTime localDateTime60 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.DurationField durationField61 = chronology10.minutes();
        long long64 = durationField61.subtract((long) 360000000, 127);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(chronology26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "0" + "'", str36, "0");
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNull(durationField44);
        org.junit.Assert.assertNotNull(interval45);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2L + "'", long46 == 2L);
        org.junit.Assert.assertEquals(locale48.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 3 + "'", int49 == 3);
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertEquals(locale53.toString(), "365");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "365" + "'", str54, "365");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "0" + "'", str56, "0");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(dateTimeField59);
        org.junit.Assert.assertNotNull(localDateTime60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 352380000L + "'", long64 == 352380000L);
    }

    @Test
    public void test15404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15404");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder3.appendYear(1975, 284);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder3.appendHourOfHalfday(17259888);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter9 = dateTimeFormatterBuilder8.toFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendMonthOfYearShortText();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder12 = dateTimeFormatterBuilder10.appendMinuteOfHour((-27425246));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: null");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatter9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
    }

    @Test
    public void test15405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15405");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DurationField durationField12 = chronology9.minutes();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 292278993, chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 'a', chronology9);
        org.joda.time.DurationField durationField15 = chronology9.halfdays();
        org.joda.time.DurationField durationField16 = chronology9.centuries();
        org.joda.time.Chronology chronology17 = chronology9.withUTC();
        org.joda.time.ReadablePeriod readablePeriod18 = null;
        long long21 = chronology17.add(readablePeriod18, (long) (-27425246), 22);
        org.joda.time.DurationField durationField22 = chronology17.weeks();
        org.joda.time.DurationField durationField23 = chronology17.seconds();
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField15);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-27425246L) + "'", long21 == (-27425246L));
        org.junit.Assert.assertNotNull(durationField22);
        org.junit.Assert.assertNotNull(durationField23);
    }

    @Test
    public void test15406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15406");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate7 = localDate3.minusYears((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.DateTime dateTime10 = localDate7.toDateTimeAtStartOfDay(dateTimeZone9);
        org.joda.time.LocalDate localDate12 = localDate7.withMonthOfYear((int) (byte) 10);
        org.joda.time.Chronology chronology13 = localDate7.getChronology();
        int int14 = localDate7.getDayOfMonth();
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        org.joda.time.LocalDate localDate17 = localDate7.withPeriodAdded(readablePeriod15, 292278994);
        org.joda.time.DateTime dateTime18 = localDate17.toDateTimeAtMidnight();
        int int19 = localDate17.getDayOfWeek();
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
        org.junit.Assert.assertNotNull(localDate17);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
    }

    @Test
    public void test15407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15407");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTime dateTime2 = new org.joda.time.DateTime((long) (short) 1, chronology1);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) 'x', dateTimeZone5);
        org.joda.time.DateTime dateTime7 = dateTime2.toDateTime(dateTimeZone5);
        org.joda.time.DateTime dateTime9 = dateTime7.plusMinutes(99);
        org.joda.time.DateTime dateTime11 = dateTime9.minusMonths(26890);
        int int12 = dateTime11.getYear();
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-271) + "'", int12 == (-271));
    }

    @Test
    public void test15408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15408");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.minus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfCentury(25);
        org.joda.time.DateTime dateTime17 = dateTime15.minusDays(1);
        org.joda.time.DateTime dateTime19 = dateTime15.minusMinutes((-1));
        org.joda.time.DateTime dateTime21 = dateTime15.plusYears(22);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTime dateTime28 = localDateTime24.toDateTime(dateTimeZone26);
        org.joda.time.Chronology chronology29 = dateTime28.getChronology();
        org.joda.time.DateTimeField dateTimeField30 = chronology29.secondOfDay();
        org.joda.time.DurationField durationField31 = chronology29.minutes();
        org.joda.time.DurationField durationField32 = chronology29.minutes();
        org.joda.time.MutableDateTime mutableDateTime33 = new org.joda.time.MutableDateTime(chronology29);
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime35.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration38 = null;
        mutableDateTime35.add(readableDuration38, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int42 = mutableDateTime35.get(dateTimeFieldType41);
        java.lang.String str43 = dateTimeFieldType41.getName();
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime33.property(dateTimeFieldType41);
        org.joda.time.MutableDateTime mutableDateTime46 = property44.add((long) 1975);
        java.util.Locale locale47 = java.util.Locale.CHINESE;
        int int48 = property44.getMaximumTextLength(locale47);
        boolean boolean49 = dateTime15.equals((java.lang.Object) int48);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.DateTime dateTime51 = dateTime15.withMillisOfSecond(82860000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 82860000 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(chronology29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
// flaky:         org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "minuteOfHour" + "'", str43, "minuteOfHour");
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(mutableDateTime46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh");
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 2 + "'", int48 == 2);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test15409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15409");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.Chronology chronology3 = null;
        mutableDateTime0.setChronology(chronology3);
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        long long7 = dateTimeZone5.previousTransition((long) 1);
        mutableDateTime0.setZone(dateTimeZone5);
        int int9 = mutableDateTime0.getSecondOfMinute();
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.Chronology chronology17 = dateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField18 = chronology17.secondOfDay();
        org.joda.time.DateTimeField dateTimeField19 = chronology17.yearOfEra();
        mutableDateTime0.setChronology(chronology17);
        mutableDateTime0.add(946799580000L);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 48 + "'", int9 == 48);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(chronology17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
    }

    @Test
    public void test15410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15410");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime4 = property2.addWrapField((-1));
        org.joda.time.ReadablePeriod readablePeriod5 = null;
        mutableDateTime4.add(readablePeriod5);
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime(dateTimeZone11);
        java.lang.String str14 = dateTime13.toString();
        org.joda.time.DateTime dateTime16 = dateTime13.plus((long) 100);
        org.joda.time.DateTime dateTime18 = dateTime16.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod19 = null;
        org.joda.time.DateTime dateTime20 = dateTime16.minus(readablePeriod19);
        mutableDateTime4.setMillis((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime.Property property22 = dateTime16.year();
        org.joda.time.DateTime dateTime23 = property22.withMaximumValue();
        org.joda.time.DateTime.Property property24 = dateTime23.centuryOfEra();
        org.joda.time.DateTime.Property property25 = dateTime23.centuryOfEra();
        org.joda.time.format.DateTimePrinter dateTimePrinter26 = null;
        org.joda.time.format.DateTimeParser dateTimeParser27 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter26, dateTimeParser27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-1), chronology30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.DateTime dateTime35 = localDateTime31.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter28.withChronology(chronology36);
        org.joda.time.DateTimeField dateTimeField38 = chronology36.monthOfYear();
        org.joda.time.LocalDateTime localDateTime39 = org.joda.time.LocalDateTime.now(chronology36);
        org.joda.time.DateTimeField dateTimeField40 = chronology36.weekOfWeekyear();
        org.joda.time.DurationField durationField41 = chronology36.eras();
        org.joda.time.DateTime dateTime42 = dateTime23.toDateTime(chronology36);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(mutableDateTime4);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str14, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(localDateTime39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(durationField41);
        org.junit.Assert.assertNotNull(dateTime42);
    }

    @Test
    public void test15411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15411");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        int int2 = dateTimeZone0.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.LocalTime localTime3 = new org.joda.time.LocalTime(dateTimeZone0);
        org.joda.time.LocalTime localTime4 = org.joda.time.LocalTime.now(dateTimeZone0);
        org.joda.time.Chronology chronology5 = localTime4.getChronology();
        org.joda.time.DurationField durationField6 = chronology5.halfdays();
        org.junit.Assert.assertNotNull(dateTimeZone0);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 3 + "'", int2 == 3);
        org.junit.Assert.assertNotNull(localTime4);
        org.junit.Assert.assertNotNull(chronology5);
        org.junit.Assert.assertNotNull(durationField6);
    }

    @Test
    public void test15412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15412");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeField dateTimeField13 = chronology11.monthOfYear();
        org.joda.time.DateTimeField dateTimeField14 = chronology11.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime();
        mutableDateTime15.add((long) 100);
        org.joda.time.MutableDateTime.Property property18 = mutableDateTime15.dayOfYear();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone23 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone24 = dateTimeZone23.toTimeZone();
        org.joda.time.DateTime dateTime25 = localDateTime21.toDateTime(dateTimeZone23);
        java.lang.String str26 = dateTime25.toString();
        org.joda.time.DateTime dateTime28 = dateTime25.plus((long) 100);
        org.joda.time.DateTime.Property property29 = dateTime28.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration30 = null;
        org.joda.time.DateTime dateTime31 = dateTime28.plus(readableDuration30);
        int int32 = dateTime31.getDayOfMonth();
        java.util.Locale locale34 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        java.util.Locale locale36 = java.util.Locale.GERMANY;
        java.lang.String str37 = locale34.getDisplayVariant(locale36);
        java.lang.String str38 = dateTime31.toString("365", locale36);
        org.joda.time.DateTime dateTime40 = dateTime31.plusMonths(1969);
        mutableDateTime15.setMillis((org.joda.time.ReadableInstant) dateTime31);
        org.joda.time.DateTimeZone dateTimeZone42 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone43 = dateTimeZone42.toTimeZone();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        boolean boolean47 = dateTimeZone42.isLocalDateTimeGap(localDateTime46);
        java.lang.String str49 = dateTimeZone42.getName((long) 4);
        mutableDateTime15.setZone(dateTimeZone42);
        java.util.Locale locale52 = java.util.Locale.getDefault();
        java.lang.String str53 = dateTimeZone42.getName((long) (-292275054), locale52);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket56 = new org.joda.time.format.DateTimeParserBucket(1645514718201L, chronology11, locale52, (java.lang.Integer) 1, (int) (short) -1);
        java.util.Locale locale57 = dateTimeParserBucket56.getLocale();
        dateTimeParserBucket56.setOffset(6);
        long long61 = dateTimeParserBucket56.computeMillis(false);
        long long62 = dateTimeParserBucket56.computeMillis();
        org.joda.time.Chronology chronology63 = dateTimeParserBucket56.getChronology();
        org.joda.time.DateTimeField dateTimeField64 = chronology63.centuryOfEra();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone23);
        org.junit.Assert.assertNotNull(timeZone24);
// flaky:         org.junit.Assert.assertEquals(timeZone24.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime25);
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str26, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "365" + "'", str38, "365");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTimeZone42);
        org.junit.Assert.assertNotNull(timeZone43);
// flaky:         org.junit.Assert.assertEquals(timeZone43.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "+00:00:00.003" + "'", str49, "+00:00:00.003");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "+00:00:00.003" + "'", str53, "+00:00:00.003");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "");
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 1645514718195L + "'", long61 == 1645514718195L);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 1645514718195L + "'", long62 == 1645514718195L);
        org.junit.Assert.assertNotNull(chronology63);
        org.junit.Assert.assertNotNull(dateTimeField64);
    }

    @Test
    public void test15413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15413");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DurationField durationField30 = chronology27.minutes();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 292278993, chronology27);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 'a', chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField35 = chronology27.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology27.era();
        org.joda.time.DateTime dateTime37 = dateTime15.toDateTime(chronology27);
        org.joda.time.DateTime dateTime38 = dateTime15.toDateTimeISO();
        org.joda.time.DateTime dateTime40 = dateTime15.plusSeconds(69);
        int int41 = dateTime40.getEra();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-1), chronology43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        org.joda.time.DateTime dateTime48 = localDateTime44.toDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = dateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.millisOfDay();
        org.joda.time.DateTimeField dateTimeField51 = chronology49.era();
        org.joda.time.DurationField durationField52 = chronology49.months();
        boolean boolean53 = dateTime40.equals((java.lang.Object) durationField52);
        org.joda.time.MutableDateTime mutableDateTime54 = dateTime40.toMutableDateTimeISO();
        org.joda.time.ReadablePeriod readablePeriod55 = null;
        org.joda.time.DateTime dateTime56 = dateTime40.minus(readablePeriod55);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(durationField52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(mutableDateTime54);
        org.junit.Assert.assertNotNull(dateTime56);
    }

    @Test
    public void test15414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15414");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.ReadablePartial readablePartial8 = null;
        int int9 = dateTimeField7.getMinimumValue(readablePartial8);
        org.joda.time.DurationField durationField10 = dateTimeField7.getRangeDurationField();
        long long13 = durationField10.add((long) 32, 25);
        int int16 = durationField10.getValue((long) 17259888, 62135596699999L);
        boolean boolean17 = durationField10.isSupported();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2160000032L + "'", long13 == 2160000032L);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test15415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15415");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.era();
        org.joda.time.DateTimeField dateTimeField11 = chronology7.weekOfWeekyear();
        org.joda.time.DurationField durationField12 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology7.millisOfSecond();
        boolean boolean14 = dateTimeField13.isLenient();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test15416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15416");
        org.joda.time.DateTimeZone dateTimeZone0 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime1 = org.joda.time.MutableDateTime.now(dateTimeZone0);
        int int2 = mutableDateTime1.getYearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone3 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone4 = dateTimeZone3.toTimeZone();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        boolean boolean8 = dateTimeZone3.isLocalDateTimeGap(localDateTime7);
        org.joda.time.ReadablePeriod readablePeriod9 = null;
        org.joda.time.LocalDateTime localDateTime10 = localDateTime7.plus(readablePeriod9);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime13 = localDateTime10.withPeriodAdded(readablePeriod11, 21);
        boolean boolean14 = mutableDateTime1.equals((java.lang.Object) localDateTime13);
        org.joda.time.MutableDateTime.Property property15 = mutableDateTime1.centuryOfEra();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        org.joda.time.DurationField durationField28 = chronology25.minutes();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 292278993, chronology25);
        org.joda.time.DateTimeField dateTimeField30 = chronology25.minuteOfDay();
        org.joda.time.DurationField durationField31 = chronology25.days();
        org.joda.time.DurationField durationField32 = chronology25.weekyears();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTime dateTime39 = localDateTime35.toDateTime(dateTimeZone37);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.plus((long) 100);
        org.joda.time.DateTime.Property property43 = dateTime42.yearOfCentury();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Calendar calendar45 = dateTime42.toCalendar(locale44);
        org.joda.time.DateTime.Property property46 = dateTime42.yearOfCentury();
        org.joda.time.DateTime dateTime47 = property46.roundHalfEvenCopy();
        org.joda.time.DateTime dateTime49 = property46.addWrapFieldToCopy(2922750);
        java.util.Locale.Category category50 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale51 = java.util.Locale.getDefault(category50);
        java.util.Locale locale52 = java.util.Locale.getDefault(category50);
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.util.Set<java.lang.Character> charSet54 = locale53.getExtensionKeys();
        java.util.Locale.setDefault(category50, locale53);
        java.lang.String str56 = property46.getAsShortText(locale53);
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType59 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime58.set(dateTimeFieldType59, (-292275054));
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime58.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType63 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType63.getField(chronology64);
        boolean boolean67 = dateTimeField65.isLeap(100L);
        mutableDateTime58.setRounding(dateTimeField65);
        org.joda.time.tz.NameProvider nameProvider70 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale72 = new java.util.Locale("hi!");
        java.lang.String str73 = locale72.getScript();
        boolean boolean74 = locale72.hasExtensions();
        java.lang.String str77 = nameProvider70.getShortName(locale72, "minuteOfHour", "23:00:00.000");
        java.util.Locale locale78 = java.util.Locale.TAIWAN;
        java.lang.String str79 = locale78.toLanguageTag();
        java.lang.String str82 = nameProvider70.getShortName(locale78, "", "AD");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider70);
        java.util.Locale.Builder builder84 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder85 = builder84.clearExtensions();
        java.util.Locale locale86 = builder85.build();
        java.lang.String str89 = nameProvider70.getName(locale86, "DurationField[years]", "0009-10-04");
        java.util.Locale locale91 = java.util.Locale.forLanguageTag("2022-02-22T07:25:22.845Z");
        java.lang.String str92 = locale86.getDisplayVariant(locale91);
        java.lang.String str93 = dateTimeField65.getAsShortText(2332799999L, locale91);
        java.lang.String str94 = locale53.getDisplayScript(locale91);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket97 = new org.joda.time.format.DateTimeParserBucket((long) 5599, chronology25, locale53, (java.lang.Integer) 29, 82800022);
        org.joda.time.MutableDateTime mutableDateTime98 = mutableDateTime1.toMutableDateTime(chronology25);
        org.junit.Assert.assertNotNull(dateTimeZone0);
        org.junit.Assert.assertNotNull(mutableDateTime1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 22 + "'", int2 == 22);
        org.junit.Assert.assertNotNull(dateTimeZone3);
        org.junit.Assert.assertNotNull(timeZone4);
// flaky:         org.junit.Assert.assertEquals(timeZone4.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str40, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + category50 + "' != '" + java.util.Locale.Category.FORMAT + "'", category50.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "70" + "'", str56, "70");
        org.junit.Assert.assertNotNull(dateTimeFieldType59);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(dateTimeFieldType63);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(nameProvider70);
        org.junit.Assert.assertEquals(locale72.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertTrue("'" + boolean74 + "' != '" + false + "'", boolean74 == false);
        org.junit.Assert.assertNull(str77);
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "zh-TW" + "'", str79, "zh-TW");
        org.junit.Assert.assertNull(str82);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "");
        org.junit.Assert.assertNull(str89);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "1970" + "'", str93, "1970");
        org.junit.Assert.assertEquals("'" + str94 + "' != '" + "" + "'", str94, "");
        org.junit.Assert.assertNotNull(mutableDateTime98);
    }

    @Test
    public void test15417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15417");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.LocalDateTime localDateTime8 = localDateTime2.minusMillis(1);
        org.joda.time.LocalDateTime localDateTime10 = localDateTime2.withMillisOfDay(31);
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.minus(readablePeriod11);
        org.joda.time.ReadableDuration readableDuration13 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime12.withDurationAdded(readableDuration13, 284);
        java.lang.String str16 = localDateTime15.toString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDateTime8);
        org.junit.Assert.assertNotNull(localDateTime10);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "1970-01-01T00:00:00.002" + "'", str16, "1970-01-01T00:00:00.002");
    }

    @Test
    public void test15418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15418");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        long long27 = dateTimeZone12.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime();
        mutableDateTime28.add((long) 100);
        org.joda.time.MutableDateTime.Property property31 = mutableDateTime28.dayOfYear();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDateTime34.toDateTime(dateTimeZone36);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.plus((long) 100);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration43 = null;
        org.joda.time.DateTime dateTime44 = dateTime41.plus(readableDuration43);
        int int45 = dateTime44.getDayOfMonth();
        java.util.Locale locale47 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleAttributes();
        java.util.Locale locale49 = java.util.Locale.GERMANY;
        java.lang.String str50 = locale47.getDisplayVariant(locale49);
        java.lang.String str51 = dateTime44.toString("365", locale49);
        org.joda.time.DateTime dateTime53 = dateTime44.plusMonths(1969);
        mutableDateTime28.setMillis((org.joda.time.ReadableInstant) dateTime44);
        int int55 = dateTimeZone12.getOffset((org.joda.time.ReadableInstant) mutableDateTime28);
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime(dateTimeZone12);
        java.util.TimeZone timeZone57 = dateTimeZone12.toTimeZone();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime(dateTimeZone12);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str39, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "365" + "'", str51, "365");
        org.junit.Assert.assertNotNull(dateTime53);
// flaky:         org.junit.Assert.assertTrue("'" + int55 + "' != '" + 3 + "'", int55 == 3);
        org.junit.Assert.assertNotNull(timeZone57);
// flaky:         org.junit.Assert.assertEquals(timeZone57.getDisplayName(), "GMT+00:00");
    }

    @Test
    public void test15419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15419");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.plus((long) 100);
        org.joda.time.DateTime dateTime15 = dateTime13.withYear(10);
        int int16 = property3.getDifference((org.joda.time.ReadableInstant) dateTime13);
        org.joda.time.LocalDateTime localDateTime18 = property3.setCopy((int) '4');
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.withYearOfEra(1);
        org.joda.time.LocalDateTime localDateTime24 = localDateTime18.withDate(9, 8, 10);
        org.joda.time.LocalDateTime.Property property25 = localDateTime18.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime18.withWeekyear(19);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime27.plusMillis(2922750);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str11, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
    }

    @Test
    public void test15420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15420");
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.minuteOfDay();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        java.lang.String str10 = dateTime9.toString();
        org.joda.time.DateTime dateTime12 = dateTime9.plus((long) 100);
        org.joda.time.DateTime.Property property13 = dateTime12.yearOfCentury();
        java.util.Locale locale14 = java.util.Locale.GERMANY;
        java.util.Calendar calendar15 = dateTime12.toCalendar(locale14);
        int int16 = dateTime12.getMinuteOfHour();
        org.joda.time.DateTime dateTime18 = dateTime12.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime20 = dateTime18.plus((long) (-292275054));
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDateTime25.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfDay();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DurationField durationField33 = chronology30.minutes();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime((long) 292278993, chronology30);
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) 'a', chronology30);
        org.joda.time.DateTimeField dateTimeField36 = chronology30.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime37 = new org.joda.time.MutableDateTime(chronology30);
        org.joda.time.DateTimeField dateTimeField38 = chronology30.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField39 = chronology30.era();
        org.joda.time.DateTime dateTime40 = dateTime18.toDateTime(chronology30);
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (-1), chronology42);
        org.joda.time.LocalDateTime.Property property44 = localDateTime43.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone45 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone46 = dateTimeZone45.toTimeZone();
        org.joda.time.DateTime dateTime47 = localDateTime43.toDateTime(dateTimeZone45);
        java.lang.String str48 = dateTime47.toString();
        org.joda.time.DateTime dateTime50 = dateTime47.plus((long) 100);
        org.joda.time.DateTime.Property property51 = dateTime50.yearOfCentury();
        java.util.Locale locale52 = java.util.Locale.GERMANY;
        java.util.Calendar calendar53 = dateTime50.toCalendar(locale52);
        int int54 = dateTime50.getMinuteOfHour();
        org.joda.time.DateTime dateTime56 = dateTime50.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime58 = dateTime56.plus((long) (-292275054));
        org.joda.time.DateTime dateTime60 = dateTime58.plusMonths(16);
        boolean boolean61 = dateTime18.isBefore((org.joda.time.ReadableInstant) dateTime58);
        org.joda.time.format.DateTimePrinter dateTimePrinter63 = null;
        org.joda.time.format.DateTimeParser dateTimeParser64 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter65 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter63, dateTimeParser64);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (-1), chronology67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone71 = dateTimeZone70.toTimeZone();
        org.joda.time.DateTime dateTime72 = localDateTime68.toDateTime(dateTimeZone70);
        org.joda.time.Chronology chronology73 = dateTime72.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter74 = dateTimeFormatter65.withChronology(chronology73);
        org.joda.time.DateTimeField dateTimeField75 = chronology73.monthOfYear();
        org.joda.time.DateTimeField dateTimeField76 = chronology73.clockhourOfHalfday();
        org.joda.time.DurationField durationField77 = chronology73.days();
        org.joda.time.LocalDateTime localDateTime78 = new org.joda.time.LocalDateTime((long) 1970, chronology73);
        org.joda.time.DurationField durationField79 = chronology73.hours();
        org.joda.time.DateTimeZone dateTimeZone80 = chronology73.getZone();
        org.joda.time.DateTimeField dateTimeField81 = chronology73.millisOfDay();
        org.joda.time.MutableDateTime mutableDateTime82 = new org.joda.time.MutableDateTime((java.lang.Object) dateTime18, chronology73);
        org.joda.time.DateTimeField dateTimeField83 = chronology73.yearOfEra();
        boolean boolean84 = dateTimeFieldType2.isSupported(chronology73);
        java.util.Locale locale87 = new java.util.Locale("0", "365");
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket88 = new org.joda.time.format.DateTimeParserBucket(8760L, chronology73, locale87);
        org.joda.time.DateTime dateTime89 = new org.joda.time.DateTime((long) 218, chronology73);
        org.joda.time.DateTimeZone dateTimeZone90 = dateTime89.getZone();
        org.joda.time.LocalDateTime localDateTime91 = org.joda.time.LocalDateTime.now(dateTimeZone90);
        org.joda.time.LocalDateTime localDateTime92 = new org.joda.time.LocalDateTime(dateTimeZone90);
        int int93 = localDateTime92.getMonthOfYear();
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str10, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar15);
// flaky:         org.junit.Assert.assertEquals(calendar15.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField38);
        org.junit.Assert.assertNotNull(dateTimeField39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeZone45);
        org.junit.Assert.assertNotNull(timeZone46);
// flaky:         org.junit.Assert.assertEquals(timeZone46.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime47);
// flaky:         org.junit.Assert.assertEquals("'" + str48 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str48, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar53);
// flaky:         org.junit.Assert.assertEquals(calendar53.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 0 + "'", int54 == 0);
        org.junit.Assert.assertNotNull(dateTime56);
        org.junit.Assert.assertNotNull(dateTime58);
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(chronology73);
        org.junit.Assert.assertNotNull(dateTimeFormatter74);
        org.junit.Assert.assertNotNull(dateTimeField75);
        org.junit.Assert.assertNotNull(dateTimeField76);
        org.junit.Assert.assertNotNull(durationField77);
        org.junit.Assert.assertNotNull(durationField79);
        org.junit.Assert.assertNotNull(dateTimeZone80);
        org.junit.Assert.assertNotNull(dateTimeField81);
        org.junit.Assert.assertNotNull(dateTimeField83);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + true + "'", boolean84 == true);
        org.junit.Assert.assertEquals(locale87.toString(), "0_365");
        org.junit.Assert.assertNotNull(dateTimeZone90);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertTrue("'" + int93 + "' != '" + 2 + "'", int93 == 2);
    }

    @Test
    public void test15421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15421");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType1 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.LocalDate.Property property2 = localDate0.property(dateTimeFieldType1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.year();
        boolean boolean4 = localDate0.isSupported(dateTimeFieldType3);
        org.joda.time.DateTime dateTime5 = localDate0.toDateTimeAtMidnight();
        org.joda.time.LocalDate.Property property6 = localDate0.yearOfCentury();
        org.joda.time.LocalDate localDate7 = property6.getLocalDate();
        org.joda.time.LocalDate.Property property8 = localDate7.era();
        org.joda.time.LocalDate localDate10 = localDate7.withYearOfCentury(25);
        org.joda.time.LocalDate localDate12 = localDate7.minusMonths(0);
        org.joda.time.Chronology chronology13 = localDate12.getChronology();
        org.joda.time.DurationField durationField14 = chronology13.weeks();
        org.junit.Assert.assertNotNull(dateTimeFieldType1);
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(chronology13);
        org.junit.Assert.assertNotNull(durationField14);
    }

    @Test
    public void test15422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15422");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property16 = dateTime9.era();
        org.joda.time.DateTime dateTime17 = property16.roundHalfEvenCopy();
        org.joda.time.DurationField durationField18 = property16.getLeapDurationField();
        org.joda.time.DateTime dateTime19 = property16.withMaximumValue();
        org.joda.time.DateTime dateTime20 = property16.getDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNull(durationField18);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
    }

    @Test
    public void test15423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15423");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.clockhourOfHalfday();
        org.joda.time.DateTimeField dateTimeField14 = chronology10.millisOfSecond();
        org.joda.time.DateTimeField dateTimeField15 = chronology10.minuteOfHour();
        org.joda.time.DateTimeField dateTimeField16 = chronology10.millisOfDay();
        java.lang.String str18 = dateTimeField16.getAsShortText((long) 326699);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(dateTimeField14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(dateTimeField16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "326702" + "'", str18, "326702");
    }

    @Test
    public void test15424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15424");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        org.joda.time.Chronology chronology27 = dateTime26.getChronology();
        org.joda.time.DateTimeField dateTimeField28 = chronology27.secondOfDay();
        org.joda.time.DurationField durationField29 = chronology27.minutes();
        org.joda.time.DurationField durationField30 = chronology27.minutes();
        org.joda.time.MutableDateTime mutableDateTime31 = new org.joda.time.MutableDateTime((long) 292278993, chronology27);
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) 'a', chronology27);
        org.joda.time.DateTimeField dateTimeField33 = chronology27.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(chronology27);
        org.joda.time.DateTimeField dateTimeField35 = chronology27.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField36 = chronology27.era();
        org.joda.time.DateTime dateTime37 = dateTime15.toDateTime(chronology27);
        org.joda.time.DateTime.Property property38 = dateTime15.hourOfDay();
        org.joda.time.ReadablePeriod readablePeriod39 = null;
        org.joda.time.DateTime dateTime40 = dateTime15.plus(readablePeriod39);
        org.joda.time.format.DateTimePrinter dateTimePrinter41 = null;
        org.joda.time.format.DateTimeParser dateTimeParser42 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter43 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter41, dateTimeParser42);
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone48 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone49 = dateTimeZone48.toTimeZone();
        org.joda.time.DateTime dateTime50 = localDateTime46.toDateTime(dateTimeZone48);
        org.joda.time.Chronology chronology51 = dateTime50.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter43.withChronology(chronology51);
        org.joda.time.DateTimeField dateTimeField53 = chronology51.monthOfYear();
        org.joda.time.LocalDateTime localDateTime54 = org.joda.time.LocalDateTime.now(chronology51);
        org.joda.time.DateTimeField dateTimeField55 = chronology51.weekOfWeekyear();
        org.joda.time.MutableDateTime mutableDateTime56 = org.joda.time.MutableDateTime.now(chronology51);
        org.joda.time.DurationField durationField57 = chronology51.seconds();
        org.joda.time.DateTimeField dateTimeField58 = chronology51.dayOfWeek();
        org.joda.time.ReadablePartial readablePartial59 = null;
        int int60 = dateTimeField58.getMaximumValue(readablePartial59);
        boolean boolean61 = dateTime15.equals((java.lang.Object) dateTimeField58);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(chronology27);
        org.junit.Assert.assertNotNull(dateTimeField28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(dateTimeZone48);
        org.junit.Assert.assertNotNull(timeZone49);
// flaky:         org.junit.Assert.assertEquals(timeZone49.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(chronology51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertNotNull(localDateTime54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(mutableDateTime56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField58);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 7 + "'", int60 == 7);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
    }

    @Test
    public void test15425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15425");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withMonthOfYear(1);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.plusMinutes(292278993);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.minuteOfHour();
        int int18 = localDateTime16.size();
        org.joda.time.Chronology chronology19 = localDateTime16.getChronology();
        org.joda.time.DateTimeField dateTimeField20 = chronology19.yearOfEra();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusSeconds((int) (byte) 100);
        int int26 = localDateTime25.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property27 = localDateTime25.era();
        java.lang.String str28 = property27.getAsText();
        org.joda.time.LocalDateTime localDateTime29 = property27.roundHalfEvenCopy();
        java.lang.String str30 = property27.getAsShortText();
        org.joda.time.LocalDateTime localDateTime31 = property27.withMaximumValue();
        java.util.Locale locale33 = java.util.Locale.JAPAN;
        java.lang.String str34 = dateTimeField20.getAsShortText((org.joda.time.ReadablePartial) localDateTime31, 100, locale33);
        org.joda.time.LocalDateTime localDateTime35 = localDateTime11.withFields((org.joda.time.ReadablePartial) localDateTime31);
        java.lang.String str37 = localDateTime31.toString("23:00:00.000");
        org.joda.time.LocalDateTime.Property property38 = localDateTime31.year();
        java.lang.String str39 = property38.getAsString();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(chronology19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 3 + "'", int26 == 3);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "AD" + "'", str28, "AD");
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "AD" + "'", str30, "AD");
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ja_JP");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "100" + "'", str34, "100");
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "23:00:00.000" + "'", str37, "23:00:00.000");
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1969" + "'", str39, "1969");
    }

    @Test
    public void test15426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15426");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter27 = dateTimeFormatter25.withPivotYear(2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter29 = dateTimeFormatter27.withDefaultYear(30);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = dateTimeFormatter27.withDefaultYear(301970);
        java.io.Writer writer32 = null;
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime35.minusSeconds((int) (byte) 100);
        int int38 = localDateTime37.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property39 = localDateTime37.era();
        java.lang.String str40 = property39.getAsText();
        org.joda.time.LocalDateTime localDateTime41 = property39.roundCeilingCopy();
        org.joda.time.LocalDateTime localDateTime42 = property39.roundCeilingCopy();
        int int43 = localDateTime42.getMillisOfSecond();
        org.joda.time.LocalDateTime.Property property44 = localDateTime42.dayOfMonth();
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter27.printTo(writer32, (org.joda.time.ReadablePartial) localDateTime42);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNotNull(dateTimeFormatter27);
        org.junit.Assert.assertNotNull(dateTimeFormatter29);
        org.junit.Assert.assertNotNull(dateTimeFormatter31);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 3 + "'", int38 == 3);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "AD" + "'", str40, "AD");
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 807 + "'", int43 == 807);
        org.junit.Assert.assertNotNull(property44);
    }

    @Test
    public void test15427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15427");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        org.joda.time.DateTime dateTime19 = dateTime15.minusSeconds(1969);
        org.joda.time.DateTime dateTime20 = dateTime15.toDateTime();
        org.joda.time.DateTime dateTime21 = dateTime15.toDateTimeISO();
        java.util.GregorianCalendar gregorianCalendar22 = dateTime21.toGregorianCalendar();
        org.joda.time.MutableDateTime mutableDateTime23 = dateTime21.toMutableDateTimeISO();
        org.joda.time.Chronology chronology24 = dateTime21.getChronology();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTime dateTime31 = localDateTime27.toDateTime(dateTimeZone29);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DateTimeField dateTimeField33 = chronology32.dayOfYear();
        org.joda.time.Chronology chronology34 = chronology32.withUTC();
        org.joda.time.DateTimeField dateTimeField35 = chronology34.dayOfYear();
        org.joda.time.DurationField durationField36 = chronology34.millis();
        org.joda.time.DurationField durationField37 = chronology34.minutes();
        org.joda.time.DateTime dateTime38 = dateTime21.withChronology(chronology34);
        // The following exception was thrown during execution in test generation
        try {
            long long44 = chronology34.getDateTimeMillis((long) 421, 26940116, 297878892, (int) (byte) 10, (-3599999));
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 26940116 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(gregorianCalendar22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(chronology34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(durationField37);
        org.junit.Assert.assertNotNull(dateTime38);
    }

    @Test
    public void test15428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15428");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        org.joda.time.Chronology chronology2 = null;
        mutableDateTime1.setChronology(chronology2);
        org.joda.time.MutableDateTime mutableDateTime5 = new org.joda.time.MutableDateTime((long) 49);
        mutableDateTime5.setMillis((-62135470569593990L));
        java.lang.String str8 = mutableDateTime5.toString();
        mutableDateTime5.setMillis((long) 784);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime5.minuteOfHour();
        int int12 = mutableDateTime1.compareTo((org.joda.time.ReadableInstant) mutableDateTime5);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "-1967025-04-28T00:00:06.013+00:00:00.003" + "'", str8, "-1967025-04-28T00:00:06.013+00:00:00.003");
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
    }

    @Test
    public void test15429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15429");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTime dateTime7 = localTime6.toDateTimeToday();
        int int8 = localTime6.size();
        org.joda.time.LocalTime localTime10 = localTime6.withSecondOfMinute((int) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((java.lang.Object) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No partial converter found for type: java.lang.Character");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 4 + "'", int8 == 4);
        org.junit.Assert.assertNotNull(localTime10);
    }

    @Test
    public void test15430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15430");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.LocalDateTime localDateTime13 = org.joda.time.LocalDateTime.now(chronology10);
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.ReadableDuration readableDuration22 = null;
        org.joda.time.DateTime dateTime23 = dateTime20.plus(readableDuration22);
        org.joda.time.DateTime dateTime25 = dateTime20.minusWeeks(10);
        boolean boolean27 = dateTime20.isBefore((long) (-1));
        int int28 = dateTime20.getYearOfEra();
        org.joda.time.DateTime dateTime29 = dateTime20.withTimeAtStartOfDay();
        org.joda.time.DateTime dateTime30 = localDateTime13.toDateTime((org.joda.time.ReadableInstant) dateTime29);
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.LocalDateTime localDateTime32 = localDateTime13.plus(readablePeriod31);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str21, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1970 + "'", int28 == 1970);
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(localDateTime32);
    }

    @Test
    public void test15431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15431");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendHourOfHalfday(12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder4.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder6 = dateTimeFormatterBuilder4.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = dateTimeFormatterBuilder6.appendFractionOfMinute(3600, 999);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder9.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = dateTimeFormatterBuilder11.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter17 = dateTimeFormatterBuilder16.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder16.appendMillisOfSecond(292278993);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder19.appendTwoDigitWeekyear(1969);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder19.appendTimeZoneName();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap23 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder24 = dateTimeFormatterBuilder22.appendTimeZoneName(strMap23);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder27 = dateTimeFormatterBuilder22.appendFractionOfDay(446, 64);
        org.joda.time.DateTimeFieldType dateTimeFieldType28 = org.joda.time.DateTimeFieldType.yearOfEra();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder22.appendFraction(dateTimeFieldType28, 822, 3);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder32 = dateTimeFormatterBuilder10.appendText(dateTimeFieldType28);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = dateTimeFormatterBuilder10.appendCenturyOfEra(219, 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder36 = dateTimeFormatterBuilder35.appendHalfdayOfDayText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder38 = dateTimeFormatterBuilder36.appendMinuteOfDay(2020);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder14);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimePrinter17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder24);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder27);
        org.junit.Assert.assertNotNull(dateTimeFieldType28);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder35);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder36);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder38);
    }

    @Test
    public void test15432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15432");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        boolean boolean7 = property5.isLeap();
        org.joda.time.LocalTime localTime8 = property5.roundFloorCopy();
        org.joda.time.LocalTime.Property property9 = localTime8.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime11.set(dateTimeFieldType12, (-292275054));
        org.joda.time.ReadablePeriod readablePeriod15 = null;
        mutableDateTime11.add(readablePeriod15, 4);
        int int18 = mutableDateTime11.getMillisOfDay();
        long long19 = property9.getDifferenceAsLong((org.joda.time.ReadableInstant) mutableDateTime11);
        java.lang.String str20 = property9.toString();
        org.joda.time.LocalTime localTime21 = property9.roundHalfEvenCopy();
        boolean boolean22 = property9.isLeap();
        org.joda.time.LocalTime localTime24 = property9.addWrapFieldToCopy(1969);
        org.joda.time.LocalTime localTime25 = property9.roundHalfFloorCopy();
        org.joda.time.LocalTime localTime26 = property9.withMinimumValue();
        org.joda.time.LocalTime localTime27 = property9.roundFloorCopy();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 2 + "'", int18 == 2);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 153722866950720L + "'", long19 == 153722866950720L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Property[minuteOfHour]" + "'", str20, "Property[minuteOfHour]");
        org.junit.Assert.assertNotNull(localTime21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(localTime24);
        org.junit.Assert.assertNotNull(localTime25);
        org.junit.Assert.assertNotNull(localTime26);
        org.junit.Assert.assertNotNull(localTime27);
    }

    @Test
    public void test15433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15433");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DateTimeField dateTimeField10 = chronology7.weekyearOfCentury();
        org.joda.time.DurationField durationField11 = chronology7.seconds();
        long long12 = durationField11.getUnitMillis();
        java.lang.String str13 = durationField11.toString();
        long long14 = durationField11.getUnitMillis();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1000L + "'", long12 == 1000L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "DurationField[seconds]" + "'", str13, "DurationField[seconds]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1000L + "'", long14 == 1000L);
    }

    @Test
    public void test15434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15434");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfDay();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.weekyearOfCentury();
        java.lang.String str14 = chronology10.toString();
        mutableDateTime0.setChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField16 = chronology10.weekOfWeekyear();
        org.joda.time.DurationField durationField17 = dateTimeField16.getRangeDurationField();
        long long20 = dateTimeField16.addWrapField((long) 81, 85943100);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str14, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(dateTimeField16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 29635200081L + "'", long20 == 29635200081L);
    }

    @Test
    public void test15435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15435");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        java.util.Locale.Category category4 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DurationField durationField9 = property8.getLeapDurationField();
        org.joda.time.Interval interval10 = property8.toInterval();
        long long11 = property8.remainder();
        java.util.Locale locale13 = new java.util.Locale("hi!");
        int int14 = property8.getMaximumShortTextLength(locale13);
        java.lang.String str16 = locale13.getUnicodeLocaleType("AD");
        java.util.Locale.setDefault(category4, locale13);
        java.lang.String str18 = locale13.getDisplayScript();
        java.lang.String str19 = dateTimeZone1.getName((-1L), locale13);
        org.joda.time.MutableDateTime mutableDateTime20 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = localDateTime23.toDateTime(dateTimeZone25);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.plus((long) 100);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfCentury();
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Calendar calendar33 = dateTime30.toCalendar(locale32);
        int int34 = dateTime30.getMinuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime30.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property37 = dateTime30.era();
        org.joda.time.DateTime dateTime38 = property37.roundHalfEvenCopy();
        int int39 = dateTime38.getEra();
        int int40 = dateTime38.getEra();
        org.joda.time.DateTime.Property property41 = dateTime38.year();
        mutableDateTime20.setTime((org.joda.time.ReadableInstant) dateTime38);
        org.joda.time.MutableDateTime.Property property43 = mutableDateTime20.era();
        org.joda.time.MutableDateTime mutableDateTime44 = property43.getMutableDateTime();
        org.joda.time.MutableDateTime mutableDateTime46 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType47 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime46.set(dateTimeFieldType47, (-292275054));
        org.joda.time.MutableDateTime.Property property50 = mutableDateTime46.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology52 = null;
        org.joda.time.DateTimeField dateTimeField53 = dateTimeFieldType51.getField(chronology52);
        boolean boolean55 = dateTimeField53.isLeap(100L);
        mutableDateTime46.setRounding(dateTimeField53);
        org.joda.time.ReadableDuration readableDuration57 = null;
        mutableDateTime46.add(readableDuration57, (int) 'u');
        mutableDateTime46.addMillis(19);
        org.joda.time.MutableDateTime.Property property62 = mutableDateTime46.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime64 = property62.add((long) (byte) 10);
        org.joda.time.DateTimeField dateTimeField65 = mutableDateTime64.getRoundingField();
        // The following exception was thrown during execution in test generation
        try {
            mutableDateTime44.setRounding(dateTimeField65, 120);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal rounding mode: 120");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertTrue("'" + category4 + "' != '" + java.util.Locale.Category.FORMAT + "'", category4.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNull(durationField9);
        org.junit.Assert.assertNotNull(interval10);
// flaky:         org.junit.Assert.assertTrue("'" + long11 + "' != '" + 2L + "'", long11 == 2L);
        org.junit.Assert.assertEquals(locale13.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 3 + "'", int14 == 3);
        org.junit.Assert.assertNull(str16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "+00:00:00.003" + "'", str19, "+00:00:00.003");
        org.junit.Assert.assertNotNull(mutableDateTime20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str28, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 1 + "'", int40 == 1);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(mutableDateTime44);
        org.junit.Assert.assertNotNull(dateTimeFieldType47);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(dateTimeField53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(property62);
        org.junit.Assert.assertNotNull(mutableDateTime64);
        org.junit.Assert.assertNotNull(dateTimeField65);
    }

    @Test
    public void test15436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15436");
        org.joda.time.Chronology chronology8 = null;
        org.joda.time.LocalDateTime localDateTime9 = new org.joda.time.LocalDateTime((long) (-1), chronology8);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone12 = dateTimeZone11.toTimeZone();
        org.joda.time.DateTime dateTime13 = localDateTime9.toDateTime(dateTimeZone11);
        org.joda.time.Chronology chronology14 = dateTime13.getChronology();
        org.joda.time.DateTimeField dateTimeField15 = chronology14.dayOfYear();
        org.joda.time.Chronology chronology16 = chronology14.withUTC();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        boolean boolean22 = dateTimeZone17.isLocalDateTimeGap(localDateTime21);
        long long24 = chronology16.set((org.joda.time.ReadablePartial) localDateTime21, (long) '#');
        org.joda.time.DateTimeField dateTimeField25 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField26 = chronology16.days();
        org.joda.time.DurationField durationField27 = chronology16.minutes();
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = null;
        org.joda.time.format.DateTimeParser dateTimeParser29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter28, dateTimeParser29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (-1), chronology32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTime dateTime37 = localDateTime33.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter30.withChronology(chronology38);
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-1), chronology43);
        boolean boolean45 = dateTimeZone40.isLocalDateTimeGap(localDateTime44);
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (-1), chronology47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.weekyear();
        boolean boolean50 = dateTimeZone40.isLocalDateTimeGap(localDateTime48);
        long long52 = dateTimeZone40.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter53 = dateTimeFormatter30.withZone(dateTimeZone40);
        long long55 = dateTimeZone40.nextTransition((long) (byte) -1);
        org.joda.time.MutableDateTime mutableDateTime56 = new org.joda.time.MutableDateTime();
        mutableDateTime56.add((long) 100);
        org.joda.time.MutableDateTime.Property property59 = mutableDateTime56.dayOfYear();
        org.joda.time.Chronology chronology61 = null;
        org.joda.time.LocalDateTime localDateTime62 = new org.joda.time.LocalDateTime((long) (-1), chronology61);
        org.joda.time.LocalDateTime.Property property63 = localDateTime62.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone64 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone65 = dateTimeZone64.toTimeZone();
        org.joda.time.DateTime dateTime66 = localDateTime62.toDateTime(dateTimeZone64);
        java.lang.String str67 = dateTime66.toString();
        org.joda.time.DateTime dateTime69 = dateTime66.plus((long) 100);
        org.joda.time.DateTime.Property property70 = dateTime69.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration71 = null;
        org.joda.time.DateTime dateTime72 = dateTime69.plus(readableDuration71);
        int int73 = dateTime72.getDayOfMonth();
        java.util.Locale locale75 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet76 = locale75.getUnicodeLocaleAttributes();
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        java.lang.String str78 = locale75.getDisplayVariant(locale77);
        java.lang.String str79 = dateTime72.toString("365", locale77);
        org.joda.time.DateTime dateTime81 = dateTime72.plusMonths(1969);
        mutableDateTime56.setMillis((org.joda.time.ReadableInstant) dateTime72);
        int int83 = dateTimeZone40.getOffset((org.joda.time.ReadableInstant) mutableDateTime56);
        org.joda.time.LocalDateTime localDateTime84 = new org.joda.time.LocalDateTime(dateTimeZone40);
        boolean boolean86 = dateTimeZone40.isStandardOffset((-3974399965L));
        org.joda.time.Chronology chronology87 = chronology16.withZone(dateTimeZone40);
        org.joda.time.DateTime dateTime88 = new org.joda.time.DateTime(chronology87);
        org.joda.time.DateTimeField dateTimeField89 = chronology87.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime90 = new org.joda.time.MutableDateTime(0, 7, 1336, (-17), 0, 63600003, (-17), chronology87);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -17 for hourOfDay must be in the range [0,23]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(timeZone12);
// flaky:         org.junit.Assert.assertEquals(timeZone12.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(chronology14);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 2L + "'", long24 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(durationField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long52 + "' != '" + 3L + "'", long52 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + (-1L) + "'", long55 == (-1L));
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(property63);
        org.junit.Assert.assertNotNull(dateTimeZone64);
        org.junit.Assert.assertNotNull(timeZone65);
// flaky:         org.junit.Assert.assertEquals(timeZone65.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime66);
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str67, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime69);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertTrue("'" + int73 + "' != '" + 1 + "'", int73 == 1);
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "365" + "'", str79, "365");
        org.junit.Assert.assertNotNull(dateTime81);
// flaky:         org.junit.Assert.assertTrue("'" + int83 + "' != '" + 3 + "'", int83 == 3);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(chronology87);
        org.junit.Assert.assertNotNull(dateTimeField89);
    }

    @Test
    public void test15437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15437");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatterBuilder5.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendMillisOfSecond(292278993);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap9 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder8.appendTimeZoneName(strMap9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendFractionOfHour(51, 218);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap14 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendTimeZoneName(strMap14);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder13.appendMonthOfYearText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder16.appendTwoDigitYear(172);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
    }

    @Test
    public void test15438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15438");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        org.joda.time.DateTimeField dateTimeField7 = property5.getField();
        org.joda.time.LocalTime localTime8 = property5.getLocalTime();
        org.joda.time.LocalTime localTime10 = property5.addWrapFieldToCopy(15);
        org.joda.time.LocalTime localTime11 = property5.roundHalfCeilingCopy();
        int int12 = localTime11.getMillisOfSecond();
        int int13 = localTime11.getMinuteOfHour();
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
        org.junit.Assert.assertNotNull(dateTimeField7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(localTime11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test15439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15439");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField1 = mutableDateTime0.getRoundingField();
        org.joda.time.DateTimeFieldType dateTimeFieldType2 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType3 = dateTimeFieldType2.getDurationType();
        mutableDateTime0.add(durationFieldType3, 100);
        mutableDateTime0.addYears(10);
        mutableDateTime0.addWeeks(738207);
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime11.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration14 = null;
        mutableDateTime11.add(readableDuration14, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property17 = mutableDateTime11.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime18 = mutableDateTime11.copy();
        org.joda.time.MutableDateTime.Property property19 = mutableDateTime18.era();
        org.joda.time.MutableDateTime mutableDateTime20 = property19.roundHalfFloor();
        java.lang.String str21 = mutableDateTime20.toString();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime20.weekyear();
        org.joda.time.MutableDateTime mutableDateTime23 = property22.roundFloor();
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) mutableDateTime23);
        org.joda.time.MutableDateTime.Property property25 = mutableDateTime0.minuteOfHour();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (-1), chronology27);
        org.joda.time.LocalDateTime.Property property29 = localDateTime28.weekyear();
        org.joda.time.LocalDateTime localDateTime31 = localDateTime28.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime33 = localDateTime31.withMillisOfDay((int) 'u');
        org.joda.time.LocalDateTime localDateTime35 = localDateTime33.withMillisOfSecond((int) '#');
        org.joda.time.LocalDateTime.Property property36 = localDateTime33.yearOfEra();
        int int37 = property25.compareTo((org.joda.time.ReadablePartial) localDateTime33);
        org.junit.Assert.assertNull(dateTimeField1);
        org.junit.Assert.assertNotNull(dateTimeFieldType2);
        org.junit.Assert.assertNotNull(durationFieldType3);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(mutableDateTime18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(mutableDateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "0001-01-01T00:00:00.000+00:00:00.003" + "'", str21, "0001-01-01T00:00:00.000+00:00:00.003");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(mutableDateTime23);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(property29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime33);
        org.junit.Assert.assertNotNull(localDateTime35);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
    }

    @Test
    public void test15440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15440");
        org.joda.time.Chronology chronology2 = null;
        org.joda.time.LocalDateTime localDateTime3 = new org.joda.time.LocalDateTime((long) (-1), chronology2);
        org.joda.time.LocalDateTime.Property property4 = localDateTime3.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone5 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone6 = dateTimeZone5.toTimeZone();
        org.joda.time.DateTime dateTime7 = localDateTime3.toDateTime(dateTimeZone5);
        java.lang.String str8 = dateTime7.toString();
        org.joda.time.ReadableDuration readableDuration9 = null;
        org.joda.time.DateTime dateTime10 = dateTime7.plus(readableDuration9);
        org.joda.time.DateTime dateTime12 = dateTime7.minusWeeks(10);
        boolean boolean14 = dateTime7.isBefore((long) (-1));
        int int15 = dateTime7.getYearOfEra();
        org.joda.time.DateTime dateTime17 = dateTime7.withYear((int) (byte) 0);
        int int18 = dateTime7.getDayOfWeek();
        org.joda.time.DateTime dateTime20 = dateTime7.withDayOfYear(284);
        org.joda.time.DateTime dateTime21 = dateTime7.withTimeAtStartOfDay();
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone26 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone27 = dateTimeZone26.toTimeZone();
        org.joda.time.DateTime dateTime28 = localDateTime24.toDateTime(dateTimeZone26);
        java.lang.String str29 = dateTime28.toString();
        org.joda.time.DateTime dateTime31 = dateTime28.plus((long) 100);
        org.joda.time.DateTime.Property property32 = dateTime31.yearOfCentury();
        java.util.Locale locale33 = java.util.Locale.GERMANY;
        java.util.Calendar calendar34 = dateTime31.toCalendar(locale33);
        org.joda.time.DateTime.Property property35 = dateTime31.yearOfCentury();
        org.joda.time.DateTime dateTime36 = property35.getDateTime();
        org.joda.time.DateTime dateTime37 = dateTime36.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime39 = dateTime37.withDayOfYear((int) '#');
        org.joda.time.DateTime dateTime40 = dateTime39.toDateTime();
        org.joda.time.Chronology chronology41 = dateTime39.getChronology();
        org.joda.time.DateTimeField dateTimeField42 = chronology41.millisOfDay();
        org.joda.time.DateTime dateTime43 = dateTime7.withChronology(chronology41);
        org.joda.time.DateTimeField dateTimeField44 = chronology41.yearOfCentury();
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (-1), chronology48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTime dateTime53 = localDateTime49.toDateTime(dateTimeZone51);
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.secondOfDay();
        org.joda.time.DurationField durationField56 = chronology54.minutes();
        org.joda.time.DurationField durationField57 = chronology54.minutes();
        org.joda.time.MutableDateTime mutableDateTime58 = new org.joda.time.MutableDateTime((long) 292278993, chronology54);
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) 'a', chronology54);
        org.joda.time.DateTimeField dateTimeField60 = chronology54.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime61 = new org.joda.time.MutableDateTime(chronology54);
        org.joda.time.DateTimeField dateTimeField62 = chronology54.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField63 = chronology54.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime66 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType67 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime66.set(dateTimeFieldType67, (-292275054));
        org.joda.time.MutableDateTime.Property property70 = mutableDateTime66.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType71 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology72 = null;
        org.joda.time.DateTimeField dateTimeField73 = dateTimeFieldType71.getField(chronology72);
        boolean boolean75 = dateTimeField73.isLeap(100L);
        mutableDateTime66.setRounding(dateTimeField73);
        org.joda.time.DateTimeZone dateTimeZone77 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone78 = dateTimeZone77.toTimeZone();
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) (-1), chronology80);
        boolean boolean82 = dateTimeZone77.isLocalDateTimeGap(localDateTime81);
        org.joda.time.LocalDateTime localDateTime84 = localDateTime81.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property85 = localDateTime81.dayOfYear();
        org.joda.time.LocalDateTime localDateTime87 = localDateTime81.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration88 = null;
        org.joda.time.LocalDateTime localDateTime90 = localDateTime81.withDurationAdded(readableDuration88, (int) 'u');
        org.joda.time.LocalDateTime localDateTime92 = localDateTime90.withMonthOfYear(10);
        java.util.Locale locale93 = java.util.Locale.JAPANESE;
        java.lang.String str94 = dateTimeField73.getAsText((org.joda.time.ReadablePartial) localDateTime90, locale93);
        java.lang.String str95 = dateTimeField63.getAsShortText((int) (byte) 100, locale93);
        java.util.Locale locale96 = java.util.Locale.CANADA;
        java.lang.String str97 = locale93.getDisplayCountry(locale96);
        java.lang.String str98 = locale96.getDisplayVariant();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket99 = new org.joda.time.format.DateTimeParserBucket((long) 34, chronology41, locale96);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(dateTimeZone5);
        org.junit.Assert.assertNotNull(timeZone6);
// flaky:         org.junit.Assert.assertEquals(timeZone6.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime7);
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str8, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1970 + "'", int15 == 1970);
        org.junit.Assert.assertNotNull(dateTime17);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 4 + "'", int18 == 4);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
        org.junit.Assert.assertNotNull(timeZone27);
// flaky:         org.junit.Assert.assertEquals(timeZone27.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime28);
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str29, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar34);
// flaky:         org.junit.Assert.assertEquals(calendar34.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(dateTime39);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTime43);
        org.junit.Assert.assertNotNull(dateTimeField44);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(durationField57);
        org.junit.Assert.assertNotNull(dateTimeField60);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTimeField63);
        org.junit.Assert.assertNotNull(dateTimeFieldType67);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(dateTimeFieldType71);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertNotNull(timeZone78);
// flaky:         org.junit.Assert.assertEquals(timeZone78.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(localDateTime84);
        org.junit.Assert.assertNotNull(property85);
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(localDateTime90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str94 + "' != '" + "1970" + "'", str94, "1970");
        org.junit.Assert.assertEquals("'" + str95 + "' != '" + "100" + "'", str95, "100");
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "" + "'", str97, "");
        org.junit.Assert.assertEquals("'" + str98 + "' != '" + "" + "'", str98, "");
    }

    @Test
    public void test15441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15441");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.DateTime dateTime13 = dateTime11.withChronology(chronology12);
        org.joda.time.DateTime dateTime15 = dateTime11.plusMinutes(3);
        org.joda.time.DateTime.Property property16 = dateTime15.dayOfYear();
        org.joda.time.DateTime dateTime18 = property16.addWrapFieldToCopy(2);
        int int19 = property16.getMaximumValue();
        org.joda.time.DateTimeField dateTimeField20 = property16.getField();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime27 = localDateTime25.withMillisOfSecond((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime29 = localDateTime25.plusHours(0);
        org.joda.time.LocalDateTime localDateTime31 = localDateTime29.minusDays(4);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        org.joda.time.LocalDateTime localDateTime36 = localDateTime34.minusSeconds((int) (byte) 100);
        org.joda.time.LocalDateTime localDateTime38 = localDateTime34.plusYears(0);
        int int39 = localDateTime34.getCenturyOfEra();
        org.joda.time.DurationFieldType durationFieldType40 = org.joda.time.DurationFieldType.halfdays();
        org.joda.time.LocalDateTime localDateTime42 = localDateTime34.withFieldAdded(durationFieldType40, 0);
        boolean boolean43 = localDateTime31.isSupported(durationFieldType40);
        org.joda.time.MutableDateTime mutableDateTime44 = new org.joda.time.MutableDateTime();
        mutableDateTime44.add((long) 100);
        org.joda.time.Chronology chronology48 = null;
        org.joda.time.LocalDateTime localDateTime49 = new org.joda.time.LocalDateTime((long) (-1), chronology48);
        org.joda.time.LocalDateTime.Property property50 = localDateTime49.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.DateTime dateTime53 = localDateTime49.toDateTime(dateTimeZone51);
        org.joda.time.Chronology chronology54 = dateTime53.getChronology();
        org.joda.time.DateTimeField dateTimeField55 = chronology54.secondOfDay();
        org.joda.time.DurationField durationField56 = chronology54.minutes();
        org.joda.time.DateTimeField dateTimeField57 = chronology54.weekyearOfCentury();
        java.lang.String str58 = chronology54.toString();
        mutableDateTime44.setChronology(chronology54);
        org.joda.time.DurationField durationField60 = chronology54.centuries();
        org.joda.time.DurationField durationField61 = durationFieldType40.getField(chronology54);
        org.joda.time.DateTimeField dateTimeField62 = chronology54.yearOfEra();
        org.joda.time.DateTime dateTime63 = org.joda.time.DateTime.now(chronology54);
        org.joda.time.DateTime dateTime65 = dateTime63.plusMillis(1853);
        org.joda.time.Chronology chronology67 = null;
        org.joda.time.LocalDateTime localDateTime68 = new org.joda.time.LocalDateTime((long) (-1), chronology67);
        org.joda.time.LocalDateTime.Property property69 = localDateTime68.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone70 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone71 = dateTimeZone70.toTimeZone();
        org.joda.time.DateTime dateTime72 = localDateTime68.toDateTime(dateTimeZone70);
        java.lang.String str73 = dateTime72.toString();
        org.joda.time.DateTime dateTime75 = dateTime72.plus((long) 100);
        org.joda.time.DateTime.Property property76 = dateTime75.yearOfCentury();
        java.util.Locale locale77 = java.util.Locale.GERMANY;
        java.util.Calendar calendar78 = dateTime75.toCalendar(locale77);
        int int79 = dateTime75.getMinuteOfHour();
        org.joda.time.DateTime dateTime81 = dateTime75.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property82 = dateTime75.era();
        org.joda.time.DateTime dateTime83 = property82.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField84 = property82.getField();
        org.joda.time.DateTime dateTime85 = property82.roundHalfCeilingCopy();
        org.joda.time.DateTime dateTime86 = property82.getDateTime();
        org.joda.time.DateTime.Property property87 = dateTime86.dayOfYear();
        boolean boolean88 = dateTime65.isBefore((org.joda.time.ReadableInstant) dateTime86);
        org.joda.time.LocalDateTime localDateTime89 = dateTime65.toLocalDateTime();
        int int90 = property16.compareTo((org.joda.time.ReadablePartial) localDateTime89);
        org.joda.time.DateTime dateTime91 = property16.withMinimumValue();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTime18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 365 + "'", int19 == 365);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(localDateTime25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(localDateTime31);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 19 + "'", int39 == 19);
        org.junit.Assert.assertNotNull(durationFieldType40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime53);
        org.junit.Assert.assertNotNull(chronology54);
        org.junit.Assert.assertNotNull(dateTimeField55);
        org.junit.Assert.assertNotNull(durationField56);
        org.junit.Assert.assertNotNull(dateTimeField57);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str58, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(durationField60);
        org.junit.Assert.assertNotNull(durationField61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(dateTime65);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(dateTimeZone70);
        org.junit.Assert.assertNotNull(timeZone71);
// flaky:         org.junit.Assert.assertEquals(timeZone71.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime72);
// flaky:         org.junit.Assert.assertEquals("'" + str73 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str73, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(property76);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar78);
// flaky:         org.junit.Assert.assertEquals(calendar78.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int79 + "' != '" + 0 + "'", int79 == 0);
        org.junit.Assert.assertNotNull(dateTime81);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTime83);
        org.junit.Assert.assertNotNull(dateTimeField84);
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(dateTime86);
        org.junit.Assert.assertNotNull(property87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertTrue("'" + int90 + "' != '" + (-1) + "'", int90 == (-1));
        org.junit.Assert.assertNotNull(dateTime91);
    }

    @Test
    public void test15442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15442");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        int int4 = dateTimeField2.getLeapAmount((long) (byte) 1);
        org.joda.time.LocalDate localDate6 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate8 = localDate6.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate10 = localDate8.plusWeeks((-292275054));
        int int11 = dateTimeField2.getMaximumValue((org.joda.time.ReadablePartial) localDate8);
        java.lang.String str12 = dateTimeField2.toString();
        boolean boolean13 = dateTimeField2.isSupported();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDate localDate16 = new org.joda.time.LocalDate((long) 3, chronology15);
        org.joda.time.DateTimeFieldType dateTimeFieldType17 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType18 = dateTimeFieldType17.getDurationType();
        org.joda.time.DurationFieldType durationFieldType19 = dateTimeFieldType17.getRangeDurationType();
        boolean boolean20 = localDate16.isSupported(durationFieldType19);
        org.joda.time.LocalDate.Property property21 = localDate16.centuryOfEra();
        org.joda.time.LocalDate localDate22 = property21.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate24 = property21.addToCopy((int) ' ');
        org.joda.time.LocalDate localDate26 = localDate24.withWeekyear(2);
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet28 = locale27.getUnicodeLocaleAttributes();
        java.lang.String str29 = dateTimeField2.getAsText((org.joda.time.ReadablePartial) localDate24, locale27);
        org.joda.time.DurationField durationField30 = dateTimeField2.getLeapDurationField();
        int int32 = dateTimeField2.getLeapAmount((long) 107);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 292278993 + "'", int11 == 292278993);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "DateTimeField[year]" + "'", str12, "DateTimeField[year]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(dateTimeFieldType17);
        org.junit.Assert.assertNotNull(durationFieldType18);
        org.junit.Assert.assertNotNull(durationFieldType19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(localDate24);
        org.junit.Assert.assertNotNull(localDate26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "5170" + "'", str29, "5170");
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 0 + "'", int32 == 0);
    }

    @Test
    public void test15443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15443");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter5 = dateTimeFormatterBuilder4.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder4.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder9 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder9.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder9.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime15 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime15.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration18 = null;
        mutableDateTime15.add(readableDuration18, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType21 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int22 = mutableDateTime15.get(dateTimeFieldType21);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder9.appendSignedDecimal(dateTimeFieldType21, 92, 9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder29 = dateTimeFormatterBuilder26.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder31 = dateTimeFormatterBuilder29.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter32 = dateTimeFormatterBuilder31.toPrinter();
        org.joda.time.format.DateTimeParser dateTimeParser33 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter34 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter32, dateTimeParser33);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder35 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder37 = dateTimeFormatterBuilder35.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder39 = dateTimeFormatterBuilder35.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter40 = dateTimeFormatterBuilder39.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder43 = dateTimeFormatterBuilder39.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser44 = dateTimeFormatterBuilder39.toParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder45 = dateTimeFormatterBuilder9.append(dateTimePrinter32, dateTimeParser44);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder46 = dateTimeFormatterBuilder4.appendOptional(dateTimeParser44);
        boolean boolean47 = dateTimeFormatterBuilder46.canBuildFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder49 = dateTimeFormatterBuilder46.appendMillisOfDay(31);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder50 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder52 = dateTimeFormatterBuilder50.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder54 = dateTimeFormatterBuilder50.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter55 = dateTimeFormatterBuilder54.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder58 = dateTimeFormatterBuilder54.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder61 = dateTimeFormatterBuilder54.appendTwoDigitYear(1, false);
        org.joda.time.Chronology chronology63 = null;
        org.joda.time.LocalDate localDate64 = new org.joda.time.LocalDate((long) 3, chronology63);
        org.joda.time.DateTimeFieldType dateTimeFieldType65 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType66 = dateTimeFieldType65.getDurationType();
        org.joda.time.DurationFieldType durationFieldType67 = dateTimeFieldType65.getRangeDurationType();
        boolean boolean68 = localDate64.isSupported(durationFieldType67);
        org.joda.time.LocalDate.Property property69 = localDate64.centuryOfEra();
        org.joda.time.LocalDate localDate70 = property69.roundCeilingCopy();
        org.joda.time.LocalDate localDate71 = property69.getLocalDate();
        org.joda.time.DateTimeFieldType dateTimeFieldType72 = property69.getFieldType();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder74 = dateTimeFormatterBuilder54.appendFixedDecimal(dateTimeFieldType72, 218);
        org.joda.time.DurationFieldType durationFieldType75 = dateTimeFieldType72.getRangeDurationType();
        java.lang.String str76 = dateTimeFieldType72.toString();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder78 = dateTimeFormatterBuilder49.appendFixedDecimal(dateTimeFieldType72, 25);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder81 = dateTimeFormatterBuilder49.appendWeekyear(17259888, 27);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder84 = dateTimeFormatterBuilder81.appendYearOfCentury(30627, 70);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimePrinter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFieldType21);
// flaky:         org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder29);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder31);
        org.junit.Assert.assertNotNull(dateTimePrinter32);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder37);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder39);
        org.junit.Assert.assertNotNull(dateTimePrinter40);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder43);
        org.junit.Assert.assertNotNull(dateTimeParser44);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder45);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder49);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder52);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder54);
        org.junit.Assert.assertNotNull(dateTimePrinter55);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder58);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder61);
        org.junit.Assert.assertNotNull(dateTimeFieldType65);
        org.junit.Assert.assertNotNull(durationFieldType66);
        org.junit.Assert.assertNotNull(durationFieldType67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
        org.junit.Assert.assertNotNull(property69);
        org.junit.Assert.assertNotNull(localDate70);
        org.junit.Assert.assertNotNull(localDate71);
        org.junit.Assert.assertNotNull(dateTimeFieldType72);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder74);
        org.junit.Assert.assertNotNull(durationFieldType75);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "centuryOfEra" + "'", str76, "centuryOfEra");
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder78);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder81);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder84);
    }

    @Test
    public void test15444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15444");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime5.withMillisOfDay((int) 'u');
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.withMillisOfSecond((int) '#');
        org.joda.time.LocalDateTime.Property property10 = localDateTime7.yearOfEra();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.LocalDateTime localDateTime12 = localDateTime7.plus(readableDuration11);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localDateTime12);
    }

    @Test
    public void test15445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15445");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder3 = builder0.clear();
        java.util.Locale locale4 = builder3.build();
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime6.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime6.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime13 = mutableDateTime6.copy();
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime13.era();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.DateTimeField dateTimeField23 = chronology22.dayOfYear();
        org.joda.time.Chronology chronology24 = chronology22.withUTC();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.Chronology chronology28 = null;
        org.joda.time.LocalDateTime localDateTime29 = new org.joda.time.LocalDateTime((long) (-1), chronology28);
        boolean boolean30 = dateTimeZone25.isLocalDateTimeGap(localDateTime29);
        long long32 = chronology24.set((org.joda.time.ReadablePartial) localDateTime29, (long) '#');
        org.joda.time.DateTimeField dateTimeField33 = chronology24.secondOfMinute();
        org.joda.time.DurationField durationField34 = dateTimeField33.getRangeDurationField();
        mutableDateTime13.setRounding(dateTimeField33);
        org.joda.time.DurationField durationField36 = dateTimeField33.getRangeDurationField();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (-1), chronology38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfYear();
        org.joda.time.DurationField durationField41 = property40.getLeapDurationField();
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-1), chronology43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        org.joda.time.DateTime dateTime48 = localDateTime44.toDateTime(dateTimeZone46);
        java.lang.String str49 = dateTime48.toString();
        org.joda.time.DateTime dateTime51 = dateTime48.plus((long) 100);
        org.joda.time.DateTime.Property property52 = dateTime51.yearOfCentury();
        java.util.Locale locale53 = java.util.Locale.GERMANY;
        java.util.Calendar calendar54 = dateTime51.toCalendar(locale53);
        int int55 = dateTime51.getMinuteOfHour();
        org.joda.time.DateTime dateTime57 = dateTime51.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime59 = dateTime57.withMillis((-1L));
        long long60 = property40.getDifferenceAsLong((org.joda.time.ReadableInstant) dateTime57);
        org.joda.time.LocalDateTime localDateTime61 = property40.roundHalfCeilingCopy();
        org.joda.time.Chronology chronology64 = null;
        org.joda.time.LocalDateTime localDateTime65 = new org.joda.time.LocalDateTime((long) (-1), chronology64);
        org.joda.time.LocalDateTime.Property property66 = localDateTime65.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone67 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone68 = dateTimeZone67.toTimeZone();
        org.joda.time.DateTime dateTime69 = localDateTime65.toDateTime(dateTimeZone67);
        java.lang.String str70 = dateTime69.toString();
        org.joda.time.DateTime dateTime72 = dateTime69.plus((long) 100);
        org.joda.time.DateTime.Property property73 = dateTime72.yearOfCentury();
        java.util.Locale locale74 = java.util.Locale.GERMANY;
        java.util.Calendar calendar75 = dateTime72.toCalendar(locale74);
        int int76 = dateTime72.getMinuteOfHour();
        org.joda.time.DateTime dateTime78 = dateTime72.plusMinutes(99);
        boolean boolean80 = dateTime72.isEqual((long) 292278993);
        java.util.Locale locale81 = java.util.Locale.TAIWAN;
        java.lang.String str82 = locale81.toLanguageTag();
        java.util.Locale locale83 = java.util.Locale.GERMANY;
        java.lang.String str84 = locale81.getDisplayScript(locale83);
        java.lang.String str85 = locale83.getVariant();
        java.util.Calendar calendar86 = dateTime72.toCalendar(locale83);
        java.lang.String str87 = locale83.getLanguage();
        java.lang.String str88 = dateTimeField33.getAsText((org.joda.time.ReadablePartial) localDateTime61, 421, locale83);
        java.util.Set<java.lang.String> strSet89 = locale83.getUnicodeLocaleAttributes();
        java.util.Locale.Builder builder90 = builder3.setLocale(locale83);
        java.lang.String str91 = locale83.getVariant();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(mutableDateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(chronology24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long32 + "' != '" + 2L + "'", long32 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField33);
        org.junit.Assert.assertNotNull(durationField34);
        org.junit.Assert.assertNotNull(durationField36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNull(durationField41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime48);
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str49, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime51);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar54);
// flaky:         org.junit.Assert.assertEquals(calendar54.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 0 + "'", int55 == 0);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertNotNull(dateTime59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 676793L + "'", long60 == 676793L);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(property66);
        org.junit.Assert.assertNotNull(dateTimeZone67);
        org.junit.Assert.assertNotNull(timeZone68);
// flaky:         org.junit.Assert.assertEquals(timeZone68.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime69);
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str70, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime72);
        org.junit.Assert.assertNotNull(property73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar75);
// flaky:         org.junit.Assert.assertEquals(calendar75.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 0 + "'", int76 == 0);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "zh-TW" + "'", str82, "zh-TW");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "" + "'", str85, "");
        org.junit.Assert.assertNotNull(calendar86);
// flaky:         org.junit.Assert.assertEquals(calendar86.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "de" + "'", str87, "de");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "421" + "'", str88, "421");
        org.junit.Assert.assertNotNull(strSet89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertEquals("'" + str91 + "' != '" + "" + "'", str91, "");
    }

    @Test
    public void test15446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15446");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate.Property property9 = localDate8.weekyear();
        org.joda.time.LocalDate localDate11 = localDate8.minusMonths(19);
        org.joda.time.LocalDate.Property property12 = localDate8.yearOfEra();
        org.joda.time.DateTime dateTime13 = localDate8.toDateTimeAtCurrentTime();
        java.lang.String str14 = dateTime13.toString();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "2000-01-01T07:33:49.151+00:00:00.003" + "'", str14, "2000-01-01T07:33:49.151+00:00:00.003");
    }

    @Test
    public void test15447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15447");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        int int6 = localDate3.size();
        org.joda.time.LocalDate.Property property7 = localDate3.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = localDate8.withYear(0);
        org.joda.time.LocalDate localDate12 = localDate10.withYear(69);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
    }

    @Test
    public void test15448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15448");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property7.addToCopy((int) ' ');
        org.joda.time.LocalDate localDate12 = localDate10.withWeekyear(2);
        org.joda.time.Interval interval13 = localDate12.toInterval();
        java.util.Date date14 = localDate12.toDate();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertNotNull(localDate12);
        org.junit.Assert.assertNotNull(interval13);
        org.junit.Assert.assertNotNull(date14);
// flaky:         org.junit.Assert.assertEquals(date14.toString(), "Tue Jan 03 00:00:00 GMT 2");
    }

    @Test
    public void test15449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15449");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        java.util.Locale locale11 = java.util.Locale.GERMANY;
        java.util.Calendar calendar12 = dateTime9.toCalendar(locale11);
        int int13 = dateTime9.getMinuteOfHour();
        org.joda.time.DateTime dateTime15 = dateTime9.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime17 = dateTime15.plus((long) (-292275054));
        org.joda.time.DateTime dateTime19 = dateTime17.minusMinutes((int) (byte) -1);
        org.joda.time.Chronology chronology21 = null;
        org.joda.time.LocalDateTime localDateTime22 = new org.joda.time.LocalDateTime((long) (-1), chronology21);
        org.joda.time.LocalDateTime.Property property23 = localDateTime22.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.DateTime dateTime26 = localDateTime22.toDateTime(dateTimeZone24);
        java.lang.String str27 = dateTime26.toString();
        org.joda.time.DateTime dateTime29 = dateTime26.plus((long) 100);
        org.joda.time.DateTime dateTime31 = dateTime29.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod32 = null;
        org.joda.time.DateTime dateTime33 = dateTime29.minus(readablePeriod32);
        int int34 = dateTime33.getSecondOfDay();
        boolean boolean35 = dateTime19.isEqual((org.joda.time.ReadableInstant) dateTime33);
        org.joda.time.DateTime.Property property36 = dateTime33.weekyear();
        org.joda.time.Chronology chronology38 = null;
        org.joda.time.LocalDateTime localDateTime39 = new org.joda.time.LocalDateTime((long) (-1), chronology38);
        org.joda.time.LocalDateTime.Property property40 = localDateTime39.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone41 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone42 = dateTimeZone41.toTimeZone();
        org.joda.time.DateTime dateTime43 = localDateTime39.toDateTime(dateTimeZone41);
        java.lang.String str44 = dateTime43.toString();
        org.joda.time.DateTime dateTime46 = dateTime43.plus((long) 100);
        org.joda.time.DateTime.Property property47 = dateTime46.yearOfCentury();
        java.util.Locale locale48 = java.util.Locale.GERMANY;
        java.util.Calendar calendar49 = dateTime46.toCalendar(locale48);
        int int50 = dateTime46.getMinuteOfHour();
        org.joda.time.DateTime dateTime52 = dateTime46.withYearOfEra((int) 'u');
        org.joda.time.DateTime dateTime54 = dateTime52.plus((long) (-292275054));
        org.joda.time.Chronology chronology58 = null;
        org.joda.time.LocalDateTime localDateTime59 = new org.joda.time.LocalDateTime((long) (-1), chronology58);
        org.joda.time.LocalDateTime.Property property60 = localDateTime59.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone61 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone62 = dateTimeZone61.toTimeZone();
        org.joda.time.DateTime dateTime63 = localDateTime59.toDateTime(dateTimeZone61);
        org.joda.time.Chronology chronology64 = dateTime63.getChronology();
        org.joda.time.DateTimeField dateTimeField65 = chronology64.secondOfDay();
        org.joda.time.DurationField durationField66 = chronology64.minutes();
        org.joda.time.DurationField durationField67 = chronology64.minutes();
        org.joda.time.MutableDateTime mutableDateTime68 = new org.joda.time.MutableDateTime((long) 292278993, chronology64);
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) 'a', chronology64);
        org.joda.time.DateTimeField dateTimeField70 = chronology64.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime71 = new org.joda.time.MutableDateTime(chronology64);
        org.joda.time.DateTimeField dateTimeField72 = chronology64.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField73 = chronology64.era();
        org.joda.time.DateTime dateTime74 = dateTime52.toDateTime(chronology64);
        org.joda.time.DateTime dateTime75 = dateTime52.toDateTimeISO();
        int int76 = property36.getDifference((org.joda.time.ReadableInstant) dateTime75);
        org.joda.time.ReadableDuration readableDuration77 = null;
        org.joda.time.DateTime dateTime78 = dateTime75.minus(readableDuration77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) (-1), chronology80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime81.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone83 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone84 = dateTimeZone83.toTimeZone();
        org.joda.time.DateTime dateTime85 = localDateTime81.toDateTime(dateTimeZone83);
        org.joda.time.Chronology chronology86 = dateTime85.getChronology();
        org.joda.time.DateTimeField dateTimeField87 = chronology86.dayOfYear();
        org.joda.time.Chronology chronology88 = chronology86.withUTC();
        org.joda.time.LocalDateTime localDateTime89 = org.joda.time.LocalDateTime.now(chronology86);
        org.joda.time.LocalDateTime.Property property90 = localDateTime89.dayOfMonth();
        org.joda.time.LocalDateTime localDateTime92 = localDateTime89.plusMillis(58);
        org.joda.time.DateTime dateTime93 = dateTime75.withFields((org.joda.time.ReadablePartial) localDateTime92);
        org.joda.time.ReadableInstant readableInstant94 = null;
        boolean boolean95 = dateTime75.isAfter(readableInstant94);
        org.joda.time.DateTime dateTime97 = dateTime75.minusWeeks((-10482460));
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar12);
// flaky:         org.junit.Assert.assertEquals(calendar12.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime26);
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str27, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(dateTime33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(property40);
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(timeZone42);
// flaky:         org.junit.Assert.assertEquals(timeZone42.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime43);
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str44, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime46);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar49);
// flaky:         org.junit.Assert.assertEquals(calendar49.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNotNull(dateTime52);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property60);
        org.junit.Assert.assertNotNull(dateTimeZone61);
        org.junit.Assert.assertNotNull(timeZone62);
// flaky:         org.junit.Assert.assertEquals(timeZone62.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime63);
        org.junit.Assert.assertNotNull(chronology64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(durationField66);
        org.junit.Assert.assertNotNull(durationField67);
        org.junit.Assert.assertNotNull(dateTimeField70);
        org.junit.Assert.assertNotNull(dateTimeField72);
        org.junit.Assert.assertNotNull(dateTimeField73);
        org.junit.Assert.assertNotNull(dateTime74);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertTrue("'" + int76 + "' != '" + 1853 + "'", int76 == 1853);
        org.junit.Assert.assertNotNull(dateTime78);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertNotNull(dateTimeZone83);
        org.junit.Assert.assertNotNull(timeZone84);
// flaky:         org.junit.Assert.assertEquals(timeZone84.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime85);
        org.junit.Assert.assertNotNull(chronology86);
        org.junit.Assert.assertNotNull(dateTimeField87);
        org.junit.Assert.assertNotNull(chronology88);
        org.junit.Assert.assertNotNull(localDateTime89);
        org.junit.Assert.assertNotNull(property90);
        org.junit.Assert.assertNotNull(localDateTime92);
        org.junit.Assert.assertNotNull(dateTime93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + false + "'", boolean95 == false);
        org.junit.Assert.assertNotNull(dateTime97);
    }

    @Test
    public void test15450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15450");
        org.joda.time.DateTimeFieldType dateTimeFieldType0 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.DateTimeField dateTimeField2 = dateTimeFieldType0.getField(chronology1);
        boolean boolean4 = dateTimeField2.isLeap(100L);
        int int6 = dateTimeField2.get((long) (-292275054));
        org.joda.time.DurationField durationField7 = dateTimeField2.getDurationField();
        int int8 = dateTimeField2.getMaximumValue();
        java.util.Locale locale10 = null;
        java.lang.String str11 = dateTimeField2.getAsShortText((int) (short) 10, locale10);
        java.util.Locale locale12 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet13 = locale12.getUnicodeLocaleAttributes();
        java.util.Iterator<java.lang.String> strItor14 = strSet13.iterator();
        java.lang.String[] strArray18 = new java.lang.String[] { "1969-12-31T23:59:59.999Z", "365", "1969-12-31T23:59:59.999Z" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        boolean boolean21 = strSet13.containsAll((java.util.Collection<java.lang.String>) strList19);
        java.lang.Object[] objArray22 = strSet13.toArray();
        boolean boolean23 = strSet13.isEmpty();
        java.util.stream.Stream<java.lang.String> strStream24 = strSet13.parallelStream();
        org.joda.time.LocalTime localTime26 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime28 = localTime26.minusSeconds((int) (short) 10);
        int int29 = localTime26.getMinuteOfHour();
        org.joda.time.LocalTime.Property property30 = localTime26.hourOfDay();
        org.joda.time.LocalTime localTime31 = property30.withMaximumValue();
        java.lang.String str32 = localTime31.toString();
        org.joda.time.LocalTime localTime34 = localTime31.minusMillis(0);
        org.joda.time.LocalTime.Property property35 = localTime34.minuteOfHour();
        org.joda.time.LocalTime localTime37 = property35.addCopy((int) (byte) 100);
        org.joda.time.LocalTime localTime39 = property35.addNoWrapToCopy((int) '4');
        boolean boolean40 = strSet13.contains((java.lang.Object) localTime39);
        org.joda.time.LocalTime localTime42 = localTime39.plusHours(864019);
        int[] intArray46 = new int[] { 5, 999, 2922750 };
        int int47 = dateTimeField2.getMinimumValue((org.joda.time.ReadablePartial) localTime42, intArray46);
        org.joda.time.LocalTime localTime49 = localTime42.plusMinutes(999);
        org.joda.time.LocalTime.Property property50 = localTime42.secondOfMinute();
        int int51 = localTime42.size();
        org.joda.time.LocalTime localTime53 = localTime42.withMillisOfSecond(34);
        org.junit.Assert.assertNotNull(dateTimeFieldType0);
        org.junit.Assert.assertNotNull(dateTimeField2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1969 + "'", int6 == 1969);
        org.junit.Assert.assertNotNull(durationField7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 292278993 + "'", int8 == 292278993);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "10" + "'", str11, "10");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertNotNull(strItor14);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(objArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.deepToString(objArray22), "[]");
        org.junit.Assert.assertEquals(java.util.Arrays.toString(objArray22), "[]");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strStream24);
        org.junit.Assert.assertNotNull(localTime28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(localTime31);
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "23:00:00.003" + "'", str32, "23:00:00.003");
        org.junit.Assert.assertNotNull(localTime34);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(localTime37);
        org.junit.Assert.assertNotNull(localTime39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(localTime42);
        org.junit.Assert.assertNotNull(intArray46);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray46), "[5, 999, 2922750]");
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + (-292275054) + "'", int47 == (-292275054));
        org.junit.Assert.assertNotNull(localTime49);
        org.junit.Assert.assertNotNull(property50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 4 + "'", int51 == 4);
        org.junit.Assert.assertNotNull(localTime53);
    }

    @Test
    public void test15451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15451");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.monthOfYear();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.secondOfDay();
        org.joda.time.DurationField durationField14 = chronology10.hours();
        int int17 = durationField14.getDifference((-62135596800100L), 31525459200000L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-26016960) + "'", int17 == (-26016960));
    }

    @Test
    public void test15452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15452");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfDay();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DurationField durationField13 = chronology10.minutes();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 292278993, chronology10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 'a', chronology10);
        org.joda.time.DurationField durationField16 = chronology10.halfdays();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(153713980800000L, chronology10);
        org.joda.time.DateTimeField dateTimeField18 = mutableDateTime17.getRoundingField();
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = localDateTime23.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfDay();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DurationField durationField31 = chronology28.minutes();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime((long) 292278993, chronology28);
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) 'a', chronology28);
        org.joda.time.DateTimeField dateTimeField34 = chronology28.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime35 = new org.joda.time.MutableDateTime(chronology28);
        org.joda.time.DateTimeField dateTimeField36 = chronology28.minuteOfDay();
        org.joda.time.DateTimeField dateTimeField37 = chronology28.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime40 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.DateTimeFieldType dateTimeFieldType41 = org.joda.time.DateTimeFieldType.year();
        mutableDateTime40.set(dateTimeFieldType41, (-292275054));
        org.joda.time.MutableDateTime.Property property44 = mutableDateTime40.yearOfEra();
        org.joda.time.DateTimeFieldType dateTimeFieldType45 = org.joda.time.DateTimeFieldType.year();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.DateTimeField dateTimeField47 = dateTimeFieldType45.getField(chronology46);
        boolean boolean49 = dateTimeField47.isLeap(100L);
        mutableDateTime40.setRounding(dateTimeField47);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (-1), chronology54);
        boolean boolean56 = dateTimeZone51.isLocalDateTimeGap(localDateTime55);
        org.joda.time.LocalDateTime localDateTime58 = localDateTime55.withYearOfEra((int) (byte) 10);
        org.joda.time.LocalDateTime.Property property59 = localDateTime55.dayOfYear();
        org.joda.time.LocalDateTime localDateTime61 = localDateTime55.withSecondOfMinute((int) (byte) 0);
        org.joda.time.ReadableDuration readableDuration62 = null;
        org.joda.time.LocalDateTime localDateTime64 = localDateTime55.withDurationAdded(readableDuration62, (int) 'u');
        org.joda.time.LocalDateTime localDateTime66 = localDateTime64.withMonthOfYear(10);
        java.util.Locale locale67 = java.util.Locale.JAPANESE;
        java.lang.String str68 = dateTimeField47.getAsText((org.joda.time.ReadablePartial) localDateTime64, locale67);
        java.lang.String str69 = dateTimeField37.getAsShortText((int) (byte) 100, locale67);
        long long71 = dateTimeField37.roundHalfCeiling((long) (-292275054));
        int int72 = dateTimeField37.getMinimumValue();
        org.joda.time.DateTimeFieldType dateTimeFieldType73 = dateTimeField37.getType();
        org.joda.time.MutableDateTime.Property property74 = mutableDateTime17.property(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNull(dateTimeField18);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(durationField31);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(dateTimeFieldType41);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(dateTimeFieldType45);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(localDateTime58);
        org.junit.Assert.assertNotNull(property59);
        org.junit.Assert.assertNotNull(localDateTime61);
        org.junit.Assert.assertNotNull(localDateTime64);
        org.junit.Assert.assertNotNull(localDateTime66);
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "1970" + "'", str68, "1970");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "100" + "'", str69, "100");
// flaky:         org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-292260003L) + "'", long71 == (-292260003L));
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(dateTimeFieldType73);
        org.junit.Assert.assertNotNull(property74);
    }

    @Test
    public void test15453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15453");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.minus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.minusHours((int) (byte) -1);
        org.joda.time.DateTime dateTime17 = dateTime13.plusYears(2022);
        boolean boolean18 = dateTime17.isAfterNow();
        org.joda.time.DateTime dateTime20 = dateTime17.withMillisOfDay(0);
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        int int23 = dateTimeZone21.getOffsetFromLocal((long) (byte) 0);
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime(dateTimeZone21);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.centuryOfEra();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withYearOfEra(1971);
        org.joda.time.MutableDateTime mutableDateTime28 = new org.joda.time.MutableDateTime();
        org.joda.time.DateTimeField dateTimeField29 = mutableDateTime28.getRoundingField();
        org.joda.time.MutableDateTime.Property property30 = mutableDateTime28.dayOfWeek();
        org.joda.time.MutableDateTime mutableDateTime32 = property30.add((long) (short) 100);
        org.joda.time.DateTimeZone dateTimeZone33 = mutableDateTime32.getZone();
        org.joda.time.MutableDateTime mutableDateTime34 = new org.joda.time.MutableDateTime(dateTimeZone33);
        org.joda.time.DateTime dateTime35 = localDateTime27.toDateTime(dateTimeZone33);
        org.joda.time.LocalDateTime localDateTime37 = localDateTime27.minusSeconds((-53));
        org.joda.time.Chronology chronology39 = null;
        org.joda.time.LocalDateTime localDateTime40 = new org.joda.time.LocalDateTime((long) (-1), chronology39);
        org.joda.time.LocalDateTime.Property property41 = localDateTime40.dayOfYear();
        org.joda.time.DurationField durationField42 = property41.getLeapDurationField();
        org.joda.time.Interval interval43 = property41.toInterval();
        long long44 = property41.remainder();
        java.lang.String str45 = property41.toString();
        org.joda.time.LocalDateTime localDateTime47 = property41.setCopy((int) (short) 1);
        int int48 = localDateTime47.getDayOfMonth();
        org.joda.time.LocalDateTime localDateTime50 = localDateTime47.plusDays((-1));
        org.joda.time.DateTimeFieldType dateTimeFieldType51 = org.joda.time.DateTimeFieldType.yearOfCentury();
        org.joda.time.DurationFieldType durationFieldType52 = dateTimeFieldType51.getRangeDurationType();
        int int53 = localDateTime47.get(dateTimeFieldType51);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (-1), chronology55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone58 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone59 = dateTimeZone58.toTimeZone();
        org.joda.time.DateTime dateTime60 = localDateTime56.toDateTime(dateTimeZone58);
        org.joda.time.Chronology chronology61 = dateTime60.getChronology();
        org.joda.time.DateTimeField dateTimeField62 = chronology61.secondOfDay();
        org.joda.time.DurationField durationField63 = chronology61.minutes();
        org.joda.time.DateTimeField dateTimeField64 = chronology61.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField65 = dateTimeFieldType51.getField(chronology61);
        org.joda.time.DateTimeFieldType dateTimeFieldType66 = dateTimeField65.getType();
        int int67 = localDateTime27.indexOf(dateTimeFieldType66);
        boolean boolean68 = dateTime20.isSupported(dateTimeFieldType66);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(dateTime20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
// flaky:         org.junit.Assert.assertTrue("'" + int23 + "' != '" + 3 + "'", int23 == 3);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNull(dateTimeField29);
        org.junit.Assert.assertNotNull(property30);
        org.junit.Assert.assertNotNull(mutableDateTime32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(localDateTime37);
        org.junit.Assert.assertNotNull(property41);
        org.junit.Assert.assertNull(durationField42);
        org.junit.Assert.assertNotNull(interval43);
// flaky:         org.junit.Assert.assertTrue("'" + long44 + "' != '" + 2L + "'", long44 == 2L);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Property[dayOfYear]" + "'", str45, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNotNull(localDateTime50);
        org.junit.Assert.assertNotNull(dateTimeFieldType51);
        org.junit.Assert.assertNotNull(durationFieldType52);
// flaky:         org.junit.Assert.assertTrue("'" + int53 + "' != '" + 70 + "'", int53 == 70);
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNotNull(dateTimeZone58);
        org.junit.Assert.assertNotNull(timeZone59);
// flaky:         org.junit.Assert.assertEquals(timeZone59.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime60);
        org.junit.Assert.assertNotNull(chronology61);
        org.junit.Assert.assertNotNull(dateTimeField62);
        org.junit.Assert.assertNotNull(durationField63);
        org.junit.Assert.assertNotNull(dateTimeField64);
        org.junit.Assert.assertNotNull(dateTimeField65);
        org.junit.Assert.assertNotNull(dateTimeFieldType66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + (-1) + "'", int67 == (-1));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test15454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15454");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.dayOfYear();
        org.joda.time.Chronology chronology9 = chronology7.withUTC();
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone11 = dateTimeZone10.toTimeZone();
        org.joda.time.Chronology chronology13 = null;
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) (-1), chronology13);
        boolean boolean15 = dateTimeZone10.isLocalDateTimeGap(localDateTime14);
        long long17 = chronology9.set((org.joda.time.ReadablePartial) localDateTime14, (long) '#');
        org.joda.time.DateTimeField dateTimeField18 = chronology9.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField19 = chronology9.weekyearOfCentury();
        org.joda.time.DateTimeField dateTimeField20 = chronology9.millisOfDay();
        org.joda.time.DateTimeField dateTimeField21 = chronology9.era();
        org.joda.time.DateTimeField dateTimeField22 = chronology9.minuteOfHour();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(timeZone11);
// flaky:         org.junit.Assert.assertEquals(timeZone11.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + 2L + "'", long17 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(dateTimeField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(dateTimeField21);
        org.junit.Assert.assertNotNull(dateTimeField22);
    }

    @Test
    public void test15455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15455");
        org.joda.time.LocalDate localDate0 = new org.joda.time.LocalDate();
        org.joda.time.LocalDate localDate2 = localDate0.plusMonths(31);
        int int3 = localDate0.getDayOfYear();
        org.joda.time.LocalDate localDate5 = localDate0.plusWeeks(19);
        org.joda.time.DateTime dateTime6 = localDate0.toDateTimeAtStartOfDay();
        org.joda.time.ReadablePeriod readablePeriod7 = null;
        org.joda.time.LocalDate localDate8 = localDate0.minus(readablePeriod7);
        // The following exception was thrown during execution in test generation
        try {
            int int10 = localDate0.getValue(208767);
            org.junit.Assert.fail("Expected exception of type java.lang.IndexOutOfBoundsException; message: Invalid index: 208767");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 53 + "'", int3 == 53);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(localDate8);
    }

    @Test
    public void test15456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15456");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendTwoDigitYear(53);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter5 = dateTimeFormatterBuilder0.toFormatter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder0.appendMonthOfYear(3);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder10 = dateTimeFormatterBuilder7.appendTwoDigitYear(48, false);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder10.appendMonthOfYearShortText();
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap12 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder10.appendTimeZoneName(strMap12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder15 = dateTimeFormatterBuilder13.appendHourOfHalfday(26753);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder13.appendHourOfDay(4861378);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder19 = dateTimeFormatterBuilder13.appendClockhourOfHalfday(182);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder13.appendHalfdayOfDayText();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatter5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder15);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
    }

    @Test
    public void test15457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15457");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration4 = null;
        mutableDateTime1.add(readableDuration4, (int) (short) 100);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.minuteOfDay();
        org.joda.time.MutableDateTime mutableDateTime8 = mutableDateTime1.copy();
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime8.era();
        org.joda.time.MutableDateTime mutableDateTime10 = property9.roundHalfFloor();
        org.joda.time.ReadablePeriod readablePeriod11 = null;
        mutableDateTime10.add(readablePeriod11, 4);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder14 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder14.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder14.appendTwoDigitYear(53);
        org.joda.time.format.DateTimePrinter dateTimePrinter19 = dateTimeFormatterBuilder18.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder18.appendFractionOfMinute(29, (int) (byte) 1);
        org.joda.time.format.DateTimeParser dateTimeParser23 = dateTimeFormatterBuilder18.toParser();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.LocalDateTime localDateTime27 = new org.joda.time.LocalDateTime((long) (-1), chronology26);
        org.joda.time.LocalDateTime.Property property28 = localDateTime27.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone29 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone30 = dateTimeZone29.toTimeZone();
        org.joda.time.DateTime dateTime31 = localDateTime27.toDateTime(dateTimeZone29);
        org.joda.time.Chronology chronology32 = dateTime31.getChronology();
        org.joda.time.DurationField durationField33 = chronology32.hours();
        org.joda.time.DateTimeField dateTimeField34 = chronology32.secondOfMinute();
        org.joda.time.DateTimeField dateTimeField35 = chronology32.weekyear();
        java.util.Locale locale36 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket37 = new org.joda.time.format.DateTimeParserBucket(86399999L, chronology32, locale36);
        int int40 = dateTimeParser23.parseInto(dateTimeParserBucket37, "10", 9);
        org.joda.time.DateTimeZone dateTimeZone41 = dateTimeParserBucket37.getZone();
        mutableDateTime10.setZoneRetainFields(dateTimeZone41);
        org.joda.time.MutableDateTime mutableDateTime43 = org.joda.time.MutableDateTime.now(dateTimeZone41);
        org.joda.time.DateTime dateTime44 = org.joda.time.DateTime.now(dateTimeZone41);
        org.joda.time.DateTime.Property property45 = dateTime44.millisOfDay();
        org.joda.time.DateTime.Property property46 = dateTime44.yearOfEra();
        org.joda.time.DateTime dateTime47 = property46.roundHalfFloorCopy();
        int int48 = dateTime47.getSecondOfMinute();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime8);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimePrinter19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
        org.junit.Assert.assertNotNull(dateTimeParser23);
        org.junit.Assert.assertNotNull(property28);
        org.junit.Assert.assertNotNull(dateTimeZone29);
        org.junit.Assert.assertNotNull(timeZone30);
// flaky:         org.junit.Assert.assertEquals(timeZone30.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(chronology32);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(dateTimeField34);
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + (-10) + "'", int40 == (-10));
        org.junit.Assert.assertNotNull(dateTimeZone41);
        org.junit.Assert.assertNotNull(mutableDateTime43);
        org.junit.Assert.assertNotNull(dateTime44);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(property46);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
    }

    @Test
    public void test15458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15458");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setTime(100L);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.dayOfMonth();
        mutableDateTime1.addMillis((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property7 = mutableDateTime1.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime9 = property7.addWrapField(218);
        org.joda.time.MutableDateTime mutableDateTime10 = mutableDateTime9.copy();
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime9.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime13 = property11.add(65);
        java.lang.String str14 = mutableDateTime13.toString();
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(mutableDateTime9);
        org.junit.Assert.assertNotNull(mutableDateTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(mutableDateTime13);
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "1988-03-06T00:00:00.100+00:00:00.003" + "'", str14, "1988-03-06T00:00:00.100+00:00:00.003");
    }

    @Test
    public void test15459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15459");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        int int9 = property3.getMaximumShortTextLength(locale8);
        java.lang.String str10 = property3.toString();
        org.joda.time.LocalDateTime localDateTime12 = property3.setCopy(19);
        org.joda.time.LocalDateTime localDateTime13 = property3.withMaximumValue();
        int int14 = localDateTime13.getWeekOfWeekyear();
        org.joda.time.LocalDateTime.Property property15 = localDateTime13.dayOfMonth();
        int int16 = localDateTime13.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime18 = localDateTime13.withMillisOfDay((int) (short) 1);
        org.joda.time.ReadableDuration readableDuration19 = null;
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.plus(readableDuration19);
        org.joda.time.LocalDateTime localDateTime22 = localDateTime20.minusSeconds(1996);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime24 = localDateTime22.withEra(91295);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 91295 for era must be in the range [0,1]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[dayOfYear]" + "'", str10, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 53 + "'", int14 == 53);
        org.junit.Assert.assertNotNull(property15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 53 + "'", int16 == 53);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(localDateTime22);
    }

    @Test
    public void test15460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15460");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime13.plus((long) 2000);
        org.joda.time.DateTime dateTime17 = dateTime13.minusMonths(3);
        org.joda.time.DateTime dateTime19 = dateTime17.minusSeconds(864019);
        org.joda.time.ReadablePeriod readablePeriod20 = null;
        org.joda.time.DateTime dateTime21 = dateTime19.plus(readablePeriod20);
        org.joda.time.DateTime dateTime23 = dateTime19.minusMillis(45180002);
        org.joda.time.DateTime dateTime25 = dateTime19.plusHours(0);
        org.joda.time.DateTimeZone dateTimeZone26 = dateTime25.getZone();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTimeZone26);
    }

    @Test
    public void test15461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15461");
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate4 = localDate2.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate6 = localDate4.plusWeeks((-292275054));
        org.joda.time.LocalDate localDate8 = localDate4.minusYears((int) 'u');
        org.joda.time.DateTimeZone dateTimeZone10 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.DateTime dateTime11 = localDate8.toDateTimeAtStartOfDay(dateTimeZone10);
        org.joda.time.DateTime dateTime12 = org.joda.time.DateTime.now(dateTimeZone10);
        org.joda.time.LocalDate localDate13 = new org.joda.time.LocalDate((long) 'a', dateTimeZone10);
        org.joda.time.DateTime dateTime14 = localDate13.toDateTimeAtMidnight();
        org.joda.time.LocalDate localDate16 = localDate13.minusMonths(784);
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-1), chronology18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone21 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone22 = dateTimeZone21.toTimeZone();
        org.joda.time.DateTime dateTime23 = localDateTime19.toDateTime(dateTimeZone21);
        java.lang.String str24 = dateTime23.toString();
        org.joda.time.DateTime dateTime26 = dateTime23.plus((long) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType27 = org.joda.time.DateTimeFieldType.dayOfWeek();
        int int28 = dateTime26.get(dateTimeFieldType27);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-1), chronology30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.weekyear();
        org.joda.time.LocalDateTime localDateTime34 = localDateTime31.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime36 = localDateTime31.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod37 = null;
        org.joda.time.LocalDateTime localDateTime38 = localDateTime31.minus(readablePeriod37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime31.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime42 = localDateTime40.withWeekOfWeekyear(23);
        int int43 = localDateTime40.getCenturyOfEra();
        int int45 = localDateTime40.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime47 = localDateTime40.plusMinutes(99);
        org.joda.time.Chronology chronology49 = null;
        org.joda.time.LocalDateTime localDateTime50 = new org.joda.time.LocalDateTime((long) (-1), chronology49);
        org.joda.time.LocalDateTime.Property property51 = localDateTime50.weekyear();
        org.joda.time.LocalDateTime localDateTime53 = localDateTime50.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime55 = localDateTime50.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property56 = localDateTime50.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType57 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean58 = localDateTime50.isSupported(dateTimeFieldType57);
        int int59 = localDateTime47.indexOf(dateTimeFieldType57);
        boolean boolean60 = dateTime26.isSupported(dateTimeFieldType57);
        java.lang.String str61 = dateTimeFieldType57.getName();
        // The following exception was thrown during execution in test generation
        try {
            int int62 = localDate16.get(dateTimeFieldType57);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Field 'minuteOfDay' is not supported");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localDate4);
        org.junit.Assert.assertNotNull(localDate6);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(dateTimeZone10);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(localDate16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(dateTimeZone21);
        org.junit.Assert.assertNotNull(timeZone22);
// flaky:         org.junit.Assert.assertEquals(timeZone22.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime23);
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str24, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime26);
        org.junit.Assert.assertNotNull(dateTimeFieldType27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 4 + "'", int28 == 4);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(localDateTime34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19 + "'", int43 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNotNull(localDateTime47);
        org.junit.Assert.assertNotNull(property51);
        org.junit.Assert.assertNotNull(localDateTime53);
        org.junit.Assert.assertNotNull(localDateTime55);
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNotNull(dateTimeFieldType57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + (-1) + "'", int59 == (-1));
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + true + "'", boolean60 == true);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "minuteOfDay" + "'", str61, "minuteOfDay");
    }

    @Test
    public void test15462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15462");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder1 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder1.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder1.appendTwoDigitYear(53);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder1.appendHourOfHalfday(23);
        org.joda.time.format.DateTimeParser dateTimeParser8 = dateTimeFormatterBuilder1.toParser();
        org.joda.time.format.DateTimePrinter dateTimePrinter10 = null;
        org.joda.time.format.DateTimeParser dateTimeParser11 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter10, dateTimeParser11);
        org.joda.time.Chronology chronology14 = null;
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) (-1), chronology14);
        org.joda.time.LocalDateTime.Property property16 = localDateTime15.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone17 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone18 = dateTimeZone17.toTimeZone();
        org.joda.time.DateTime dateTime19 = localDateTime15.toDateTime(dateTimeZone17);
        org.joda.time.Chronology chronology20 = dateTime19.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter12.withChronology(chronology20);
        org.joda.time.DateTimeField dateTimeField22 = chronology20.monthOfYear();
        org.joda.time.DateTimeField dateTimeField23 = chronology20.clockhourOfHalfday();
        org.joda.time.MutableDateTime mutableDateTime24 = new org.joda.time.MutableDateTime();
        mutableDateTime24.add((long) 100);
        org.joda.time.MutableDateTime.Property property27 = mutableDateTime24.dayOfYear();
        org.joda.time.Chronology chronology29 = null;
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) (-1), chronology29);
        org.joda.time.LocalDateTime.Property property31 = localDateTime30.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone32 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone33 = dateTimeZone32.toTimeZone();
        org.joda.time.DateTime dateTime34 = localDateTime30.toDateTime(dateTimeZone32);
        java.lang.String str35 = dateTime34.toString();
        org.joda.time.DateTime dateTime37 = dateTime34.plus((long) 100);
        org.joda.time.DateTime.Property property38 = dateTime37.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration39 = null;
        org.joda.time.DateTime dateTime40 = dateTime37.plus(readableDuration39);
        int int41 = dateTime40.getDayOfMonth();
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet44 = locale43.getUnicodeLocaleAttributes();
        java.util.Locale locale45 = java.util.Locale.GERMANY;
        java.lang.String str46 = locale43.getDisplayVariant(locale45);
        java.lang.String str47 = dateTime40.toString("365", locale45);
        org.joda.time.DateTime dateTime49 = dateTime40.plusMonths(1969);
        mutableDateTime24.setMillis((org.joda.time.ReadableInstant) dateTime40);
        org.joda.time.DateTimeZone dateTimeZone51 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone52 = dateTimeZone51.toTimeZone();
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (-1), chronology54);
        boolean boolean56 = dateTimeZone51.isLocalDateTimeGap(localDateTime55);
        java.lang.String str58 = dateTimeZone51.getName((long) 4);
        mutableDateTime24.setZone(dateTimeZone51);
        java.util.Locale locale61 = java.util.Locale.getDefault();
        java.lang.String str62 = dateTimeZone51.getName((long) (-292275054), locale61);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket65 = new org.joda.time.format.DateTimeParserBucket(1645514718201L, chronology20, locale61, (java.lang.Integer) 1, (int) (short) -1);
        java.util.Locale locale66 = dateTimeParserBucket65.getLocale();
        dateTimeParserBucket65.setOffset(6);
        long long70 = dateTimeParserBucket65.computeMillis(false);
        long long71 = dateTimeParserBucket65.computeMillis();
        int int74 = dateTimeParser8.parseInto(dateTimeParserBucket65, "months", 52);
        java.lang.Object obj75 = dateTimeParserBucket65.saveState();
        java.lang.Object obj76 = dateTimeParserBucket65.saveState();
        org.joda.time.DateTimeZone dateTimeZone77 = dateTimeParserBucket65.getZone();
        org.joda.time.DateTime dateTime78 = new org.joda.time.DateTime((java.lang.Object) "2022-02-22T07:27:07.063+00:00:00.003", dateTimeZone77);
        boolean boolean80 = dateTimeZone77.isStandardOffset(111600000L);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(dateTimeParser8);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertNotNull(dateTimeZone17);
        org.junit.Assert.assertNotNull(timeZone18);
// flaky:         org.junit.Assert.assertEquals(timeZone18.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(chronology20);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeField22);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertNotNull(property27);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(dateTimeZone32);
        org.junit.Assert.assertNotNull(timeZone33);
// flaky:         org.junit.Assert.assertEquals(timeZone33.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime34);
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str35, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "365" + "'", str47, "365");
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeZone51);
        org.junit.Assert.assertNotNull(timeZone52);
// flaky:         org.junit.Assert.assertEquals(timeZone52.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "+00:00:00.003" + "'", str58, "+00:00:00.003");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "+00:00:00.003" + "'", str62, "+00:00:00.003");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "");
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 1645514718195L + "'", long70 == 1645514718195L);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + 1645514718195L + "'", long71 == 1645514718195L);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + (-53) + "'", int74 == (-53));
        org.junit.Assert.assertNotNull(obj75);
        org.junit.Assert.assertNotNull(obj76);
        org.junit.Assert.assertNotNull(dateTimeZone77);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
    }

    @Test
    public void test15463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15463");
        org.joda.time.LocalDate localDate1 = new org.joda.time.LocalDate((long) 1);
        org.joda.time.LocalDate localDate3 = localDate1.withDayOfYear((int) (byte) 10);
        org.joda.time.LocalDate localDate5 = localDate3.plusWeeks((-292275054));
        int int6 = localDate3.size();
        org.joda.time.LocalDate.Property property7 = localDate3.centuryOfEra();
        org.joda.time.LocalDate localDate9 = localDate3.minusWeeks(71);
        org.joda.time.LocalDate localDate11 = localDate9.minusDays(418);
        org.junit.Assert.assertNotNull(localDate3);
        org.junit.Assert.assertNotNull(localDate5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
    }

    @Test
    public void test15464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15464");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfFloorCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.minusYears(8);
        org.joda.time.Chronology chronology11 = null;
        org.joda.time.LocalDateTime localDateTime12 = new org.joda.time.LocalDateTime((long) (-1), chronology11);
        org.joda.time.LocalDateTime.Property property13 = localDateTime12.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone14 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone15 = dateTimeZone14.toTimeZone();
        org.joda.time.DateTime dateTime16 = localDateTime12.toDateTime(dateTimeZone14);
        org.joda.time.LocalDateTime.Property property17 = localDateTime12.secondOfMinute();
        org.joda.time.LocalDateTime.Property property18 = localDateTime12.dayOfMonth();
        boolean boolean19 = localDateTime9.equals((java.lang.Object) property18);
        org.joda.time.LocalDateTime localDateTime21 = property18.addToCopy(469);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime23 = property18.setCopy(0);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 0 for dayOfMonth must be in the range [1,28]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property13);
        org.junit.Assert.assertNotNull(dateTimeZone14);
        org.junit.Assert.assertNotNull(timeZone15);
// flaky:         org.junit.Assert.assertEquals(timeZone15.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(localDateTime21);
    }

    @Test
    public void test15465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15465");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        boolean boolean18 = dateTimeZone13.isLocalDateTimeGap(localDateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        boolean boolean23 = dateTimeZone13.isLocalDateTimeGap(localDateTime21);
        long long25 = dateTimeZone13.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withZone(dateTimeZone13);
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime(26084L, dateTimeZone13);
        org.joda.time.MutableDateTime mutableDateTime28 = org.joda.time.MutableDateTime.now(dateTimeZone13);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(mutableDateTime28);
    }

    @Test
    public void test15466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15466");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundCeilingCopy();
        org.joda.time.LocalDate localDate9 = property7.getLocalDate();
        org.joda.time.DateTimeZone dateTimeZone11 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime12 = new org.joda.time.MutableDateTime(dateTimeZone11);
        org.joda.time.DateTime dateTime13 = localDate9.toDateTimeAtCurrentTime(dateTimeZone11);
        org.joda.time.DateTime dateTime15 = dateTime13.plus((long) 2000);
        org.joda.time.DateTime dateTime17 = dateTime13.minusMonths(3);
        org.joda.time.DateTime dateTime19 = dateTime17.minusSeconds(864019);
        org.joda.time.DateTime dateTime21 = dateTime17.withDayOfYear((int) (short) 100);
        org.joda.time.LocalDate localDate22 = dateTime17.toLocalDate();
        org.joda.time.DateTime dateTime24 = dateTime17.minus((long) 65);
        org.joda.time.LocalDate localDate25 = dateTime24.toLocalDate();
        org.joda.time.DateTime dateTime27 = dateTime24.plusSeconds(2023);
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(dateTimeZone11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(localDate22);
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(localDate25);
        org.junit.Assert.assertNotNull(dateTime27);
    }

    @Test
    public void test15467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15467");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        int int10 = localDateTime2.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime12 = localDateTime2.withYear((int) ' ');
        org.joda.time.LocalDateTime localDateTime14 = localDateTime2.minusYears(26800);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime14);
    }

    @Test
    public void test15468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15468");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime.Property property10 = dateTime9.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration11 = null;
        org.joda.time.DateTime dateTime12 = dateTime9.plus(readableDuration11);
        int int13 = dateTime12.getDayOfMonth();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet16 = locale15.getUnicodeLocaleAttributes();
        java.util.Locale locale17 = java.util.Locale.GERMANY;
        java.lang.String str18 = locale15.getDisplayVariant(locale17);
        java.lang.String str19 = dateTime12.toString("365", locale17);
        org.joda.time.DateTime dateTime21 = dateTime12.plusMonths(1969);
        org.joda.time.Chronology chronology23 = null;
        org.joda.time.LocalDateTime localDateTime24 = new org.joda.time.LocalDateTime((long) (-1), chronology23);
        org.joda.time.LocalDateTime.Property property25 = localDateTime24.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime27 = localDateTime24.withMonthOfYear(5);
        org.joda.time.DateTime dateTime28 = dateTime21.withFields((org.joda.time.ReadablePartial) localDateTime24);
        org.joda.time.DateTime dateTime30 = dateTime21.minusWeeks(25);
        org.joda.time.DateTime dateTime31 = dateTime30.toDateTimeISO();
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDateTime34.toDateTime(dateTimeZone36);
        java.lang.String str39 = dateTime38.toString();
        org.joda.time.DateTime dateTime41 = dateTime38.plus((long) 100);
        org.joda.time.DateTime.Property property42 = dateTime41.yearOfCentury();
        java.util.Locale locale43 = java.util.Locale.GERMANY;
        java.util.Calendar calendar44 = dateTime41.toCalendar(locale43);
        int int45 = dateTime41.getMinuteOfHour();
        org.joda.time.DateTime dateTime47 = dateTime41.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property48 = dateTime41.era();
        org.joda.time.DateTime dateTime49 = property48.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField50 = property48.getField();
        java.util.Locale locale51 = java.util.Locale.FRANCE;
        java.lang.String str52 = property48.getAsShortText(locale51);
        org.joda.time.DurationField durationField53 = property48.getRangeDurationField();
        org.joda.time.DateTime dateTime54 = property48.withMaximumValue();
        boolean boolean55 = dateTime30.isAfter((org.joda.time.ReadableInstant) dateTime54);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "365" + "'", str19, "365");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(property25);
        org.junit.Assert.assertNotNull(localDateTime27);
        org.junit.Assert.assertNotNull(dateTime28);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime31);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str39, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar44);
// flaky:         org.junit.Assert.assertEquals(calendar44.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "ap. J.-C." + "'", str52, "ap. J.-C.");
        org.junit.Assert.assertNull(durationField53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
    }

    @Test
    public void test15469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15469");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.minusMinutes((int) 'x');
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.year();
        org.joda.time.LocalDateTime.Property property7 = localDateTime5.yearOfEra();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime5.withYearOfEra(85943);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDateTime9);
    }

    @Test
    public void test15470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15470");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        boolean boolean18 = dateTimeZone13.isLocalDateTimeGap(localDateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        boolean boolean23 = dateTimeZone13.isLocalDateTimeGap(localDateTime21);
        long long25 = dateTimeZone13.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear((java.lang.Integer) 86399999);
        org.joda.time.Chronology chronology30 = null;
        org.joda.time.LocalDateTime localDateTime31 = new org.joda.time.LocalDateTime((long) (-1), chronology30);
        org.joda.time.LocalDateTime.Property property32 = localDateTime31.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone33 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone34 = dateTimeZone33.toTimeZone();
        org.joda.time.DateTime dateTime35 = localDateTime31.toDateTime(dateTimeZone33);
        org.joda.time.Chronology chronology36 = dateTime35.getChronology();
        org.joda.time.DateTimeField dateTimeField37 = chronology36.dayOfYear();
        org.joda.time.Chronology chronology38 = chronology36.withUTC();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        org.joda.time.Chronology chronology42 = null;
        org.joda.time.LocalDateTime localDateTime43 = new org.joda.time.LocalDateTime((long) (-1), chronology42);
        boolean boolean44 = dateTimeZone39.isLocalDateTimeGap(localDateTime43);
        long long46 = chronology38.set((org.joda.time.ReadablePartial) localDateTime43, (long) '#');
        org.joda.time.DateTimeField dateTimeField47 = chronology38.dayOfMonth();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter48 = dateTimeFormatter28.withChronology(chronology38);
        java.util.Locale locale49 = null;
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket52 = new org.joda.time.format.DateTimeParserBucket((long) 365, chronology38, locale49, (java.lang.Integer) 12, 37);
        dateTimeParserBucket52.setOffset((java.lang.Integer) 446);
        int int55 = dateTimeParserBucket52.getOffset();
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeZone33);
        org.junit.Assert.assertNotNull(timeZone34);
// flaky:         org.junit.Assert.assertEquals(timeZone34.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime35);
        org.junit.Assert.assertNotNull(chronology36);
        org.junit.Assert.assertNotNull(dateTimeField37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long46 + "' != '" + 2L + "'", long46 == 2L);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertNotNull(dateTimeFormatter48);
        org.junit.Assert.assertTrue("'" + int55 + "' != '" + 446 + "'", int55 == 446);
    }

    @Test
    public void test15471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15471");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime2 = new org.joda.time.MutableDateTime(dateTimeZone1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.lang.String str5 = locale4.getDisplayScript();
        java.lang.String str6 = dateTimeZone1.getName((long) 5, locale4);
        org.joda.time.DateTime dateTime7 = new org.joda.time.DateTime(dateTimeZone1);
        org.joda.time.DateTime dateTime8 = dateTime7.withLaterOffsetAtOverlap();
        org.joda.time.DateTime dateTime10 = dateTime7.withHourOfDay(16);
        org.joda.time.DateTime dateTime12 = dateTime10.withMillis(31536000000L);
        org.joda.time.DateTime dateTime14 = dateTime12.withEra(0);
        org.joda.time.DateTime.Property property15 = dateTime12.dayOfYear();
        org.joda.time.DateTime dateTime17 = dateTime12.plusSeconds(22);
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "+00:00:00.003" + "'", str6, "+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
    }

    @Test
    public void test15472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15472");
        org.joda.time.DurationFieldType durationFieldType2 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DurationField durationField11 = durationFieldType2.getField(chronology10);
        org.joda.time.DateTimeField dateTimeField12 = chronology10.clockhourOfDay();
        org.joda.time.DateTimeField dateTimeField13 = chronology10.yearOfCentury();
        org.joda.time.DurationField durationField14 = chronology10.minutes();
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone22 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone23 = dateTimeZone22.toTimeZone();
        org.joda.time.DateTime dateTime24 = localDateTime20.toDateTime(dateTimeZone22);
        org.joda.time.Chronology chronology25 = dateTime24.getChronology();
        org.joda.time.DateTimeField dateTimeField26 = chronology25.secondOfDay();
        org.joda.time.DurationField durationField27 = chronology25.minutes();
        org.joda.time.DurationField durationField28 = chronology25.minutes();
        org.joda.time.MutableDateTime mutableDateTime29 = new org.joda.time.MutableDateTime((long) 292278993, chronology25);
        org.joda.time.LocalDateTime localDateTime30 = new org.joda.time.LocalDateTime((long) 'a', chronology25);
        org.joda.time.DateTimeField dateTimeField31 = chronology25.minuteOfHour();
        org.joda.time.MutableDateTime mutableDateTime32 = new org.joda.time.MutableDateTime(chronology25);
        org.joda.time.DurationField durationField33 = chronology25.halfdays();
        org.joda.time.Chronology chronology35 = null;
        org.joda.time.LocalDateTime localDateTime36 = new org.joda.time.LocalDateTime((long) (-1), chronology35);
        org.joda.time.LocalDateTime.Property property37 = localDateTime36.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone38 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone39 = dateTimeZone38.toTimeZone();
        org.joda.time.DateTime dateTime40 = localDateTime36.toDateTime(dateTimeZone38);
        org.joda.time.Chronology chronology41 = dateTime40.getChronology();
        org.joda.time.DurationField durationField42 = chronology41.hours();
        org.joda.time.DateTimeField dateTimeField43 = chronology41.secondOfMinute();
        org.joda.time.Chronology chronology45 = null;
        org.joda.time.LocalDateTime localDateTime46 = new org.joda.time.LocalDateTime((long) (-1), chronology45);
        org.joda.time.LocalDateTime.Property property47 = localDateTime46.weekyear();
        org.joda.time.LocalDateTime localDateTime49 = localDateTime46.minusHours((-1));
        java.util.Locale locale50 = java.util.Locale.JAPANESE;
        java.lang.String str51 = dateTimeField43.getAsText((org.joda.time.ReadablePartial) localDateTime46, locale50);
        int int53 = dateTimeField43.getLeapAmount((long) (-1));
        org.joda.time.Chronology chronology56 = null;
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((long) (-1), chronology56);
        org.joda.time.LocalDateTime.Property property58 = localDateTime57.dayOfYear();
        org.joda.time.DurationField durationField59 = property58.getLeapDurationField();
        org.joda.time.Interval interval60 = property58.toInterval();
        long long61 = property58.remainder();
        java.util.Locale locale63 = new java.util.Locale("hi!");
        int int64 = property58.getMaximumShortTextLength(locale63);
        java.lang.String str66 = locale63.getUnicodeLocaleType("AD");
        java.util.Locale locale68 = new java.util.Locale("365");
        java.lang.String str69 = locale68.getISO3Language();
        java.lang.String str70 = locale63.getDisplayScript(locale68);
        java.lang.String str71 = dateTimeField43.getAsShortText((-27082775779199900L), locale68);
        java.lang.String str72 = locale68.getDisplayCountry();
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket73 = new org.joda.time.format.DateTimeParserBucket(126316799999L, chronology25, locale68);
        org.joda.time.format.DateTimeParserBucket dateTimeParserBucket75 = new org.joda.time.format.DateTimeParserBucket(38326328L, chronology10, locale68, (java.lang.Integer) 317);
        org.joda.time.LocalDateTime localDateTime76 = new org.joda.time.LocalDateTime((-686465279992800000L), chronology10);
        org.joda.time.Chronology chronology78 = null;
        org.joda.time.LocalDateTime localDateTime79 = new org.joda.time.LocalDateTime((long) (-1), chronology78);
        org.joda.time.LocalDateTime localDateTime81 = localDateTime79.minusSeconds((int) (byte) 100);
        int int82 = localDateTime81.getDayOfWeek();
        org.joda.time.LocalDateTime.Property property83 = localDateTime81.era();
        java.lang.String str84 = property83.getAsText();
        org.joda.time.LocalDateTime localDateTime85 = property83.roundHalfEvenCopy();
        java.lang.String str86 = property83.getAsShortText();
        org.joda.time.LocalDateTime localDateTime87 = property83.roundFloorCopy();
        org.joda.time.LocalDateTime.Property property88 = localDateTime87.hourOfDay();
        org.joda.time.LocalDateTime.Property property89 = localDateTime87.year();
        org.joda.time.LocalDateTime localDateTime91 = localDateTime87.minusSeconds(82860003);
        int[] intArray93 = chronology10.get((org.joda.time.ReadablePartial) localDateTime87, (long) (-6400));
        org.joda.time.LocalDateTime.Property property94 = localDateTime87.yearOfCentury();
        org.junit.Assert.assertNotNull(durationFieldType2);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(dateTimeField12);
        org.junit.Assert.assertNotNull(dateTimeField13);
        org.junit.Assert.assertNotNull(durationField14);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertNotNull(dateTimeZone22);
        org.junit.Assert.assertNotNull(timeZone23);
// flaky:         org.junit.Assert.assertEquals(timeZone23.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime24);
        org.junit.Assert.assertNotNull(chronology25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField28);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField33);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertNotNull(dateTimeZone38);
        org.junit.Assert.assertNotNull(timeZone39);
// flaky:         org.junit.Assert.assertEquals(timeZone39.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(chronology41);
        org.junit.Assert.assertNotNull(durationField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(property47);
        org.junit.Assert.assertNotNull(localDateTime49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "0" + "'", str51, "0");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(property58);
        org.junit.Assert.assertNull(durationField59);
        org.junit.Assert.assertNotNull(interval60);
// flaky:         org.junit.Assert.assertTrue("'" + long61 + "' != '" + 2L + "'", long61 == 2L);
        org.junit.Assert.assertEquals(locale63.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 3 + "'", int64 == 3);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertEquals(locale68.toString(), "365");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "365" + "'", str69, "365");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "0" + "'", str71, "0");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(localDateTime81);
        org.junit.Assert.assertTrue("'" + int82 + "' != '" + 3 + "'", int82 == 3);
        org.junit.Assert.assertNotNull(property83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "AD" + "'", str84, "AD");
        org.junit.Assert.assertNotNull(localDateTime85);
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "AD" + "'", str86, "AD");
        org.junit.Assert.assertNotNull(localDateTime87);
        org.junit.Assert.assertNotNull(property88);
        org.junit.Assert.assertNotNull(property89);
        org.junit.Assert.assertNotNull(localDateTime91);
        org.junit.Assert.assertNotNull(intArray93);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(intArray93), "[1969, 12, 31, 86393603]");
        org.junit.Assert.assertNotNull(property94);
    }

    @Test
    public void test15473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15473");
        org.joda.time.DateTimeZone dateTimeZone1 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime2 = org.joda.time.MutableDateTime.now(dateTimeZone1);
        java.util.GregorianCalendar gregorianCalendar3 = mutableDateTime2.toGregorianCalendar();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        org.joda.time.MutableDateTime mutableDateTime5 = org.joda.time.MutableDateTime.now(dateTimeZone4);
        java.util.GregorianCalendar gregorianCalendar6 = mutableDateTime5.toGregorianCalendar();
        boolean boolean7 = mutableDateTime2.isAfter((org.joda.time.ReadableInstant) mutableDateTime5);
        org.joda.time.Chronology chronology8 = mutableDateTime2.getChronology();
        org.joda.time.DateTimeField dateTimeField9 = chronology8.year();
        org.joda.time.LocalDateTime localDateTime10 = new org.joda.time.LocalDateTime(3938L, chronology8);
        org.joda.time.LocalDateTime.Property property11 = localDateTime10.secondOfMinute();
        org.junit.Assert.assertNotNull(dateTimeZone1);
        org.junit.Assert.assertNotNull(mutableDateTime2);
        org.junit.Assert.assertNotNull(gregorianCalendar3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(mutableDateTime5);
        org.junit.Assert.assertNotNull(gregorianCalendar6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(chronology8);
        org.junit.Assert.assertNotNull(dateTimeField9);
        org.junit.Assert.assertNotNull(property11);
    }

    @Test
    public void test15474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15474");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime(21L);
        org.joda.time.MutableDateTime mutableDateTime3 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime3.setTime(100L);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime3.dayOfMonth();
        mutableDateTime3.addMillis((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime3.yearOfCentury();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(218);
        org.joda.time.MutableDateTime.Property property12 = mutableDateTime11.dayOfYear();
        int int13 = mutableDateTime11.getHourOfDay();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        org.joda.time.LocalDateTime.Property property17 = localDateTime16.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone18 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone19 = dateTimeZone18.toTimeZone();
        org.joda.time.DateTime dateTime20 = localDateTime16.toDateTime(dateTimeZone18);
        java.lang.String str21 = dateTime20.toString();
        org.joda.time.DateTime dateTime23 = dateTime20.plus((long) 100);
        org.joda.time.DateTime.Property property24 = dateTime20.millisOfSecond();
        org.joda.time.Chronology chronology26 = null;
        org.joda.time.DateTime dateTime27 = new org.joda.time.DateTime((long) (short) 1, chronology26);
        org.joda.time.DateTime dateTime30 = dateTime27.withDurationAdded((long) (byte) 0, 292278993);
        int int31 = dateTime20.compareTo((org.joda.time.ReadableInstant) dateTime30);
        org.joda.time.DateTime.Property property32 = dateTime20.monthOfYear();
        org.joda.time.DateTimeFieldType dateTimeFieldType33 = org.joda.time.DateTimeFieldType.minuteOfHour();
        org.joda.time.DurationFieldType durationFieldType34 = dateTimeFieldType33.getRangeDurationType();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (-1), chronology36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone39 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone40 = dateTimeZone39.toTimeZone();
        org.joda.time.DateTime dateTime41 = localDateTime37.toDateTime(dateTimeZone39);
        org.joda.time.Chronology chronology42 = dateTime41.getChronology();
        org.joda.time.DateTimeField dateTimeField43 = chronology42.secondOfDay();
        org.joda.time.DurationField durationField44 = durationFieldType34.getField(chronology42);
        java.lang.String str45 = durationFieldType34.getName();
        org.joda.time.DateTime dateTime47 = dateTime20.withFieldAdded(durationFieldType34, 52);
        org.joda.time.DateTime dateTime49 = dateTime47.plusSeconds(3);
        boolean boolean50 = mutableDateTime11.isBefore((org.joda.time.ReadableInstant) dateTime47);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime11);
        mutableDateTime1.add(15787224L);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(property17);
        org.junit.Assert.assertNotNull(dateTimeZone18);
        org.junit.Assert.assertNotNull(timeZone19);
// flaky:         org.junit.Assert.assertEquals(timeZone19.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime20);
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str21, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime23);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + (-1) + "'", int31 == (-1));
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(dateTimeFieldType33);
        org.junit.Assert.assertNotNull(durationFieldType34);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(dateTimeZone39);
        org.junit.Assert.assertNotNull(timeZone40);
// flaky:         org.junit.Assert.assertEquals(timeZone40.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime41);
        org.junit.Assert.assertNotNull(chronology42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "hours" + "'", str45, "hours");
        org.junit.Assert.assertNotNull(dateTime47);
        org.junit.Assert.assertNotNull(dateTime49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
    }

    @Test
    public void test15475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15475");
        org.joda.time.tz.NameProvider nameProvider0 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale2 = new java.util.Locale("hi!");
        java.lang.String str3 = locale2.getScript();
        boolean boolean4 = locale2.hasExtensions();
        java.lang.String str7 = nameProvider0.getShortName(locale2, "minuteOfHour", "23:00:00.000");
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale8.toLanguageTag();
        java.lang.String str12 = nameProvider0.getShortName(locale8, "", "AD");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder15 = builder14.clearExtensions();
        java.util.Locale locale16 = builder15.build();
        java.lang.String str19 = nameProvider0.getName(locale16, "DurationField[years]", "0009-10-04");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.joda.time.Chronology chronology24 = null;
        org.joda.time.LocalDateTime localDateTime25 = new org.joda.time.LocalDateTime((long) (-1), chronology24);
        org.joda.time.LocalDateTime.Property property26 = localDateTime25.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone27 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone28 = dateTimeZone27.toTimeZone();
        org.joda.time.DateTime dateTime29 = localDateTime25.toDateTime(dateTimeZone27);
        org.joda.time.Chronology chronology30 = dateTime29.getChronology();
        org.joda.time.DateTimeField dateTimeField31 = chronology30.secondOfDay();
        org.joda.time.DurationField durationField32 = chronology30.minutes();
        org.joda.time.DateTimeField dateTimeField33 = chronology30.weekyearOfCentury();
        java.lang.String str34 = chronology30.toString();
        org.joda.time.DateTimeField dateTimeField35 = chronology30.secondOfDay();
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (-1), chronology37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime42 = localDateTime38.toDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.DurationField durationField44 = chronology43.hours();
        org.joda.time.DateTimeField dateTimeField45 = chronology43.secondOfMinute();
        org.joda.time.Chronology chronology47 = null;
        org.joda.time.LocalDateTime localDateTime48 = new org.joda.time.LocalDateTime((long) (-1), chronology47);
        org.joda.time.LocalDateTime.Property property49 = localDateTime48.weekyear();
        org.joda.time.LocalDateTime localDateTime51 = localDateTime48.minusHours((-1));
        java.util.Locale locale52 = java.util.Locale.JAPANESE;
        java.lang.String str53 = dateTimeField45.getAsText((org.joda.time.ReadablePartial) localDateTime48, locale52);
        org.joda.time.Chronology chronology55 = null;
        org.joda.time.LocalDateTime localDateTime56 = new org.joda.time.LocalDateTime((long) (-1), chronology55);
        org.joda.time.LocalDateTime.Property property57 = localDateTime56.dayOfYear();
        org.joda.time.DurationField durationField58 = property57.getLeapDurationField();
        org.joda.time.Interval interval59 = property57.toInterval();
        long long60 = property57.remainder();
        java.util.Locale locale62 = new java.util.Locale("hi!");
        int int63 = property57.getMaximumShortTextLength(locale62);
        java.lang.String str65 = locale62.getUnicodeLocaleType("AD");
        java.lang.String str66 = locale52.getDisplayVariant(locale62);
        int int67 = dateTimeField35.getMaximumShortTextLength(locale52);
        java.lang.String str68 = locale52.getCountry();
        boolean boolean69 = locale52.hasExtensions();
        java.lang.String str72 = nameProvider0.getName(locale52, "0070-01-01", "English");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider0);
        org.junit.Assert.assertNotNull(nameProvider0);
        org.junit.Assert.assertEquals(locale2.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zh-TW" + "'", str9, "zh-TW");
        org.junit.Assert.assertNull(str12);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(property26);
        org.junit.Assert.assertNotNull(dateTimeZone27);
        org.junit.Assert.assertNotNull(timeZone28);
// flaky:         org.junit.Assert.assertEquals(timeZone28.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime29);
        org.junit.Assert.assertNotNull(chronology30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(durationField32);
        org.junit.Assert.assertNotNull(dateTimeField33);
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ISOChronology[+00:00:00.003]" + "'", str34, "ISOChronology[+00:00:00.003]");
        org.junit.Assert.assertNotNull(dateTimeField35);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(durationField44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(localDateTime51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "0" + "'", str53, "0");
        org.junit.Assert.assertNotNull(property57);
        org.junit.Assert.assertNull(durationField58);
        org.junit.Assert.assertNotNull(interval59);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + 2L + "'", long60 == 2L);
        org.junit.Assert.assertEquals(locale62.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int63 + "' != '" + 3 + "'", int63 == 3);
        org.junit.Assert.assertNull(str65);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 5 + "'", int67 == 5);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNull(str72);
    }

    @Test
    public void test15476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15476");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.minusSeconds(0);
        org.joda.time.ReadablePeriod readablePeriod12 = null;
        org.joda.time.DateTime dateTime13 = dateTime9.minus(readablePeriod12);
        org.joda.time.DateTime dateTime15 = dateTime13.withYearOfCentury(25);
        org.joda.time.DateTime.Property property16 = dateTime15.secondOfMinute();
        int int17 = dateTime15.getSecondOfMinute();
        org.joda.time.DateTime dateTime19 = dateTime15.minusDays(56016);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(property16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNotNull(dateTime19);
    }

    @Test
    public void test15477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15477");
        org.joda.time.format.DateTimePrinter dateTimePrinter1 = null;
        org.joda.time.format.DateTimeParser dateTimeParser2 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter3 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter1, dateTimeParser2);
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        org.joda.time.Chronology chronology11 = dateTime10.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter12 = dateTimeFormatter3.withChronology(chronology11);
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        boolean boolean18 = dateTimeZone13.isLocalDateTimeGap(localDateTime17);
        org.joda.time.Chronology chronology20 = null;
        org.joda.time.LocalDateTime localDateTime21 = new org.joda.time.LocalDateTime((long) (-1), chronology20);
        org.joda.time.LocalDateTime.Property property22 = localDateTime21.weekyear();
        boolean boolean23 = dateTimeZone13.isLocalDateTimeGap(localDateTime21);
        long long25 = dateTimeZone13.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter26 = dateTimeFormatter3.withZone(dateTimeZone13);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter28 = dateTimeFormatter26.withPivotYear(2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = dateTimeFormatter26.withPivotYear((int) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDate localDate31 = org.joda.time.LocalDate.parse("1922-06-05T00:00:00.002", dateTimeFormatter26);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
        org.junit.Assert.assertNotNull(chronology11);
        org.junit.Assert.assertNotNull(dateTimeFormatter12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long25 + "' != '" + 3L + "'", long25 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter26);
        org.junit.Assert.assertNotNull(dateTimeFormatter28);
        org.junit.Assert.assertNotNull(dateTimeFormatter30);
    }

    @Test
    public void test15478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15478");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        int int4 = localTime1.getMinuteOfHour();
        org.joda.time.LocalTime.Property property5 = localTime1.hourOfDay();
        org.joda.time.LocalTime localTime6 = property5.withMaximumValue();
        java.lang.String str7 = localTime6.toString();
        org.joda.time.LocalTime localTime9 = localTime6.minusMillis(0);
        org.joda.time.LocalTime.Property property10 = localTime9.minuteOfHour();
        org.joda.time.LocalTime localTime12 = localTime9.withMinuteOfHour((int) (byte) 1);
        org.joda.time.LocalTime localTime14 = localTime12.withMillisOfSecond(16);
        org.joda.time.LocalTime.Property property15 = localTime14.millisOfSecond();
        org.joda.time.LocalTime localTime16 = property15.getLocalTime();
        org.joda.time.Chronology chronology18 = null;
        org.joda.time.LocalDateTime localDateTime19 = new org.joda.time.LocalDateTime((long) (-1), chronology18);
        org.joda.time.LocalDateTime.Property property20 = localDateTime19.weekyear();
        org.joda.time.LocalDateTime localDateTime22 = localDateTime19.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime24 = localDateTime19.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod25 = null;
        org.joda.time.LocalDateTime localDateTime26 = localDateTime19.minus(readablePeriod25);
        int int27 = localDateTime19.getWeekOfWeekyear();
        org.joda.time.LocalDateTime localDateTime29 = localDateTime19.withYear((int) ' ');
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (-1), chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.minuteOfHour();
        int int34 = localDateTime32.size();
        org.joda.time.Chronology chronology36 = null;
        org.joda.time.LocalDateTime localDateTime37 = new org.joda.time.LocalDateTime((long) (-1), chronology36);
        org.joda.time.LocalDateTime.Property property38 = localDateTime37.weekyear();
        org.joda.time.LocalDateTime localDateTime40 = localDateTime37.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime42 = localDateTime37.plusWeeks((int) (short) 1);
        org.joda.time.LocalDateTime.Property property43 = localDateTime37.weekOfWeekyear();
        org.joda.time.DateTimeFieldType dateTimeFieldType44 = org.joda.time.DateTimeFieldType.minuteOfDay();
        boolean boolean45 = localDateTime37.isSupported(dateTimeFieldType44);
        boolean boolean46 = localDateTime32.isSupported(dateTimeFieldType44);
        java.lang.String str47 = dateTimeFieldType44.toString();
        java.lang.String str48 = dateTimeFieldType44.toString();
        int int49 = localDateTime19.get(dateTimeFieldType44);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalTime localTime51 = localTime16.withField(dateTimeFieldType44, 116700000);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 116700000 for minuteOfDay must be in the range [0,1439]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(localTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "23:00:00.003" + "'", str7, "23:00:00.003");
        org.junit.Assert.assertNotNull(localTime9);
        org.junit.Assert.assertNotNull(property10);
        org.junit.Assert.assertNotNull(localTime12);
        org.junit.Assert.assertNotNull(localTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(localTime16);
        org.junit.Assert.assertNotNull(property20);
        org.junit.Assert.assertNotNull(localDateTime22);
        org.junit.Assert.assertNotNull(localDateTime24);
        org.junit.Assert.assertNotNull(localDateTime26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(localDateTime29);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 4 + "'", int34 == 4);
        org.junit.Assert.assertNotNull(property38);
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertNotNull(localDateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(dateTimeFieldType44);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "minuteOfDay" + "'", str47, "minuteOfDay");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "minuteOfDay" + "'", str48, "minuteOfDay");
// flaky:         org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
    }

    @Test
    public void test15479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15479");
        org.joda.time.Chronology chronology3 = null;
        org.joda.time.LocalDateTime localDateTime4 = new org.joda.time.LocalDateTime((long) (-1), chronology3);
        org.joda.time.LocalDateTime.Property property5 = localDateTime4.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone6 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone7 = dateTimeZone6.toTimeZone();
        org.joda.time.DateTime dateTime8 = localDateTime4.toDateTime(dateTimeZone6);
        org.joda.time.Chronology chronology9 = dateTime8.getChronology();
        org.joda.time.DateTimeField dateTimeField10 = chronology9.secondOfDay();
        org.joda.time.DurationField durationField11 = chronology9.minutes();
        org.joda.time.DurationField durationField12 = chronology9.minutes();
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((long) 292278993, chronology9);
        org.joda.time.LocalDateTime localDateTime14 = new org.joda.time.LocalDateTime((long) 616, chronology9);
        org.joda.time.DateTimeField dateTimeField15 = chronology9.secondOfDay();
        long long19 = chronology9.add(31243724L, (-1388620799901L), 747115);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(dateTimeZone6);
        org.junit.Assert.assertNotNull(timeZone7);
// flaky:         org.junit.Assert.assertEquals(timeZone7.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime8);
        org.junit.Assert.assertNotNull(chronology9);
        org.junit.Assert.assertNotNull(dateTimeField10);
        org.junit.Assert.assertNotNull(durationField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(dateTimeField15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1037459428886791891L) + "'", long19 == (-1037459428886791891L));
    }

    @Test
    public void test15480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15480");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        org.joda.time.Chronology chronology7 = dateTime6.getChronology();
        org.joda.time.DateTimeField dateTimeField8 = chronology7.secondOfDay();
        org.joda.time.DurationField durationField9 = chronology7.minutes();
        org.joda.time.DurationField durationField10 = chronology7.minutes();
        org.joda.time.MutableDateTime mutableDateTime11 = new org.joda.time.MutableDateTime(chronology7);
        org.joda.time.MutableDateTime mutableDateTime13 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime13.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration16 = null;
        mutableDateTime13.add(readableDuration16, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType19 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int20 = mutableDateTime13.get(dateTimeFieldType19);
        java.lang.String str21 = dateTimeFieldType19.getName();
        org.joda.time.MutableDateTime.Property property22 = mutableDateTime11.property(dateTimeFieldType19);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.forOffsetMillis(3);
        org.joda.time.MutableDateTime mutableDateTime25 = new org.joda.time.MutableDateTime(dateTimeZone24);
        java.util.Locale locale27 = java.util.Locale.ENGLISH;
        java.lang.String str28 = locale27.getDisplayScript();
        java.lang.String str29 = dateTimeZone24.getName((long) 5, locale27);
        org.joda.time.DateTime dateTime30 = new org.joda.time.DateTime(dateTimeZone24);
        mutableDateTime11.setZone(dateTimeZone24);
        int int32 = mutableDateTime11.getSecondOfMinute();
        mutableDateTime11.setMillis((long) 366);
        org.joda.time.MutableDateTime.Property property35 = mutableDateTime11.secondOfDay();
        org.joda.time.MutableDateTime mutableDateTime36 = property35.roundHalfFloor();
        org.joda.time.MutableDateTime mutableDateTime37 = property35.roundHalfCeiling();
        int int38 = property35.get();
        org.joda.time.MutableDateTime mutableDateTime40 = property35.add(87647);
        org.joda.time.MutableDateTime mutableDateTime41 = mutableDateTime40.toMutableDateTime();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
        org.junit.Assert.assertNotNull(chronology7);
        org.junit.Assert.assertNotNull(dateTimeField8);
        org.junit.Assert.assertNotNull(durationField9);
        org.junit.Assert.assertNotNull(durationField10);
        org.junit.Assert.assertNotNull(dateTimeFieldType19);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "minuteOfHour" + "'", str21, "minuteOfHour");
        org.junit.Assert.assertNotNull(property22);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "+00:00:00.003" + "'", str29, "+00:00:00.003");
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + 49 + "'", int32 == 49);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(mutableDateTime36);
        org.junit.Assert.assertNotNull(mutableDateTime37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 0 + "'", int38 == 0);
        org.junit.Assert.assertNotNull(mutableDateTime40);
        org.junit.Assert.assertNotNull(mutableDateTime41);
    }

    @Test
    public void test15481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15481");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder3 = dateTimeFormatterBuilder0.appendYear(92, 218);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder5 = dateTimeFormatterBuilder3.appendDayOfWeek(5599585);
        org.joda.time.format.DateTimePrinter dateTimePrinter6 = dateTimeFormatterBuilder5.toPrinter();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder8 = dateTimeFormatterBuilder5.appendSecondOfMinute(9);
        org.joda.time.DateTimeFieldType dateTimeFieldType9 = org.joda.time.DateTimeFieldType.dayOfWeek();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder11 = dateTimeFormatterBuilder8.appendFixedDecimal(dateTimeFieldType9, (int) ' ');
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder13 = dateTimeFormatterBuilder11.appendSecondOfDay(12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder11.appendYearOfCentury(199070, (-10));
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder17 = dateTimeFormatterBuilder11.appendTimeZoneName();
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder3);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder5);
        org.junit.Assert.assertNotNull(dateTimePrinter6);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder8);
        org.junit.Assert.assertNotNull(dateTimeFieldType9);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder11);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder13);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder17);
    }

    @Test
    public void test15482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15482");
        org.joda.time.LocalDate localDate3 = new org.joda.time.LocalDate(9, (int) (short) 10, 4);
        java.lang.String str4 = localDate3.toString();
        org.joda.time.DateTime dateTime5 = localDate3.toDateTimeAtCurrentTime();
        org.joda.time.ReadablePeriod readablePeriod6 = null;
        org.joda.time.LocalDate localDate7 = localDate3.minus(readablePeriod6);
        org.joda.time.LocalDate localDate9 = localDate7.minusYears(287);
        org.joda.time.ReadablePeriod readablePeriod10 = null;
        org.joda.time.LocalDate localDate11 = localDate7.minus(readablePeriod10);
        int int12 = localDate11.getEra();
        org.joda.time.Interval interval13 = localDate11.toInterval();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "0009-10-04" + "'", str4, "0009-10-04");
        org.junit.Assert.assertNotNull(dateTime5);
        org.junit.Assert.assertNotNull(localDate7);
        org.junit.Assert.assertNotNull(localDate9);
        org.junit.Assert.assertNotNull(localDate11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(interval13);
    }

    @Test
    public void test15483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15483");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime1.addYears((int) 'x');
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.minuteOfDay();
        boolean boolean5 = property4.isLeap();
        org.joda.time.MutableDateTime mutableDateTime6 = property4.roundHalfEven();
        org.joda.time.MutableDateTime mutableDateTime7 = property4.roundHalfCeiling();
        boolean boolean9 = mutableDateTime7.isEqual((long) 243);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(mutableDateTime6);
        org.junit.Assert.assertNotNull(mutableDateTime7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test15484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15484");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DurationField durationField4 = property3.getLeapDurationField();
        org.joda.time.Interval interval5 = property3.toInterval();
        long long6 = property3.remainder();
        java.util.Locale locale8 = new java.util.Locale("hi!");
        int int9 = property3.getMaximumShortTextLength(locale8);
        java.lang.String str10 = property3.toString();
        org.joda.time.LocalDateTime localDateTime12 = property3.setCopy(19);
        org.joda.time.LocalDateTime localDateTime13 = property3.withMaximumValue();
        org.joda.time.LocalDateTime localDateTime14 = property3.roundHalfEvenCopy();
        org.joda.time.LocalDateTime localDateTime15 = property3.roundHalfFloorCopy();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime17 = localDateTime15.withDayOfWeek(2016);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 2016 for dayOfWeek must be in the range [1,7]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNull(durationField4);
        org.junit.Assert.assertNotNull(interval5);
// flaky:         org.junit.Assert.assertTrue("'" + long6 + "' != '" + 2L + "'", long6 == 2L);
        org.junit.Assert.assertEquals(locale8.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 3 + "'", int9 == 3);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Property[dayOfYear]" + "'", str10, "Property[dayOfYear]");
        org.junit.Assert.assertNotNull(localDateTime12);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime14);
        org.junit.Assert.assertNotNull(localDateTime15);
    }

    @Test
    public void test15485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15485");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        int int8 = localDateTime2.getWeekyear();
        int int9 = localDateTime2.getMinuteOfHour();
        int int10 = localDateTime2.getMonthOfYear();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1970 + "'", int8 == 1970);
// flaky:         org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test15486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15486");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property2 = mutableDateTime1.secondOfMinute();
        org.joda.time.MutableDateTime mutableDateTime4 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        org.joda.time.MutableDateTime.Property property5 = mutableDateTime4.secondOfMinute();
        mutableDateTime1.setTime((org.joda.time.ReadableInstant) mutableDateTime4);
        mutableDateTime1.setYear(2922750);
        org.joda.time.MutableDateTime.Property property9 = mutableDateTime1.era();
        org.joda.time.MutableDateTime mutableDateTime11 = property9.addWrapField(24);
        org.joda.time.format.DateTimePrinter dateTimePrinter13 = null;
        org.joda.time.format.DateTimeParser dateTimeParser14 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter15 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter13, dateTimeParser14);
        org.joda.time.Chronology chronology17 = null;
        org.joda.time.LocalDateTime localDateTime18 = new org.joda.time.LocalDateTime((long) (-1), chronology17);
        org.joda.time.LocalDateTime.Property property19 = localDateTime18.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone20 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone21 = dateTimeZone20.toTimeZone();
        org.joda.time.DateTime dateTime22 = localDateTime18.toDateTime(dateTimeZone20);
        org.joda.time.Chronology chronology23 = dateTime22.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter24 = dateTimeFormatter15.withChronology(chronology23);
        org.joda.time.DateTimeField dateTimeField25 = chronology23.monthOfYear();
        org.joda.time.DateTimeField dateTimeField26 = chronology23.clockhourOfHalfday();
        org.joda.time.DurationField durationField27 = chronology23.days();
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) 1970, chronology23);
        org.joda.time.DurationField durationField29 = chronology23.hours();
        org.joda.time.DateTimeField dateTimeField30 = chronology23.yearOfEra();
        int int31 = mutableDateTime11.get(dateTimeField30);
        org.joda.time.MutableDateTime.Property property32 = mutableDateTime11.weekOfWeekyear();
        org.joda.time.format.DateTimePrinter dateTimePrinter33 = null;
        org.joda.time.format.DateTimeParser dateTimeParser34 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter35 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter33, dateTimeParser34);
        org.joda.time.Chronology chronology37 = null;
        org.joda.time.LocalDateTime localDateTime38 = new org.joda.time.LocalDateTime((long) (-1), chronology37);
        org.joda.time.LocalDateTime.Property property39 = localDateTime38.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone40 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone41 = dateTimeZone40.toTimeZone();
        org.joda.time.DateTime dateTime42 = localDateTime38.toDateTime(dateTimeZone40);
        org.joda.time.Chronology chronology43 = dateTime42.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter35.withChronology(chronology43);
        org.joda.time.DateTimeField dateTimeField45 = chronology43.monthOfYear();
        org.joda.time.LocalDateTime localDateTime46 = org.joda.time.LocalDateTime.now(chronology43);
        org.joda.time.DateTimeField dateTimeField47 = chronology43.weekOfWeekyear();
        java.util.Locale locale48 = null;
        int int49 = dateTimeField47.getMaximumTextLength(locale48);
        int int51 = dateTimeField47.getMinimumValue((long) 1975);
        long long54 = dateTimeField47.addWrapField((long) (byte) 1, 18);
        mutableDateTime11.setRounding(dateTimeField47);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime11.centuryOfEra();
        org.junit.Assert.assertNotNull(property2);
        org.junit.Assert.assertNotNull(property5);
        org.junit.Assert.assertNotNull(property9);
        org.junit.Assert.assertNotNull(mutableDateTime11);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(dateTimeZone20);
        org.junit.Assert.assertNotNull(timeZone21);
// flaky:         org.junit.Assert.assertEquals(timeZone21.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime22);
        org.junit.Assert.assertNotNull(chronology23);
        org.junit.Assert.assertNotNull(dateTimeFormatter24);
        org.junit.Assert.assertNotNull(dateTimeField25);
        org.junit.Assert.assertNotNull(dateTimeField26);
        org.junit.Assert.assertNotNull(durationField27);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 2922750 + "'", int31 == 2922750);
        org.junit.Assert.assertNotNull(property32);
        org.junit.Assert.assertNotNull(property39);
        org.junit.Assert.assertNotNull(dateTimeZone40);
        org.junit.Assert.assertNotNull(timeZone41);
// flaky:         org.junit.Assert.assertEquals(timeZone41.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(chronology43);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeField45);
        org.junit.Assert.assertNotNull(localDateTime46);
        org.junit.Assert.assertNotNull(dateTimeField47);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 2 + "'", int49 == 2);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 10886400001L + "'", long54 == 10886400001L);
        org.junit.Assert.assertNotNull(property56);
    }

    @Test
    public void test15487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15487");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDate localDate2 = new org.joda.time.LocalDate((long) 3, chronology1);
        org.joda.time.DateTimeFieldType dateTimeFieldType3 = org.joda.time.DateTimeFieldType.monthOfYear();
        org.joda.time.DurationFieldType durationFieldType4 = dateTimeFieldType3.getDurationType();
        org.joda.time.DurationFieldType durationFieldType5 = dateTimeFieldType3.getRangeDurationType();
        boolean boolean6 = localDate2.isSupported(durationFieldType5);
        org.joda.time.LocalDate.Property property7 = localDate2.centuryOfEra();
        org.joda.time.LocalDate localDate8 = property7.roundHalfCeilingCopy();
        org.joda.time.LocalDate localDate10 = property7.addToCopy((int) ' ');
        int int11 = localDate10.size();
        org.joda.time.DateTime dateTime12 = localDate10.toDateTimeAtMidnight();
        org.joda.time.DateTime dateTime14 = dateTime12.withMillis(1587743L);
        boolean boolean15 = dateTime14.isBeforeNow();
        org.junit.Assert.assertNotNull(dateTimeFieldType3);
        org.junit.Assert.assertNotNull(durationFieldType4);
        org.junit.Assert.assertNotNull(durationFieldType5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localDate8);
        org.junit.Assert.assertNotNull(localDate10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 3 + "'", int11 == 3);
        org.junit.Assert.assertNotNull(dateTime12);
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test15488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15488");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear(23);
        int int14 = localDateTime11.getCenturyOfEra();
        int int16 = localDateTime11.getValue((int) (byte) 1);
        org.joda.time.LocalDateTime localDateTime18 = localDateTime11.plusMinutes(99);
        org.joda.time.LocalDateTime localDateTime20 = localDateTime18.minusSeconds((int) (byte) -1);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = localDateTime23.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DurationField durationField29 = chronology28.hours();
        org.joda.time.DateTimeField dateTimeField30 = chronology28.secondOfMinute();
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (-1), chronology32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.weekyear();
        org.joda.time.LocalDateTime localDateTime36 = localDateTime33.minusHours((-1));
        java.util.Locale locale37 = java.util.Locale.JAPANESE;
        java.lang.String str38 = dateTimeField30.getAsText((org.joda.time.ReadablePartial) localDateTime33, locale37);
        org.joda.time.LocalDateTime localDateTime40 = localDateTime33.minusDays(86399999);
        boolean boolean41 = localDateTime20.isEqual((org.joda.time.ReadablePartial) localDateTime40);
        org.joda.time.LocalDateTime.Property property42 = localDateTime20.dayOfYear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Date date43 = localDateTime20.toDate();
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value -998 for millisOfSecond must be in the range [0,999]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 19 + "'", int14 == 19);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(localDateTime18);
        org.junit.Assert.assertNotNull(localDateTime20);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(durationField29);
        org.junit.Assert.assertNotNull(dateTimeField30);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(localDateTime36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "0" + "'", str38, "0");
        org.junit.Assert.assertNotNull(localDateTime40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(property42);
    }

    @Test
    public void test15489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15489");
        org.joda.time.format.DateTimePrinter dateTimePrinter0 = null;
        org.joda.time.format.DateTimeParser dateTimeParser1 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter2 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter0, dateTimeParser1);
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter11 = dateTimeFormatter2.withChronology(chronology10);
        org.joda.time.DateTimeZone dateTimeZone12 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone13 = dateTimeZone12.toTimeZone();
        org.joda.time.Chronology chronology15 = null;
        org.joda.time.LocalDateTime localDateTime16 = new org.joda.time.LocalDateTime((long) (-1), chronology15);
        boolean boolean17 = dateTimeZone12.isLocalDateTimeGap(localDateTime16);
        org.joda.time.Chronology chronology19 = null;
        org.joda.time.LocalDateTime localDateTime20 = new org.joda.time.LocalDateTime((long) (-1), chronology19);
        org.joda.time.LocalDateTime.Property property21 = localDateTime20.weekyear();
        boolean boolean22 = dateTimeZone12.isLocalDateTimeGap(localDateTime20);
        long long24 = dateTimeZone12.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter25 = dateTimeFormatter2.withZone(dateTimeZone12);
        java.util.Locale locale26 = dateTimeFormatter2.getLocale();
        boolean boolean27 = dateTimeFormatter2.isOffsetParsed();
        org.joda.time.format.DateTimePrinter dateTimePrinter28 = null;
        org.joda.time.format.DateTimeParser dateTimeParser29 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter30 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter28, dateTimeParser29);
        org.joda.time.Chronology chronology32 = null;
        org.joda.time.LocalDateTime localDateTime33 = new org.joda.time.LocalDateTime((long) (-1), chronology32);
        org.joda.time.LocalDateTime.Property property34 = localDateTime33.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone35 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone36 = dateTimeZone35.toTimeZone();
        org.joda.time.DateTime dateTime37 = localDateTime33.toDateTime(dateTimeZone35);
        org.joda.time.Chronology chronology38 = dateTime37.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter30.withChronology(chronology38);
        org.joda.time.DateTimeField dateTimeField40 = chronology38.monthOfYear();
        org.joda.time.LocalDateTime localDateTime41 = org.joda.time.LocalDateTime.now(chronology38);
        org.joda.time.DateTimeField dateTimeField42 = chronology38.centuryOfEra();
        org.joda.time.DateTimeField dateTimeField43 = chronology38.millisOfSecond();
        long long47 = chronology38.add(99L, (long) 366, 92);
        org.joda.time.DateTimeField dateTimeField48 = chronology38.hourOfDay();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter49 = dateTimeFormatter2.withChronology(chronology38);
        org.joda.time.MutableDateTime mutableDateTime51 = org.joda.time.MutableDateTime.parse("23");
        java.util.Locale.Category category52 = java.util.Locale.Category.FORMAT;
        org.joda.time.Chronology chronology54 = null;
        org.joda.time.LocalDateTime localDateTime55 = new org.joda.time.LocalDateTime((long) (-1), chronology54);
        org.joda.time.LocalDateTime.Property property56 = localDateTime55.dayOfYear();
        org.joda.time.DurationField durationField57 = property56.getLeapDurationField();
        org.joda.time.Interval interval58 = property56.toInterval();
        long long59 = property56.remainder();
        java.util.Locale locale61 = new java.util.Locale("hi!");
        int int62 = property56.getMaximumShortTextLength(locale61);
        java.lang.String str64 = locale61.getUnicodeLocaleType("AD");
        java.util.Locale.setDefault(category52, locale61);
        java.util.Locale locale66 = java.util.Locale.getDefault(category52);
        java.util.Locale locale67 = java.util.Locale.getDefault(category52);
        java.util.Locale locale68 = java.util.Locale.getDefault(category52);
        java.util.Calendar calendar69 = mutableDateTime51.toCalendar(locale68);
        java.lang.String str70 = locale68.getDisplayScript();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter71 = dateTimeFormatter2.withLocale(locale68);
        java.io.Writer writer72 = null;
        org.joda.time.DateTimeZone dateTimeZone73 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone74 = dateTimeZone73.toTimeZone();
        org.joda.time.Chronology chronology76 = null;
        org.joda.time.LocalDateTime localDateTime77 = new org.joda.time.LocalDateTime((long) (-1), chronology76);
        boolean boolean78 = dateTimeZone73.isLocalDateTimeGap(localDateTime77);
        org.joda.time.Chronology chronology80 = null;
        org.joda.time.LocalDateTime localDateTime81 = new org.joda.time.LocalDateTime((long) (-1), chronology80);
        org.joda.time.LocalDateTime.Property property82 = localDateTime81.weekyear();
        boolean boolean83 = dateTimeZone73.isLocalDateTimeGap(localDateTime81);
        org.joda.time.LocalDateTime.Property property84 = localDateTime81.millisOfDay();
        org.joda.time.LocalDateTime localDateTime86 = localDateTime81.plusYears((int) (byte) 10);
        int int87 = localDateTime81.getMinuteOfHour();
        org.joda.time.LocalDateTime localDateTime89 = localDateTime81.minusMinutes(32);
        // The following exception was thrown during execution in test generation
        try {
            dateTimeFormatter2.printTo(writer72, (org.joda.time.ReadablePartial) localDateTime81);
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Printing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeFormatter11);
        org.junit.Assert.assertNotNull(dateTimeZone12);
        org.junit.Assert.assertNotNull(timeZone13);
// flaky:         org.junit.Assert.assertEquals(timeZone13.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(property21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3L + "'", long24 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter25);
        org.junit.Assert.assertNull(locale26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(property34);
        org.junit.Assert.assertNotNull(dateTimeZone35);
        org.junit.Assert.assertNotNull(timeZone36);
// flaky:         org.junit.Assert.assertEquals(timeZone36.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime37);
        org.junit.Assert.assertNotNull(chronology38);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeField40);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(dateTimeField42);
        org.junit.Assert.assertNotNull(dateTimeField43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 33771L + "'", long47 == 33771L);
        org.junit.Assert.assertNotNull(dateTimeField48);
        org.junit.Assert.assertNotNull(dateTimeFormatter49);
        org.junit.Assert.assertNotNull(mutableDateTime51);
        org.junit.Assert.assertTrue("'" + category52 + "' != '" + java.util.Locale.Category.FORMAT + "'", category52.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertNull(durationField57);
        org.junit.Assert.assertNotNull(interval58);
// flaky:         org.junit.Assert.assertTrue("'" + long59 + "' != '" + 2L + "'", long59 == 2L);
        org.junit.Assert.assertEquals(locale61.toString(), "hi!");
        org.junit.Assert.assertTrue("'" + int62 + "' != '" + 3 + "'", int62 == 3);
        org.junit.Assert.assertNull(str64);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "hi!");
        org.junit.Assert.assertNotNull(calendar69);
// flaky:         org.junit.Assert.assertEquals(calendar69.toString(), "java.util.GregorianCalendar[time=-61441372800003,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=23,MONTH=0,WEEK_OF_YEAR=2,WEEK_OF_MONTH=2,DAY_OF_MONTH=3,DAY_OF_YEAR=3,DAY_OF_WEEK=1,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=0,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(dateTimeFormatter71);
        org.junit.Assert.assertNotNull(dateTimeZone73);
        org.junit.Assert.assertNotNull(timeZone74);
// flaky:         org.junit.Assert.assertEquals(timeZone74.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean78 + "' != '" + false + "'", boolean78 == false);
        org.junit.Assert.assertNotNull(property82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertNotNull(property84);
        org.junit.Assert.assertNotNull(localDateTime86);
// flaky:         org.junit.Assert.assertTrue("'" + int87 + "' != '" + 0 + "'", int87 == 0);
        org.junit.Assert.assertNotNull(localDateTime89);
    }

    @Test
    public void test15490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15490");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setTime(100L);
        int int4 = mutableDateTime1.getDayOfYear();
        boolean boolean5 = mutableDateTime1.isBeforeNow();
        mutableDateTime1.addMonths(807);
        org.joda.time.DurationFieldType durationFieldType8 = org.joda.time.DurationFieldType.weeks();
        org.joda.time.Chronology chronology10 = null;
        org.joda.time.LocalDateTime localDateTime11 = new org.joda.time.LocalDateTime((long) (-1), chronology10);
        org.joda.time.LocalDateTime.Property property12 = localDateTime11.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone13 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone14 = dateTimeZone13.toTimeZone();
        org.joda.time.DateTime dateTime15 = localDateTime11.toDateTime(dateTimeZone13);
        org.joda.time.Chronology chronology16 = dateTime15.getChronology();
        org.joda.time.DurationField durationField17 = durationFieldType8.getField(chronology16);
        org.joda.time.DateTimeField dateTimeField18 = chronology16.clockhourOfDay();
        org.joda.time.DurationField durationField19 = chronology16.hours();
        org.joda.time.DateTimeField dateTimeField20 = chronology16.secondOfMinute();
        org.joda.time.DurationField durationField21 = chronology16.minutes();
        org.joda.time.MutableDateTime mutableDateTime22 = new org.joda.time.MutableDateTime((java.lang.Object) mutableDateTime1, chronology16);
        org.joda.time.DateTimeField dateTimeField23 = chronology16.weekyearOfCentury();
        java.lang.String str24 = dateTimeField23.toString();
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(durationFieldType8);
        org.junit.Assert.assertNotNull(property12);
        org.junit.Assert.assertNotNull(dateTimeZone13);
        org.junit.Assert.assertNotNull(timeZone14);
// flaky:         org.junit.Assert.assertEquals(timeZone14.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime15);
        org.junit.Assert.assertNotNull(chronology16);
        org.junit.Assert.assertNotNull(durationField17);
        org.junit.Assert.assertNotNull(dateTimeField18);
        org.junit.Assert.assertNotNull(durationField19);
        org.junit.Assert.assertNotNull(dateTimeField20);
        org.junit.Assert.assertNotNull(durationField21);
        org.junit.Assert.assertNotNull(dateTimeField23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "DateTimeField[weekyearOfCentury]" + "'", str24, "DateTimeField[weekyearOfCentury]");
    }

    @Test
    public void test15491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15491");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime.Property property6 = localDateTime2.year();
        org.joda.time.LocalDateTime localDateTime7 = property6.roundHalfCeilingCopy();
        org.joda.time.LocalDateTime localDateTime9 = localDateTime7.plusMinutes(4861378);
        org.joda.time.LocalDateTime.Property property10 = localDateTime9.year();
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.LocalDateTime localDateTime12 = localDateTime9.withMinuteOfHour(487);
            org.junit.Assert.fail("Expected exception of type org.joda.time.IllegalFieldValueException; message: Value 487 for minuteOfHour must be in the range [0,59]");
        } catch (org.joda.time.IllegalFieldValueException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(property10);
    }

    @Test
    public void test15492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15492");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone4 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone5 = dateTimeZone4.toTimeZone();
        org.joda.time.DateTime dateTime6 = localDateTime2.toDateTime(dateTimeZone4);
        java.lang.String str7 = dateTime6.toString();
        org.joda.time.DateTime dateTime9 = dateTime6.plus((long) 100);
        org.joda.time.DateTime dateTime11 = dateTime9.withYear(10);
        org.joda.time.format.DateTimePrinter dateTimePrinter12 = null;
        org.joda.time.format.DateTimeParser dateTimeParser13 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter14 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter12, dateTimeParser13);
        org.joda.time.Chronology chronology16 = null;
        org.joda.time.LocalDateTime localDateTime17 = new org.joda.time.LocalDateTime((long) (-1), chronology16);
        org.joda.time.LocalDateTime.Property property18 = localDateTime17.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone19 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone20 = dateTimeZone19.toTimeZone();
        org.joda.time.DateTime dateTime21 = localDateTime17.toDateTime(dateTimeZone19);
        org.joda.time.Chronology chronology22 = dateTime21.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter23 = dateTimeFormatter14.withChronology(chronology22);
        org.joda.time.DateTimeZone dateTimeZone24 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone25 = dateTimeZone24.toTimeZone();
        org.joda.time.Chronology chronology27 = null;
        org.joda.time.LocalDateTime localDateTime28 = new org.joda.time.LocalDateTime((long) (-1), chronology27);
        boolean boolean29 = dateTimeZone24.isLocalDateTimeGap(localDateTime28);
        org.joda.time.Chronology chronology31 = null;
        org.joda.time.LocalDateTime localDateTime32 = new org.joda.time.LocalDateTime((long) (-1), chronology31);
        org.joda.time.LocalDateTime.Property property33 = localDateTime32.weekyear();
        boolean boolean34 = dateTimeZone24.isLocalDateTimeGap(localDateTime32);
        long long36 = dateTimeZone24.convertUTCToLocal(0L);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter37 = dateTimeFormatter14.withZone(dateTimeZone24);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter39 = dateTimeFormatter37.withPivotYear(2022);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter39.withPivotYear((int) (short) 10);
        org.joda.time.Chronology chronology43 = null;
        org.joda.time.LocalDateTime localDateTime44 = new org.joda.time.LocalDateTime((long) (-1), chronology43);
        org.joda.time.LocalDateTime.Property property45 = localDateTime44.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone46 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone47 = dateTimeZone46.toTimeZone();
        org.joda.time.DateTime dateTime48 = localDateTime44.toDateTime(dateTimeZone46);
        org.joda.time.Chronology chronology49 = dateTime48.getChronology();
        org.joda.time.DateTimeField dateTimeField50 = chronology49.secondOfDay();
        org.joda.time.DurationField durationField51 = chronology49.minutes();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter52 = dateTimeFormatter39.withChronology(chronology49);
        org.joda.time.DateTimeZone dateTimeZone53 = dateTimeFormatter52.getZone();
        org.joda.time.DateTime dateTime54 = dateTime9.toDateTime(dateTimeZone53);
        org.joda.time.tz.NameProvider nameProvider56 = org.joda.time.DateTimeZone.getNameProvider();
        java.util.Locale locale58 = new java.util.Locale("hi!");
        java.lang.String str59 = locale58.getScript();
        boolean boolean60 = locale58.hasExtensions();
        java.lang.String str63 = nameProvider56.getShortName(locale58, "minuteOfHour", "23:00:00.000");
        java.util.Locale locale64 = java.util.Locale.TAIWAN;
        java.lang.String str65 = locale64.toLanguageTag();
        java.lang.String str68 = nameProvider56.getShortName(locale64, "", "AD");
        org.joda.time.DateTimeZone.setNameProvider(nameProvider56);
        java.util.Locale.Builder builder70 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder71 = builder70.clearExtensions();
        java.util.Locale locale72 = builder71.build();
        java.lang.String str75 = nameProvider56.getName(locale72, "DurationField[years]", "0009-10-04");
        java.util.Locale locale77 = java.util.Locale.forLanguageTag("2022-02-22T07:25:22.845Z");
        java.lang.String str78 = locale72.getDisplayVariant(locale77);
        java.lang.String str79 = dateTimeZone53.getName((long) 26899520, locale72);
        java.lang.String str80 = locale72.getDisplayName();
        java.lang.String str81 = locale72.getISO3Country();
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(dateTimeZone4);
        org.junit.Assert.assertNotNull(timeZone5);
// flaky:         org.junit.Assert.assertEquals(timeZone5.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime6);
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str7, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(dateTime11);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(dateTimeZone19);
        org.junit.Assert.assertNotNull(timeZone20);
// flaky:         org.junit.Assert.assertEquals(timeZone20.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime21);
        org.junit.Assert.assertNotNull(chronology22);
        org.junit.Assert.assertNotNull(dateTimeFormatter23);
        org.junit.Assert.assertNotNull(dateTimeZone24);
        org.junit.Assert.assertNotNull(timeZone25);
// flaky:         org.junit.Assert.assertEquals(timeZone25.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(property33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
// flaky:         org.junit.Assert.assertTrue("'" + long36 + "' != '" + 3L + "'", long36 == 3L);
        org.junit.Assert.assertNotNull(dateTimeFormatter37);
        org.junit.Assert.assertNotNull(dateTimeFormatter39);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(property45);
        org.junit.Assert.assertNotNull(dateTimeZone46);
        org.junit.Assert.assertNotNull(timeZone47);
// flaky:         org.junit.Assert.assertEquals(timeZone47.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(chronology49);
        org.junit.Assert.assertNotNull(dateTimeField50);
        org.junit.Assert.assertNotNull(durationField51);
        org.junit.Assert.assertNotNull(dateTimeFormatter52);
        org.junit.Assert.assertNotNull(dateTimeZone53);
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(nameProvider56);
        org.junit.Assert.assertEquals(locale58.toString(), "hi!");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(str63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "zh-TW" + "'", str65, "zh-TW");
        org.junit.Assert.assertNull(str68);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "");
        org.junit.Assert.assertNull(str75);
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "+00:00:00.003" + "'", str79, "+00:00:00.003");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
    }

    @Test
    public void test15493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15493");
        org.joda.time.Chronology chronology4 = null;
        org.joda.time.LocalDateTime localDateTime5 = new org.joda.time.LocalDateTime((long) (-1), chronology4);
        org.joda.time.LocalDateTime.Property property6 = localDateTime5.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone7 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone8 = dateTimeZone7.toTimeZone();
        org.joda.time.DateTime dateTime9 = localDateTime5.toDateTime(dateTimeZone7);
        org.joda.time.Chronology chronology10 = dateTime9.getChronology();
        org.joda.time.DateTimeField dateTimeField11 = chronology10.secondOfDay();
        org.joda.time.DurationField durationField12 = chronology10.minutes();
        org.joda.time.DurationField durationField13 = chronology10.minutes();
        org.joda.time.MutableDateTime mutableDateTime14 = new org.joda.time.MutableDateTime((long) 292278993, chronology10);
        org.joda.time.LocalDateTime localDateTime15 = new org.joda.time.LocalDateTime((long) 'a', chronology10);
        org.joda.time.DurationField durationField16 = chronology10.halfdays();
        org.joda.time.MutableDateTime mutableDateTime17 = new org.joda.time.MutableDateTime(153713980800000L, chronology10);
        org.joda.time.DateTimeField dateTimeField18 = chronology10.weekyearOfCentury();
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(dateTimeZone7);
        org.junit.Assert.assertNotNull(timeZone8);
// flaky:         org.junit.Assert.assertEquals(timeZone8.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime9);
        org.junit.Assert.assertNotNull(chronology10);
        org.junit.Assert.assertNotNull(dateTimeField11);
        org.junit.Assert.assertNotNull(durationField12);
        org.junit.Assert.assertNotNull(durationField13);
        org.junit.Assert.assertNotNull(durationField16);
        org.junit.Assert.assertNotNull(dateTimeField18);
    }

    @Test
    public void test15494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15494");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendMillisOfSecond((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder0.appendHourOfHalfday(5599585);
        org.joda.time.MutableDateTime mutableDateTime6 = new org.joda.time.MutableDateTime((java.lang.Object) "1969-12-31T23:59:59.999Z");
        mutableDateTime6.addYears((int) 'x');
        org.joda.time.ReadableDuration readableDuration9 = null;
        mutableDateTime6.add(readableDuration9, (int) (short) 100);
        org.joda.time.DateTimeFieldType dateTimeFieldType12 = org.joda.time.DateTimeFieldType.minuteOfHour();
        int int13 = mutableDateTime6.get(dateTimeFieldType12);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder16 = dateTimeFormatterBuilder0.appendSignedDecimal(dateTimeFieldType12, 92, 9);
        java.util.Map<java.lang.String, org.joda.time.DateTimeZone> strMap17 = null;
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder18 = dateTimeFormatterBuilder0.appendTimeZoneShortName(strMap17);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder20 = dateTimeFormatterBuilder18.appendSecondOfMinute((int) (byte) 1);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder21 = dateTimeFormatterBuilder20.appendMonthOfYearShortText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder23 = dateTimeFormatterBuilder20.appendMinuteOfHour(26821932);
        boolean boolean24 = dateTimeFormatterBuilder23.canBuildParser();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder25 = dateTimeFormatterBuilder23.appendDayOfWeekText();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder26 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder28 = dateTimeFormatterBuilder26.appendSecondOfDay(738207);
        org.joda.time.format.DateTimePrinter dateTimePrinter29 = null;
        org.joda.time.format.DateTimeParser dateTimeParser30 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter31 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter29, dateTimeParser30);
        org.joda.time.Chronology chronology33 = null;
        org.joda.time.LocalDateTime localDateTime34 = new org.joda.time.LocalDateTime((long) (-1), chronology33);
        org.joda.time.LocalDateTime.Property property35 = localDateTime34.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone36 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone37 = dateTimeZone36.toTimeZone();
        org.joda.time.DateTime dateTime38 = localDateTime34.toDateTime(dateTimeZone36);
        org.joda.time.Chronology chronology39 = dateTime38.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter40 = dateTimeFormatter31.withChronology(chronology39);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter41 = dateTimeFormatter40.withZoneUTC();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder42 = dateTimeFormatterBuilder28.append(dateTimeFormatter40);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter44 = dateTimeFormatter40.withDefaultYear(5);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter46 = dateTimeFormatter40.withDefaultYear((int) (byte) 10);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder47 = dateTimeFormatterBuilder23.append(dateTimeFormatter40);
        // The following exception was thrown during execution in test generation
        try {
            org.joda.time.MutableDateTime mutableDateTime49 = dateTimeFormatter40.parseMutableDateTime("minutes");
            org.junit.Assert.fail("Expected exception of type java.lang.UnsupportedOperationException; message: Parsing not supported");
        } catch (java.lang.UnsupportedOperationException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFieldType12);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder16);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder18);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder20);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder25);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder28);
        org.junit.Assert.assertNotNull(property35);
        org.junit.Assert.assertNotNull(dateTimeZone36);
        org.junit.Assert.assertNotNull(timeZone37);
// flaky:         org.junit.Assert.assertEquals(timeZone37.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime38);
        org.junit.Assert.assertNotNull(chronology39);
        org.junit.Assert.assertNotNull(dateTimeFormatter40);
        org.junit.Assert.assertNotNull(dateTimeFormatter41);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder42);
        org.junit.Assert.assertNotNull(dateTimeFormatter44);
        org.junit.Assert.assertNotNull(dateTimeFormatter46);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder47);
    }

    @Test
    public void test15495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15495");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setMillisOfDay(10);
        org.joda.time.MutableDateTime.Property property4 = mutableDateTime1.weekyear();
        org.joda.time.Chronology chronology6 = null;
        org.joda.time.LocalDateTime localDateTime7 = new org.joda.time.LocalDateTime((long) (-1), chronology6);
        org.joda.time.LocalDateTime.Property property8 = localDateTime7.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone9 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone10 = dateTimeZone9.toTimeZone();
        org.joda.time.DateTime dateTime11 = localDateTime7.toDateTime(dateTimeZone9);
        java.lang.String str12 = dateTime11.toString();
        org.joda.time.DateTime dateTime14 = dateTime11.plus((long) 100);
        org.joda.time.DateTime.Property property15 = dateTime14.yearOfCentury();
        org.joda.time.DateTime dateTime17 = dateTime14.minusYears(86399999);
        org.joda.time.DateTime dateTime19 = dateTime17.withWeekyear((int) (byte) 100);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) dateTime19);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = localDateTime23.toDateTime(dateTimeZone25);
        org.joda.time.Chronology chronology28 = dateTime27.getChronology();
        org.joda.time.DateTimeField dateTimeField29 = chronology28.secondOfDay();
        org.joda.time.DurationField durationField30 = chronology28.minutes();
        org.joda.time.DateTimeField dateTimeField31 = chronology28.weekyearOfCentury();
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone37 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone38 = dateTimeZone37.toTimeZone();
        org.joda.time.DateTime dateTime39 = localDateTime35.toDateTime(dateTimeZone37);
        java.lang.String str40 = dateTime39.toString();
        org.joda.time.DateTime dateTime42 = dateTime39.plus((long) 100);
        org.joda.time.DateTime.Property property43 = dateTime42.yearOfCentury();
        java.util.Locale locale44 = java.util.Locale.GERMANY;
        java.util.Calendar calendar45 = dateTime42.toCalendar(locale44);
        int int46 = dateTime42.getMinuteOfHour();
        org.joda.time.DateTime dateTime48 = dateTime42.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property49 = dateTime42.era();
        org.joda.time.DateTime dateTime50 = property49.roundHalfEvenCopy();
        org.joda.time.DateTimeField dateTimeField51 = property49.getField();
        java.util.Locale locale52 = java.util.Locale.FRANCE;
        java.lang.String str53 = property49.getAsShortText(locale52);
        java.lang.String str54 = dateTimeField31.getAsText((long) (short) 0, locale52);
        java.util.Calendar calendar55 = mutableDateTime1.toCalendar(locale52);
        org.joda.time.MutableDateTime.Property property56 = mutableDateTime1.dayOfMonth();
        java.lang.String str57 = property56.getAsShortText();
        org.joda.time.DateTimeField dateTimeField58 = property56.getField();
        long long60 = dateTimeField58.roundFloor(26838003L);
        org.junit.Assert.assertNotNull(property4);
        org.junit.Assert.assertNotNull(property8);
        org.junit.Assert.assertNotNull(dateTimeZone9);
        org.junit.Assert.assertNotNull(timeZone10);
// flaky:         org.junit.Assert.assertEquals(timeZone10.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime11);
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str12, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime14);
        org.junit.Assert.assertNotNull(property15);
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(dateTime19);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(chronology28);
        org.junit.Assert.assertNotNull(dateTimeField29);
        org.junit.Assert.assertNotNull(durationField30);
        org.junit.Assert.assertNotNull(dateTimeField31);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(dateTimeZone37);
        org.junit.Assert.assertNotNull(timeZone38);
// flaky:         org.junit.Assert.assertEquals(timeZone38.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime39);
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str40, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(property43);
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar45);
// flaky:         org.junit.Assert.assertEquals(calendar45.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(dateTime48);
        org.junit.Assert.assertNotNull(property49);
        org.junit.Assert.assertNotNull(dateTime50);
        org.junit.Assert.assertNotNull(dateTimeField51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ap. J.-C." + "'", str53, "ap. J.-C.");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "70" + "'", str54, "70");
        org.junit.Assert.assertNotNull(calendar55);
// flaky:         org.junit.Assert.assertEquals(calendar55.toString(), "java.util.GregorianCalendar[time=-58980009599901,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=101,MONTH=0,WEEK_OF_YEAR=53,WEEK_OF_MONTH=0,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertNotNull(property56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "31" + "'", str57, "31");
        org.junit.Assert.assertNotNull(dateTimeField58);
// flaky:         org.junit.Assert.assertTrue("'" + long60 + "' != '" + (-3L) + "'", long60 == (-3L));
    }

    @Test
    public void test15496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15496");
        org.joda.time.Chronology chronology1 = null;
        org.joda.time.LocalDateTime localDateTime2 = new org.joda.time.LocalDateTime((long) (-1), chronology1);
        org.joda.time.LocalDateTime.Property property3 = localDateTime2.weekyear();
        org.joda.time.LocalDateTime localDateTime5 = localDateTime2.withSecondOfMinute((int) ' ');
        org.joda.time.LocalDateTime localDateTime7 = localDateTime2.plusWeeks((int) (short) 1);
        org.joda.time.ReadablePeriod readablePeriod8 = null;
        org.joda.time.LocalDateTime localDateTime9 = localDateTime2.minus(readablePeriod8);
        org.joda.time.LocalDateTime localDateTime11 = localDateTime2.withYearOfCentury(23);
        org.joda.time.LocalDateTime localDateTime13 = localDateTime11.withWeekOfWeekyear(23);
        org.joda.time.ReadablePeriod readablePeriod14 = null;
        org.joda.time.LocalDateTime localDateTime15 = localDateTime13.minus(readablePeriod14);
        org.joda.time.LocalDateTime localDateTime17 = localDateTime15.plusMonths(4);
        org.joda.time.LocalDateTime.Property property18 = localDateTime15.weekOfWeekyear();
        org.joda.time.LocalDateTime.Property property19 = localDateTime15.hourOfDay();
        org.joda.time.LocalDateTime localDateTime21 = localDateTime15.withYearOfCentury(13);
        org.joda.time.LocalDateTime localDateTime23 = localDateTime21.minusSeconds(1336);
        org.joda.time.LocalDateTime localDateTime25 = localDateTime23.plusWeeks(30747);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(localDateTime5);
        org.junit.Assert.assertNotNull(localDateTime7);
        org.junit.Assert.assertNotNull(localDateTime9);
        org.junit.Assert.assertNotNull(localDateTime11);
        org.junit.Assert.assertNotNull(localDateTime13);
        org.junit.Assert.assertNotNull(localDateTime15);
        org.junit.Assert.assertNotNull(localDateTime17);
        org.junit.Assert.assertNotNull(property18);
        org.junit.Assert.assertNotNull(property19);
        org.junit.Assert.assertNotNull(localDateTime21);
        org.junit.Assert.assertNotNull(localDateTime23);
        org.junit.Assert.assertNotNull(localDateTime25);
    }

    @Test
    public void test15497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15497");
        org.joda.time.MutableDateTime mutableDateTime0 = new org.joda.time.MutableDateTime();
        mutableDateTime0.add((long) 100);
        org.joda.time.MutableDateTime.Property property3 = mutableDateTime0.dayOfYear();
        org.joda.time.Chronology chronology5 = null;
        org.joda.time.LocalDateTime localDateTime6 = new org.joda.time.LocalDateTime((long) (-1), chronology5);
        org.joda.time.LocalDateTime.Property property7 = localDateTime6.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone8 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone9 = dateTimeZone8.toTimeZone();
        org.joda.time.DateTime dateTime10 = localDateTime6.toDateTime(dateTimeZone8);
        java.lang.String str11 = dateTime10.toString();
        org.joda.time.DateTime dateTime13 = dateTime10.plus((long) 100);
        org.joda.time.DateTime.Property property14 = dateTime13.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration15 = null;
        org.joda.time.DateTime dateTime16 = dateTime13.plus(readableDuration15);
        int int17 = dateTime16.getDayOfMonth();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet20 = locale19.getUnicodeLocaleAttributes();
        java.util.Locale locale21 = java.util.Locale.GERMANY;
        java.lang.String str22 = locale19.getDisplayVariant(locale21);
        java.lang.String str23 = dateTime16.toString("365", locale21);
        org.joda.time.DateTime dateTime25 = dateTime16.plusMonths(1969);
        mutableDateTime0.setMillis((org.joda.time.ReadableInstant) dateTime16);
        org.joda.time.DateTime dateTime27 = dateTime16.withEarlierOffsetAtOverlap();
        org.joda.time.ReadableDuration readableDuration28 = null;
        org.joda.time.DateTime dateTime30 = dateTime27.withDurationAdded(readableDuration28, (int) '#');
        org.joda.time.ReadablePeriod readablePeriod31 = null;
        org.joda.time.DateTime dateTime32 = dateTime27.minus(readablePeriod31);
        org.joda.time.Chronology chronology34 = null;
        org.joda.time.LocalDateTime localDateTime35 = new org.joda.time.LocalDateTime((long) (-1), chronology34);
        org.joda.time.LocalDateTime.Property property36 = localDateTime35.weekyear();
        org.joda.time.LocalDateTime localDateTime38 = localDateTime35.withSecondOfMinute((int) ' ');
        int int39 = localDateTime35.getCenturyOfEra();
        org.joda.time.LocalDateTime localDateTime41 = localDateTime35.plusMillis(6);
        org.joda.time.LocalDateTime.Property property42 = localDateTime41.era();
        int int43 = localDateTime41.getCenturyOfEra();
        org.joda.time.LocalDateTime.Property property44 = localDateTime41.dayOfMonth();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (-1), chronology46);
        org.joda.time.LocalDateTime.Property property48 = localDateTime47.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone49 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone50 = dateTimeZone49.toTimeZone();
        org.joda.time.DateTime dateTime51 = localDateTime47.toDateTime(dateTimeZone49);
        java.lang.String str52 = dateTime51.toString();
        org.joda.time.DateTime dateTime54 = dateTime51.plus((long) 100);
        org.joda.time.DateTime.Property property55 = dateTime54.yearOfCentury();
        org.joda.time.ReadableDuration readableDuration56 = null;
        org.joda.time.DateTime dateTime57 = dateTime54.plus(readableDuration56);
        int int58 = dateTime57.getDayOfMonth();
        java.util.Locale locale60 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet61 = locale60.getUnicodeLocaleAttributes();
        java.util.Locale locale62 = java.util.Locale.GERMANY;
        java.lang.String str63 = locale60.getDisplayVariant(locale62);
        java.lang.String str64 = dateTime57.toString("365", locale62);
        org.joda.time.DateTime dateTime66 = dateTime57.plusMonths(1969);
        org.joda.time.Chronology chronology68 = null;
        org.joda.time.LocalDateTime localDateTime69 = new org.joda.time.LocalDateTime((long) (-1), chronology68);
        org.joda.time.LocalDateTime.Property property70 = localDateTime69.minuteOfHour();
        org.joda.time.LocalDateTime localDateTime72 = localDateTime69.withMonthOfYear(5);
        org.joda.time.DateTime dateTime73 = dateTime66.withFields((org.joda.time.ReadablePartial) localDateTime69);
        org.joda.time.DateTime dateTime75 = dateTime66.minusYears(1);
        org.joda.time.DateTime dateTime76 = localDateTime41.toDateTime((org.joda.time.ReadableInstant) dateTime66);
        boolean boolean77 = dateTime32.isBefore((org.joda.time.ReadableInstant) dateTime66);
        org.junit.Assert.assertNotNull(property3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(dateTimeZone8);
        org.junit.Assert.assertNotNull(timeZone9);
// flaky:         org.junit.Assert.assertEquals(timeZone9.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime10);
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str11, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime13);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTime16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "365" + "'", str23, "365");
        org.junit.Assert.assertNotNull(dateTime25);
        org.junit.Assert.assertNotNull(dateTime27);
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(dateTime32);
        org.junit.Assert.assertNotNull(property36);
        org.junit.Assert.assertNotNull(localDateTime38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 19 + "'", int39 == 19);
        org.junit.Assert.assertNotNull(localDateTime41);
        org.junit.Assert.assertNotNull(property42);
        org.junit.Assert.assertTrue("'" + int43 + "' != '" + 19 + "'", int43 == 19);
        org.junit.Assert.assertNotNull(property44);
        org.junit.Assert.assertNotNull(property48);
        org.junit.Assert.assertNotNull(dateTimeZone49);
        org.junit.Assert.assertNotNull(timeZone50);
// flaky:         org.junit.Assert.assertEquals(timeZone50.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime51);
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str52, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime54);
        org.junit.Assert.assertNotNull(property55);
        org.junit.Assert.assertNotNull(dateTime57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 1 + "'", int58 == 1);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet61);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "365" + "'", str64, "365");
        org.junit.Assert.assertNotNull(dateTime66);
        org.junit.Assert.assertNotNull(property70);
        org.junit.Assert.assertNotNull(localDateTime72);
        org.junit.Assert.assertNotNull(dateTime73);
        org.junit.Assert.assertNotNull(dateTime75);
        org.junit.Assert.assertNotNull(dateTime76);
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + true + "'", boolean77 == true);
    }

    @Test
    public void test15498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15498");
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder0 = new org.joda.time.format.DateTimeFormatterBuilder();
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder2 = dateTimeFormatterBuilder0.appendSecondOfDay(738207);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder4 = dateTimeFormatterBuilder2.appendSecondOfMinute(9);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder7 = dateTimeFormatterBuilder2.appendYearOfCentury(0, 45);
        org.joda.time.format.DateTimePrinter dateTimePrinter8 = null;
        org.joda.time.format.DateTimeParser dateTimeParser9 = null;
        org.joda.time.format.DateTimeFormatter dateTimeFormatter10 = new org.joda.time.format.DateTimeFormatter(dateTimePrinter8, dateTimeParser9);
        org.joda.time.Chronology chronology12 = null;
        org.joda.time.LocalDateTime localDateTime13 = new org.joda.time.LocalDateTime((long) (-1), chronology12);
        org.joda.time.LocalDateTime.Property property14 = localDateTime13.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone15 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone16 = dateTimeZone15.toTimeZone();
        org.joda.time.DateTime dateTime17 = localDateTime13.toDateTime(dateTimeZone15);
        org.joda.time.Chronology chronology18 = dateTime17.getChronology();
        org.joda.time.format.DateTimeFormatter dateTimeFormatter19 = dateTimeFormatter10.withChronology(chronology18);
        org.joda.time.format.DateTimeFormatter dateTimeFormatter21 = dateTimeFormatter19.withPivotYear((java.lang.Integer) 292278993);
        org.joda.time.format.DateTimeFormatterBuilder dateTimeFormatterBuilder22 = dateTimeFormatterBuilder2.append(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder2);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder4);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder7);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone15);
        org.junit.Assert.assertNotNull(timeZone16);
// flaky:         org.junit.Assert.assertEquals(timeZone16.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime17);
        org.junit.Assert.assertNotNull(chronology18);
        org.junit.Assert.assertNotNull(dateTimeFormatter19);
        org.junit.Assert.assertNotNull(dateTimeFormatter21);
        org.junit.Assert.assertNotNull(dateTimeFormatterBuilder22);
    }

    @Test
    public void test15499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15499");
        org.joda.time.LocalTime localTime1 = new org.joda.time.LocalTime(0L);
        org.joda.time.LocalTime localTime3 = localTime1.minusSeconds((int) (short) 10);
        org.joda.time.LocalTime localTime5 = localTime1.minusSeconds((int) (byte) 100);
        int int6 = localTime1.getMillisOfDay();
        org.joda.time.LocalTime.Property property7 = localTime1.minuteOfHour();
        org.joda.time.LocalTime localTime8 = property7.withMinimumValue();
        org.joda.time.LocalTime localTime10 = localTime8.plusMinutes(8);
        org.joda.time.LocalTime.Property property11 = localTime8.secondOfMinute();
        org.joda.time.LocalTime localTime13 = localTime8.plusSeconds(2023);
        org.junit.Assert.assertNotNull(localTime3);
        org.junit.Assert.assertNotNull(localTime5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 3 + "'", int6 == 3);
        org.junit.Assert.assertNotNull(property7);
        org.junit.Assert.assertNotNull(localTime8);
        org.junit.Assert.assertNotNull(localTime10);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(localTime13);
    }

    @Test
    public void test15500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest30.test15500");
        org.joda.time.MutableDateTime mutableDateTime1 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime1.setMillisOfDay(10);
        mutableDateTime1.setMillisOfSecond((int) (short) 1);
        org.joda.time.MutableDateTime.Property property6 = mutableDateTime1.dayOfYear();
        org.joda.time.MutableDateTime mutableDateTime8 = new org.joda.time.MutableDateTime((long) (short) -1);
        mutableDateTime8.setTime(100L);
        org.joda.time.MutableDateTime.Property property11 = mutableDateTime8.dayOfMonth();
        mutableDateTime8.addMillis((int) (byte) 0);
        org.joda.time.MutableDateTime.Property property14 = mutableDateTime8.yearOfCentury();
        org.joda.time.DateTimeZone dateTimeZone16 = org.joda.time.DateTimeZone.forOffsetMillis(100);
        mutableDateTime8.setZoneRetainFields(dateTimeZone16);
        mutableDateTime8.setMillisOfSecond(118);
        mutableDateTime1.setMillis((org.joda.time.ReadableInstant) mutableDateTime8);
        org.joda.time.Chronology chronology22 = null;
        org.joda.time.LocalDateTime localDateTime23 = new org.joda.time.LocalDateTime((long) (-1), chronology22);
        org.joda.time.LocalDateTime.Property property24 = localDateTime23.dayOfYear();
        org.joda.time.DateTimeZone dateTimeZone25 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone26 = dateTimeZone25.toTimeZone();
        org.joda.time.DateTime dateTime27 = localDateTime23.toDateTime(dateTimeZone25);
        java.lang.String str28 = dateTime27.toString();
        org.joda.time.DateTime dateTime30 = dateTime27.plus((long) 100);
        org.joda.time.DateTime.Property property31 = dateTime30.yearOfCentury();
        java.util.Locale locale32 = java.util.Locale.GERMANY;
        java.util.Calendar calendar33 = dateTime30.toCalendar(locale32);
        int int34 = dateTime30.getMinuteOfHour();
        org.joda.time.DateTime dateTime36 = dateTime30.withYearOfEra((int) 'u');
        org.joda.time.DateTime.Property property37 = dateTime30.era();
        boolean boolean39 = dateTime30.isEqual((long) 100);
        org.joda.time.DateTime dateTime40 = dateTime30.toDateTime();
        org.joda.time.DateTime dateTime42 = dateTime40.withYear(292278993);
        org.joda.time.DateTimeZone dateTimeZone43 = org.joda.time.DateTimeZone.getDefault();
        java.util.TimeZone timeZone44 = dateTimeZone43.toTimeZone();
        org.joda.time.Chronology chronology46 = null;
        org.joda.time.LocalDateTime localDateTime47 = new org.joda.time.LocalDateTime((long) (-1), chronology46);
        boolean boolean48 = dateTimeZone43.isLocalDateTimeGap(localDateTime47);
        org.joda.time.Chronology chronology50 = null;
        org.joda.time.LocalDateTime localDateTime51 = new org.joda.time.LocalDateTime((long) (-1), chronology50);
        org.joda.time.LocalDateTime.Property property52 = localDateTime51.weekyear();
        boolean boolean53 = dateTimeZone43.isLocalDateTimeGap(localDateTime51);
        long long55 = dateTimeZone43.nextTransition((long) 2022);
        org.joda.time.DateTime dateTime56 = dateTime40.toDateTime(dateTimeZone43);
        org.joda.time.LocalDateTime localDateTime57 = new org.joda.time.LocalDateTime((java.lang.Object) mutableDateTime1, dateTimeZone43);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str59 = localDateTime57.toString("1970-01-01T00:00:01.970");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Illegal pattern component: T");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }
        org.junit.Assert.assertNotNull(property6);
        org.junit.Assert.assertNotNull(property11);
        org.junit.Assert.assertNotNull(property14);
        org.junit.Assert.assertNotNull(dateTimeZone16);
        org.junit.Assert.assertNotNull(property24);
        org.junit.Assert.assertNotNull(dateTimeZone25);
        org.junit.Assert.assertNotNull(timeZone26);
// flaky:         org.junit.Assert.assertEquals(timeZone26.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertNotNull(dateTime27);
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "1970-01-01T00:00:00.002+00:00:00.003" + "'", str28, "1970-01-01T00:00:00.002+00:00:00.003");
        org.junit.Assert.assertNotNull(dateTime30);
        org.junit.Assert.assertNotNull(property31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "de_DE");
        org.junit.Assert.assertNotNull(calendar33);
// flaky:         org.junit.Assert.assertEquals(calendar33.toString(), "java.util.GregorianCalendar[time=99,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=java.util.SimpleTimeZone[id=+00:00:00.003,offset=3,dstSavings=3600000,useDaylight=false,startYear=0,startMode=0,startMonth=0,startDay=0,startDayOfWeek=0,startTime=0,startTimeMode=0,endMode=0,endMonth=0,endDay=0,endDayOfWeek=0,endTime=0,endTimeMode=0],firstDayOfWeek=2,minimalDaysInFirstWeek=4,ERA=1,YEAR=1970,MONTH=0,WEEK_OF_YEAR=1,WEEK_OF_MONTH=1,DAY_OF_MONTH=1,DAY_OF_YEAR=1,DAY_OF_WEEK=5,DAY_OF_WEEK_IN_MONTH=1,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=102,ZONE_OFFSET=3,DST_OFFSET=0]");
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNotNull(dateTime36);
        org.junit.Assert.assertNotNull(property37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(dateTime40);
        org.junit.Assert.assertNotNull(dateTime42);
        org.junit.Assert.assertNotNull(dateTimeZone43);
        org.junit.Assert.assertNotNull(timeZone44);
// flaky:         org.junit.Assert.assertEquals(timeZone44.getDisplayName(), "GMT+00:00");
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(property52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 2022L + "'", long55 == 2022L);
        org.junit.Assert.assertNotNull(dateTime56);
    }
}
